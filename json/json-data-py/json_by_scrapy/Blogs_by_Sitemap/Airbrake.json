[
{"website": "Airbrake", "title": "Awesome Airbraker: Factor 75", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/factor-75", "abstract": "We would like to welcome Factor 75 house as the 26th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? We deliver healthy, prepared meals to people who want to perform at their peak. What do you like about Airbrake? Airbrake brings the problems to me, so I don‚Äôt have to go searching for them. With a very small development team, I don‚Äôt have the time and energy to constantly monitor our logs for issues. I‚Äôm grateful I can outsource that responsibility to Airbrake. How do you normally deal with Airbrake exception reports? Quick triage to determine the urgency. If urgent, will open it immediately and review. Otherwise, batch them until end of the day. Setup. Environment, Language, Tools, Etc. Rails server. CanJS as the front-end javascript framework. Codeship for deployments. Airbrake for exception notifications! How long have you been using Airbrake? Over a year. What could Airbrake do better? When there are multiple instances of the same exception, they all get lumped together. It‚Äôs hard to look at all of them quickly. I have to click through each one individually. I‚Äôd love a way, for example, to see all the users affected (if applicable), or compare exceptions from different times to look for patterns. Tell us shortly how your company started? Our founder was a professional MMA fighter. During his career, his body started to break down. When a friend suggested he get a personal chef to cater his meals, he noticed an immediate and dramatic difference. From that point on, he went undefeated in his fighting career and decided this was a service he wanted to make available to others as well. Favorite Music to Hack to. Spotify playlist called ‚ÄúInstrumental music to work to‚Äù. Anything Else? Read this: http://blog.factor75.com/forming-new-habits-by-hacking-your-brain Thanks Factor 75 for being an awesome member of Airbrake¬†Bug Tracker family!", "date": "2015-06-30"},
{"website": "Airbrake", "title": "Awesome Airbraker: PractiTest", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/practitest", "abstract": "We would like to welcome PractiTest house as the 22nd¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? PractiTest is a leading QA Management solution for Agile Testing, enabling IT organizations to ensure visibility and communication at all levels. As well as helping project development teams streamline and manage their testing processes while providing management with a clear and simple view of their project status at all times. PractiTest can fully integrate with existing systems such as JIRA, Jenkins, Sellenium, Redmine and more. What do you like about Airbrake? We know of problems in an earlier stage, and able to solve them quickly. How do you normally deal with Airbrake exception reports? looking at it, try to figure out why it happens, solve it as soon as we can, and resolve the error. If we think that the error occurs on rare occasions, we just resolve it. Setup. Environment, Language, Tools, Etc. SaaS ‚Äì work on all major browsers. Ruby on Rails on Passenger Bootstrap Posgresql / memcache / redis Clojure Running on AWS How long have you been using Airbrake? 5 years or so? you were called hoptoad back then. What could Airbrake do better? have some sort of reports: so see if errors were related to a specific context / user / browser. Favorite Music to Hack to. Deep House, Soulful Jazz, Downtempo‚Ä¶ Anything Else? Follow us on Twitter:¬†@practitest Mexican food http://qablog.practitest.com Dogs lovers Thanks PractiTest team and welcome to Airbrake¬†Bug Tracker family!", "date": "2015-06-18"},
{"website": "Airbrake", "title": "Awesome Airbraker: Homestay", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/homestay", "abstract": "We would like to welcome Homestay house as the 25th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? We focus on hosts that actually live in the house they‚Äôre sharing (as opposed to empty apartments), as we believe the interaction with local people is the best way to get a feel for a given place and culture. What do you like about Airbrake? With Airbrake we know when something is wrong before problems escalate to bigger proportions. Instead of waiting for customers to complain, we can rely on Airbrake telling us when something is not right. This allows us to fix bugs very quickly and effectively. How do you normally deal with Airbrake exception reports? We do both get email notifications for our errors (they‚Äôre broadcast to the whole tech team, so whoever worked on that piece of code can give insight on what‚Äôs happening and fix it), and also integrate with our HipChat rooms. This means that even if we don‚Äôt check our emails often we can see straight away when an error is occurring. Setup. Environment, Language, Tools, Etc. Our website runs on Ruby / Ruby on Rails / Nginx / Unicorn / Sidekiq / MySQL / Redis & many many gems üôÇ We also have a nice iPhone App How long have you been using Airbrake? About 3 1/2 years. What could Airbrake do better? It‚Äôs nice that exceptions are auto-marked as resolved at every deploy, but this also ‚Äúmasks‚Äù exceptions that still need to be fixed, especially if the team is deploying very often to update different parts of the codebase. For example is not easy to come up with a list of ‚Äúexceptions to tackle‚Äù because you never know if something is not showing up because it‚Äôs fixed or because you just redeployed. It would be useful to have a filter like ‚ÄúGive me all exceptions triggered in the past 3 days sorted by frequency‚Äù. Tell us shortly how your company started? Many of us have travelled a lot and have first-hand experience on what it means to share a meal with a local around the world! Paolo (CTO) has travelled to Japan and eaten raw octopus with a real Japanese family, Alan (CEO) has travelled to more than 40 countries staying with people of all walks of life, Victor (Senior Engineer) has first been to the UK as a homestay guest and got a job delivering pizza before he could even speak english. We all shared the same passion for authentic travel and thanks to our founding investors we could create a team to bring the homestay experiences to life! Favorite Music to Hack to. Red Hot Chili Peppers! Anything Else? Follow us on Twitter: https://twitter.com/homestaycom Facebook: https://www.facebook.com/Homestaycom Instagram: https://instagram.com/homestaycom/ Our blog: https://www.homestay.com/blog A nice video we just made: https://youtu.be/2i1x-DpY2Og PS: we love Airbrake! üôÇ you can contact us at paolo.dona@homestay.com / suzanne.cox@homestay.com Thanks¬†Homestay for being an awesome member of Airbrake¬†Bug Tracker family!", "date": "2015-06-26"},
{"website": "Airbrake", "title": "Awesome Airbraker: Once Matchmaking", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/once-matchmaking", "abstract": "We would like to welcome Once Matchmaking house as the 24th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? We are a free matchmaking service! Our matchmakers set each user up with one handpicked match per day. Matches can be viewed on our app (getonce.com/dl), with a website version soon to come! What do you like about Airbrake? Airbrake has easy setup in addition to instant, concise, exhaustive reports. This helps us iterate quickly and be reactive on our infrastructure health. How do you normally deal with Airbrake exception reports? Airbrake Exception Reports are forwarded to our backend team via emails and slack. Our team then decides wether it should go to our bug tracking tool. Setup. Environment, Language, Tools, Etc. Server side: Ubuntu Server Rails Rails API Couchbase Elastic search Redis Go Mobile Fronts : native iOS native Android Front end web : angular js How long have you been using Airbrake? Our team had some prior experience with Airbrake, so we‚Äôve used it from the very beginning. It was very helpful during the initial development process and now even more useful in the production environment. What could Airbrake do better? Buy us a beer once in a while. Or lunch. We‚Äôd take that, too. Tell us shortly how your company started? After 6 years of building dating apps, CEO Jean Meyer aims to revolutionize the dating industry by re-introducing an ancient concept in finding love: the wisdom of matchmakers. Favorite Music to Hack to. There‚Äôs a debate going on about this just now amongst our team. We‚Äôre between Rage Against the Machine and Deftones. Anything Else? Follow us on Twitter: @oncetheapp, FB: facebook.com/oncetheapp Favorite beer: Karmeliet Triple Thanks¬†Once Matchmaking for being an awesome member of Airbrake¬†Bug Tracker family!", "date": "2015-06-26"},
{"website": "Airbrake", "title": "Awesome Airbraker: Drawfolio", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/drawfolio", "abstract": "We would like to welcome Drawfolio as the 18th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? Drawfolio is a cloud web platform where illustrators and graphic artists can build their own portfolio website in a few minutes with no programming skills. Setup. Environment, Language, Tools, Etc. Ruby on Rails, Linux and Sublime Text are our day-to-day bread. What do you like about Airbrake? We can talk to users about problems they are experiencing even before they come back to us with them, and that helps to build a great image (even if our application is failing!). How do you normally deal with Airbrake exception reports? If applicable, we first try to talk with the user who experienced the problem, to find out more and let her know we are on that. Once we got something more, we try to properly demonstrate the bug with a unit test, write fixer code until the test passes, and deploy. How long have you been using Airbrake? A bit more than a year. What could Airbrake do better? Actually, we are quite happy with Airbrake right now! Favorite Music to Hack to. We are also amateur musicians, and this may be a bit counter-intuitive to tell, but we rarely listen to music while hacking. We get carried away by music too much, and that can mean lower quality code. Anything Else? Follow us on Twitter: http://www.twitter.com/drawfolio And our blog: http://blog.drawfolio.com/en.html Thanks Drawfolio¬†and welcome to Airbrake¬†Bug Tracker family!", "date": "2015-06-15"},
{"website": "Airbrake", "title": "Awesome Airbraker: UrbisPro", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/urbispro", "abstract": "We would like to welcome UrbisPro house as the 23rd Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? We provide map based searching of data that Land Surveyors in Australia need. Previously they had to use forms and pdf‚Äôs. By providing tailored visualisations we increase workflow productivity What do you like about Airbrake? Proactive customer support. We have very loyal 6+ year customers as they trust us to know what goes wrong before they get frustrated and have to call/email us. How do you normally deal with Airbrake exception reports? Hipchat integration let‚Äôs us be proactive. We can then reach out to the customer and let them know we are working on whatever went wrong. Setup. Environment, Language, Tools, Etc. Linux workstations, Ruby, Rails Standing desks.. How long have you been using Airbrake? 5 or more years . What could Airbrake do better? You fixed the major thing recently, site speed was a real drag but now with latest releases we are seeing better load times. Favorite Music to Hack to. radioparadise.com Anything Else? Follow us on Twitter:¬†@angusscown https://urbispro.wistia.com/medias/vnexa1ofiw Thanks UrbisPro team for the great 5 years with Airbrake¬†Bug Tracker family!", "date": "2015-06-25"},
{"website": "Airbrake", "title": "Awesome Airbraker: Softwhisper", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/softwhisper", "abstract": "We would like to welcome Softwhisper mobile development house as the 21st¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? At Softwhisper we do most of our work developing apps for our clients. We have to track errors occurred on any platform, Rails based API, iOS and Android apps. Thanks to Airbrake.io we can anticipate the client on reporting issues and deploy hot fixes as quick as we develop. Traces, environments vars and all the info provided save us from search on dozens of sys logs. Awesome job :). What do you like about Airbrake? Error reports give us many valuable information. Airbrake¬†speeds up bug fixing in our projects. How do you normally deal with Airbrake exception reports? Through airbrake.io dashboard. Setup. Environment, Language, Tools, Etc. Setup: Ubuntu Server 14.04 LTS, Apache, Passenger with NodeJS and Ruby on Rails. Environment: OSX and Ubuntu Language: Ruby, Java, Swift, Obj-C Tools: Sublime, Xcode, Android Studio, MySQL, Redis, ‚Ä¶ How long have you been using Airbrake? For about 2 years and a half. What could Airbrake do better? Lower prices üôÇ we are a small company and many times we have to do an effort to bring Airbrake to the final client. Favorite Music to Hack to. Deep House, Soulful Jazz, Downtempo‚Ä¶ Anything Else? Follow us on Twitter:¬†@pabloformoso or @SoftwhisperSL at your service. Talking about food is difficult to beat our Galician seafood üôÇ Thanks Softwhisper¬†team and welcome to Airbrake¬†Bug Tracker family!", "date": "2015-06-17"},
{"website": "Airbrake", "title": "Awesome Airbraker: Hubstaff", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/hubstaff", "abstract": "We would like to welcome Hubstaff as the 15th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? We make a time tracking and proof of work platform used by over 8k companies. It allows you to see not only how much people are working, but when and on what. It completely changes how you manage your team. Setup. Environment, Language, Tools, Etc. Ruby on Rails,¬†Postgres,¬†Heroku and¬†S3. What do you like about Airbrake? The Pivotal integration is a key. But in addition to that the ability to have all of our environments plugged into it and automatically close exceptions with each deploy are great features. How long have you been using Airbrake? 3 years (6 years for another project). How do you normally deal with Airbrake exception reports? I look at each one and create Pivotals for the ones that are actual bugs. What could Airbrake do better? Create a better multi-tenant architecture that let me use one sign in to view all of my accounts. Favorite Music to Hack to. Movie themes. Anything Else? Follow us on Twitter:¬†@hubstaff Hubstaff has joined Airbrake family 6 years ago, thanks!", "date": "2015-06-12"},
{"website": "Airbrake", "title": "Awesome Airbraker: AthleteTrax", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/athletetrax", "abstract": "We would like to welcome AthleteTrax as the 14th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? AthleteTrax provides a one-stop shop for sports facilities and organizations through its Web and mobile apps that offer registration & payment collection, communication, scheduling, fundraising, and video/workout tracking tools. Setup. Environment, Language, Tools, Etc. AthleteTrax is a combination of Web and mobile apps. Our Web app is built using Ruby on Rails and takes full advantage of many of the great Web development technologies available today. Our mobile apps run off of our Web API, so Airbrake is especially important to us for monitoring all of our products. We use Heroku and Heroku Postgres , so Airbrake‚Äôs seamless integration with our apps is amazing. What do you like about Airbrake? As we like to tell our customers, we usually know about the problem before they do. It helps us to constantly stay on top of issues in real-time. We have Airbrake setup for development, as well, so we constantly get feedback deep into what we are working on when we hit bumps in the road. Airbrake allows us to make sure that all of our systems are functioning in unison, and when something does happen we know exactly where the problem is without having to dig around the source code or the database. How long have you been using Airbrake? About 2¬†years. How do you normally deal with Airbrake exception reports? We resolve them as quickly as possible! Each Airbrake is investigated immediately and then filed accordingly depending on its urgency. Most issues require an immediate resolution, while others are moved into the backlog. We pride ourselves on our customer service and support, as well as our ability to make fixes quickly. Airbrake definitely plays a large part in that. What could Airbrake do better? Not much! Favorite Music to Hack to. EDM and Progressive House. Kaskade! Anything Else? Follow us on Facebook and Twitter:¬†@athletetrax @brijgross Huge proponent of Agile and Scrum, so Airbrake keeps us right where we need to be. Thanks AthleteTrax for the 2 years in Airbrake family, you rock!", "date": "2015-06-11"},
{"website": "Airbrake", "title": "Awesome Airbraker: One Month", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/one-month", "abstract": "We would like to welcome One Month as the 19th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your company¬†provide? One Month is an online education company teaching people how to advance their career, build their own app, or grow their business. We teach Ruby on Rails, HTML, Growth Hacking, Content Marketing, and more. Setup. Environment, Language, Tools, Etc. Ruby on Rails, Heroku, Postgres, Amazon Cloudfront. What do you like about Airbrake? Airbrake has been fantastic for us to keep an eye on deployments of new features. Sometimes we forgot to test a specific case and we can always count on Airbrake to let us know and get some tests written to cover those. How do you normally deal with Airbrake exception reports? We have our Airbrake reports sent to us via email and Slack. Having them in Slack helps us keep an eye on the volume of errors happening day to day. It helps us notice when maybe a bad piece of code went out or if someone is scanning our site for vulnerabilities and sending over potentially malicious requests. How long have you been using Airbrake? 2 years. What could Airbrake do better? Overall, I think Airbrake does a pretty great job. I feel like the UI could make some things more apparent design-wise. I‚Äôd also love to figure out a way to better filter out JS errors that come from people using Adblockers but I know just how complicated that is. Favorite Music to Hack to. Girl Talk. Anything Else? Follow us on Twitter:@onemonthedu And our blog: learn.onemonth.com Thanks One Month team and welcome to Airbrake¬†Bug Tracker family!", "date": "2015-06-15"},
{"website": "Airbrake", "title": "Awesome Airbraker: Mingle2", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/mingle2", "abstract": "We would like to welcome Mingle2 Dating App as the 14th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? One of the top free online dating companies with over 11 million members. Web/Mobile/IOS/Android Apps. Setup. Environment, Language, Tools, Etc. Linux/Centos/NGINX/Ruby/Rails/MYSQL/REDIS/MEMCACHED/C. What do you like about Airbrake? Was using the self hosted exception handler tool on Heroku but was too much to manage for a small company. Exception Handling is located online and can be accessed by any number of remote developers. How long have you been using Airbrake? 5 months. How do you normally deal with Airbrake exception reports? Share with Remote Developers. What could Airbrake do better? Better Reporting and filter exceptions by the day‚Ä¶ like a today at a glance report. Favorite Music to Hack to. Tropical Zombie or Cloud Control Anything Else? Follow us on Facebook and Twitter: https://www.facebook.com/mingle2.free.online.dating Tweets by mingle2 Thanks¬†Mingle2¬†and welcome to Airbrake family.", "date": "2015-06-11"},
{"website": "Airbrake", "title": "Awesome Airbraker: STAQ", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/staq", "abstract": "We would like to welcome STAQ as the 20th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your company¬†provide? Revenue management and analysis for the digital advertising industry. Setup. Environment, Language, Tools, Etc. Ruby, JavaScript, Rails, git, Sidekiq, Redis, Postgres, S3, Redshift, EC2, Heroku. What do you like about Airbrake? Immediate early warning of defects in the app. We also use # of Airbrakes per week as an proxy for software quality. How do you normally deal with Airbrake exception reports? Involves a lot of triage; we leave lesser bugs unresolved for awhile till we can get around to them, but otherwise try to turn serious bugs into PT cases right away. How long have you been using Airbrake? 5+ years. What could Airbrake do better? Recent versions of the UI have become much easier to use so I don‚Äôt have any immediate thoughts. Favorite Music to Hack to. EDM and trance. Anything Else? Follow us on Twitter: @subelsky @STAQ Thank you STAQ team for the awesome 5 years Airbrake¬†Bug Tracker !", "date": "2015-06-16"},
{"website": "Airbrake", "title": "Awesome Airbraker: Vindi", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/vindi", "abstract": "We would like to welcome Vindi as the 13th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does¬†Vindi¬†provide? Vindi is a Brazilian startup with a focus on subscription billing, recurring billing, intelligent checkout, and lost revenue recovery. A complete gateway and fraud prevention. Setup. Environment, Language, Tools, Etc. AWS, OpsWorks, Ruby on Rails, Grape, Swagger, Redis, MySQL. What do you like about Airbrake? The interface improved a lot and I‚Äôm really happy about it. Before that I was even wondering if you were about to retire Airbrake. How long have you been using Airbrake Bug Tracker? I think 5+ years, when it was called Exceptional. How do you normally deal with Airbrake exception reports? Slack integration. What could Airbrake do better? Go a little further and do at least basic server monitoring or profiling. Favorite Music to Hack to. Rio Funk. Anything Else? We have plenty of information about Brazilian FinTech market in Portuguese: https://blog.vindi.com.br Thanks Vindi¬†for the awesome 5¬†years with Airbrake Bug Tracker .", "date": "2015-06-10"},
{"website": "Airbrake", "title": "Awesome Airbraker: aircargobook", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/aircargobook", "abstract": "We would like to welcome aircargobook as the 17th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? We connect forwarding agents, airlines and trucking companies, and help to find the right business partner. Forwarders can enter shipment requests they got from their customers and we will assist them to get competitive prices from more airlines they could get writing emails and calling. Setup. Environment, Language, Tools, Etc. PHP, CakePHP, iOS, Android, Airbrake. What do you like about Airbrake? Our setup is quite complicated, its not easy to test all the different situations a user could be in. Some companies are allowed to see a certian shipment, others dont, some are on black or white lists its really hard to test every single situation before a hotfix or minor updates goes live. So we had a ton of issues before using Airbrake, just because we couldn‚Äôt see every single situation a user can be in. How long have you been using Airbrake? 6 months. How do you normally deal with Airbrake exception reports? In development systems, we just monitor if anything happens while we‚Äôre working on a product. In production systems it helps us to see what went wrong over the last 2 or 3 hours, so we always open Airbrake while we fixing or developing something else. Since I work this way, I¬†could deliver bug-fixes quicker and with every single update. What could Airbrake do better? Error groupings are not always correct ‚Äì mobile integration is not always the best (native ios and android apps of airbrake). I want to have a dashboard to see my system ‚Äústatus‚Äù, maybe a few charts how our error rate goes up or down after deploying, maybe the top 10 issues. And maybe combined with my google analytics account so it has a relation to how much traffic I¬†serve. Favorite Music to Hack to. I trust Spotify algorithms nearly 100%. Just select my mood and I‚Äôll listen to that music for the next couple of hours. Thanks aircargobook¬†and welcome to Airbrake family!", "date": "2015-06-15"},
{"website": "Airbrake", "title": "Awesome Airbraker: Curiator", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/curiator", "abstract": "We would like to welcome Curiator as the 12th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your app¬†provide? Curiator is a platform for art enthusiasts to collect and discover fine art online. Think of it as a digital, collaborative art collection to which people contribute their favorite art and discover new art through each other. Setup. Environment, Language, Tools, Etc. PHP, nginx, Rackspace. What do you like about Airbrake? Instant feedback. How long have you been using Airbrake? 3 years. How do you normally deal with Airbrake exception reports? I connected the reports to a slack #channel. When an error comes in I usually fix it on the spot and push a fix to production. What could Airbrake do better? Grouping of errors is sometimes off. Favorite Music to Hack to. https://soundcloud.com/boonstoppel Anything Else? Follow us on twitter: https://twitter.com/curiator Thanks Curiator¬†for the awesome 3 years with Airbrake.", "date": "2015-06-10"},
{"website": "Airbrake", "title": "Awesome Airbraker: Bloomfire", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/bloomfire", "abstract": "We would like to welcome Bloomfire as the 11th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your company provide? We help organizations & communities share & organize their collective knowledge so¬†that employees are engaged and things get done. We bridge the gap between those that need to know with those that do.¬†None of us is as smart as all of us. Setup. Environment, Language, Tools, Etc. Rails, AWS, Postgres, Elasticsearch. What do you like about Airbrake? We are able to keep an eye on the health of our product and address problems before they are even reported by customers. How long have you been using Airbrake? 3 years. How do you normally deal with Airbrake exception reports? We love the JIRA integration. This allows us to generate tickets and get them prioritized and assigned. Anything Else? Check out our blog: https://bloomfire.com/blog Thanks¬†Bloomfire for the awesome 3 years with Airbrake Bug Tracker .", "date": "2015-06-09"},
{"website": "Airbrake", "title": "New Ways to Get Airbrake for Less", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/new-ways-to-get-airbrake-for-less", "abstract": "In the past year, Airbrake has come up with multiple ways to catch errors and monitor your applications‚Äô performance more cost-effectively than ever.¬† Here are a few examples: Last spring, we launched our Dev Tier, the first full-featured free error monitoring development tool for applications that are just getting up and running. In the fall, we announced On-Demand Errors , allowing users to pay less for unplanned errors without committing to a more expensive monthly plan. In December, we introduced our Launch Tier, which dropped the price of Airbrake Error Monitoring by 67%. Airbrake Performance Monitoring went live at the start of this year and includes On-Demand Events and lower entry-level price points, making performance monitoring as cost-effective as error monitoring. Now, as part of LogicMonitor, Airbrake continues to find ways to be the most cost-effective error monitoring and performance monitoring solution available. Today, we are announcing two additional changes for our Airbrake customers: Annualized Pricing Plans and High Usage Plan discounts. The Airbrake Annual Pricing allows our customers to pay upfront for the year and, by doing so, receive an automatic 10% discount off the cost of an Airbrake base plan. Considering that the average age of our customers is over four years, that‚Äôs a good deal. But, you don‚Äôt have to be a long-time Airbrake customer to take advantage of this opportunity. Every Airbrake customer can choose an Annual Plan. Here‚Äôs how it works: Now when you choose which Airbrake Tier you want to subscribe to, you‚Äôll choose annualized or monthly pricing. For example, if you choose to enroll in Airbrake under an Annual Tier 1 plan, instead of paying $19 per month, you‚Äôll pay $17 per month and pay up-front for an entire year. If your account exceeds the monthly quota for errors or events, you will be automatically charged at the end of each monthly billing cycle for any On-Demand charges. Ready to upgrade to an Annual Pricing Plan? Click here to get started. You‚Äôll be taken directly to your Airbrake account management page where you can choose an Annual Plan and receive your 10% off the price of your base plan for the year. If you have questions about upgrading or downgrading your Annual Plan, check out our FAQs . As your application grows, so does your user base and the number of applications you manage, resulting in hundreds, thousands, maybe even millions of additional errors and performance events. As a developer, you understand that even one uncaught error can significantly compromise the user experience. That‚Äôs why Airbrake is making it easier than ever to catch every error and monitor your application stack with new pricing plans that include quotas over 5 million errors and events a month. Here is a quick list of some of the new pricing plans we are offering. Error Monitoring Plans: Performance Monitoring Plans To see full pricing details, go to the Airbrake Pricing Page . And while everything at Airbrake is always available self-service, including upgrading your plan , we are also here if you want to talk to a real person. ¬† Please feel to reach out to our Customer Success Managers either in the app or at support@airbrake.io . As Airbrake experts, they can help you find a plan that best fits your application‚Äôs needs. Cory Apperson General Manager Airbrake a LogicMonitor Company", "date": "2021-04-27"},
{"website": "Airbrake", "title": "JavaScript Error Handling: Maximum Call Stack Size Exceeded", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/javascript-error-handling-maximum-call-stack-size-exceeded", "abstract": "If you see the ‚ÄúMaximum Call Stack Size Exceeded‚Äù error, there‚Äôs likely a problem with a recursive function within your JavaScript code. More specifically, the issue lies with the function calling on itself indefinitely. When this happens, there are several steps you can take to fix a piece of code that‚Äôs eating up all the available call stack within a browser. Within this article, we‚Äôll go over in more detail what causes a ‚ÄúMaximum Call Stack Size Exceeded‚Äù error and how to fix it. Within the Javascript hierarchy, this is where the ‚ÄúMaximum Call Stack Size Exceeded‚Äù lies: As you‚Äôre probably aware, all JavaScript error objects are descendants of the Error object or an inherited object. This error is a RangeError . A RangeError typically means an error has occurred outside of a code‚Äôs argument value for its parameter. Now that you know a little bit about where this error falls within the scope of JavaScript errors, let‚Äôs continue on to what causes the ‚ÄúMaximum Call Stack Size Exceeded‚Äù error. Before you can understand the ‚ÄúMaximum Call Stack Size Exceeded‚Äù error, you need to understand recursion. Typically, recursion is a pattern in which a function being defined calls itself, each call bringing conditions closer to reaching a base case that provides an escape from the function calls. But, if you‚Äôre not careful, a function can end up calling itself indefinitely until you run out of stack that‚Äôs allotted by a browser. More often than not, the reason a recursive function is throwing a ‚ÄúMaximum Call Stack Size Exceeded‚Äù error has something to do with the base case or the lack of one. When recursive code is missing its base code or shoots past the base code, it will repeatedly keep calling itself until you hit the ‚ÄúMaximum Call Stack‚Äù of a browser. Here‚Äôs an example of what recursive code looks like when it calls on itself indefinitely: The output will then be: This will result in the ‚ÄúMaximum Call Stack Size Exceeded‚Äù error: The problem with a recursive function that continues to call on itself is that it is impossible to move onto the next function within a chain, and you‚Äôll eat up the entirety of your stack. The best way to prevent this error is to double-check your recursive functions. Make sure the base case is done correctly when using recursive functions. You want your code to have a definitive bookend to prevent it from calling on itself forever. Taking the same example from above, here‚Äôs what the code should look like if done properly: The ‚Äúreturn‚Äù is key in this case. Without the ‚Äúreturn,‚Äù this function will continue endlessly, resulting in the ‚ÄúMaximum Call Stack Size Exceeded‚Äù error. Furthermore, you need to make sure to include a base case within recursive code. The base case tells the function where to end. In this case, the end is when the function equals ‚Äú0,‚Äù which will result in the ‚ÄúYay Airbrake!‚Äù output. When a recursive function has all of the pieces it needs to run correctly, your code will end when it reaches the base case: Fixing a recursive call function that results in a ‚ÄúMaximum Call Stack Size Exceeded‚Äù error, and finding it are two very different things. So, how do you find the recursive function causing this error? The first way to find an error is to go through your logs , but when you‚Äôre dealing with hundreds, if not thousands, of lines of code, it can be difficult to find that one line of broken code. That‚Äôs why we strongly suggest using an error monitoring tool like Airbrake. With Airbrake Error Monitoring, you can skip the logs and go straight to the line of broken code resulting in the ‚ÄúMaximum Call Stack Size Exceeded‚Äù error. Don‚Äôt have Airbrake? Sign up for a risk-free, 30-day Airbrake trial today for unlimited errors, unlimited users, unlimited projects, and so much more.", "date": "2021-04-22"},
{"website": "Airbrake", "title": "Understanding Core Web Vitals 2021", "author": "Unknown", "link": "https://airbrake.io/blog/core-web-vitals/understanding-core-web-vitals-2021", "abstract": "In May of 2021, Google will make changes to the Page Experience Ranking Algorithm. This update will be called Core Web Vitals. This means Top Stories will no longer require pages to be built with AMP HTML, and there will be three additional page performance metrics that will factor in Search Engine Optimization rankings. These performance metrics are: Cumulative Layout Shift ‚Äì Stability The total of all unexpected layout shifts that occurs while a page loads. You need a score of .1 or less to receive a Good rating. The total of all unexpected layout shifts that occurs while a page loads. You need a score of .1 or less to receive a Good rating. Largest Contentful Paint ‚Äì Load Times A replacement for page load time, this measures actual website rendering performance. Your load times need to be 2.5 seconds or faster to receive a Good rating here. A replacement for page load time, this measures actual website rendering performance. Your load times need to be 2.5 seconds or faster to receive a Good rating here. First Input Delay ‚Äì Interactivity How long it takes for the user‚Äôs browser to respond to their input, clicks, or scrolling. Your site needs to be 100 ms or less to receive a Good rating. How long it takes for the user‚Äôs browser to respond to their input, clicks, or scrolling. Your site needs to be 100 ms or less to receive a Good rating. To pass Google‚Äôs assessment, you need to reach the minimum value for ‚ÄúGood‚Äù on at least 75% of your site‚Äôs pages. The ‚ÄúGood‚Äù rating for the three new metrics is derived from the 75th percentile of the CRUX dataset. Passing this assessment will positively affect your Search Engine Page Rank and benefit the user experience of your pages. To find out how your current site measures up against the Core Web Vitals metrics, you can run your website through PageSpeed Insights . A tool provided by Google that will give an accurate measurement for each of the metrics. While these metrics may change in the future, they have been developed to be a universal measurement of page speed and user experience. Google collects data via API from Chrome, Chrome on Android, and Chromium Edge. The anonymized data from these browsers are compiled into the Chrome UX Report (CRUX). The CRUX report measures page loads regardless if the site is cached or not. It does not measure soft navigations within single-page applications. This means that single-page applications may be penalized upon the release of the Core Web Vitals update. This makes optimizing the Largest Contentful Paint and Cumulative Layout Shift even more critical for those kinds of sites. The Page Speed Insight tool will provide three performance metrics: Field ‚Äì Any available data from the CRUX report for the URL. Origin Summary ‚Äì The aggregated field data for all of your website pages. Lab ‚Äì Test results from a Google Server that has applied network throttling. There is a chance that your page may not have had enough traffic to produce a Field report. If that is the case, you will only receive an Origin Summary. Recommendations and Diagnostics are derived from the Lab test from Google. If available, performance metrics will be taken from the field results. Now we will delve into how to diagnose and improve each of these three new Core Web Vitals metrics. LCP measures how quickly the largest above the fold element is painted to the screen. Largest Contentful Paint is an alternative to Page Load Time. It is essentially a measurement of everything required for your website content; DNS, TLS, HTML, CSS, and blocking JS. It does not include asynchronous scripts or lazy-loaded content. The Largest Contentful Paint occurs when these three stages have been completed: HTML delivered and parsed. Critical Assets downloaded, parsed, and processed. LCP asset downloaded and rendered (image/video/fonts). Delivering your site as quickly as possible is the key to improving page speed. Fast delivery comes down to the following key aspects: DNS ‚Äì Increase TTL (Time to Live) and use a premium DNS hosting service such as Cloudflare or DNS Made Easy instead of using the free nameservers provided by GoDaddy or Namecheap. TCP ‚Äì Use of a Content Delivery Network (CDN) will reduce the round trip time between the user and your server. TLS ‚Äì SSL certificates can slow down the delivery time of your site. Ensure that OCSP stapling is enabled on the SSL certificate. You may have to use OV instead of EV certificates to achieve this. You should also configure your CDN to use TLS v 1.3. TTFB ‚Äì The Time until First Byte is constrained by how fast the hosting server can create a response. The site should be cached in a CDN or reverse proxy to ensure this happens as quickly as possible. Otherwise, your server environment should be able to deliver pages within 100ms. HTML ‚Äì Enable document compression and make sure documents are under 50kB. Ensure that the <title> tag is first and that there are no <script> tags blocking the page load. After downloading the HTML, the browser parses the document line by line to find critical path resources. CSS and JS in the head are given priority. Images in the body of the website are downloaded in the order that they appear. If the browser hits a blocking script tag, it will stop parsing and run the script. Due to this, all blocking scripts should be asynchronous or deferred. When possible to do so, split the JS bundle by page. This will allow the smallest possible bundle to be sent and still use modern technologies. Note that the module has a default defer behavior: After loading Javascript, the next path is CSS. The browser will block render on <link rel=‚Äùstylesheet‚Äù> tags. Bundling CSS by page will reduce unnecessary load times. You can also fetch and cache a stylesheet later in the page lifecycle using media=‚Äùnone‚Äù. LCP is measured independently of caching. Static assets such as JS, CSS, images, and fonts should be cached in the browser for at least one hour. These assets should also be compressed via gzip or brotli. A common issue that occurs, especially in eCommerce, is many non-critical images loading into the page. Native lazy-loading is a great method to optimize LCP. The loading attribute is not yet supported in Safari, but it should be soon. All browsers which send data to CRUX, which does support it: Load hero elements using the ‚Äúeager‚Äù attribute and any image below the fold with the ‚Äúlazy‚Äù attribute. This will give loading priority to the important elements and improve both LCP and user experience. In addition to lazy loading, the asses should be delivered as optimized as possible using whatever tools and services are available, like Cloudinary or Akamai Image and Video Manager. A rule of thumb is that a hero image should not be larger than 200kB. The hero element should not be JavaScript, so image carousels and embedded video players should be replaced with static images and native <video> elements. First Input Delay measures how long it takes before the browser can react with user input. This is a direct measurement of how responsive the user interface feels to the user and how much payload is placed on the CPU. The only way to improve FID without degrading the UX of your site is to reduce the time spent executing JavaScript. A possible way to cheat the system here is to hide your content behind a loading screen or spinner. This will most likely negatively affect your LCP and CLS scores, though, so a balance must be achieved if you use this method. If our goal is to improve FID and improve visual performance, there are only a few options: Delay or remove third-party scripts Defer non-critical scripts Improve JS performance To discover improvement areas, we need to run a performance test on a critical page to see what is consuming the most thread time. Investigate any large chunks and reduce where possible. Focus on the longest tasks. These are singular blocks of execution that are likely causing high input delays. High self-time can be due to the script itself being slow or the implementation being poor. Cumulative Layout Shift (CLS) measures how stable your website‚Äôs user interface (UI) feels to the user as they interact with a page. It is a sum of layout shifts during the page lifecycle. For example, when an advertisement‚Äôs banner loads on a webpage, it can cause the page‚Äôs main content to shift down. Layout shifts cause poor user experiences. A perfect CLS score is 0, but up to .1 is acceptable. CLS is measured by CRUX from the start of navigation through to when the user exits the page. Each time an unexpected layout shift occurs, it is summed into the CLS. Because this score requires user interaction to some degree, it is hard to measure via Google‚Äôs Lab. The Lab will often report the best-case scenario for your site. Optimizing Cumulative Layout Shift is a matter of preventing layout shifts entirely. Here are the leading causes for layout shifts: Web Fonts The most surefire way to avoid font-based layout shifts is to preload the Webfont and use font-display: optional The most surefire way to avoid font-based layout shifts is to preload the Webfont and use font-display: optional Ads Use a fallback image for when ads are blocked or fail to load Use a fallback image for when ads are blocked or fail to load Late-loading CSS Layout critical CSS should be in the critical path for rendering Layout critical CSS should be in the critical path for rendering Images Always add a height and width attribute for your images Always add a height and width attribute for your images Dynamic Content Pre-allocate layout space Pre-allocate layout space Chrome‚Äôs developer tools will highlight elements that caused a layout shift in the performance profile and to what degree they affected your CLS. If you hover your mouse on the layout shift in the experience track, Chrome will highlight the page‚Äôs element. You can also set your browser to throttle the page in the Performance tab. This will allow you to witness the layout shifts visually. First Contentful Paint (FCP) First Contentful Paint measures when the first paint of the site occurs. This is how a user knows that their navigation through your site is working. Time to Interactive (TTI) TTI is an approximate measure of when a site first feels interactive to the user. Total Blocking Time (TBT) TBT is a measure of how much of a workload is placed on the browser‚Äôs CPU while trying to load the page‚Äîmeasured by the time between FCP and TTI. Reducing this time will improve user experience and the perceived performance as well. PageSpeed Insights, Lighthouse, and https://web.dev/ all provide measurements of your site‚Äôs performance. A dedicated real user measurement solution can also be used to provide more profound and accurate insights into your site‚Äôs performance. The new Core Vitals Update is coming in May of 2021. It will play a large role in being eligible for the Top Stories in Google Search Engine Results Position. Google will use these three new metrics as signals to determine user-perceived performance and page speed. Optimizing your site for these metrics will positively impact how your site ranks in the future and have an immediate effect on user experience ‚Äì lowering bounce rate, increasing conversions, and increasing revenue. Author Bio: Daniel Snell is an employee at Layer0 .", "date": "2021-04-01"},
{"website": "Airbrake", "title": "What is a Runtime Error?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/runtime-error", "abstract": "A runtime error is an application error that occurs during program execution. Runtime errors are usually a category of exception that encompasses a variety of more specific error types such as logic errors , IO errors , encoding errors , undefined object errors , division by zero errors , and many more. In this article we‚Äôll examine exactly what a runtime error is and how it compares to other exception categories. We‚Äôll also look at some basic code samples that will illustrate how to fix runtime errors , so let‚Äôs get started! Most programming languages fall into one of two categories, both of which describe how source code is executed by the underlying machine: Interpretation ‚Äì Interpreted programming languages are directly executed by an interpreter , without altering or transforming the source code prior to execution. This process reads each statement one at a time, translating each into a sequence of instructions that have already been converted into machine code for rapid execution. A few of the well-known interpreted languages are PHP , JavaScript , and Perl . Compilation ‚Äì Upon executing the application, compiled programming languages first pass application source code through a compiler , which transforms the source code into a more efficient form of machine code. This compiled machine code is often referred to as bytecode . The machine code is then passed along to an interpreter , which executes each instruction one by one, just as with an explicitly interpreted language . Some popular compiled languages are C and its many derivatives, BASIC , Haskell , and Ruby . That said, it‚Äôs important not to get too hung up on the distinction between interpretation and compilation. Technically, a programming language itself is neither compiled nor interpreted. Instead, the difference is simply based on how the language is implemented . Many programming languages, including many of the most popular used today, have the means to be implemented by using both interpreters and compilers, and some of the most reliable languages heavily rely on a combination of the two techniques. Since runtime errors occur during execution of the application, we can deduce that such errors occur during the interpretation phase. On the other hand, compile time errors occur during the compilation phase. Compilation errors include issues that can be picked up by the compiler, such as improper syntax, invalid references, and undeclared variables. To break it down a bit further, let‚Äôs consider a specific type of compilation error , the syntax error . A syntax error occurs when the compiler or interpreter can‚Äôt determine the intention of your code. For example, let‚Äôs consider the following simple C# code: Here we have a method (also known as a function or subroutine in other languages) called Sum that expects two numeric arguments. It adds a and b together and returns the result. Passing in 5 and 3 to the Sum(int a, int b) method results in a returned value of 8 , as expected: However, watch what happens when we remove the single semicolon ( ; ) from the code, like so: Trying to execute this code first runs it through the C# compiler , which attempts to transform it into bytecode . However, the compiler immediately spits out a compiler error with the error code of CS1002 : The compiler cannot determine the intention of our code because its attempt to parse the code results in an abnormal pattern. This parsing process is known as lexical analysis (or tokenization ), which is the act of converting characters within a line of source code into a sequence of tokens , which are simply pre-defined instructions known to the interpreter. By breaking all code into such tokens, a compiler is able to determine what your original source code is intended to do, and generate the machine code capable of achieving that goal. However, if a compiler has trouble with this tokenization process a compilation error occurs. In the C# example above, the compiler expects only a handful of potential tokens (and, thus, character series) to follow the return a + b statement. One such token is the semicolon that indicates the end of a statement, but it does not expect the closing brace ( } ) that it actually encountered above, so the compilation error CS1002 was thrown. On the other hand, a runtime error occurs when the runtime understands the intention of the code, but fails to execute all coded instructions as currently written. Since this type of error comes up during execution ‚Äî after compilation has taken place (i.e. during interpretation) ‚Äî runtime errors must typically be caught and handled directly within the source code. Such errors are commonly referred to as bugs during application development, since these sorts of exceptions will force the majority of the debugging that takes place. As a simple example, here we have the Divide() method that, like Sum() , does just what the name implies: There are no syntax errors, so compilation occurs without a hitch. However, let‚Äôs see what happens if we pass in the values 5 and 0 to the Divide() method: During execution a System.DivideByZeroException is thrown, indicating that we‚Äôve attempted to divide by zero. This is an example of a common runtime error that must be planned for, since it‚Äôs difficult to know whether some calculation within a larger application might attempt to divide a value by zero at some point. Every language is difference, but in the case of C# we can surround the problematic statement with a try-catch block, which allows us to gracefully handle a DivideByZeroException : Now, any attempt to divide by zero will throw a DivideByZeroException , which is caught and output the console before returning a null (empty) value. In short, such exception handling is the primary way to handle runtime errors . That said, even the best laid plans of mice and men often go awry. While production defects are far from inevitable, it‚Äôs critical to have a safety net in the unlikely occurrence that something unexpected happens in your application after it‚Äôs already out there. This is where the power of error monitoring software comes into play. Even during development, but particularly after production release, error monitoring software provides that life line your organization needs to ensure your software remains fully functional. Any unforeseen defects are immediately identified and reported to your team, without the need for user-generated feedback or awkward error reports. Check out Airbrake‚Äôs exception handling tools today to see how you or your team can keep on top of any defects that slipped through the cracks during production.", "date": "2017-10-10"},
{"website": "Airbrake", "title": "How Your Database Could Be Affecting Your Apdex Score", "author": "Unknown", "link": "https://airbrake.io/blog/apm/how-your-database-could-be-affecting-your-apdex-score", "abstract": "Getting a good Apdex Score largely depends on making sure your application returns content at a sufficient speed. While there are a wide number of contributing factors that can affect the speed of your site, one often overlooked factor is how applications handle data that lives within a database. If handled incorrectly, it can severely slow down your site. A basic rule in working with data is to render unto the database what rightfully belongs to the database . What this means is that databases are best for handling data; any manipulations or calculations off of stored data are often handled better in the database. The application layer should then be used for manipulating and presenting information within the database. These days, it has become common for many developers to convert tables and data structures into objects and manipulate them with code. From a developer‚Äôs perspective, this makes sense; it is easy to work with objects, and there is little need to work in a different language (SQL). However, SQL is well suited to handle data more efficiently than other coding languages. In this article, we will cover a few basic techniques on how to optimize your databases and point out a few pitfalls that developers can fall into during the process of requesting data. Efficient indexing is essential if you have several tables. When you have more than one table and need to search for specific fields, it makes sense to index any field used to retrieve information. This includes using primary keys and foreign keys. You should consider creating an index using these keys: Primary Key* Foreign Keys* Filtered Columns in WHERE clauses Aggregate functions Any columns for which you use an ‚Äúorder by‚Äù *required Creating an index using these keys will help speed up the process of retrieving data. As a developer, you might be tempted to run several queries against a database by calling selects (or updates, etc.) in a loop. This is a fairly common mistake. Here is an example of such a mistake: Imagine you create a loop for each row in your table, and then you submit this data into a database. For each loop created, a query is run independently. Starting, committing, and stopping queries takes time. If you need to request data for only one or two rows, this isn‚Äôt much of an issue; however, if you are submitting, say 1000 rows (as in our example above), that means that 1000 separate queries need to run, which can have a negative impact on the performance of your database. A better approach would be to handle all inserts at once using SQL.¬†Create one query to insert the data into the database.¬†If you need to loop through multiple rows, do that first to create an array and then use that array to create only one query. For example, once you have your data, you can submit it like so: Be careful to only update rows where changes have been made. Do not update the entire database if only a few hundred rows are being changed. This will lead to a positive return on speed, thereby potentially improving your Apdex score . A common practice that many developers use when querying tables is to use a wildcard to bring in all of the keys for reference. For example: This is not an efficient approach, particularly when a table is large and has several keys. Instead, it is better to call individual keys from the table, like so: This will speed up your application considerably. A common mistake made while querying for data is to use correlated subqueries. As you‚Äôll see from the example below, this piece of code forces the database to process a separate query against the business table anytime a user is found. Instead of using a sub-select, you can obtain data by joining together the tables by connecting them with a common key. The ‚ÄúLEFT join‚Äù will bring back all data in the table, regardless of whether there is a matching record or not. What you end up with is all the data at once. But, when you use the id on the business table and link it to the ‚Äúbusiness_id‚Äù on the user table, you can easily bring in the business names. This runs considerably faster because it is only one query, as opposed to running a subquery for each and every row on the user table. While temp tables can be handy for organizing and joining data into meaningful subgroups, they also have some drawbacks. Creating temporary tables in SQL uses up memory and, therefore, can slow down the processing time and your application‚Äôs performance. Here is an example of ways temp tables have been used: One way of dealing with this is to use subqueries instead, which allows you to obtain this data more easily and with fewer resources. Here is an example of this same temp table coded in a more efficient way: When the temp table is set up like this, it will provide similar results to the one above, but in a fraction of the time. A slow database can have a significant and negative impact on your Apdex Score if it is not optimized correctly. But how do you know if your application is running slow or that you‚Äôve done enough to fix it? Investing in performance monitoring can help. Stay up-to-date with how your application is running with Airbrake Performance Monitoring. Our version of Performance Monitoring includes tools developers need to understand their application‚Äôs health, such as Apdex Score, detailed route information, request and response times, and so much more. See for yourself with a free 30-day Airbrake trial or log into your existing Airbrake account.", "date": "2021-03-23"},
{"website": "Airbrake", "title": "What is Performance Monitoring", "author": "Unknown", "link": "https://airbrake.io/blog/apm/what-is-performance-monitoring", "abstract": "Tl;DR: Performance Monitoring is a piece of software designed to give you an overview of your application‚Äôs operations as a whole. With the right monitoring tool, you can better manage resources, prevent latency, and ensure a good user experience (UX), so you don‚Äôt lose customers due to poor performance. *** As a Developer, your job is to make sure your website runs smoothly. When you only have 15 seconds to make an impression before users decide to stay or leave, your application‚Äôs performance counts. That‚Äôs where Performance Monitoring comes in. Performance monitoring is a set of tools that provide insight into the health of your application. With monitoring, you can measure issues that might impact your user‚Äôs experience while they‚Äôre using your application. Traditionally, IT, system engineers, and other Dev/Ops professionals rely on APM to ensure the system is running efficiently. But it‚Äôs not just for IT anymore. Developers and coders can also benefit from performance monitoring. Throughout this post, you‚Äôll learn more about what Performance Monitoring is, how it can be used by developers, and ways in which monitoring software can help you stop losing valuable customers due to poor application performance. Traditionally, Application Performance Monitoring (APM), when used by Dev/Ops and System Engineers, is a piece of software designed to track both the health of an application and the environment it‚Äôs hosted on. With APM, Dev/Ops can monitor: An application‚Äôs environment: Applications go beyond just the server. Your application stack can include environments such as servers, mobile devices, IoT speakers, and even household appliances! It can be a virtual machine, a container, or a completely serverless environment. With an APM, Dev/Ops can monitor multiple environments, making it easier to pinpoint environmental issues. Errors: APM can be a canary in the coal mine for catching errors before they happen. Slowdowns in the performance of services or the overall environment can indicate a looming problem that will eventually cause an error. While an APM can‚Äôt replace error monitoring software, it still provides valuable insight into the context in which those errors show up. User experience: In the end, everything you do, every code push, every design choice for your application, all comes down to user experience. The one constant in user experience is speed.¬† Think about it: no user has ever complained about an application being too fast. APM is designed to report latency problems via an Apdex Score before it affects too many users. With the information gleaned from performance monitoring, Dev/Ops can better manage resources to ensure their application runs smoothly. Typically, when we think of Application Performance Monitoring, we think of it as an IT tool where you can monitor the performance of an application‚Äôs environment and its servers. But many of the tools IT uses also apply to developers. For developers, insight into the user‚Äôs experience can prove to be invaluable. As a developer, you understand that every deployment comes with risks. A single error can have serious impacts on the user, so much so they might stop using your application. With APM, you can track the health of your application. Why does this matter? An APM can provide insight into how an error might be affecting an application and your users through measurements such as Apdex score, response time, HTTP requests, etc. An APM designed with developers in mind answers the following questions: What broke? When did it break? What happened at the time it broke? You might be asking yourself why IT, System Engineers, and other Dev/Ops professionals don‚Äôt simply relay this information to developers. It comes down to perspective. Dev/Ops and coders view data in the context of their job. Dev/Ops is all about making sure everything is running efficiently, but Developers are all about making sure things run smoothly. Here are a couple of examples of what we mean: Imagine you have an API where an application is calling Stripe to process financial transactions. For this example, the developer has set an error condition that will cause the API call to timeout after 500ms. If they run into this error condition, the transaction will not process and will generate an error. For these types of instances, a developer would need to see if there are HTTP errors (such as a 408 Timeout response, or even the dreaded 500 error) appearing in the logs. However, in many cases, only operations staff can view this on their APM software. Operations staff who view this dashboard may never see these timeouts because they are looking at the performance of the server and will only see an average of successfully processed transactions. Developers, if given access, can look at the same logs or information and understand that these transactions are not going through. As you can see, it‚Äôs the same data but viewed within two different contexts. Sometimes, an event may occur where no transactions are coming through, at all. Let‚Äôs take, for example, a company that is tracking QR scans from an advertising campaign. Normally, they may see many transactions; however, if there is a sudden drop-off in completed scans, there might be something amiss. Fortunately, with good application scanning, one might notice an exact date and time when these transactions stopped occurring. Using this information, developers can pinpoint the exact deployment that coincided with the time that these transactions stopped appearing. A developer could then pinpoint the error by looking at diffs of files that occurred during that build to identify the source of the undetected bug. Ops teams, on the other hand, may never notice that something is wrong. According to their data, the system is running at optimal efficiency. As you can see, it‚Äôs all about perspective when it comes to performance monitoring. While IT professionals, system engineers, and developers are looking at the same metrics, each party gets something else out of them. Many in the Dev/Ops world may consider APM to be fully the realm of operations. However, there are features in it that can be highly valuable to developers. Tools such as Apdex Score, HTTP information, request rates, error occurrences provide crucial details about the health of their application. That‚Äôs why Airbrake Performance Monitoring is the best tool for coders who only need the essentials. Our APM isn‚Äôt bloated with unnecessary and confusing tools that don‚Äôt help you code. For the most affordable and developer-centric performance monitoring software on the market, sign-up for a free 30-day Airbrake trial .", "date": "2021-03-18"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì IncompatibleClassChangeError", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/incompatibleclasschangeerror", "abstract": "Next up, in our deep dive into Java Exception Handling , today we‚Äôll be digging into the IncompatibleClassChangeError . This error is a base exception class for a variety of errors thrown when the Java Virtual Machine (JVM) recognizes an incompatibility between two compiled class definitions that are executing in tandem. In child class, which we just looked at last week , is the AbstractMethodError , which extends the IncompatibleClassChangeError and is thrown when abstract method incompatibilities are detected between two classes. In today‚Äôs article we‚Äôll explore the IncompatibleClassChangeError by seeing where it resides in the overall Java Exception Hierarchy. We‚Äôll also look at some functional sample code that illustrates a common scenario for class extension, and how a handful of incompatible changes can result in IncompatibleClassChangeErrors in your own code. Let‚Äôs get into it! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Error java.lang.LinkageError IncompatibleClassChangeError java.lang.Throwable java.lang.Error java.lang.LinkageError IncompatibleClassChangeError java.lang.Error java.lang.LinkageError IncompatibleClassChangeError java.lang.LinkageError IncompatibleClassChangeError IncompatibleClassChangeError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. The appearance of an IncompatibleClassChangeError ‚Äî or any child error therein ‚Äî is a result of what is known as binary incompatibility in Java. There is a great article here detailing all the ways an API package will (and will not) break binary compatibility, but we can summarize the common scenarios below. Incompatibilities occur when an existing binary (i.e. compiled Java class) references a newly-modified binary, and that modified binary contains any one of a handful of potentially incompatible changes: A non-final field is changed to static . A non-constant field is changed to non-static . A class is changed to an interface . Or, an interface is changed to a class . These four modifications are the primary way an IncompatibleClassChangeError can be thrown. To illustrate, our simple example uses two similar classes to handle book object creation, starting with the BaseBook class: BaseBook contains four private properties and associated getter/setter methods for title , author , pageCount , and publishedAt . For our use case we want to create a handful of extension classes based on BaseBook , which will be used to create specific types of book publications. One such extension class is PaperbackBook : For this example we‚Äôre not adding much to the PaperbackBook class, save for the new getTagline() method. To make sure a PaperbackBook object inherits everything from BaseBook that we need we‚Äôll test it in the Test.main(String[] args) method: Executing the main(String[] args) method works as expected, outputting the generated tagline of our book: Cool! We now have binary compatibility between the compiled BaseBook and PaperbackBook classes. However, what happens if we start to modify the BaseBook class definition and recompile it, without also recompiling the PaperbackBook class? As we saw above, the first of the four possible ways to cause binary incompatibility is to change a non-final field to static . Therefore, let‚Äôs change the BaseBook.getTitle() method (and associated private String title field) to static : We want to save our changes in the BaseBook binary so we need to recompile it: With the title field now set to static let‚Äôs execute the Test.main(String[] args) method a second time and see what happens: As you probably expected, we‚Äôre now catching an IncompatibleClassChangeError , which indicates that PaperbackBook.getTitle() (which is, of course, extended from BaseBook.getTitle() ) should‚Äôve been non-static . In such scenarios, the obvious solution is to either use an IDE that will catch such incompatibilities before runtime, or to ensure you always recompile all associated classes simultaneously, even when the source code of a single class is modified. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2018-01-26"},
{"website": "Airbrake", "title": "What Code Quality Metrics Should Management Monitor?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/code-quality-metrics-management", "abstract": "Let‚Äôs face it: It can sometimes feel downright impossible to properly measure code quality throughout the entirety of the development life cycle, particularly for the some of the massive applications we see produced today. There are nearly as many different types of metrics and best practices out there as there are applications of which to measure. This abundance of choices and numerous complexities often lead to the question of what code quality metrics should management monitor? In this article we‚Äôll aim to help break down that complexity by establishing a few general categories of code quality metrics. Within each category we‚Äôll list a few of the best and most widespread choices in hopes that you and your team will have a better idea of which to focus on and which you should ignore. Let‚Äôs get started! Quality metrics aim to keep the code base in tip-top condition by ensuring that quality is maintained throughout the entire development life cycle. Average percentage of faults detected (or APFD ) is a fairly well-known code quality metric in the industry and for good reason: It aims to measure the rate of faults or bugs relative to the percentage of the test suite that is being executed. While there are certainly more complex calculations, which can be found online and which show specifically how APFD can be calculated, the simplest explanation of AFPD is it‚Äôs a ratio of the number of faults relative to the number of tests in the test suite. This metric is a quick and easy way to evaluate the quality of specific components in the application and allows you to focus testing, refactoring, and coding efforts where they‚Äôre most needed. The next quality metric we‚Äôll discuss is fault severity, which looks at each fault that is uncovered during the development life cycle and assigns the fault a severity rating from low to high. The qualities and attributes used to determine the severity will depend on your organization and the business requirements of your application, but even with a rudimentary severity rating applied to each bug it becomes much easier to prioritize test cases based on both the requirements and the severity level of the faults that those tests aim to cover. While launching into production might be a long way off for most beginning projects it‚Äôs critical to establish a simple yet effective way to measure the application quality and performance once it nears production-readiness. To that end it‚Äôs extremely beneficial to measure production incidents, both in number and their rate of occurrence over time. The actual numbers you aim for will be specific to your team, but obviously the higher percentage of stories and releases that are pushed to production without incident the better. To assist with this metric make sure to record the initial cause of the issue along with what corrective measures were taken to resolve it. This allows your organization to effectively perform recursion testing for the particular issue so it‚Äôs less likely to pop up again. This metric style also works well in organizations with multiple teams, since root causes can often be traced to specific teams, which provides insight into which teams are working well and which could use improvement. Another useful metric is to actively track the life cycle of a release from story creation to code by examining it from the perspective of a single individual and point of entry, such as a developer and his or her system. Tough choices must often be made regarding how to reduce costs while increasing productivity and quality of releases, so this practice makes it easier to identify where resources should be invested during the life cycle of a release. Human labor and resources can be invested in one area while automation can be focused on other sections. Once the process is in place and been practiced a few times it will become faster and faster to produce a quality measurement for a single release life cycle. Whether your team is able to produce a quality metric result within weeks, days, hours, or even just a few minutes will depend on many factors, but lowering that time investment will make all future development work easier and cheaper. Coverage metrics are all focused on determining to what degree the source code of an application is executed each time a test suite runs. There are typically four levels of coverage metrics that can be measured so we‚Äôll briefly cover each to give you an idea of which, if any, may be suitable in your next project. The total functional coverage metric aims to measure the quantity of functions, methods, classes, and the like that are covered by the test suite. Less cumbersome to implement than total statement coverage, total functional coverage can also be more focused and better suited for testing actual business requirements. Even though just focusing on functions can be easier than testing coverage for all statements, in some cases it may still may not be feasible (or even necessary) to build tests that cover every function in the code base. Therefore it‚Äôs often a smart choice to implement total functional coverage metrics alongside some form of prioritization. This will feel similar to the prioritization of fault severity that was discussed previously except, rather than prioritizing faults, you‚Äôre prioritizing the importance of functions and methods instead. Figure out which are the most critical to the current release or to the story that is being worked on and prioritize their coverage in the test suite coverage. Drilling down a bit from total functional coverage is the simple yet sometimes controversial total statement coverage metric, which aims to measure how much of the entire code base ‚Äî either line-by-line or statement-by-statement, depending on the language in use ‚Äî is actually covered by the various test suites you have in place. While some companies may shun these sorts of rudimentary metrics, others find it useful to be able to automatically and accurately measure a rough percentage of the code base that is currently being tested. On the other hand, total statement coverage can be extremely cumbersome to implement and may require a massive effort on the part of the developers and testers alike, so it‚Äôs best to first try this technique early in the development life cycle to see if it fits the needs of your team. Another form of coverage metric is that of branch coverage, which aims to measure how many branches (i.e. inflection points) in the code base have been executed during testing. Branch coverage is a somewhat middle ground choice between total statement coverage and total functional coverage, since it will be less verbose than the former but more so than the latter. It is common practice to aim for branch coverage of at least 95% for new features and 75% for previously-tested code. The last coverage metric to consider is condition coverage, which measures how many boolean expressions were independently evaluated to be both true and false , and whether those changes directly impacted the outcome of said boolean decisions. This metric is not commonly implemented within most test suites but it can be useful for highly-sensitive software like financial services or safety systems. Just as the name implies the category of complexity metrics tend to contain more advanced metrics that may take more time and effort to implement, but consequently may also produce exceptional results. Cyclomatic complexity measures the number of linearly independent paths within the source code of your application. For example, executing one statement after another without any goto -style jumps ‚Äî like if-else blocks, function or method calls, object instantiations, and so forth ‚Äî follows an execution path that is linear; that is, it doesn‚Äôt branch at any point. However, most modern languages, particularly object-oriented varieties, tend to feature a plethora of branching execution paths that can be followed depending on the application state from one line to the next. Cyclomatic complexity tries to measure just how much the code base branches into functions, methods, control flow statements, and the like. The general goal with this metric is to reduce cyclomatic complexity as much as possible, which will generally reduce the overall complexity of the code making it easier to modify or debug when something goes wrong. Essential complexity is used in conjunction with the cyclomatic complexity metric to determine how much the code base can (or cannot) be reduced down to only a single entry and exit point during execution. In other words, how many cyclomatic complexities (methods, functions, control flow blocks, etc) can actually be removed through refactoring until execution flow has the fewest possible independent paths it can traverse. To understand this concept it helps to look at an example. Here we have a simple for loop and an if statement: While this is a rather obvious example the idea of essential complexity is to look at a snippet like this one and realize that we can effectively remove both the for loop and the if statement entirely because, in this specific situation and barring any outside changes to the variables seen here, the for and if statements serve no purpose and the foo = bar assignment will always execute. This gives the above snippet an essential complexity measurement of 1 since we can reduce it to one single linear path. As might be obvious, a higher essential complexity rating generally means more difficulty using and testing that code so the suggested complexity level is 4 or less. The integration complexity metric simply measures the level of interaction between different modules or components within the application. This is typically calculated by using the size and overall complexity of a target module while ignoring the internal logic of said module. This size/complexity measurement is summarized and then compared as a ratio to the number of methods in the code base. This metric can then be used to help determine roughly how many and what types of integration tests are needed in the test suite. Cyclomatic density is the ratio of logical decision points (i.e. linear paths which can be taken) to the number of lines of code in the code base. The higher this metric the more complicated the code will likely be, making future work and testing more difficult. The last category we‚Äôll cover today is object-oriented metrics, which are focused on measuring the relationships and coverage between independent classes, modules, and the like. This metric merely breaks down the cyclomatic complexity into class-specific measurements and averages the value over the entire collection of classes in the system. The higher the average, the more complex the code base and the more likely refactoring should take place. This time we‚Äôre averaging the essential complexity metric of classes in the code base. Since the goal of essential complexity is to reduce the number of possible execution paths as bear to one as possible that same goal applies to the average measurement. If the average essential complexity for classes is much greater than one then refactoring may be required. As the name states this metric merely measures how many parents (or children, depending how you wish to evaluate it) each class has. While some instances of multi-inheritance may be necessary the more parents an object has the more complex it becomes. The responses for class metric adds the number of methods the target class implements to the number of custom methods that are accessible to an instance of the target class. Obviously when working with frameworks you wouldn‚Äôt add methods that are accessible merely because they‚Äôre from the framework‚Äôs public API, so instead the focus should be only on methods your application implements in some way. As usual, the higher the number of possible method invocations the more complex the class. Coupling between objects is a crucial measurement that aims to count how many non-inherited classes a target class depends on. Simply put, when the coupling between objects is high that typically means the particular target class is too intertwined with other classes and isn‚Äôt considered truly object-oriented or reusable. As projects tend to expand in breadth and scope this metric tends to increase, so keep a close eye on it throughout the life cycle to ensure that classes remain slim and agile. Class hierarchy level measures how many objects inherit from the target class. If this number exceeds six then it typically indicates the class will be too difficult to properly test. Conversely, if the class hierarchy level is at one or fewer that indicates an improper use of object-oriented techniques. The recommended saturation level across the board is somewhere between two and three levels for each class. This metric is quite straightforward and measures the number of methods implemented in a class. The suggested limit is no more than 20 methods within a single class. The method cohesion metric measures the average percentage of methods within a class that are using a particular attribute or property of that class. If this percentage is low because not many methods are using certain attributes then refactoring could help improve reusability. On the other hand if method cohesion is high then attributes are being used effectively and thoroughly. This concludes our brief glimpse a few of the many possible code quality metrics that can be implemented into modern development life cycles. Hopefully these gave you a few good ideas for the next project your team takes on, and just to make sure your organization is fully prepared check out Airbrake‚Äôs exception handling tools and to see how your team can keep on top of any defects that slipped through the cracks during production.", "date": "2017-06-20"},
{"website": "Airbrake", "title": "The State of Client side JavaScript Error Reporting", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/state-client-side-javascript-error-reporting", "abstract": "Effectively handling browser-generated errors, like much of web development, has long been a difficult, error-prone and highly arcane practice. Browser differences, inline event¬†handlers, frameworks and plugins without canonical error-handling attachment points, and callback hell have all contributed to the bruxism that plagues front-end devs. Airbrake exists to make devs lives easier, and not even the browser is exempt from our efforts. We‚Äôve taken a long hard look at the state of tooling out there, and delivered tooling that we feel does just the right amount of heavy lifting while allowing developers to integrate the tool in ways that make sense for their environment. For years, most browsers have supported the window.onerror event to varying degrees. Scripts run inline have fired this error, as have errors triggered by missing resources including scripts and images. Unfortunately, errors handled this way lack what is arguably the most important piece of information an error can carry, its stack trace. A number of error-handling tools hook into window.onerror and some even attempt to attach additional information to errors propagated this way. In general, we‚Äôve taken a different approach to these problems, insisting that errors be handled closer to their source. The Airbrake client-side error notifier takes a slightly different approach to dealing with errors from any of the tools that have come before it. Airbrake‚Äôs client , like most JavaScript error-handlers provides a single API call to report an error. Ours looks something like this. This construction appears over and over again in code where we care about errors. In fact, it occurs so often that we provide a convience wrapper for exactly this pattern. Page-load times and overall application responsiveness have been pressing topics amongst web developers for years. We wanted to create a tool that slotted easily into existing applications without modifying existing tooling or introducing delays into page-load. A critical component to achieving this is providing an API that can be used immediately by your application‚Äôs code, even though the full notifier has not been downloaded. We accomplish this first by providing a shim implementation of the API that supports the push and try calls. This shim is inspired by a technique pioneered by Google Analytics. First, the shim object is created as a native JavaScript Array. Next, the try method is added to the shim, though its implementation doesn‚Äôt differ from the canonical version, since try simply delegates to push . In order to load the canonical implementation, we use the defer attribute on the remote script tag to ensure its download and execution doesn‚Äôt interfere with your application‚Äôs code. Calls to the Airbrake Reporting API need to carry information that uniquely identifies your account and application. Some reporting tools ask developers to configure specific reporting URLs. Even those that don‚Äôt use an imperative approach to configuration, typically providing API methods like setAPIKey and the like. Although the Airbrake reporter does support configuration methods like this, they are only used by the notifier itself as it bootstraps. Instead, canonical configuration information is stored and read as data-attributes on a script DOM node, separating the configuration of the notifier from code that actually uses its services. Rather than creating a monolithic error-reporting application with lots of functionality baked right in, we elected to break this thing apart into well-defined components. This means that each piece of functionality can be (and is) testable and tested. It also means that as older browsers are no longer supported, code dealing with their eccentricities can be sunsetted and removed. Additionally, as new browser features are introduced, there is a clear point for their integration. Handling errors in JavaScript isn‚Äôt new territory, and there are some battle-tested tools already out there for smoothing out some of the differences in error-handling between browsers. One such tool is TraceKit . One of its nicest features is normalizing stack traces. The Airbrake notifier integrates this tool so that you can benefit from the bumps and scrapes suffered by developers before you. We use the excellent browserify to wrap and expose our tools to the notifier, including a few really wonderful npm modules. Probably the most exciting feature we were able to bring to this notifier is SourceMaps support. What this means is that as long as your concatenated, minified JavaScript includes a sourceMappingURL directive, reported errors will use your original file names and line numbers, even in browsers that don‚Äôt support SourceMaps natively in their developer tools. In order to avoid mixed content warnings, the Airbrake-js notifier is obtained via https, and communicates with the Airbrake API servers via https as well. Since we‚Äôre still supporting older browsers, errors are reported using a JSONP GET request. Once non-CORS browser support is removed, we‚Äôll be able to swap out this transport mechanism for a simpler XHR mechanism that can handle larger payloads and won‚Äôt block the JavaScript interpreter. The state of error-reporting is changing for the better. Not only are tools like Airbrake-js making it simpler to learn about the errors your users are experiencing, but browser vendors are providing new tools to allow for even less-obtrusive integrations. The modular design and unit-tested code we‚Äôre launching with will allow us to rapidly integrate these new tools into our notifier, as well as to refine existing features. Specifically, we‚Äôre really excited about the proposals around window.getLastError , allowing the notifier to extract useful information when errors occur even if the code in question hasn‚Äôt been wrapped in a try/catch block. We‚Äôre also excited to see new frameworks launching with error-reporting in mind, such as Ember‚Äôs onerror , and Angular‚Äôs $exceptionHandler . Frameworks providing these easy attachment points remove the need to instrument client code manually, potentially saving developers even more heavy lifting. The Airbrake-js notifier is available for all paid accounts. We think you‚Äôll be pleased to get a clearer view about just what‚Äôs happening with your application everywhere it runs; in the browser and, not just on the server. Give it a spin today and let us know what you think. Sign up for an account here . The State of Client side JavaScript Error Reporting | Boardmad says: October 11, 2013 at 1:49 am [‚Ä¶] source: The State of Client side JavaScript Error Reporting [‚Ä¶] The State of Client side JavaScript Error Reporting | Rocketboom says: October 11, 2013 at 1:58 am [‚Ä¶] The State of Client side JavaScript Error Reporting  Source: https://airbrake.io/blog/notifier/state-client-side-javascript-error-reporting/ 0 ¬†¬† [‚Ä¶] The State of Client side JavaScript Error Reporting | Enjoying The Moment says: October 11, 2013 at 2:04 am [‚Ä¶] via Hacker News https://airbrake.io/blog/notifier/state-client-side-javascript-error-reporting/ [‚Ä¶]", "date": "2013-10-11"},
{"website": "Airbrake", "title": "Create a Serverless Twitter Bot with Airbrake and AWS Lambda ‚Äì Part 2", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/serverless-twitter-bot-airbrake-lambda-part-2", "abstract": "In Part 1 we setup our development environment, created our twitter-bot project, integrated it with the Twitter API so it could send out programmatic tweets, and performed a basic Atom feed retrieval for some actual content to tweet. Today, we‚Äôll continue refining our Twitter bot by integrating automatic error handling with Airbrake‚Äôs Node.js software. This will ensure our Twitter bot is always stable and executing as expected, since we‚Äôll be alerted immediately if something goes wrong. We‚Äôll then begin the process of getting our application into a serverless environment with AWS Lambda, before we finish everything up in Part 3 later this week. You can also view the full source code for this project at anytime on GitHub , so with that let‚Äôs jump right in! To begin using the Airbrake-JS module we need to Create an Airbrake account , sign in, and make a new project. Now we just need to locally install Airbrake-JS package. We‚Äôll do this in a console from our project root directory using the npm install --save airbrake-js command: Alternatively, we could also install it by adding airbrake-js to our package.json dependencies: We need to instantiate the Airbrake client object in our application by passing the projectId and projectKey values obtained from the twitter-bot project we created on the Airbrake dashboard. However, we don‚Äôt want to publicly expose these values, so we‚Äôll implement the same technique we used in Part 1 to hide the Twitter API secret keys. Let‚Äôs start by adding airbrake-credentials.js to our .gitignore file, since this is the file we‚Äôll use to hold our private projectId and projectKey values. Our .gitignore file should look something like this: Now, let‚Äôs create the airbrake-credentials.js file, then copy and paste the projectId and projectKey values into the appropriate properties, similar to what we did in twitter-api-credentials.js : We can now require the airbrake-credentials.js file in our application code and pass the exported object to the AirbrakeClient constructor. We‚Äôll start by requiring airbrake-js and airbrake-credentials.js . We‚Äôll then pass the credentials to new AirbrakeClient(...) to create the actual client object we can use in our code: That‚Äôs all there is to using airbrake-js with default settings! All thrown Errors will be detected by airbrake-js and will be instantly, automatically reported to you via the Airbrake project dashboard (and also via email or other service integrations you may have setup). For our purposes we‚Äôll add a simple tweet(message) function that attempts to tweet the passed message argument: We‚Äôve also started to clean up the code a bit by creating the tweetCallback(error, tweet, response) function, which is invoked as the callback for the twitter.post method call used throughout our code: The error object passed to tweetCallback(error, tweet, response) is actually a one-dimensional array, so we explicitly throw a new Error and pass the message property of the underlying error object that was caught, if applicable. Otherwise a successful tweet was posted, so we log that to the console. We can test this by calling tweet(message) : This produces a successful tweet : However, let‚Äôs see what happens if we try to send the same tweet again: Something has gone wrong. The console shows the following error array object: More importantly, airbrake-js immediately picked up on the error and reported the issue to me via the Airbrake project dashboard (and via email, which is the default behavior). The Airbrake dashboard shows a great deal of useful information about the error: First Seen : 8 seconds ago Last Seen : 8 seconds ago Occurrences : 1 Error Type : Error Severity : error File : index.js:99 Error Message : Status is a duplicate. Clicking on the specific Occurrence tab in the dashboard shows the full details of the caught error. For example, airbrake-js picks up the full backtrace , which shows us that the error occurred in the tweetCallback(error, tweet, response) function in our index.js file on line 99 : It also reports a great deal of contextual info, including all recent console.log messages. With Airbrake-JS added to our project we can now ensure all future errors, whether during development or in production, are instantly reported. We‚Äôll finish up our Airbrake-JS integration by committing the recent changes to Git: Everything is working so far as expected. Our application is able to successfully retrieve a random Airbrake article, connect to Twitter, and submit a new tweet. However, we want to be able to let our bot go and have it execute its own code when appropriate, such as on a regular schedule. To accomplish this we‚Äôll be using AWS Lambda , which allows you to run code without worrying about servers or infrastructure. Unlike the typical scenario, where server hardware is paid for and configured to host application code, AWS Lambda is a serverless technology that hosts your code within tiny, self-contained functions, which can be triggered by a wide variety of events. Instead of paying for servers, you just pay for compute time. This sort of setup is perfect for infrequent, small applications like our little Twitter bot. To actually exceute your code, AWS Lambda invokes the Node function you specify as the handler . This handler is simply a function in your code that should be exported, using the standard exports statement. The typical syntax for an exported handler is: The event parameter is used by AWS Lambda to pass event data to the handler. The context parameter is used by AWS Lambda to provide runtime information , such as logging info, timeout duration, request id, and so forth. The context object also includes succeed and fail methods, which can be explicitly invoked in your own code to inform Lambda that a function call has succeeded or failed, respectively. Since you must explicitly tell AWS Lambda which particular handler to invoke within any given Lambda function, it‚Äôs a smart practice to export and expose multiple handler functions, and then you can invoke whatever handler is relevant. We now need to modify our existing application code so that it can effectively export the handler functions we want to expose to AWS Lambda. These functions need to have a few capabilities. The first capability our function needs is a way to ensure that execution of a handler function is completely self-contained, meaning that any outside libraries can also be accessed by AWS Lambda. The second requirement is that the code is contextually sound , meaning that it will make proper use of the AWS Lambda-specific context parameter we briefly discussed above. Since AWS Lambda is priced based on computation time and memory, it‚Äôs critical that our code only executes for as long as absolutely necessary. If something goes wrong or a request is successful, we want to immediately inform AWS Lambda of the result so we can quickly halt execution. It may seem minor, but a savings of even a few milliseconds for each function call will add up quickly for computations that are performed hundreds or thousands of times. Therefore, the first change we need to make to our application code is to streamline the tweet(message) function and allow it to provide context information during the underlying twitter.post(...) method callback. Here is the modified tweet(...) function: The first change is at the top when we check if message is valid. If no message is provided we invoke the fail(...) function, which you‚Äôll see in a moment is the context.fail(...) function provided by AWS Lambda. Invoking this will immediately halt execution of our function and inform Lambda of the stop. We‚Äôve also reverted the twitter.post(...) callback function to an anonymous function, as this allows us to use the built-in Function.prototype.bind() method, so we can include the two new succeed and fail parameters in the callback function context. Since we don‚Äôt want to modify the twitter package code, this is the next best option for being able to invoke the succeed and fail functions within the callback code block. Within said callback function we check if an error parameter exists. If so, we output it to the log and then explicitly invoke the airbrake.notify(...) method and pass in the generated error. Since airbrake.notify(...) returns a promise instance, we can chain the then() method, which will invoke the returned fail(...) promise after airbrake.notify(...) processes the error. The result of this code is that we are able to immediately report the generated error via Airbrake while this code is running remotely on AWS Lambda, and once the asynchronous Airbrake notification has completed, we then halt our Lambda function execution and report the error to Lambda. On the other hand, if no error exists we merely output the tweet to the log and invoke the succeed(...) function, informing Lambda that the function has completed. The first AWS Lambda handler function we‚Äôre exporting is a simple test function called tweetHelloWorld(event context) , which does just what the name suggests: As mentioned, it‚Äôs a good idea to export multiple handler functions that you think you might want to use for testing or what not, since we can explicitly choose which handler is executed by AWS Lambda. As such, let‚Äôs also create the tweetTime(event, context) function: Both of these basic handler functions will be useful for testing, since one of them will attempt to tweet the same value each time, while the other will always be something new. The final handler function is, of course, tweetRandomArticle(event, context) , which is the primary function we‚Äôre looking to have AWS Lambda execute. This function needs to be able to perform the entire process of retrieving articles, selecting a random one, and tweeting the selected article. As such, we‚Äôve moved a lot of the event handler code that previously existed outside the context of a function, and stuck it directly inside this function: We also have to move the FeedParser() and request(...) calls into this function context, since we don‚Äôt want these calls to be invoked at any other time except when tweetRandomArticle(event, context) is called. Other than that, most of the code is the same as before ‚Äî we start by gathering article from the feed, select a random one, and then pass it to tweetArticle(article, succeed, fail) : That‚Äôll do for Part 2 of this series. Stay tuned for Part 3 later this week, where we‚Äôll finish up by packaging and integrating our application code into AWS Lambda by creating functions and handlers, testing everything, and then finally getting a fully automated, error-managed, serverless Twitter bot up and running!", "date": "2018-01-02"},
{"website": "Airbrake", "title": "Regression Testing: What It Is and How to Use It", "author": "Unknown", "link": "https://airbrake.io/blog/software-testing/regression-testing", "abstract": "Regression testing is a form of software testing that confirms or denies a software‚Äôs functionality after the software undergoes changes. The term regression actually means ‚Äúthe act of reverting back to a previous state.‚Äù By extrapolating that definition into the realm of software development we can infer that regression testing is performed to verify that software has not unintentionally regressed to a previous state. Regression testing is ideally performed every time a software component or feature is modified, to help identify (and resolve) any newly discovered or regressed issues. Throughout this article we‚Äôll further examine what regression testing is and provide a handful of useful tips for how to properly implement regression testing into your team‚Äôs software development life cycles. Let‚Äôs get to it! Regression testing simply confirms that modified software hasn‚Äôt unintentionally changed and it is typically performed using any combination of the following techniques: Retest All : A retest all practice, as the name implies, aims to re-test the entire software suite. In most cases, the majority of testing is actually automated using assorted tools and test-driven development practices , since it‚Äôs neither feasible nor economical for humans to perform such a massive quantity of testing. However, this lack of human intervention can also be problematic, so it‚Äôs critical to have a backup plan like an error monitoring tool, which will ensure anything that slips through the cracks is caught and dealt with. Regression Test Selection : As a slightly toned-down alternative to retest all , regression test selection encourages the team to extract a representative selection of tests from the full test suite that will approximate the average test case of the entire testing suite as a whole. The primary advantage to this practice is that it requires far less time and effort to perform. This kind of regression testing is ideally handled by human testers ‚Äî such as those from the QA or development teams ‚Äî who will typically have better insight into the nuances of test edge-cases and unexpected behaviors. Test Case Prioritization : The goal here is to prioritize a limited set of test cases such that the more potentially impactful tests are executed ahead of all less critical tests. The act of how your team prioritizes test cases is outside the scope of this article, but many of the techniques used during defect triage are applicable during test case prioritization . In the world of software quality assurance there exists a term known as software regression , which simply refers to a software bug which causes some kind of unintended non-functionality when a change is made to the system, such as a patch or new release. There are three common categories of software regression : Local : When a new bug is located within the same software component that was updated. Remote : When a new bug is located within a different software component than the one that was updated. Unmasked : When the bug already existed, but it had no effect prior to the software component update. The overall purpose of regression testing is to easily and effectively uncover all possible software regressions , whether they were newly created ( local / remote ) or previously undiscovered ( unmasked ). No matter which techniques your team opts to use to handle regression testing there are a few important best practices you should consider implementing: Maintain a Strict Testing Schedule : Always maintain a continual testing schedule throughout the entire software development life cycle. Not only will this quickly force the team to adapt to a frequent testing regimen, it will also ensure the finished product is as well-tested as possible. Use Test Management Software : Unless your current software project is a simple self-developed side project, chances are you‚Äôll have such an abundance of tests that tracking each will be well beyond the capabilities of a single individual or a spreadsheet. Thankfully, there are many different test management tools on the market designed to simplify the process of creating, managing, tracking, and reporting on all the tests in your entire testing suite. Categorize Your Tests : Imagine a test suite of hundreds or thousands of tests that are merely identified by a single name or id field. How on Earth would anyone ever sort through that massive list in order to identify tests that are related? The solution is to categorize tests into smaller groups based on whatever criteria is appropriate for your team. Most test management tools will provide the means of categorizing or tagging tests, which will make it easier for everyone on the team to identify and reference a certain type of test. Prioritize Tests Based on Customer Needs : One useful way to prioritize tests is to consider the needs of the customer or user. Consider how a given test case impacts the end user‚Äôs experience or the customer‚Äôs business requirements. Ideally, your tests should be robust and simple enough to execute that anyone on the development team is able to run the full regression test suite by issuing a single command. Even better, using the proper continuous deployment tools will allow the full suite of regression tests to be performed automatically, per the testing schedule you and your team have devised. The short and sweet answer for where a regression test should be implemented is ‚Äúeverywhere you can afford it!‚Äù However, in the real world, designing and maintaining a near-infinite set of regression tests is just not feasible, so it is important to determine where in the software a new test should be generated and how it should be designed. To illustrate the challenge of deciding when and where a test should be added, consider a simple application that contains just two text boxes, each of which can hold a number up to 20 characters in length. Upon submission both numbers are added together and their sum is output to the user. It doesn‚Äôt get much simpler than this, but let‚Äôs now consider how we‚Äôd go about testing for what seems like a simple scenario: ‚ÄúAre there any numbers that can be entered into either box that produce an error?‚Äù We‚Äôll assume there are already restraints and sanity checks in place such that only valid numbers from zero through 10 20 -1 can be entered. We could write a test that just starts iterating through numbers and checking the result without too much trouble. The problem here is that computers are fast, but they just aren‚Äôt that fast . Even if we could blaze through ~550,000,000 numbers every second, it would still take thousands of years to run through every possible valid number ‚Äî and this doesn‚Äôt even account for the combination of adding numbers together. Now obviously, we don‚Äôt go to these extremes for most applications because it‚Äôs generally assumed that if a function can successfully add two numbers together it can probably do the same with a different pair of numbers. Therefore, the obvious solution here (which can be applied to regression testing in general) is to create a representative sample of tests that will approximate the larger collection of possible or theoretical values. In the case of our two numeric text boxes, we‚Äôd probably test extreme values ( -2,147,483,648 , -2,147,483,647 , 0 , 2,147,483,647 , 2,147,483,648 ), special values ( Infinity , NaN , null , etc), and then maybe a handful of randomized values to ensure stability between test executions. In 99.99% of scenarios, we can safely assume that this level of test coverage will suffice, and there‚Äôs no need to test all 99 quintillion values we could theoretically input. Regression testing should be performed after any change is made to the code base. Additionally, regression tests should also be executed anytime a previously discovered issue has been marked as fixed and must be verified. Your team will need to decide the regression testing schedule that best meets your needs, but most organizations find it useful to perform regression testing on a strict schedule. This may be at the end of every work day, weekly, bi-weekly, or even after every single repository commit is pushed. The more often your team is able to perform regression testing , the more issues can be discovered and fixed, which will lead to a more stable and functional piece of software at the end of development and leading into production. That said, it‚Äôs important not to rely exclusively on your regression testing practices to catch all errors or potential bugs. No matter how diligent you and your team may be, some defects will eventually slip through the cracks, so make sure you implement an extra layer of security beyond testing such as Airbrake‚Äôs error monitoring software. Airbrake guarantees that your team won‚Äôt need to worry about losing track of production errors, because Airbrake provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-02-06"},
{"website": "Airbrake", "title": "Announcing Single Sign-on for All Paid Airbrake Plans", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/announcing-single-sign-on-for-all-paid-airbrake-plans", "abstract": "Recently Airbrake announced the availability of SAML Single Sign-on for large teams. Since that announcement, we have received a number of customer requests to make this feature available for smaller teams as well. Since Airbrake takes security ‚Äì and customer feedback ‚Äì seriously, today we are happy to announce that SAML Single Sign-on is now available for all paid plans , regardless of team size. SAML Single Sign-on for Airbrake has two main benefits: Security: you and your team now have a single, strong access point that makes it easier to keep credentials safe ‚Äì no new passwords to lose or get hacked. Convenience: no one-off passwords to remember (or forget). Airbrake supports both OneLogin and Okta SSO providers. If you want to learn more about SAML Single Sign-on, check out our previous blog post . If you‚Äôre already familiar with Airbrake SSO, you can enable it straight away by heading over to your account security settings and following the instructions for your preferred SSO provider . Don‚Äôt have an Airbrake account yet? Start a 30-day free trial to try this and many other great features (no credit card required!) Don‚Äôt miss any Airbrake updates Follow us over on Twitter .", "date": "2020-06-25"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì ERR_ENCODING_INVALID_ENCODED_DATA", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/node-js-error-handling-err_encoding_invalid_encoded_data", "abstract": "Moving along through our detailed Node.js Error Handling series, today we‚Äôll be going over the ERR_ENCODING_INVALID_ENCODED_DATA error, which is one of the many System Errors Node can generate. Node throws System Errors when an exception occurs within the application‚Äôs runtime environment, and such errors typically indicate that there was an operational problem within the program. An ERR_ENCODING_INVALID_ENCODED_DATA error indicates that an invocation of the TextDecoder failed because of incompatibility between the specified encoding and the decoding target. In the rest of this article we‚Äôll examine the ERR_ENCODING_INVALID_ENCODED_DATA error by looking at where it sits in the larger Node.js Error Class Hierarchy . We‚Äôll also explore some fully functional code samples that illustrate how the TextDecoder class can be used to handle Buffer decoding, and how incompatibilities can occasionally lead to ERR_ENCODING_INVALID_ENCODED_DATA errors. Let‚Äôs do this! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error SystemError ERR_ENCODING_INVALID_ENCODED_DATA SystemError ERR_ENCODING_INVALID_ENCODED_DATA ERR_ENCODING_INVALID_ENCODED_DATA Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. This function instantiates a TextDecoder object using the passed encoding and fatal parameters, then iterates through and outputs each chunk of the passed buffer before passing it to our decoder instance. This iteration will be important in a moment, but for now it just allows us to see the full byte composition each individual slice of our buffer, and how each of those corresponds to the string characters in the buffer. We‚Äôll start our tests by creating a Buffer from a string of 'Airbrake.io' : This test produces the following output: Cool! We can see each iteration outputs the slice(...) values it is using, along with the Buffer byte array of that slice, and finally the decoded string of that slice. We‚Äôre using utf-8 encoding, so these basic characters aren‚Äôt likely to give us much trouble. However, let‚Äôs make a slight alteration by changing the A in our string to a special √Ç character: Everything else is the same as before, except that first character, so let‚Äôs look at the test output: This time we caught an ERR_ENCODING_INVALID_ENCODED_DATA error that indicates the encoded data was invalid with the utf-8 encoding we‚Äôre using. What‚Äôs critical to note is where in our iteration this error was thrown. Everything was working just fine until we reached the slice(0, 1) byte, which we can see from the Buffer output is equal to the octal 0xc3 . However, the previous iteration where our Buffer slice contained two octals of 0xc3 and 0x82 worked just fine. This is because the combination of those two bytes (i.e. the hexadecimal representation) is how the unicode of our special √Ç character is defined. But, the singular 0xc3 byte/hex is not representative of any unicode character in utf-8 , which is why the final Buffer slice produces the ERR_ENCODING_INVALID_ENCODED_DATA error. To further illustrate we can actually create a Buffer from an array of octals. Here we‚Äôre performing the exact same test as before, except we‚Äôre representing the √Çirbrake.io string in its octal/hexadecimal format: Once again, the output is the same as our previous test, with an ERR_ENCODING_INVALID_ENCODED_DATA error while trying to decode the final (invalid) slice: Keen observers may have noticed our internal call to the TextDecoder constructor passed a special { fatal: fatal } argument. Our default value for this argument is true , but let‚Äôs try one more test with our special character string, but where we set this fatal argument to false : We‚Äôll skip most of the iteration output this time since nothing has changed, but one major difference is immediately noticeable: There‚Äôs no error thrown during the final slice decoding. My particular console produces the ÔøΩ character when it‚Äôs trying to output something that cannot be rendered, but we can see that no error was thrown because the fatal option of the TextDecoder was set to false . This is handy for when you want to decode something, but you don‚Äôt care if the input is actually totally valid for the particular encoding you‚Äôre using. Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-02-14"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì InputMismatchException", "author": "Unknown", "link": "https://airbrake.io/blog/java/inputmismatchexception", "abstract": "Moving along through our in-depth Java Exception Handling series, today we‚Äôll be examining the InputMismatchException . The InputMismatchException is thrown when attempting to retrieve a token using the text Scanner class that doesn‚Äôt match the expected pattern or type. In this article we‚Äôll explore the InputMismatchException in more detail by first looking at where it sits in the larger Java Exception Hierarchy . We‚Äôll also explore the basic purpose and usage of the built-in Scanner class, and see how improper use of this class can result in unintended InputMismatchExceptions in your own code, so let‚Äôs dig in! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Exception java.lang.RuntimeException java.util.NoSuchElementException InputMismatchException java.lang.Throwable java.lang.Exception java.lang.RuntimeException java.util.NoSuchElementException InputMismatchException java.lang.Exception java.lang.RuntimeException java.util.NoSuchElementException InputMismatchException java.lang.RuntimeException java.util.NoSuchElementException InputMismatchException java.util.NoSuchElementException InputMismatchException InputMismatchException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. This code sample also uses the Logging utility class, the source of which can be found here on GitHub . To understand what might cause an InputMismatchException we need to briefly explore what the Scanner class is and how it might be used in a Java application. Scanner can be used to perform simple text scanning and parsing using regular expression or delimiter pattern matching. It can be used for single lines of text, or even massive files containing thousands of lines. For our sample code we‚Äôre using the 2014 GDP data courtesy of Plotly , which is in the common CSV file format. There are only a couple hundred lines of text in this file, but it should give us an interesting scenario in which to properly parse some real-world data. To begin we start with the delimiterTestByDirectTypes method: This method passes our local File into a new Scanner instance and specifies the use of a delimiter of \"[,\\n]\" . This delimiter is necessary because our CSV file separates each value within a record using a comma, but it also contains multiple records separated by a newline ( n ), so we need to inform the Scanner instance that both of these delimiters should be accounted for. Once our Scanner instance is created we check if it has a new line and next() value, which is the default type retrieved by a Scanner instance and assumes the token it will find next is a String . From there, we directly extract each subsequent token by calling scanner.next() or scanner.nextDouble() , depending what type of value we‚Äôre extracting. Both our country and code values should be Strings , while gdp is a float or Double . Once extracted, we output everything into a clean, padded format. The result of executing this method is as follows: So, everything was working just as expected until we reached the 15th record, at which point an InputMismatchException was thrown. If we look at the source data a bit we can see why we ran into a problem: Here we see our data isn‚Äôt as ‚Äúclean‚Äù as we originally thought. The ‚ÄúThe Bahamas‚Äù is alphabetized by ignoring the word ‚ÄúThe‚Äù, this record actually has three comma delimiters, rather than the expected three of all previous records. As a result, our first call to scanner.next() for this record returns \"Bahamas , because it uses the first comma it finds as a delimiter. Thus, the next call to scanner.nextDouble() tries to evaluate the value of The\" as a Double , which obviously fails, resulting in the InputMismatchException we see above. One possible solution would be to perform some kind of sanity checks before we explicitly call the scanner.nextDouble() method. To assist with this and allow our code to be a bit more future-proof we‚Äôve added the getScannerValueByType(Class<T> clazz, Scanner scanner) helper method: The purpose of this method is merely to invoke the appropriate scanner.next[Type] method based on the <T> type that was passed to it. Furthermore, we explicitly perform a sanity check using the appropriate scanner.hasNext[Type] method prior to actually returning a value, to ensure that no unexpected InputMismatchExceptions are thrown. The delimiterTestByTypes() method is similar to our previous test, but we use the results of getScannerValueByType(...) for each record: Executing this code no longer throws any InputMismatchExceptions , but we still see some strange behavior: Once again, everything works fine until we get to the ‚ÄúBahamas, The‚Äù record. Just as before, since our delimiter pattern is merely [,\\n] , the Scanner has a difficult time handling records with more than two comma-separators. In fact, the best solution is not to rely on the delimiter setting at all, but to instead use a more complex RegEx pattern to match (and then extract) each value from each record. To accomplish this we have one last method, resultStreamTest() : Here we‚Äôre taking advantage of the new findAll(Pattern pattern) method added to the Scanner class in Java 9. This presents a much more modern programming pattern that allows us to chain functions, predicates, and other methods onto the iterable result of Stream<MatchResult> . In this case, we‚Äôre collecting all results into a List<MatchResult> , which we then iterate through in a for loop and extract each record‚Äôs value to be assigned to the relevant local variable and output. The majority of the work here is accomplished in the REGEX_PATTERN passed to scanner.findAll(...) : You can see the regex pattern in action on regexr.com , but the basic purpose is to ensure we‚Äôre capturing only three values from each line, and that we handle all unusual formatting and characters that are possible in the country name/first field, such as extra commas, quotation marks, parenthesis, and so forth. The final result is an accurate and clean extraction and log output of all our GDP data: The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices!", "date": "2018-02-02"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì ArrayStoreException", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/java-exception-handling-arraystoreexception", "abstract": "Making our way through our detailed Java Exception Handling series, today we‚Äôll be examining the ArrayStoreException . The ArrayStoreException is thrown when an attempt is made to add an object of the incorrect type to an array. Throughout this article we‚Äôll examine the ArrayStoreException in more detail, starting with where it resides in the overall Java Exception Hierarchy . We‚Äôll also look at some simple, functional sample code showing how Java array manipulation can potentially lead to ArrayStoreExceptions under certain circumstances. Let‚Äôs get right to it! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Exception java.lang.RuntimeException ArrayStoreException java.lang.Throwable java.lang.Exception java.lang.RuntimeException ArrayStoreException java.lang.Exception java.lang.RuntimeException ArrayStoreException java.lang.RuntimeException ArrayStoreException ArrayStoreException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Since ArrayStoreExceptions only occur when working with arrays in Java we‚Äôll jump right into our sample code and starting messing around with some array manipulation. Our basic helper function is insertIntoArray(Object object, Object[] array, int index) (and the companion signature method insertIntoArray(Object object, Object[] array) ): As you can see we‚Äôre performing very little logic within this method. In fact, it‚Äôs merely just a wrapper for attempting to insert the passed object into the passed Object[] array at the specified index . With our methods setup we can perform some basic tests, starting with trying to insert the String \"Hello world\" into a String[1] array: As you probably suspect, this works just fine and inserts our string and outputs the full array to the console: Alright, that‚Äôs all well and good, but let‚Äôs see what happens if we try a couple more tests, first by trying to insert an Integer and then a Book instance into a String[1] array: Both of these tests throw an ArrayStoreException at us, indicating that the passed object type ( Integer and Book , in this case) are incompatible with the type of the target array ( String ): The fundamental problem indicated by an ArrayStoreException is that Java is one of many strongly typed programming languages. There are slight variations between languages on how strong typing is implemented, but the basic concept is that source code will indicate an expected type of an object, and any future attempts to assign a value of a different or incompatible type to said object will result in an error. This can most readily be seen in Java by writing two lines of code: The Java compiler won‚Äôt even allow this code to be compiled and it will produce an incompatible types error, indicating that a java.lang.String cannot be converted to an int . Well, the ArrayStoreException is merely an extension of this strongly typed concept, and is a means of indicating that the underlying type of an array doesn‚Äôt match the type of the object attempting to be inserted. Alright, so we saw that we were unable to add Integer or Book objects into String[] arrays above, but that‚Äôs because neither Integer nor Book directly inherit from the String class. However, everything in Java inherits from the Object superclass, which means that we should be able to create an Object[] array and successfully insert any and all inherited objects (e.g. Integer or Book ) that we wish. We‚Äôll test this out with three more tests, this time trying to pass the same three types of objects into our new Object[1] array: Sure enough, since Object is the superclass of all other classes in Java, all three of our different object types were successfully added to the array and output to the console: The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices!", "date": "2019-10-08"},
{"website": "Airbrake", "title": "Kotlin: A Better Way to Java", "author": "Unknown", "link": "https://airbrake.io/blog/java/kotlin-a-better-way-to-java", "abstract": "If you haven‚Äôt been keeping up with new developments in the world of, well, Java development, then you may have overlooked the ground-breaking release of the Kotlin language version 1.0 in early 2016. Kotlin rethinks many of the syntaxes, shortcomings, and limitations of Java and pushes the boundaries for Java and Android application development. What makes Kotlin so good? For long-time (or even newcomer) Java developers, why should the leap be taken to learn and get into the Kotlin ecosystem? That‚Äôs exactly what we‚Äôll be exploring in this article; looking at some of the cool new features (and improvements over Java) that Kotlin brings to the table. Let‚Äôs have a look! One of the best things about Kotlin is how concise the syntax is. Generally speaking, Java has always been a rather verbose. It can take a lot of code to write simple, common structures in vanilla Java. Kotlin attempts to remedy this by providing a much cleaner and streamlined syntax. For example, here we have a Plain Old Java Object ( POJO ), written in Java, which represents a Person : Our Person class only has two properties ( age and name ), along with a single constructor, yet it requires around 25 lines and over 425 characters to create in normal Java. Now let‚Äôs look at the same Person POJO , written in Kotlin: That‚Äôs it. The same functionality can be had in Kotlin with a single line of code, using merely 49 characters. That‚Äôs approaching an order of magnitude difference between the two! This power stems primarily from the data class keyword, which essentially informs Kotlin that the class that follows will be a POJO , and thus, it should automatically infer some basic functionality. This includes generation of properties , getters and setters , equals() and toString() methods, and more! The word ‚Äúcomplex‚Äù is used loosely here, but let‚Äôs take a look at a slightly more involved class, and see how plain Java compares to Kotlin when we can‚Äôt rely on a basic data class / POJO implementation. Here we have the Book class, written in plain Java: The Book class has four properties, each with their own getters and setters. It also has a couple extra methods, such as toJsonString() . This class is beyond a simple POJO , so implementing it in Kotlin will be a bit trickier than our previous example. Let‚Äôs see what it looks like in Kotlin: This time the difference in line and character count isn‚Äôt so severe, but it‚Äôs still quite significant. The Book.java file clicks in at 183 lines and 4374 characters, while Book.kt is 114 lines and 2925 characters. Beyond the actual amount of code, let‚Äôs dig into the Kotlin version in a bit more detail and see what syntactically differentiates the two languages. The package , import , and class definition statements look similar, but the first immediate difference is in how properties are handled: As we can see, Kotlin allows for a lot of the standard functionality to be inferred from the code itself. Most properties, such as author and publishedAt , don‚Äôt need to explicitly specify their getter or setter methods. Kotlin handles that behind the scenes. However, it‚Äôs flexible enough to also allow inline getter and setter declaration, as seen in the pageCount property example, which requires a bit of extra logic for the setter method. Additionally, you may notice the use of var and val keywords throughout Kotlin. The var keyword indicates that the value is mutable (can be modified), while the val keyword is for immutable (unchangeable) values. Thus, we can see that properties like author and pageCount can be changed at runtime, whereas maximumPageCount is effectively a static final value. Kotlin doesn‚Äôt have static methods. Instead, it provides companion object , which can be used as static methods, but can also be expanded by doing things like implementing interfaces. The next difference we see in the Book.kt file is the constructor syntax: Kotlin makes it a bit easier to create constructors by simply using the constructor keyword, rather than explicitly using the name of the class every time. While we don‚Äôt use it here, Kotlin also provides two types of constructors: a primary constructor and secondary constructors . All the constructors seen in the Book.kt file above are secondary constructors , because they are explicit constructor() methods listed within the class block. A primary constructor , on the other hand, appears directly within the class header, following the declared name of the class. For example, here‚Äôs a Person class with a primary constructor that expects two arguments: We next get to some of the non-property methods of the Book class, which shows another different in Kotlin: Functions (and class methods) are declared using the fun keyword: We can also see the : String syntax used to indicate the return value type, as opposed to the preceding technique used in plain Java. In addition, as you may have already noticed, Kotlin provides semicolon inference , which basically allows Kotlin to assume or infer that a semicolon is meant to exist at the end of most lines (where a newline character appears). The last thing we‚Äôll look at for now is best illustrated in some test code used to actually create a new Book instance. Here‚Äôs our plain Java code used to create a new Book : And here‚Äôs the same in Kotlin: The first thing to notice is the use of the val keyword in place of explicit Book type declaration. This is because, like .NET and other languages, Kotlin is typically able to implicitly infer data types from the context. In addition, Kotlin doesn‚Äôt require the new keyword when instantiating a class object ‚Äî it simply knows a new instance is being created. Finally, take a look at the slight (but important) difference at the end of the GregorianCalendar(...) instance declaration, when converting it to a time value. Plain Java requires calling the getTime() method, while Kotlin, once again, infers that a reference to a property of an instance object, such as time , should point to the getter method by the same name. It knows that the time property refers to the getTime() getter method. Cool! We‚Äôre out of time for today, but we‚Äôve just scratched the surface of all the cool new features that Kotlin brings to Java development, so come back soon for future articles exploring all the rest of this juicy goodness! The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-09-15"},
{"website": "Airbrake", "title": "Gem updated 3.1.4. Asynchronous + Current User.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/ruby-gem-updated-to-3-1", "abstract": "We‚Äôve a few gem in the latest gem. The Airbrake Gem has just passed 500,000 downloads, making a grand total of over 1,295,000 downloads including the old hoptoad_notifier . If you‚Äôre still using the Hoptoad notifier‚Ä¶ this is the time to upgrade. Along with the normal bugfixes and issues . We‚Äôve two new features in this Gem. Asynchronous Notify Current User. Which user was affect by the error. When your user experiences error using your application, it gets sent to Airbrake server. This introduces a considerable latency in the response. Asynchronous notification sending deals with this problem. Airbrake uses girl_friday to achieve this . (thanks Mike) It‚Äôs disabled by default and you can enable it in your Airbrake configuration. Note that this feature is enabled with JRuby 1.6+, Rubinius 2.0+ and Ruby 1.9+. It does not support Ruby 1.8 because of its poor threading support. For implementing custom asynchronous notice delivery, send a block to config.async . It receives notice param. Pass it to Airbrake.sender.send_to_airbrake method to do actual delivery. In this way it‚Äôs possible to move Airbrake notification even in background worker(e.g. Resque or Sidekiq). Airbrake provides information about the current logged in user, so you could easily determine the user who experienced the error in your app. It uses current_user and current_member to identify the authenticated user, where current_user takes precendence. If you use different naming, please add the following lines to your controller: Voila! You‚Äôll get information about a duck that experienced crash about your app. 3.1.4 is currently available on RubyGems . View the Gem on Github . One Million is a Lot of Downloads: A History of Airbrake :: Airbrake says: February 22, 2013 at 8:59 pm [‚Ä¶] 7, 2012:We hit 500,000 downloads. It was a thrill at the time; little did we know we were to double that number in just five [‚Ä¶]", "date": "2012-09-07"},
{"website": "Airbrake", "title": "Airbrake Ruby Gem. 3.1.0.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-ruby-gem-3-1-0", "abstract": "Today, Sunday June 3rd, we‚Äôve completed a major update to our Gem. Upgrading to 3.1.0. We‚Äôve posted it on http://rubygems.org/gems/airbrake and have tagged the changes on the Airbrake Github repo . A full change log is below, but these are some highlights. A ‚Äújs_api_key‚Äù option has been added you can now declare additional api_key only for the javascript notifier. You can then enjoy how your javascript errors get reported to the other Airbrake project. You get a separation between backend and frontend errors. We‚Äôre not using regex match for filtering parameters You have to explicitly set the parameters you want to filter. Adding ‚Äúhidden‚Äù to filtered parameters caused all the parameters containing ‚Äúhidden‚Äù filtered. Lazy loading of ActionController methods Performance boost. Support for parameter filtering in rails > 3.0.0 Beta support for Heroku cedar Ignoring exceptions works in Sinatra and Rack We‚Äôre using unix style parameters for the deploy hooks More detailed error message, containing HTTP error fixed passing api_key param to Airbrake deploy task Fixed ‚Äúrescue_action_in_public_without_airbrake‚Äù for newer Rails versions Rails > 3.0.0 didn‚Äôt support adding this method to the controller, so user couldn‚Äôt add the code to the controller that would get executed when airbrake finishes it‚Äôs notification execution. This is fixed now, working the same as previous Rails versions. Ignoring user agents in rails > 3.0.0 works We‚Äôre catching errors that happen early in the rack stack now Using ruby 1.9.3-p194 by default (courtesy of RVM) Catch exceptions in newer Rails versions automatically and treat them like Rails exceptions Fixed the entire test suite. Now we‚Äôre sure it‚Äôs working for all rails versions from 2.3.14 to 3.2.3. Points to new API endpoint. http://api.airbrake.io Thanks to everyone for providing issues, submitting pull requests and helping maintain the Gem. undefined method `airbrake_request_data‚Äô for nil:NilClass :: Airbrake Status says: June 6, 2012 at 7:23 pm [‚Ä¶] Sunday June 3rd, we completed a major update to our Gem. Upgrading to 3.1.0. We‚Äôve posted it on http://blog.airbrake.io/notifier/airbrake-ruby-gem-3-1-0/¬†and have tagged the changes on the¬†Airbrake Github [‚Ä¶]", "date": "2012-06-03"},
{"website": "Airbrake", "title": "Scalaz Airbrake Scala Notifier", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/scalaz-airbrake-scala-notifier", "abstract": "We‚Äôre happy to cross post that StackMob has just shared it‚Äôs Scala client for Airbrake.¬†It is written in Scala using Scalaz IO and actors. Code found on GitHub here . @TaylorLeese spent some ¬†time enhancing Mike Singleton ‚Äôs Scala Airbrake client. I would recommend checking out Taylors blog post for two code snippets on how to use the¬†library. Highlighting Scalaz IO and Scalaz Actors. The Airbrake team will be in touch with Taylor Leese and Mike Singleton to send them an awesome Airbraker dev kit, as a small¬†gesture¬†for their sharing of two awesome notifiers.", "date": "2012-06-07"},
{"website": "Airbrake", "title": "Gem Bumped to 3.1.2", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/gem-bumped-to-3-1-2", "abstract": "We‚Äôve recently bumped our rails gem with the below fixes. https://rubygems.org/gems/airbrake .", "date": "2012-07-05"},
{"website": "Airbrake", "title": "Airbrake Gem 3.1.7", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-gem-3-1-7", "abstract": "Today we happy to announce our first Airbrake Ruby gem update of 2013. We‚Äôve pushed a ton of bug fixes, fixed tests and put a few cool features. If you would like to try our new JSON API, please send ben@airbrake.io an e-mail. Thank you to Adam Duke, Ben Arent, Cory Kaufman-Schofiled, Dmity Medvinksy, George Ogata, Hrvoje¬†≈†imiƒá, Joel Friedlaender, Jon Evans, Josh Goebel, Kyle Wilkinson, Manuel Meurer, Marko¬†≈†imiƒá,¬†Morgan Mikel McDaris,¬†Pedro Nascimento,¬†Ryan Souza &¬†cielavenir.", "date": "2013-01-28"},
{"website": "Airbrake", "title": "Airbrake to join the Rackspace Family", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-to-join-the-rackspace-family", "abstract": "As part of todays Exceptional acquisitions, we‚Äôre proud to announce our Airbrake will be joining the Rackspace family along with Exceptional. Exceptional could not be more excited to announce that we are joining Rackspace! Our team has tripled in size in the past year to keep up with demand for Exceptional‚Äôs products. But with over 30,000 active customers, we were surfing Nazar√© in barrel. Rackspace lives, breathes, eats and sleeps doesn‚Äôt sleep when it comes to delivering Fanatical Support‚Äìand leveraging our combined strengths is a win for us, Rackspace and you, our customers. We‚Äôve had the challenge‚Äìand also the good fortune‚Äìto be living in the crosshairs of many technology shifts: Our team has tackled big data and open cloud for the past few years. As we scaled we‚Äôve tried every programming language, database and host under the sun, but there has always been one host that has truly stood out: Rackspace, with its Fanatical Support and robust open cloud. Exceptional is delighted to announce its range of products has been acquired by Rackspace. Our products and our team are ecstatic be joining the Rackspace family. This acquisition gives us the chance to put rocket fuel behind our suite of developer tools. Exceptional has constantly focused on building tools for modern developers, with two error tracking products https://airbrake.io http://exceptional.io, uptime monitoring http://ranger.io and the operation of a database as a service product, RedisToGo http://redistogo.com . This post continues on the exceptional blog‚Ä¶ Got more questions? Check out our FAQ?", "date": "2013-03-28"},
{"website": "Airbrake", "title": "Learn about Continuous Delivery", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/learn-about-continuous-delivery", "abstract": "This Wednesday at 11am PT / 2pm ET , we‚Äôre co-hosting a webinar on continuous delivery with the Assembla team. Continuous Delivery is about delivering code continuously so you can gather feedback and innovate in real time. But you can‚Äôt get there all at once. We say: If you can take only one step today towards Continuous Delivery, it should be production monitoring. Production monitoring systems give you a real-time view of usage and errors in your system. Tools like Airbrake improve your response time by aggregating errors, so that you can see specific issues and respond in real-time. Real-time monitoring and response will give you the confidence and tools to release more frequently and move to Continuous Delivery. What is Continuous Delivery, and how can it produce faster feature releases, improved quality and higher customer satisfaction? How do Continuous Delivery and production monitoring fit together? How can you collect and use error data and feedback effectively? Can Continuous Delivery with production monitoring actually decrease developers‚Äô stress levels and increase stability? You can sign up for this free, 60-minute webinar here . Look forward to seeing you there! If you have any questions you‚Äôd like us to cover during the webinar, email justin@airbrake.io with feedback.", "date": "2013-05-21"},
{"website": "Airbrake", "title": "Airbrake Gem 3.1.12 with Rails 4 support.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-gem-3-1-12-with-rails-4-support", "abstract": "With Rails conf currently underway and Rail 4.0 getting increasing¬†interest, we‚Äôre excited to announce full Rails 4 (beta 1) support with our latest Airbrake gem, version 3.1.12. Download from http://rubygems.org/gems/airbrake Found a bug? Want a feature? Create an issue on Github.", "date": "2013-04-29"},
{"website": "Airbrake", "title": "Fine tuning Airbrake for Resque at Ticket Evolution.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/fine-tuning-airbrake-and-rake", "abstract": "Hi, my name is Spike Grobstein and I‚Äôm a Sr. DevOps Engineer at Ticket Evolution; since 2010, we‚Äôve been a SaaS provider that handles real-time execution, clearing and settlement of event ticket trades. If you ever purchased a ticket to a sports game online, or called a broker for seats to a concert, chances are our system was used somewhere in between. At Ticket Evolution, we have a lot of background processes that we need to keep track of. Be they Resque workers munching through hundreds of thousands of jobs or scheduled tasks being run throughcron, when companies are depending on your services to be accurate and available, silent failure is not an option. The biggest pain point for being notified about failure in our system was cron. Although all of our cron tasks are run through rake , we have a multitude of applications spread across servers and we need to know when they fail, what caused them to fail, what the state was when they failed, and what exactly failed. For this, we built a rake wrapper that I named timevault that will detect when a rake task fails by inspecting the exit code and notify us via the airbrake gem. Until now, we simply ran the rake tasks like so: This was fine for when we would need to see why something failed, but it didn‚Äôt let us know when it failed and didn‚Äôt give us a pretty interface for finding what went wrong. As everyone knows, grep ‚Äòing through logs is only pretty for a select few. Requirements for timevault ‚Äòs Airbrake notifications were the following: * Which rake task failed? * What was the exit code? * What was the output of the run? * What was the stack trace (the tasks should be run with --trace )? * Which environment failed (production, sandbox, staging)? An early version of this Ruby script did something along the lines of the following: timevault was designed to be called like so: So it would Dir.chdir to the project and run rake with the passed task name. This caused issues because each Airbrake notification would stand alone. Airbrake had no idea how to group the errors, there was no metadata in them, and the title of the error was the entire message from the exception. If we had a cron job that ran once a minute and failed every time, we‚Äôd be receiving 60 airbrake errors per hour. This would not stand. This is where we began to pick apart the airbrake gem to see how it ticks and to see what exactly we could get away with and force my caputured data into the Airbrake messages. Since the rake task was run with --trace , failure would mean that it would spit out a stack trace. We also have the rake task and project path on-hand, so once we parse the output, we should be able to properly report to Airbrake. After rummaging through the airbrake gem‚Äôs source and seeing which parameters we could set and a seemingly endless task of sending various types of contrived rake failures through this script, we came away with the following code in the rescue block: The hardest part was figuring out exactly what values should be put into which fields to get the desired result in the Airbrake dashboard and in notification emails. It wasn‚Äôt the most straight-forward task to decide to use environment_name over rack_env . Also, knowing exactly how each field translated to the fields on the dashboard required a bit of trial and error. There is still some work to be done on this, but this is where we‚Äôre at, now. When reporting errors, they‚Äôre tagged with the correct environment name, they have a well-formed backtrace, and the title and class of error directly correlates to which rake task it was that failed. Airbrake then groups similar errors as expected. Missing functionality includes lack of what the exit code was of the task (although we do have that as part of the output field) and we don‚Äôt yet notify Airbrake of our deployments to reset errors like we do with the applications themselves. On Airbrake, we have a project dedicated to Cron, but in the future, we plan on merging each individual job into the project that it belongs. Overall, this was a great learning experience into the internals of how Airbrake handles reported errors and it solved many of our issues, also greatly simplifying how we call rake tasks. This was a guest blog post by Spike Grobstein a Sr. DevOps Engineer at Ticket Evolution . If you would like to guest blog, please contact justin@airbrake.io", "date": "2013-05-30"},
{"website": "Airbrake", "title": "Airbrake Ruby Gem  3.1.5 and Airbrake-JS 0.3 Beta", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-ruby-gem-3-1-5-airbrake-js-0-3-beta", "abstract": "We‚Äôve two new updates to kick off 2014 a Airbrake gem, version 3.1.15 and an updated Airbrake-JS 0.3 Beta , which includes better source-map and more detailed error information. You can now use the JS snippet from the CDN. `https://ssljscdn.airbrake.io/0.3/airbrake.min.js` Download from http://rubygems.org/gems/airbrake", "date": "2014-01-14"},
{"website": "Airbrake", "title": "New: Airbrake 2015 UI Update", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-2015-ui-update", "abstract": "Today I‚Äôm excited to launch our ¬†updated UI. Our team is very proud to release this ¬†iteration and we think you‚Äôre going to love it too. The features are now live login and check them out. You can now search through your exceptions; quickly pinpoint the error you are looking for with this feature. Unlike Cats, we know you hate mice. You can now¬†quickly resolve your exceptions with our¬†first ever comprehensive Keyboard Navigation. Filter by Deploy, Host, Environment. Then apply a range of sorts to find important information previously hidden from within your exceptions. We put a lot of work into making this version of Airbrake lighting fast. Navigate through similar errors and our error list at a 5X speed. Login now, to explore it for yourself.", "date": "2015-04-16"},
{"website": "Airbrake", "title": "What Triggers an Error Notification?", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/what-triggers-an-error-notification", "abstract": "Something we‚Äôve noticed lately is some confusion about what actions lead to an error notification. This is important because certain errors do not count towards your rate limit. This limit is the number of errors Airbrake will catch per minute, and scales based on the plan you‚Äôre on. When a new error comes in, Airbrake reviews information about the error to determine whether it‚Äôs a new exception, or just another occurrence of a previous error. The factors Airbrake looks at to make this determination are below: The error class of the error The file in which the error occurred The line number at which the error occurred The action that was running when the error occurred The controller that the action is in The RAILS_ENV that was set when the error occurred We also explicitly do not send emails for the following errors, as they are far too common and would just become noise: ActiveRecord::RecordNotFound CGI::Session::CookieStore::TamperedWithCookie ActionController::InvalidAuthenticityToken ActionController::RoutingError ActionController::UnknownAction If you ‚Äúresolve‚Äù an error group from within the application, don‚Äôt worry ‚Äî if it comes in again, we‚Äôll ‚Äúunresolve‚Äù it, and send you another email to indicate that it‚Äôs been re-opened. This is part of the benefit and purpose behind the resolved feature. You should be able to remove from your immediate view anything you believe is dealt with, but have the confidence to know that you‚Äôll see it again if there are future problems. Have further questions we didn‚Äôt address with this post? Shoot me an email ‚Äì justin@airbrake.io.", "date": "2013-05-16"},
{"website": "Airbrake", "title": "Airbrake Now Integrates with Zapier (and a whole lot else)", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-now-integrates-with-zapier-and-a-whole-lot-else", "abstract": "One of our largest requests from customers is for integrations into their unique workflows. While we already have integrations with tools like Pivotal, GitHub, JIRA, Hipchat and Campfire, we‚Äôve gotten several requests for Airbrake to work in other tools like Asana, Sprint.ly or Leftronic. We‚Äôre happy to announce that with our new Zapier integration, all of the above are now possible! With our new Airbrake-Zapier integration , you can¬†post your Airbrake errors to any application so that you can easily fix any error from your application of choice. Check out some of the popular premade Zaps below. That‚Äôs just a few examples, but there are quite a few more examples of Airbrake integrations over in the service directory . If you want to use this integration there are just a few things to do. Go and get a Zapier account if you haven‚Äôt already. Connect your Airbrake account to Zapier Check out a few of the pre-made Airbrake Zaps Start creating your own A few potential ideas for other Zapier integrations are: Airbrake-Bitbucket integration Airbrake-Beanstalk integration Create errors as Asana tasks Create error-resolution tasks in AgileZen Show your errors on a dashboard like Datadog, Ducksboard, Leftronic or Geckoboard Create a KanbanTool card using information from Airbrake error reports Get notified of certain kinds of errors via integrations with OpsGenie or Pingdom Set up error resolution as a task in Sprintly Let us know what you come up with in the comments! For questions, email justin@airbrake.io. Airbrake Sprintly Integration! - Airbrake :: Airbrake says: June 13, 2013 at 12:07 am [‚Ä¶] a day of integrations! After our last integration with Zapier, Kevin Elliot from We Like Inc. has built a Sprintly integration for those customers that [‚Ä¶]", "date": "2013-06-11"},
{"website": "Airbrake", "title": "Airbrake Sprintly Integration!", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-sprintly-integration", "abstract": "It‚Äôs a day of integrations! After our last integration with Zapier, Kevin Elliot from We Like Inc . has built a Sprintly integration for those customers that don‚Äôt have Zapier and Airbrake. You can check out the integration here ‚Äì https://github.com/kevinelliott/airsprint-sinatra . The project allows you to¬†inject defects into Sprint.ly whenever your app generates exceptions via Airbrake.", "date": "2013-06-13"},
{"website": "Airbrake", "title": "Airbrake V3.0", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-v3-0", "abstract": "Today I‚Äôm ¬†happy to announce the release of Airbrake 3.0. This is a big release for the team and we‚Äôve made hundreds of commits to deliver an updated API, new UI and many other upgrades to Airbrake App. These are the first step to a new platform to deliver the best error reporting available today. The most obvious update is an update list view for Errors. The side navigation makes for easy navigation and this UI will be basis for our upcoming filtering and search features. This update completes a migration off our Heroku and AWS infrastructure to Rackspace. We‚Äôre seeing substantial performance increases over our previous infrastructure and will be sharing stats after we‚Äôve been running for a while. Migrating has been a pleasure and all Rackers have been fanatical and very helpful as we migrated over 1.6 billion files from S3 to Cloud Files and over 40 app servers. This release has complete support for V3 of our API . V3 supports JSON, multi-threaded backtraces, POST and increased performance over V2. We‚Äôll be adding more comprehensive documentation as this notifier API migrates out of beta. As we‚Äôve seen Rails apps use more frontend JavaScript and frameworks it‚Äôs become increasing important to offer more comprehsive error coverage built by Gh: duncanbeevers Using test-driven techniques I built a modular system for sanitizing and reporting errors to their in-development API. My solution delivered unique, cutting-edge features not found in any other client-side reporters including full Unicode and source-map support, enabling developers utilising modern JavaScript deployment techniques to receive context-rich reports from a huge range of browsers. The delivered solution focused on keeping page-load times to a minimum through non-blocking loading and an asynchronous API while still remaining lean and convenient. ‚Äî Find out more and review the source-code on Github airbrake-js Firstly, a big shout-out to you our customers. We‚Äôve had great feedback and you continue to push us to deliver the best error tracking service available. To our 6,000 Airbrake customer who‚Äôve been with us over 4 years, we look forward to another 4 more year with many exciting updates in-store. Lastly a big shout out to all the Devs who‚Äôve works over the past few months and over the last 24hrs to complete this update and migration. Gh:DvdPlm , Gh:ataber , Gh:vmihailenco , Gh:StuartChaney, Gh:jamland , Gh:Phumpal Gh:benarent , dribbble:itolmach , Gh:shime , Gh:shifi . Shout out to Morgan, Matt and Marko for providing 24hr support during our migration. Lastly to Justin who‚Äôs talked to hundred of customers and helped man our twitter, record bugs so we can get a quick turn around on any new issues. We‚Äôve an exciting roadmap for the rest of this year and 2014. We‚Äôre activity seeking developers to ¬†join the Exceptional and Airbrake team at Rackspaces SFO office. If your interested in a new challenge and have a passion for developer tools please email ben@airbrake.io Do you have specific feedback see a bug? Please send an email to support@airbrake.io and we‚Äôll fix it asap.", "date": "2013-09-25"},
{"website": "Airbrake", "title": "Catching Resque errors with Airbrake.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/catching-resque-errors-with-airbrake", "abstract": "Resque has been around for more than 3 years, but a little known feature is it‚Äôs integration with Airbrake. ¬†Previously referenced as Hoptoad in this post. To use it, put this code in an initializer, Rake task, or wherever: Once you‚Äôve configured resque to use the airbrake failure backend, you‚Äôll want to setup an initializer to configure the airbrake. For more information see https://github.com/airbrake/airbrake", "date": "2012-07-31"},
{"website": "Airbrake", "title": "JIRA 5 Integration", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/jira-5-integration", "abstract": "You can make JIRA issues from Airbrake errors viewable in your JIRA project! Click the Edit this Project button from your project‚Äôs info column on the left side of the page Select the Integrations Tab and select JIRA< Enter your JIRA server URL, username, password and project key. Also, make sure you enter correct context path. That one depends on which JIRA you‚Äôre using. Refer to the guidelines on the right for more info about that one. Select an error from the project you have integrated with JIRA and Click Send to JIRA Click the JIRA Issue Link You will be redirected to your JIRA project‚Äôs corresponding JIRA issue created from Airbrake Click the Airbrake Link to be brought back to airbrake Please leave comments and feedback below. Posted by Ben, built by Airbrake Team. Props to Herb for fully testing and debugging this integration.", "date": "2012-10-31"},
{"website": "Airbrake", "title": "Airbrake Command Line Interface", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-command-line-interface", "abstract": "We‚Äôve just extended the Airbrake Gem to run from the command line. This make it easier to debug, create projects, raise exceptions and set deployments from the CLI. You can use Airbrake from the command line, get the Airbrake Gem from Ruby Gems or from the Airbrake Repo . This will raise RuntimeError with the message I‚Äôve made a huge mistake by default. You can, of course, specify which exception class you want to raise. You can save your api key in the environment if you‚Äôre annoyed by passing it as an argument, just set the AIRBRAKE_API_KEY. You can also use ENV[‚ÄòAIRBRAKE_API_KEY‚Äô] in your airbrake config block: config/initializers/airbrake.rb Additionally, you can use this command line tool to list all your projects and find out corresponding ids and api-keys. Your AUTH_TOKEN is located by clicking the settings button when logged into Airbrake . To do this, execute the following command: If you need any additional help about this tool and how to use it, please refer to help: Please create a GitHub issue if you have any problems with the command. Send any feature requests to", "date": "2012-12-04"},
{"website": "Airbrake", "title": "Improved Search and Filtering", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/improved-search-and-filtering", "abstract": "We‚Äôre happy to announce that we‚Äôve launched a brand new way to filter your errors. We‚Äôve streamlined our filtering options to make it easier than ever to find the errors you‚Äôre looking for. We‚Äôve unified search and filtering into one easy-to-use search box. You can now switch between ‚ÄúResolved‚Äù and ‚ÄúUnresolved‚Äù errors, search, and filter all in one place. Start typing in the search box and see your results update in real-time. The default search box at the top of your error groups list supports text searches for: Error type Error message Filename Environment In addition to that, you can select advanced filter options to further narrow your results. These options are shown as suggestions beneath the search input and will autocomplete as you type. Environment: e.g. Production, Staging, QA, etc. Component: The controller the error occurred in Action: The controller method the error occurred in Deploy: Set up using Deployment Tracking Before: Shows all groups with last occurrence before a specific date After: Shows all groups with last occurrence after a specific date On: Shows all groups with last occurrence on a specific date As always, we would love to hear your feedback about this feature and any other features that you‚Äôd like to see in Airbrake. We have many more search improvements in the pipeline, so stay tuned for future updates! New to Airbrake? Start your 30-day free trial today and you‚Äôll be organizing and tracking all your application‚Äôs errors in just a few minutes.", "date": "2016-10-20"},
{"website": "Airbrake", "title": "Muting Error Notifications", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/muting-error-notifications", "abstract": "You know those errors you never get around to fixing? And then every time you deploy new code and auto-resolve errors , they pop back up again? And it overflows¬†your inbox (or Slack channel ), and you‚Äôre like ‚ÄúI know‚Ä¶I need to fix this‚Ä¶stop reminding me!!!‚Äù Sucks right? Well, good news. Now you can mute those errors and you‚Äôll never be notified again. Ever. Unless someone on your team un-mutes it. But thankfully, you can figure out who‚Äôs doing all this muting and un-muting in the activity feed . Then¬†you can tell them ‚Äúhey, knock it off! I‚Äôll get to that error later.‚Äù And you really can come back to it later, because even though it‚Äôs muted, it‚Äôll still show up in your error list, and all occurrences will still be captured. You‚Äôll still have all the information you need, you just won‚Äôt have us screaming in your ear to hurry up and fix it already. So now you can focus on the most critical errors, fix‚Äôem fast, and get back to building new stuff. Mute errors with a single click: Even better than clicking ‚Äì you can use our keyboard shortcuts . Just type the ‚Äòm‚Äô key to mute or unmute the selected error instantly. To see all our shortcuts, just type ‚Äòshift‚Äô +¬†‚Äò?‚Äô to get the full list. You‚Äôll see this handy-dandy icon so you‚Äôll know which errors are muted‚Ä¶ ‚Ä¶and thanks to the activity feed, you‚Äôll know¬†when, and by who (or is it whom?) We have a ton of other great features almost ready to launch. So stay tuned!", "date": "2017-01-16"},
{"website": "Airbrake", "title": "Airbrake NewRelic Addon.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-iron-io-newrelic", "abstract": "Iron.io has created a great new Airbrake agent for the New Relic platform. The agent grabs data from your Airbrake account and uploads it into New Relic. It does this on a continuous schedule so that you have up-to-the minute graphs and details on error data in New Relic without having to do a thing. The New Relic platform is a new offering from New Relic that lets third-party tools and services upload performance metrics into New Relic ‚Äì providing a sole dashboard for viewing application performance. Having performance information in a single place can be essential for identifying and resolving issues before they become critical. Plus you get New Relic world-class graphs and visualizations. The agent runs transparently on the Iron.io IronWorker platform so all you need to do is set up a free Iron.io account and enter New Relic and Airbrake credentials and, boom, you‚Äôre up and running. As you know, Airbrake is the top service for collecting errors generated by applications and aggregating the results for review. The Airbrake agent for New Relic tracks Open errors Resolved errors Project stats Environment stats How To Use the Airbrake Agent Using the Airbrake agent is simple. Just go to the Airbrake Agent plugin page on the New Relic site. You‚Äôll be prompted to create an Iron.io account and to enter your New Relic and Airbrake credentials. Once you hit ‚ÄúStart Agent‚Äù it will start uploading data from Airbrake to New Relic. It‚Äôs that simple. Iron.io has a free plan that provides 200 hours/mo of processing free ‚Äì an amount of time is more than sufficient for to power the Airbrake agent. Signup takes less than 30 seconds The Airbrake agent is a combination of a plugin code and automated processing. The plugin code accesses the Airbrake service and extracts relevant metrics. It runs as a regularly scheduled task within Iron.io‚Äôs IronWorker service. As a result, the uploading is done automatically without having to manage servers or worry about any of the processing. Plugin code runs on a continuous schedule within Iron.io ‚ÄúUsing Iron.io to upload Airbrake metrics into the New Relic Platform is a big win for us. Our users gain because they can get the Airbrake plugin running with very little effort. Our engineering team benefits because we don‚Äôt have to do anything to move and transform data on behalf of our thousands of users. Iron.io handles all of this effortlessly and will automatically scale to handle the workload.‚Äù ‚Äì @benarent , Product , Airbrake About the New Relic Platform The New Relic Platform is a new capability that lets third-parties upload event data into New Relic for enhanced performance monitoring for web, server, and mobile applications. Community members create New Relic Plugins that collect monitoring data from their technologies of choice and transfer that data to New Relic‚Äôs SaaS platform for processing, analysis, and persistent storage. Plugin data is presented to end-users through New Relic‚Äôs data visualizations and web-based user interface. Plugins can be published and shared with New Relic end-users or be kept private. End-users can install and use any published Plugin (or build their own) for free to add visibility into any technology component. Plugins complement New Relic‚Äôs native application performance monitoring capabilities by providing visibility into other technology components (such as databases, message queues, caching servers, routers, and others) that support applications. The New Relic Platform provides a single, unified platform and a consistent user interface for monitoring the entire application stack. Iron.io provices New Relic agent capabilities for its own IronMQ and IronWorker services and for a number of other third-party services including Twilio, Desk, Stripe, and Parse. New Relic agents powered by Iron.io If you‚Äôre a service provider, note that the IronWorker platform can be used to power agents for your services ‚Äì eliminating the need to addressing any scheduling and processing that might be involved. Iron.io can be used to power other agents To take advantage of the special offer for Iron.io users for New Relic Standard (free, forever instead of the normal price of $49/month/host), go to the New Relic site. New Relic Standard (Special Offer) To get the Airbrake Agent and the other Iron.io-powered plugins, head to the New Relic site (as well as click on the plugins tab in their dashboard). Airbrake Agent on New Relic To view the code for the Airbrake plugin, visit the repo on Githbub. Airbrake Plugin on GitHub", "date": "2013-10-22"},
{"website": "Airbrake", "title": "Enhanced Github Integration", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/create-projects-via-your-github-repos", "abstract": "Setting up Airbrake to monitor an app is simple. Just a couple lines of code and you‚Äôre off and running. But to really get the most out of it, you‚Äôll want to integrate with GitHub so you can track and fix issues. And of course you want to monitor all your apps so you don‚Äôt miss anything. Up until now, you‚Äôd have to create projects one-by-one, and then set-up your GitHub integration separately for each. No longer. Now when you authenticate with GitHub you can quickly create¬†multiple projects in just a few steps. You‚Äôll be monitoring your entire¬†stack in no time! Let me guide you through the process. First, click ‚Äú+ Create new project‚Äù from the top of the Project list dropdown. This will open the project modal where you‚Äôll now¬†see big ol‚Äô blue button for authorization with GitHub. If you‚Äôve previously authorized GitHub in your Airbrake account, we‚Äôll automatically fetch your repositories. If not, you will be redirected to GitHub so you can give access to Airbrake. Your repositories¬†will be sorted by org so you can quickly find the apps you want to monitor. Now just¬†select GitHub repositories that you want Airbrake to monitor. We‚Äôll auto-populate the repo language using info from GitHub (you can change it if you want), and use this to auto-generate GitHub issues in each¬†repo with language-specific installation instructions. Clicking ‚ÄúCreate projects‚Äù will¬†create the corresponding Airbrake projects, add our¬†GitHub integration to each, and create the Github¬†issues with installation instructions. These instructions will contain all relevant details such as project API key and project ID of created projects. So when you‚Äôre ready to start monitoring an¬†app, just copy/paste from the issue into¬†your code. That‚Äôs all there is to it! Once the projects are created, we‚Äôll show you useful links to¬†quickly jump to any created project, visit installation instructions on GitHub, or add other popular integrations to fit Airbrake into your workflow, like Slack or Trello . The goal is to make it as fast and simple as possible to monitor your full stack. Did you know we support almost every major programming language and framework ? And every Airbrake user¬†on the Growth plan or above gets unlimited projects. So you really can monitor all your apps and make sure your customers get the clean and consistent experience they deserve. No more excuses!", "date": "2017-02-01"},
{"website": "Airbrake", "title": "The new Airbrake Account Dashboard", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/monitor-all-your-apps-on-a-single-page-the-new-airbrake-account-dashboard", "abstract": "No more clicking from project to project to see where problems may be lurking. Airbrake‚Äôs new Account¬†Dashboard gives you a critical tool to¬†monitor errors across all your apps ‚Äì all on a single page. To view the Account¬†Dashboard, just select ‚ÄúAccount Dashboard‚Äù from the Projects dropdown On the new Account Dashboard, you‚Äôll get an overview of all of your projects‚Äô essential error statistics: The count of unresolved errors The date and time of¬†the most recent error Total error occurrences over the past 90 days, 90 hours and 90 minutes All columns are fully sortable, so you can quickly determine which projects need your attention. And the ‚Äú90 days / 90 hours / 90 minutes‚Äù toggle let‚Äôs you see what‚Äôs happening right now, or zoom out to get the broader historical view. Want to see which projects are running hot with lots of errors? Or make sure nothing went off the rails over the weekend? Or just get a quick overview for how your apps are looking? Done, done and done. Keep an eye out for more additions to the dashboard throughout the year. We‚Äôre already working on some¬†improvements, but would love your suggestions as well. So try it out and let us know what you think.", "date": "2017-02-09"},
{"website": "Airbrake", "title": "High Volume Warnings: Re-Notification Based on Occurrence Count", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/high-volume-warnings-re-notification-based-on-occurrence-count", "abstract": "High volume warnings trigger re-notifications based on an error‚Äôs occurrence count. When enabled, re-notifications will be triggered when an error‚Äôs occurrences reach 10k, 100k, 200k, 300k and every 100,000 occurrences thereafter. High volume warnings are useful for mission critical projects where being emailed only for the first occurrence and reoccurrences isn‚Äôt enough. High volume warnings re-ping you on on errors with increased occurrence counts. These errors can indicate bad deploys, database connectivity issues, 3rd party service outages, and more. The high volume warnings feature is available for all paid accounts. High volume warnings are configured from your user profile on a per project basis.¬†To learn more about high volume warnings, please visit our knowledge base article on what triggers a new email .", "date": "2017-08-16"},
{"website": "Airbrake", "title": "When Should You Hire a Junior Developer?", "author": "Unknown", "link": "https://airbrake.io/blog/devops/when-should-your-hire-a-junior-developer", "abstract": "Most companies prefer to hire experienced software developers ‚Äî people who require little training in order to do their jobs. Particularly in startups, even hiring someone at a lower salary doesn‚Äôt make sense if that person can‚Äôt pull their weight. Right now, there‚Äôs a heavy demand for developers that‚Äôs driving up the cost of hiring anyone with significant software development experience. Fully loaded costs (benefits, salary, training, setup) can often run $15-20k per month for each hire. Additionally, finding good people is hard. If you‚Äôre a talented senior developer, you basically have your pick of high-paying positions. Startups and small companies have to woo the talent they want in a highly competitive market. All of which makes junior developers an attractive option. Avi Flombaum wrote a great post about hiring junior vs senior people. One point he made is that most companies just don‚Äôt need the top engineers: If you‚Äôre trying to build a better search engine, or solve the world‚Äôs most complex data problems, you probably do need to recruit from the top 1%. Most companies, though, just need great leaders who can help their teams think through the difficult questions, and team members who are wiling to work together to implement creative solutions. The bottom line is that for most products, seeking out rockstar senior engineers is like hiring Picasso to paint your apartment . Instead, if you‚Äôre bootstrapping a product and having trouble recruiting, hiring a junior developer might make more sense ‚Äì if you can train them, that is. Every company has its own way of doing things, including standards that are crucial to follow. Getting an experienced developer to change her ways ‚Äî say, adopting new code review practices ‚Äî can be difficult. But when you get to train the developers who make up the core of your company‚Äôs software development team, you have the opportunity to indoctrinate them with the methods you use. You‚Äôll need to plan how to make effective use of any junior developers you hire from day one, as well as how to help them improve their skills. There are any number of ways to do so, depending on your team‚Äôs workflow. Contently, for instance, focuses on pair programming : every junior developer teams with a more senior developer. Pair programming is a key part of the company‚Äôs workflow beyond training junior developers. It increases their productivity and reduces the number of bugs they find. Finding a way to work with your junior developers should take into consideration how your workflow can logically adapt and benefit from new ideas and fresh eyes. There is, of course, a huge variation in who you might consider a junior developer: WebKite , for instance, hires people with no development experience at all for junior positions and trains them on the job. Of course, the team includes far more experienced programmers and has only a few of these very junior developers at a time. But Eric Silver, the founder of WebKitel, taught himself to program in order to launch his startup and has confidence in his ability to hire smart people, and their ability to learn. The key is looking for a problem-solving mindset, the type that can be turned to programming effectively. WebKite hired on a political science major who created macros for a project she needed to run in Excel ‚Äî and then realized that Excel was slowing down the process! She then rewrote her macros to skip Excel altogether. That sort of approach to an issue is a good indicator that a junior developer will be able to improve fairly quickly. When you hire a junior developer, you‚Äôre going to have to invest resources in her training. Hiring someone with minimal experience and sticking them in a tech support role or in some other capacity where they can‚Äôt learn is contrary to the whole concept of hiring a junior developer. Some of the best companies out there are investing in their people by sending them to developer bootcamps, conferences, and giving them personal time to work on hacking together personal projects. If you and your company aren‚Äôt in a position to bring a new developer up to speed, let alone teach the skills necessary to get a junior developer up to a hire level, then don‚Äôt invest your resources. Paying for a more experienced programmer makes sense. But if you are, you have the opportunity to train exactly the programmers you want to work with for a lower cost than you might think. Which is a massive win for your company. If you do hire a junior developer, you‚Äôll want to track any errors they might generate while learning on the job. Capture your exceptions with a free Airbrake trial ! The SaaS trap, when to hire a junior developer and more | Bootstrappist says: July 26, 2013 at 9:31 am [‚Ä¶] Operations: When should you hire a junior developer? [‚Ä¶] The recent subject, pt.16 | Fashion says: July 29, 2013 at 9:46 am [‚Ä¶] Read more‚Ä¶ [‚Ä¶]", "date": "2013-07-24"},
{"website": "Airbrake", "title": "Kaizen Model: What Is It And How Do You Use It?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/kaizen-model", "abstract": "Kaizen is the Japanese word for improvement . In the realm of software development life cycles, kaizen expands on the notions of continuous integration and continuous development with its core concept of continuous improvement . This applies to all aspects of the organization, including both the project and the employees themselves. Throughout this article we‚Äôll fully explore what the kaizen model is, how it is typically implemented in modern development life cycles, and the advantages or disadvantages of implementing a kaizen model in your own projects. Let‚Äôs jump right in! Some more specific takes on SDLC include: Long before software development and modern SDLC methodologies became a necessity, kaizen was used to improve standardized business practices. These practices initially sprung up throughout the Japanese business world after World War II, most notably as the fundamental component for Toyota Motor Corporation‚Äôs The Toyota Way managerial and production style. While a full exploration of The Toyota Way methodology is outside the scope of this article, that method is a great real-world example of the potential of kaizen , with its core principles derived from the following simple concepts: Long-Term Philosophy The Right Process Will Produce the Right Results Add Value to the Organization by Developing Your People Continuously Solving Root Problems Drives Organizational Learning These principles, which have helped bring Toyota great success over the years, illustrate the fundamental concepts of kaizen practices. The idea of continuous improvement through kaizen focuses on enacting change as quickly as possible. In most traditional implementations, this means workers are looking for minor ideas and improvements which can be implemented immediately, or within a relatively short timespan (ideally the same day). The goal is to humanize the workplace, while also teaching team members how to experiment and apply scientific methodology, in order to notice and eliminate waste throughout business processes. Jumping ahead to present day, let‚Äôs take a look at how kaizen practices have influenced and improved the software development life cycle, via the kaizen model . At the core, the kaizen model also emphasizes quality through continuous improvement . Developers (and other team members) are held accountable for the aspects of the application under their umbrella of responsibility. Moreover, rather than being held accountable by their superiors higher up the corporate ladder, the kaizen model emphasizes the importance of peer-to-peer accountability. Being accountable to the others you work with on a daily basis, who perform the same tasks and have similar responsibilities, is a far more powerful incentive than typical judgment from your superiors. This means that in practice, throughout the software development life cycle, the kaizen model constantly asks team members to evaluate their own work, and to help review that work of their peers. Fundamentally, this creates a culture of intelligent individuals working toward a common goal of continuous improvement ‚Äî a stark contrast to Waterfall-esque models, which often emphasize the importance and goals of a select few individuals during the initial phases of the development life cycle. When applied to a software development life cycle, the kaizen model is implemented in a few different ways, depending on the particular needs of your organization or project. Typical day-to-day approaches to the kaizen model involve the development team gathering on a regular basis (daily or once a week) to discuss a previously identified issue. Using input from everyone involved ‚Äî or, at least, those who wish to participate ‚Äî the team can gather ideas and potential solutions to resolve the issue at hand. It‚Äôs not necessary to perform special meetings explicitly for this purpose, but rather, these practices can (and should) be incorporated into already established meetings that the team is performing anyway. By contrast, a special event approach to the kaizen model emphasizes a bit more planning, in order to execute an improvement over the course of a few days (if necessary). This improvement should be implemented by the developer(s) who are most tightly linked to the component where the improvement is to be made, since those individuals are in the best position to make changes without introducing additional issues or bugs. In general, kaizen model practices emphasize the team, and invariably provide continuous improvement for that team as a whole. However, there is a subset of kaizen practices known as teian kaizen . Teian (or ÊèêÊ°à ) roughly translates to proposal in English. Therefore, the practice of teian kaizen is when, rather than focusing on the team, individual team members discover and propose improvements during their day-to-day activities. With this method, typically the proposer isn‚Äôt charged with applying said improvement, but once that improvement is noted and discussed around the team, it can be implemented in the best possible way. In the realm of kaizen , the process is the overarching business goal or value stream that your software aims to provide. Therefore, the entire software development life cycle ‚Äî from inception to production release and beyond ‚Äî is loosely considered to be the full process within the kaizen model . Kaizen techniques and practices are rarely applied directly to the process at large; instead, they are more commonly applied to sub-processes . A sub-process , as the name implies, is simply a child component of the process . In the case of software development, a sub-process might be anything from the database layer to the content delivery network to individual classes or methods . No matter what, when an improvement is suggested, it should be clearly applicable to one or more specific sub-processes. For example, imagine that you think of a way to improve the response time when a user makes a request for ‚ÄúLatest Posts‚Äù in your blogging application. When you make that suggestion to the team at the next meeting, the team should be able to specifically detail all the sub-processes that would be impacted (and thus may need to be changed) to see this improvement enacted (e.g. User class, Post class, database layer, etc). From there, individual team members best able to alter those sub-processes can help to see this improvement made in a timely manner. At the core, the kaizen model is based around a few fundamental principles, which should be very familiar to those who have used other Agile or LEAN models in the past. As it happens, many of these are also obvious advantages to using the kaizen model as a whole: Emphasizes Iterative Development : The kaizen model focuses on iteration and incremental improvement. Rather than planning far ahead and attempting to get everything right during that critical planning period, the kaizen model allows for rapid, incremental improvements to your software, so the project can appropriately adapt when something (invariably) goes wrong. Promotes Continuous Integration : By keeping all development work merged into one central location, all team members can better analyze and discover areas for further improvement. Reduces Waste : Through continuous improvements made multiple times a week, or even daily, the kaizen model tries to largely eliminate waste. Empowers Individuals : The fundamental practice of receiving and implementing improvements suggested by members of the team is a great motivator, not only by keeping team members pushing ahead, but as acknowledgement of everyone‚Äôs importance and relevance throughout the entire software development life cycle. Emphasizes Multi-Headed Decision Making : Since the majority of improvements and iterations made throughout the software development life cycle are discussed by the team as a whole, this leads to the majority of critical design decisions also being made by more than one person. While there is some potential for danger of having too many cooks in the development kitchen, if handled properly, this can be a large advantage, where every voice can introduce both problems and solutions for each component along the way. Since the kaizen model is so open-ended, and largely just a mentality shift rather than a specific step-by-step methodology, it can be difficult to pin down any specific disadvantages. Both positives and negatives largely come down to implementation. That said, the potential issues with using kaizen typically revolve around an organization‚Äôs (in)ability to adapt to the new paradigm, which empowers everyone on the team. Requires Open, Company-Wide Communication : Many organizations, particularly development studios who have been embroiled in waterfall methodologies for some time, may find it challenging to adapt to the open communication style of the kaizen model . Proper implementation of kaizen requires that the organization both allow (and embrace) the input and potential improvements coming from every individual across the team. Flattens Company Power Structures : While implementation of the kaizen model doesn‚Äôt directly require a change in authority or managerial structures, it does emphasize the need to reduce the importance of those dynamics throughout the team. Developers, and other team members, cannot be afraid of or intimidated by their superiors, otherwise potentially drastic improvements could be left by the wayside.", "date": "2017-03-20"},
{"website": "Airbrake", "title": "Getting even more context for errors & exceptions", "author": "Unknown", "link": "https://airbrake.io/blog/insight/more-context-for-errors-exceptions", "abstract": "Knowing that something has gone wrong is pretty valuable. Companies and software teams spend lots of time, energy, and other resources trying to find what has gone wrong and where the problem is. But as developers and QA engineers know, sometimes all you get is ‚Äúthe app crashed when I tried to click on a button.‚Äù It‚Äôs basically like getting this photo, with a complaint that the boat isn‚Äôt working. From this limited context, we can see the ship is old and rusty, with a lot of problem areas that could be fixed up ‚Äî but which one is the real problem? Getting the report of an app crash caused by a button might be enough information to start your own investigation, but it‚Äôd be far more helpful to have some more context. Which button? What was the user doing before clicking on the button? What other applications were running? Cellular, wifi, or no data connection? What other actions cause similar crashes or exceptions? There are many other pieces of information that help diagnose the root of the problem, each one adds a little more context and gets you closer to figuring out the real cause. There are two important types of context for software errors: information about the application environment and information about what the human being in the real world who was using the application. Information about the application environment is the kind of logging and filtering of data that a bug capturing tool like Airbrake provides. Back to our broken ship; let‚Äôs get a little more context: We now know that the ship isn‚Äôt working because it‚Äôs stuck on dry ground on a beach. It might even be possible to trace what course it took to get there, which navigation systems were running, and what impact that rusty areas may have had. Once Airbrake is part of your app, it captures errors and exceptions, so you know what was going on in the background when a problem crops up. With aggregation, you can also see when errors are coming up in certain browsers, certain users, or servers. You can see which parts of your app were running, backtrace to see everything that happened up to the point of the error, and in general get the nuts and bolts context of what‚Äôs going on. Using a crowd of human testers provides the other kind of context for really effective bug capture, tracking, and fixing. test IO ‚Äôs platform makes it possible to get real people checking over your app or website under real-world conditions. To compare it with our shipwreck, it means you zoom out again and see how people similar to your users interact with it. Did they expect the ship to be in the water? Do the rust spots make a difference at all? When you utilize the power of the crowd to do exploratory testing, human testers can provide you with much-needed context about the types of errors that surface in normal usage and even point out issues that don‚Äôt show up in capture tools like Airbrake because some issues are tied to user expectations, specific kinds of usage, and other assumptions people have when interacting with software products. By combining these two types of bug capturing, you get very different but equally helpful kinds of context for software development and fixing bugs. With the granularity provided by Airbrake, you can even pinpoint the exceptions discovered by testers and check the backtrace when you get their detailed bug reports. That means developers have the advantage of both a human-written document with screenshots or screencasts about the bug, as well as being able to see all the details of the application environment and backtrace in Airbrake for that particular bug report. In the end, it‚Äôs all about getting enough information to your development team to empower them to make the right decisions and work effectively. Both test IO and Airbrake are striving to make software development better, they both do it by showing as much of the big picture to developers as they can.", "date": "2016-04-28"},
{"website": "Airbrake", "title": "Easily import Logstash errors into Airbrake", "author": "Unknown", "link": "https://airbrake.io/blog/report/easily-import-logstash-errors-into-airbrake", "abstract": "In this blog post, we‚Äôre going to demonstrate a simple shell script we cooked up to extract errors from logs sitting in an Elasticsearch database and then send those errors to Airbrake. We‚Äôve been experimenting with options to show you what your errors would look like in¬†Airbrake. In this guide you‚Äôll be able to login and see a glimpse of what your monitoring would look like on Airbrake, without adding any code to your application or installing a Logstash plugin. The use cases we see for this are¬†situations where the code you want to monitor is hard to change. Maybe this code is¬†mission critical and the permissions are pretty¬†locked down. In other cases,¬†the approval process for new code could be quite¬†time consuming. There‚Äôs a number of situations where we see that¬†it‚Äôs more efficient to¬†look at your logs to figure out if things are¬†failing, and we‚Äôre investigating ways to enable this workflow within Airbrake. If you find this useful, and want continuous monitoring instead of this one-time glimpse, we definitely suggest¬†you¬†integrate one of the many¬†client libraries we have available. Check out all of our supported languages here: https://airbrake.io/languages Ok! Let‚Äôs get started. First we‚Äôre going to setup a new project in airbrake. From your settings page, click ‚ÄúCreate New Project‚Äù in the top right, and follow the instructions in the window to create a new project: Now we want to write down a few things for later use in our shell script. We‚Äôll navigate to the project settings and write down our ‚ÄúProject Key‚Äù and ‚ÄúProject Id‚Äù. Now we‚Äôre going to go and retrieve the Elasticsearch query we‚Äôre going to use to extract your errors. This is going to be different depending on how you view and log your errors, so you‚Äôll need to play with this until you can find a query that accurately describes everything¬†you‚Äôd want to be monitored by Airbrake. Internally, we use Kibana 3 to view our logs and our¬†backend errors are logged to a specific file, so for us, this process looks like this: Once you create a query that only shows your errors, we want to save the JSON of this query to a local file called ‚ÄúqueryData.json‚Äù. In Kibana 3,¬†there‚Äôs a little ‚Äúi‚Äù button that allows you to see a curl request for the current page‚Äôs data. We‚Äôre going to copy the ‚Äúquery‚Äù field of the¬†JSON in this curl call and save that to a file called ‚ÄúqueryData.json‚Äù: Now we‚Äôre going to download a shell script that will put it all together and send our errors to airbrake. This script was written on an OSX machine, so windows users will need to install cygwin or some equivalent to run this locally. On other systems, see https://github.com/stedolan/jq/wiki/Installation Depending on your default permissions, you may also need to make sure the¬†shell script you just downloaded is executable. You can do this by running: Now we can run it! You will be prompted to input your elasticsearch credentials, elasticsearch domain, your airbrake project key, and airbrake project id. You should see output‚Ä¶. Now go to the airbrake interface and you should see your errors! During this process we didn‚Äôt touch¬†a single line of your code, and now you¬†can see your errors shown inside Airbrake. With this in hand we hope you explore the interface and see how great life is when error monitoring has your back. This is a bit of an experiment for us at Airbrake, and if we see people find it useful, we‚Äôd love to streamline it even more. If you enjoy using Airbrake, the next steps¬†would be to properly integrate one of our many client libraries to get continuous monitoring and notifications from Airbrake. Installation and docs can be found¬†here: https://airbrake.io/docs/ . If you don‚Äôt yet have an Airbrake account, you can create¬†a free basic account here: https://airbrake.io/new .", "date": "2017-03-28"},
{"website": "Airbrake", "title": "Meet Breadcrumbs", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/meet-breadcrumbs", "abstract": "Ready for more helpful information about your app‚Äôs JavaScript errors? Meet our newest, tastiest feature ‚Äì Breadcrumbs. Breadcrumbs are¬†a snapshot of events that lead up to a specific error occurrence. Things like web requests, user interactions like clicks or keyboard presses, and navigation updates are all recorded and organized in a timeline so you can understand what actually¬†happened when things broke. Having this detailed play-by-play¬†information about the environment where the error occurred is an invaluable tool for¬†debugging and¬†replicating bugs quickly. Breadcrumbs are sent¬†automatically, and appear in the ‚ÄúOccurrences‚Äù tab for an error group. So¬†if you‚Äôre using our JavaScript notifier , there‚Äôs no extra setup needed. Just make sure that you‚Äôre using the latest version of airbrake-js ( 0.8.6 as of this writing) and you‚Äôre all set. Breadcrumbs for JavaScript now automatically captures events like: Log events with severity User events like clicks and keypresses XMLHttpRequests like POST and GET events DOMContentLoaded events Errors in loading page elements or scripts Navigation from page to page Window fully loaded events We hope Breadcrumbs helps you replicate bugs fast so you can fix them quicker. We want to make Airbrake as useful as possible for you so let us know if you have any feature ideas or feedback. We‚Äôd love to hear it!", "date": "2017-04-26"},
{"website": "Airbrake", "title": "Tracking iOS errors with Airbrake iOS notifier v3.0.", "author": "Unknown", "link": "https://airbrake.io/blog/ios/tracking-ios-errors-with-airbrake-ios-notifier-v3-0", "abstract": "In October of 2011 we bumped the Airbrake notifier for iOS and Mac to version 3.0. This near-complete rewrite of the product fixed a lot of known issues, reduced the number of dependencies, made it easier to install, and simplified the way in which developers interact with it. Since then we have been taking a lot of user feedback as well as contributions to the open source project found on github to fine tune its performance and give developers more control over its behavior. The most significant change in recent months is the ability to control whether the notifier alerts users before posting crash reports. We got a lot of feedback about our requirement to notify users before data leaves the device and learned that a lot of apps wanted to handle this differently. Developers can now decide when and how their users are alerted about crash reports ‚Äî if at all. The other big change we made is the ability to decide which crash handlers are installed by the notifier. We realize that some apps may use different crash reporting mechanisms or even only want to log caught exceptions. The only way to perform that task in the past was to fork the project and make changes. Now it is as easy as passing a flag into the notifier. With these changes your code might look something like this: Note that while that is quite a mouth full we have been careful to preserve shorter methods for those who want to rely on the default functionality that the notifier provides. We are always looking for ways to enhance the functionality of the notifier and the open source nature of the project is a big part of that. So if you have a great idea you are welcome to start a conversation about new features or fix a bug, don‚Äôt hesitate to contact us! ‚Äì Caleb Davenport", "date": "2012-04-10"},
{"website": "Airbrake", "title": "Deploy via API, now with user field.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/deploy-via-api-now-with-user-field", "abstract": "We‚Äôve recently updated the response of our list of ‚Äòdeploys via API‚Äô to add user.¬†¬†There is an additional field ‚Äòlocal-username‚Äô. ¬†Visit our Help site to find out how to setup deploy tracking . We‚Äôve ¬†made it easier to view your API XML response. Just log into your settings, and the links are next to the Auth_Token.", "date": "2012-01-04"},
{"website": "Airbrake", "title": "Get more flexibility with monthly error quotas", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/get-more-flexibility-with-monthly-error-quotas", "abstract": "By popular demand, Airbrake is introducing a new set of plans based on monthly error quotas. Here‚Äôs why: User feedback First and foremost, customers have repeatedly asked for it. A lot. They‚Äôve said that per-minute rate limits are tough to plan around, and force them to make a difficult choice between capturing error spikes or keeping costs reasonable. Freedom and flexibility No two teams are alike. What‚Äôs important to you might be different than other teams. Monthly quotas ensures Airbrake error monitoring meets your specific needs. Don‚Äôt want to miss out on any errors if there‚Äôs a traffic spike? You can collect every error without worrying about rate limits. Is collecting every error occurrence not critical? ¬†We offer an optional configurable rate limit to ensure you can spread your quota more evenly through the month. Simpler to understand Most people can estimate how many errors they‚Äôll send in a given month. Knowing how many you‚Äôll send minute by minute (including outliers) is much harder. Now, users will no longer have to guess the maximum error rate they‚Äôll need, and instead can pick a plan based on their actual needs. Fairness You‚Äôll no longer have to pay extra ‚Äújust in case‚Äù. Accounts that send less errors pay less vs. those that send a lot. ¬†If you have low usage for a week, but then a release goes haywire, you can use your quota to capture all those errors. With rate limiting, you‚Äôd have paid for a high rate limit you never needed when it was calm (which, hopefully, is most of the time), and then lost errors when things got crazy. Oh and by the way‚Ä¶ all new plans come with unlimited projects and, for Startup and above, unlimited users . You can check out our new plans on our pricing page , or current customers can view their plans page for more details. Get in touch with us at support@airbrake.io if you have any questions.", "date": "2018-01-22"},
{"website": "Airbrake", "title": "Airbrake speaks the universal language of developers", "author": "Unknown", "link": "https://airbrake.io/blog/insight/airbrake-speaks-the-universal-language-of-developers", "abstract": "Here at Airbrake, we use Intercom.io for our customer engagement, and one of their fun features allows you to create a map of all your active customers. Never heard of it? Here‚Äôs a quick description from the Intercom blog . We knew that great engineering teams from all over the world use Airbrake, but even we were surprised at just how global our users are. Check out some of these facts about Airbrake users: Engineers from over 4,300 cities and over 100 countries ! Over 100 users from throughout Africa , and hundreds in South America Users in all 50 United States and all 10 Canadian Provinces OK, that‚Äôs interesting I guess. But so what? Knowing that our customer base spans so many geographic and cultural boundaries, it‚Äôs our goal to make sure Airbrake is not only powerful, but also incredibly simple to use . No matter where you live or what language you speak (or write code in), Airbrake is designed to help you identify and troubleshoot errors faster, so you can write better code. Never tried Airbrake? Start your 30-day free trial today and you‚Äôll be organizing and tracking all your application‚Äôs errors in just a few minutes.", "date": "2015-12-15"},
{"website": "Airbrake", "title": "New: aggregated error data", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/new-aggregated-error-data", "abstract": "During the last 6 months, we‚Äôve been collecting lots of feedback from Airbrake users, and we‚Äôve been listening! We‚Äôre excited to announce the release of the most requested feature, aggregated error reports, or ‚Äòaggregations‚Äô for short. At a glance, aggregations can show you: Exactly which users have been affected by an error. Do you want to contact affected users, or see how widespread the error was? Which browsers experienced the error. Was this error browser-specific, or limited to bots? Which servers experienced the error. Did a deployment go awry? The URLs the error occurred on. How can I replicate this? Notifier remote address, versions and much more! Airbrake is committed to providing excellent error tracking, we deliver the tools you need to debug and fix your errors, fast . Aggregations are live, now! Hop over to your Airbrake dashboard and check it out. We welcome any feedback, please send your thoughts to support@airbrake.io. New to Airbrake? Start your 30-day free trial today and you‚Äôll be organising and tracking all your application‚Äôs errors in just a few minutes.", "date": "2016-03-01"},
{"website": "Airbrake", "title": "Three Tips To Help You Optimize Your Airbrake", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/top-three-airbrake-tips", "abstract": "Simply installing Airbrake will provide plenty of value to you and your dev team. However, if you follow these tips (each of which takes just a few minutes, if that, to complete) you‚Äôll see why more than 50,000 users consider Airbrake a crucial part of their dev workflow.", "date": "2017-07-28"},
{"website": "Airbrake", "title": "Airbrake Ruby Gem bumped to 3.0.6.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-ruby-gem-bumped-to-3-0-6", "abstract": "Last night we bumped our gem up to version 3.0.6. We‚Äôve addressed a few lingering issues from 3.0.5. For a complete overview please see the changelog below. The Gem has already been published on RubyGems.org . Many thanks to everyone below for their contributions. Want to help out? Fork Airbrake , we accept pull requests or raise an Issue . See the Changelog on Github Thanks for all the contributions.", "date": "2011-12-07"},
{"website": "Airbrake", "title": "Airbrake's New Ruby Notifier", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/our-new-ruby-notifier", "abstract": "We are excited¬†to announce the¬†new major release of our Ruby notifier library for Airbrake Bug Tracker! It was as clear as day that the gem needed a major update. The code was hard to maintain, the issue tracker had too many unresolved issues, and¬†some important pull requests couldn‚Äôt be easily merged because they diverged from the master branch. While these problems could¬†be fixed in a minor release, we also wanted to improve our library API, simplify the configuration process, and add missing integrations. The new Airbrake gem (v5)¬†is a complete rewrite from scratch. Moreover, it consists of two parts! We have¬†split the library into airbrake and airbrake-ruby . This was not an easy decision, but we‚Äôre happy with¬†the¬†outcome. The airbrake gem reports exceptions for¬†Rails and other third-party Ruby libraries and frameworks, while the airbrake-ruby gem performs all the heavy-lifting like sending, filtering and truncating exceptions. This allowed us to design a clearer¬†API and simplify testing. If you are using any frameworks or libraries like Rails or Sidekiq, it‚Äôs better to use airbrake (which depends on airbrake-ruby ).¬†For pure Ruby projects all you need is airbrake-ruby. We have created airbrake-ruby to have zero dependencies, so gem install airbrake and require ‚Äòairbrake‚Äô are faster than ever.¬†As for sending exceptions asynchronously , we‚Äôve implemented our own¬†solution¬†independent of any third-party libraries, which even supports multiple workers. We also started benchmarking the gem‚Äôs¬†code (Figure 3). This helped us write faster code, so the overhead of including the library in your application is as minimal as possible. Fig. 3 ‚Äî Benchmarking¬†async notify with multiple workers ( source code ) One of the hottest new features is the support for multiple notifiers in the¬†same application/process. This is beneficial for users who want to send exceptions from different subsystems of the same application to multiple Airbrake projects (Figure 4). You are no longer limited to only one Airbrake.configure per application. Instead, you¬†can configure as many notifiers as you want. Fig. 4 ‚Äî Configuring multiple notifiers Other prominent changes include: Improved JRuby support (we can send Java exceptions now) Support for nested exceptions (a new¬†dashboard is coming soon, which will show these nested exceptions hierarchically. For now they‚Äôll display separately) The Airbrake.add_filter API allows you to filter or attach data to your exceptions Simplified configuration process (no more complex or obscure options) Better Rails support (we now capture even more exceptions) New integrations with ActiveJob and DelayedJob First of all, don‚Äôt worry, you don‚Äôt have to migrate immediately. The good news is that we still support Airbrake v4 ! We still accept pull requests with bug fixes, but it is feature-frozen. Please use our migration guide to help you with the upgrade to v5. Also, bear in mind that we dropped support for ancient versions of Rubies and Rails so we can focus on ensuring a great user experience for the most common versions. Figure 3 shows officially supported Rubies and Rails. Our YARD API documentation and README extensively describes the new library, so migration should be like a snap. The wiki is deprecated and should be used only if you still work with Airbrake v4. Email support@airbrake.io if you have any trouble upgrading. While we‚Äôre happy about the progress made on the airbrake gem, it‚Äôs by no means the final version.¬†We plan to update the error dashboard to properly display nested exceptions. There‚Äôs also a great demand for exceptions with attached snippets of code at each backtrace frame. This is a top priority on our airbrake gem roadmap. We encourage you¬†to try out the new library. Sign up to start capturing exceptions in your Ruby apps now! Get in touch if you have any¬†questions, problems, feature ideas, or bug reports, we look forward to hearing from you! file an issue¬†( airbrake repo for integration problems; airbrake-ruby for anything else) send us an email tweet at us chat with us (visit airbrake.io and click on the round orange button in the bottom right corner) New to Airbrake? Start your 30-day free trial today and you‚Äôll be organizing and tracking all your application‚Äôs errors in just a few minutes.", "date": "2015-12-18"},
{"website": "Airbrake", "title": "Capture Go errors with Airbrake", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/capturing-golang-errors", "abstract": "Recently, an increasing number of people have been asking how we use Airbrake to track errors from our Go services. The Go language is seeing a huge growth in popularity , and it‚Äôs no surprise to the Airbrake team who have been using (and loving!) Go since before 1.0. We offer 2 very easy ways to send Go errors to Airbrake: Sending Go errors to Airbrake is incredibly simple using our gobrake library. At Airbrake, we‚Äôre fans of the Google glog library, providing simple, levelled logging. So much so, that we built our own glog fork which uses gobrake to seamlessly send error logs to Airbrake. Having Airbrake error reporting built into our logging is incredibly simple, and elegant: We‚Äôve been capturing production errors with gobrake since 2012, and glog since 2013. These libraries are mature, and have been heavily battle tested! The best part is they are incredibly easy to integrate with your application. Check out the gobrake & glog READMEs, and take them for a spin! I promise you‚Äôll be capturing Go errors in Airbrake in no time! New to Airbrake? Start your 30-day free trial today and you‚Äôll be organizing and tracking all your application‚Äôs errors in just a few minutes.", "date": "2016-02-03"},
{"website": "Airbrake", "title": "Get Unlimited Projects for your Airbrake Account", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/get-unlimited-projects-for-your-airbrake-account", "abstract": "Your software stack likely includes multiple apps/projects/repos, maybe written in multiple languages . A failure in any one can affect the others. So it just makes sense to monitor errors across your entire stack. Right? Well right now for a limited time, you can get unlimited projects ‚Äì for life ‚Äì when you sign-up for a Growth, Business, or Enterprise plan. Already on one of these plans? Don‚Äôt worry, you now have unlimited projects for life! Don‚Äôt think you need more projects? There might be more reasons than you think: Interdependency . When one app fails, other parts of code can be affected. And that means your customers are affected. That‚Äôs bad. By monitoring all your apps, you can get alerted to ANY errors that happen ANYWHERE in your stack. So you can fix problems fast. Proof of Concepts . When you‚Äôre constantly innovating, you try lots of new things. Some of those POCs¬†find their way into Staging or, gulp, Production. Monitoring these POCs for errors gives you piece of mind, and allows you to be fast without being reckless. Flexibility . ¬†Want to monitor different regions or configurations separately? Want different notification settings for Production vs. Development?¬†With unlimited projects, there‚Äôs no limit to how granular you can get (if you‚Äôre into that sort of thing) Bonus : we‚Äôre currently working on a cross-project dashboard. Soon you‚Äôll be able to see error trends across your entire stack, and how deployments affect each project. The more projects you‚Äôre monitoring, the more complete and valuable this dashboard will be. ¬†Look for this to go live later this year. This offer is good through June 30, just upgrade from your account settings . Or if you‚Äôre new to Airbrake, you can sign-up here", "date": "2016-06-08"},
{"website": "Airbrake", "title": "The Airbrake v4 Ruby gem deprecation announcement", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/the-airbrake-v4-ruby-gem-deprecation-announcement", "abstract": "On November 24, we will stop supporting the Airbrake v4 Ruby gem, so we can focus our efforts on v5. Read & discuss on GitHub: https://github.com/airbrake/airbrake/issues/596", "date": "2016-08-26"},
{"website": "Airbrake", "title": "Airbrake Docs Relaunch", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-document-refresh", "abstract": "This summer we relaunched and refreshed the Airbrake docs . The docs were moved in-house, open-sourced on GitHub , given a style overhaul, and are now available at airbrake.io/docs . We hope the new docs provide you with a cohesive and enjoyable experience, helping you become an expert Airbraker one doc at a time. The docs are home to a wealth of Airbrake information including: Installing Airbrake in your project Integrating Airbrake with other services Deploy tracking Frequently asked questions and much more! We used the relaunch as an opportunity to vet each doc, keeping our eyes open for chances to improve readability, update screenshots/images, and make sure content is organized into logical sections. We automatically build and deploy airbrake-docs as a static site to our CDN. This strategy is low cost and reduces the possible problems related to managing airbrake-docs. There are no server processes to keep running and the docs are distributed globally. Providing feedback on docs has never been easier. You can provide public feedback via GitHub issues, submit a pull request , provide private feedback anonymously via Temper, or just email us . The Airbrake docs are based on the open-source circleci-docs project on GitHub. CircleCI provides with free testing, building, and deployments for public repositories. Since airbrake-docs is a public repository, we use CircleCI to build and deploy the docs.", "date": "2016-08-29"},
{"website": "Airbrake", "title": "Airbrake dashboard: visual refresh", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-dashboard-visual-refresh", "abstract": "At Airbrake, we constantly strive to improve our product to offer the very best. Today, we‚Äôve refreshed the dashboard, improving how you view and navigate errors. It was obvious that our old dashboard felt dated and needed a retouch. We didn‚Äôt want to throw everything at once, so you could have more time to adjust to the changes.¬†First preparatory step that we‚Äôve made prior to launching the new look¬†was using system fonts instead of our custom one. This change made the dashboard much faster to load, and improved mobile users experience. Next, we‚Äôve made some visual changes to the look of our buttons, so they are now unified with the rest of Airbrake. Finally, we are ready to publish the biggest change, which touches almost every aspect of the dashboard. Let me briefly guide you through the changes. After we added Aggregations , we felt the tab view had become a little cluttered. We‚Äôve fixed this by moving Backtrace, Params & Context into the Occurrences tab. This greatly improves the mobile experience; users no longer need to scroll horizontally to be able to access the tab they want. Four tabs fit on all modern mobile screens. Previously, the occurrences tab was a simple table¬†showing all occurrences in the same error group. Now, it has drastically changed. First of all, the table¬†was moved to another view accessible via the ‚ÄúView Occurrence List‚Äù link.¬†Next, global notices pager was moved under the Occurrences tab. The tab itself¬†displays more granular data such as brief error details, backtrace, context & parameters. Similar functionality was available in the previous design, but it was hard to observe differences between each notice because you needed to go to a separate tab every time. Now, everything you need is in the same view. The table was also improved. Every entry has additional columns such as ‚Äúhostname‚Äù and ‚Äúremote address‚Äù. Additionally, you can open an occurrence¬†by clicking on the entry ID.¬†Finding the table pager is easier now as well, since¬†we¬†moved it from the bottom to the top. The tabs are now linkable. It means that you no longer have to explain to your colleagues which tab you need to click to read certain piece of information. Just link straight to¬†the tab you want. Previously, aggregation tables were sortable only in one direction. Now, you can sort them in both directions (ascending & descending). All Airbrake graphs are now scalable. Previously, if you resized your browser, you needed to fully refresh the dashboard to redraw the graphs. Now, the graphs will adjust automatically to the width of your browser window. Apart from graphs, we‚Äôve made many other minor¬†tweaks to improve responsiveness of our dashboard for both, desktop and mobile users. Our dashboard can¬†be used on every modern device that you have. We‚Äôre excited to ship this retouch and we would love to hear your¬†feedback. Contact us via our email support@airbrake.io to let us know what you think about it.", "date": "2016-09-07"},
{"website": "Airbrake", "title": "Mobile optimized Airbrake", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/mobile-optimized-airbrake", "abstract": "You can now get¬†all the same Airbrake functionality of our desktop web app in that tiny computer you have in your pocket ‚Äì your Airbrake error dashboard and web app are¬†now fully optimized for mobile browsers. This means that all the error monitoring features you regularly use on your desktop browser are available to you wherever you have¬†your smartphone. Using our mobile web app means you‚Äôll get new features and improvements right when they‚Äôre released on our desktop web app. This results in a more cohesive and up-to-date experience between desktop and mobile. Because our mobile-optimized web app has surpassed our native iOS and Android apps in features and experience, it replaces our native apps. Support for the iOS and Android native apps will end on October 2nd, 2017 . With our mobile web app, you‚Äôll get access to new features like: Breadcrumbs ‚Äì get a useful timeline of events that led up to an error to help you replicate bugs fast. Account dashboard ‚Äì monitor¬†the health of all your account‚Äôs projects from one unified dashboard. GitHub logins ‚Äì use your GitHub account to log in to Airbrake allowing you to use security features like two factor authentication. Deploys dashboard ‚Äì gain insight into the impact of your code changes by tracking the error impact of your project‚Äôs deploys. For the best mobile experience, you can even add Airbrake to your smartphone‚Äôs home screen. Check out the simple steps over on our help docs site . Have any questions about the new and improved mobile-tastic Airbrake web app? Just let us know at support@airbrake.io .", "date": "2017-07-06"},
{"website": "Airbrake", "title": "Create Github Issues from Airbrake.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/create-github-issues-from-airbrake", "abstract": "Today we‚Äôre happy to announce Github Issue integration. ¬†Everyone will see this little button on the Error ¬†Summary page. ¬†Letting you send exceptions to Github Issues with one click. This is version 0.1, and we welcome feedback on the integration in this Thread. To set up Github integration you‚Äôll need to add the Repo URL in the project settings. The Github Issue linked to on the exception summary page. The Octocat is a¬†registered¬†trademark of Github.. we made it out love for the service. GITHUB¬Æ, the GITHUB¬Æ logo design, OCTOCAT¬Æ and the OCTOCAT¬Æ logo design are exclusive trademarks registered in the United States by GitHub, Inc. The OCTOCAT¬Æ design is the exclusive property of GitHub, Inc and has been federally registered with the United States Copyright Office. All rights reserved. No adaptation or use of any kind of any of our registered trademarks or copyrights, or any other contents of this website, is allowed without the express written permission of GitHub, Inc. Airbrake frontend migration to Heroku. :: Airbrake says: May 18, 2012 at 12:04 am [‚Ä¶] make faster progress on our frontend. Giving us the ability to do things like WebHooks (in beta), GitHub Integration, Commenting, Better Debugging (Simulate Error) and more‚Ä¶ (these all came to Airbrake in [‚Ä¶]", "date": "2012-05-14"},
{"website": "Airbrake", "title": "TLS 1.0 and 1.1 Deprecation", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/tls-1-0-and-1-1-deprecation", "abstract": "As part of our commitment to maintain a trusted platform and promote the safety of your data we have begun the process of deprecating TLS 1.0 and 1.1. The PCI Security Standards Council updated their guidance and will now require full deprecation of TLS 1.0 on June 30th, 2018. As of this writing Airbrake customer traffic breakdown per protocol TLS 1.2 ‚Äì 80.43% TLS 1.1 ‚Äì 0.22% TLS 1.0 ‚Äì 19.35% Thus far¬†we have deprecated support for SSLv3 in 2014 transitioned webhook integrations to enforce TLS 1.2 on October 3, 2016 Our timeline for deprecating TLS 1.0 and 1.1: August 21, 2017 ‚Äì¬†customers may begin testing TLS 1.2 notifier compatibility June 30, 2018 ‚Äì in accordance with the revised deadline published by the PCI SSC all support for TLS 1.0 and 1.1 will disabled. All Airbrake domains will transition to support TLS 1.2 only. If you are running a legacy version of an Airbrake notifier your account may stop receiving errors. We recommend upgrading your notifier before June 30th, 2018. If you wish to test your application‚Äôs compatibility, you can do so by attempting to send errors to https://tlsv12.airbrake.io (temporarily, instead of https://airbrake.io or https://api.airbrake.io). If the errors appear on your dashboard, your application is compatible with the upcoming changes. Refer to your notifier‚Äôs configuration instructions on how to change the destination domain, and be sure to change it back when you have finished testing. Please consult our Install Airbrake page for more information on how to upgrade your notifier or force a TLS 1.2 connection. If you have upgraded your notifier and are still experiencing issues negotiating a connection using TLS 1.2 it is possible there are language or system¬†dependencies which do not support TLS 1.2 We recommend using this gist from the fine folks at Recurly to help troubleshoot. We will continue to monitor TLS 1.0 and 1.1 vulnerabilities and adapt our timeline as required to mitigate issues if¬†they arise. If you have any questions please don‚Äôt hesitate to reach out at support@airbrake.io .", "date": "2017-08-21"},
{"website": "Airbrake", "title": "HipChat and Airbrake integration.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/hipchat-and-airbrake-integration", "abstract": "Today we‚Äôre happy to announce tightly integrated HipChat integration. ¬†Each time a new notification happens hipchat is send a message, with the title, URL and occurrence count. ¬†This can be fine tuned on a per project basis. Instructions on setting it up are on our Knowledge base . A big thanks to NetGure for sharing his airbrake2hipchat app.", "date": "2012-05-25"},
{"website": "Airbrake", "title": "Adding Comments in Airbrake", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/comments", "abstract": "Today; I‚Äôm happy to announce that all accounts will have a comments tab on the exception detail view. Over the coming weeks, we‚Äôll be improving the comments UI and linking it to our upcoming integrations improvements. If you have any suggestions or features requests, please send them to ben@airbrake.io . Airbrake frontend migration to Heroku. :: Airbrake says: May 18, 2012 at 12:05 am [‚Ä¶] on our frontend. Giving us the ability to do things like WebHooks (in beta), GitHub Integration, Commenting, Better Debugging (Simulate Error) and more‚Ä¶ (these all came to Airbrake in today‚Äôs [‚Ä¶]", "date": "2012-01-10"},
{"website": "Airbrake", "title": "Python 3: a first class citizen", "author": "Unknown", "link": "https://airbrake.io/blog/python/python-3-a-first-class-citizen", "abstract": "If you‚Äôve already upgraded your application to Python 3 you can leverage our new Python notifier pybrake to provide more robust error reporting. pybrake is redesigned from the ground up to support Python 3.4+. pybrake ‚Äòs features include providing an async API supporting code hunks adding custom information to notices before they are sent ignoring notices by type or other criteria with a custom filter integrating with the logging standard library integrating with Django via Airbrake middleware integrating with Flask via the blinker library Ready to start capturing Python 3 errors with pybrake? Try Airbrake for free ! Still require Python 2.7 support? Please continue to use airbrake-python .", "date": "2018-04-17"},
{"website": "Airbrake", "title": "TLS deprecation reminder", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/pci-dss-tls-deprecation-reminder", "abstract": "As a follow up to our TLS deprecation post last August we wanted to remind all Airbrake customers that we will be deprecating support for TLS protocols v1.0 and v1.1 as well as some insecure ciphers on June 30 2018 . This change is likely to only affect customers running on an old language or platform version. Our previous blog post outlines a simple way you can test this in advance. In the coming weeks we‚Äôll follow up with a more detailed blog post as well as reaching out to those customer still on legacy or unsupported notifiers.", "date": "2018-04-19"},
{"website": "Airbrake", "title": "NEW: Get more Insights from your errors", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/new-get-more-insights-from-your-errors", "abstract": "One of the most common questions we hear from customers is: How should I decide which problems to fix first? That‚Äôs of course a complicated, layered question and we don‚Äôt presume to have a single, one-size-fits-all answer. After all, your apps ‚Äî and your team, and your customers ‚Äî are unique. But‚Ä¶we can help. Airbrake can give you a deeper view into your errors, identify common patterns, and deliver the insights you need to quickly prioritize problem areas based on your unique needs. You‚Äôve hopefully been using Aggregations to see the patterns within an error group (if not, check it out ). And our dashboards already gave you a broad view of error volume over time. But now we‚Äôre letting you see more patterns across error groups. How? Glad you asked. Earlier today we launched the enhanced Project Dashboard. You‚Äôll still see an activity feed that shows you things like deploys (and which errors they resolved) and a customizable chart of your error volume. But now, you‚Äôll see something new: Hotspots . Hotspots show you where errors are concentrated so you can focus on the problems that matter most. Just a few potential use cases: What files cause the most errors? Dive into your most error prone files so you can knock out a bunch of bugs. What pages are most affected by errors? Identify and fix errors on critical conversion web pages before they impact your metrics. What error messages keep popping up? Determine your most common errors so you can work to educate your team on how to avoid them. We‚Äôll be adding more Hotspot categories over the coming months. If there are specific things you‚Äôd like to see, let us know! Oh, and you may have noticed something else new on the Dashboard ‚Äì more metrics! We‚Äôre starting simple by showing you total Deploys, New Errors, and Occurrences over the past week (along with the trend, of course). This is just the start. More metrics (and some pretty nifty insights around file commits) are in the works. Stay tuned!", "date": "2018-05-09"},
{"website": "Airbrake", "title": "Announcing Airbrake Insights", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/announcing-airbrake-insights", "abstract": "We believe that with fast feedback cycles, teams can ship better quality software with more calm, confidence and speed. That‚Äôs why we‚Äôve enhanced Airbrake with a suite of new Error, Deploy and Code Insights. Airbrake Insights is a suite of tools and metrics designed to give you a more complete perspective on your application quality. By connecting error trends with deployments and code changes, you will start to observe patterns in your code and your deployments that are directly impacting your software quality. Deployments introduce code changes, and code changes introduce new errors. Code, Deploys and Errors are the cycle of life for a software team. Airbrake Insights connects these dots so you can see how these coexist in your software. Are you reducing errors? These trends give you the measurements you and your team need in order to balance shipping speed with shipping quality. See trends across your whole stack. Are there hidden problems in your codebase? Hotspots help you identify problem¬† areas in your code, so you know where to focus your efforts to improve your application quality. How much has your codebase changed, recently? Has this had a positive or negative impact on errors? What files have changed the most, can you preemptively spot problems before they occur? What changes did a deploy introduce? Quickly see the link between a deploy, the code it changed and the errors it caused or fixed. What are your deployment patterns? Is a change in deployment behaviour impacting your application quality for the better? What about your whole team, or your whole stack? How do your deployment and error trends relate, and can you find ways to improve your application quality through deployments? Airbrake Insights is designed to help you improve your application quality. We help you see the lifecycle between your errors, deployments and code changes so you can improve your shipping workflow and continue to ship high quality software, calmly and quickly. New to Airbrake? Start your 30-day free trial today and you‚Äôll be organising and tracking all your application‚Äôs errors in just a few minutes.", "date": "2018-07-02"},
{"website": "Airbrake", "title": "Ship it! The Airbrake Deploy Dashboard 2.0", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/ship-it-the-airbrake-deploy-dashboard-2-0", "abstract": "At Airbrake we believe that fast feedback helps you improve software quality with more calm and confidence. That‚Äôs why we give you the tools to analyze the lifecycle of errors, code changes and deploys in addition to how they correlate. Along those lines, you may have noticed that your projects have a mysterious ‚ÄúDeploys‚Äù link in your project navbar. Maybe you adventurous users have explored over there. If not, let‚Äôs dive into what the heck that page is. Well, before our latest update, your project‚Äôs Deploy Dashboard was a place to view how many errors you fixed or introduced for each deploy and get a revision link to the diff over on GitHub (or GitLab and Bitbucket). Pretty nifty right? Well, really, it was just a list of your project‚Äôs deploys‚Ä¶ but now the new and improved Deploy Dashboard is your project‚Äôs hub for tracking the impact of your code changes on the quality of your application. New things you can do: Quickly see how your many errors each of your deploys have fixed or introduced with the error statistics graph. Stay up to date on your team‚Äôs code shipping velocity with the deploy frequency graph. Do you see a downward trend in your team‚Äôs deploys this week? Maybe there‚Äôs a blocking issue that you should help resolve. Spot problem deploys easily. Dive directly into recent deploys that introduced new errors using the new deploys list. Save time investigating code changes by seeing linked Pull Requests and your actual diffs in Airbrake All you need to do to start getting value from your new deploy dashboard is, well, track your deploys . Let us know if you have any questions or feedback at support@airbrake.io . Happy shipping code!", "date": "2018-08-30"},
{"website": "Airbrake", "title": "Ch-ch-ch-changes! Airbrake‚Äôs new Code Insights", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrakes-new-code-insights", "abstract": "We might have let it slip already in a recent post but there‚Äôs a nifty new set of features that‚Äôs all about giving you more visibility into what is actually changing in your app. We‚Äôre calling it Code Insights . We believe by giving you a richer, more informative view of the changes you make to your project‚Äôs code will help you monitor and quickly understand how new changes impact the overall quality of your app. With Code Insights, you don‚Äôt only see the impact of what you‚Äôre shipping ‚Äì see what you‚Äôre actually shipping. Drill down to specific to the lines of code you added in a recent change you deployed or step back to see trends in how your team is changing your app with your new Code Insights tools. A big deploy is always something to keep an eye on. If your project has a recent deploy with a monsterous diff, that‚Äôs a prime item to keep a little closer eye on for any errors. With Code Insights, you can also see what files are changing and how much and how often they change. Do these changes have a positive effect on the error volume of your project? This new feature set allows you to easily spot trends in your code changes and the impact on your application‚Äôs errors; take advantage of what you learn from this new data to refine your development lifecycle. You can find Code Insights in two places: Deploy Dashboard: Just click on a deploy from the deploy list and you can view the code that was deployed, any relevant pull requests, and more. Project Dashboard: Right under the big error graph for your project, you can see Code Insights in the summary data card (showing you your total code additions and deletions) and in two new Hotspots options ‚Äì most changed files and most touched files. Code Insights are available to all paid Airbrake accounts. You can check them out yourself just by enabling an integration with GitHub , GitLab , or Bitbucket . Try it out and tell us what you think! Don‚Äôt have an Airbrake account yet? Try us out for free.", "date": "2018-09-18"},
{"website": "Airbrake", "title": "Making the most of Airbrake ‚Äì more tips and tricks", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/making-the-most-of-airbrake-more-tips-and-tricks", "abstract": "Last year we wrote about Three Tips to Help Optimize Your Airbrake . It‚Äôs been one of our most popular articles, and many customers have thanked us for helping them discover features and benefits they didn‚Äôt realize Airbrake could provide. That post is barely a year old, but is already desperate for a refresh. We‚Äôve been building so much stuff lately, and wanted to provide some fresh tips and tricks on how Airbrake can help you optimize your development process. Airbrake has long enabled you to see the overall impact of deployments on error volume. More recently, we‚Äôve upped our game with the new Deployment Dashboard. Within any project, just click on the ‚ÄúDeployments‚Äù tab in the nav bar. You‚Äôll see a complete list of your deployments ‚Äì filterable by environment ‚Äì along with details on who deployed, when, and what the impact was. And the best part? Not only can you see how many errors were fixed and introduced by a deploy, you can also click directly through to view those errors. So now you know exactly what problems were caused by every deploy, and have all the details needed to get them fixed quickly. If you‚Äôve used Aggregations, you know that they are invaluable for understanding the scope of a given error.¬† Is it browser-specific? Which hosts are affected? Which users are impacted? Aggregations can answer all these questions for a given error.¬† But what if you want to flip the script ‚Äì instead of seeing which users saw an error, you‚Äôd like to see which errors a given user saw. Airbrake can do that too. Either search for the attribute and value you care about. Or, if you happen to be viewing an aggregation, you can click directly on a given attribute to see all matching errors automatically. Ever show up for work on Monday and wonder what happened over the weekend? Or get back from vacation hoping the word didn‚Äôt end while you were gone? The Airbrake Dashboard gives you a quick and easy picture of error activity across your whole stack! (if you aren‚Äôt using Airbrake across your stack, um, why not? We support every major language and framework. And you can monitor unlimited projects/apps, so there‚Äôs really no reason not to). Monday morning I pull up the Dashboard and set the time the time to ‚Äú90 hours‚Äù. That lets me see pretty clearly if there were any problems. And if so, I can again click straight through to view the details for any errors. The Dashboard is also great for getting a granular view in a crisis (90 minutes) and seeing the longer-term trend (90 days). We‚Äôll keep updating you on new features as they roll, so stay tuned! If you have questions or feature suggestions, hit us up . We love to help.", "date": "2018-08-16"},
{"website": "Airbrake", "title": "Hotspots are heating up", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/hotspots-are-heating-up", "abstract": "Helping users, it‚Äôs kinda the main purpose we‚Äôre all building software applications for right? I mean if a digital tree falls in a forest and no one ever uses it, does it matter? Our latest addition (see our previous additions ) to our Hotspots feature set (which is still quite young itself ) is all about that essential part of application development ‚Äì the users. Now Airbrake will show you the top users that have encountered the most errors in your project. We think understanding the user impact of your project‚Äôs errors helps you to make informed choices in debugging and gives you key insights in your application‚Äôs quality. User Hotspots allow you to do a few interesting things, for example: Monitor: Spot commonalities across high error users. Support: Proactively reach out to any user that‚Äôs experienced an error to let them know you‚Äôre working on a fix Development: Have a really tricky bug that you‚Äôre having trouble replicating? Reach out to the customer to get more info on how it happened. User info ( name , email , user ID , and username ) is collected automatically for most of our error notifiers so there‚Äôs zero extra setup required. As long as you‚Äôre sending errors with a supported notifier, you get the new User Hotspots automatically. Don‚Äôt have an Airbrake account yet? You can start a new free trial here .", "date": "2018-10-18"},
{"website": "Airbrake", "title": "Announcing Airbrake Performance Monitoring ‚Äì built for developers", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-performance-monitoring-built-for-developers", "abstract": "Airbrake Error Monitoring has long been the go-to service for top dev teams to monitor application errors. Today we‚Äôre launching a new suite of Performance Monitoring tools ‚Äì designed and built specifically for developers. Airbrake Performance Monitoring is now available for Ruby on Rails apps, with additional languages coming soon! The Motivation Lots of Airbrake customers also use a traditional APM tool, but they usually aren‚Äôt loving it. ‚ÄúToo complicated, too expensive, and too difficult to maintain‚Äù are the common gripes. But the thing we heard most was that traditional APM isn‚Äôt built for developers. Ops and Dev Ops care about performance first and foremost, and quality second (or sometimes not at all). And tools like New Relic reflect that. Developers care about performance, but specifically they care about how that performance impacts the user. Said another way, what developers really care about is the overall quality of their apps, not just how fast they are. The Result: Airbrake Performance Monitoring puts Quality front and center by tying performance together with our best-in-class error monitoring service. That lets us link performance issues back to the actual errors that are impacting your customers. So you understand the true impact of a performance problem. And most critically, Airbrake Error Monitoring gives you all the information you need to identify and fix the problem ‚Äì fast! We tell you who was affected, which file/lines were changed, which deploy introduced the problem, and much, much more. The Nuts and Bolts: My favorite thing about Airbrake Performance Monitoring is the setup. Just take a minute to update your airbrake gem to version 9.5 or above. That‚Äôs it. No laborious installs, no complex configurations. Update your Gemfile with: gem 'airbrake', '~> 9.5' Then update our main gem and the gem it depends on by running: bundle update airbrake airbrake-ruby Already using version 9.5 or above? Congratulations, your setup is complete! What you get: The Performance Dashboard is your control center, designed to give you a quick overview of your application performance. Requests, response times, failure rates ‚Äì both now and over time. And of course, errors. Because, again, you don‚Äôt just want to know that there‚Äôs a performance problem. You want to know who‚Äôs affected, and how to fix it. Also on the dashboard is a detailed breakdown of performance characteristics for each route in your application. Search and filter by name or location, or sort by count, response codes, response times, or error count. See a problem? Click straight through to a detailed breakdown of response times, and critical diagnostics for that route. And, critically, from here you can see how many unresolved errors are tied to this performance problem. Clicking through to the error detail opens up the full suite of Airbrake Error Monitoring diagnostics: aggregations, context, backtrace, affected users, file/line changes, the guilty deploy that introduced the problem. You know, all the stuff your traditional APM doesn‚Äôt tell you. The Fine Print: Traditional APM prices by the server, which is fine I suppose if you‚Äôre running a monolith. But last we checked, the world is moving towards microservices, distributed hosting, etc. Our pricing is designed to be fair and simple. We charge based on the number of performance events, regardless of how many servers you‚Äôre using or what size they are. Still skeptical? Well you‚Äôre in luck because your first 50,000 performance events each month are free! If you‚Äôre loving the new performance tools, you can opt-in to keep the good times (and the performance data) flowing. If you choose not to opt-in, no hard feelings. We‚Äôll simply stop accepting performance events beyond 50,000 and you won‚Äôt be charged for APM. You can get more details on pricing, features, and how your life will never be the same again at airbrake.io/product/performance . What‚Äôs next? We‚Äôre going to be adding a lot to our new Performance Monitoring suite over the coming months. If there‚Äôs anything you‚Äôd love to see or a language you‚Äôd like us to add, let us know at support@airbrake.io .", "date": "2019-08-15"},
{"website": "Airbrake", "title": "Performance Breakdown Feature Highlight", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/these-are-the-breaks-performance-breakdown-feature-highlight", "abstract": "We hope y‚Äôall have been digging the sweet, performancey goodness that is the newly released Performance Monitoring for Rails, Go, Flask, and Django apps. We just wanted to shine a spotlight on one of the supporting players: the Performance Breakdown section. Airbrake Performance Monitoring enables you to quickly pinpoint performance problems in your applications, the Performance Breakdown feature gives you the debugging clues you need to debug and fix the problem quickly. The project level Performance Dashboard is a great place to start. It gives you a broad picture of your app‚Äôs performance trends and helps you pinpoint slow performing routes and other issues. After you do find a route you want to investigate is where Performance Breakdowns come in. What‚Äôs fast? What‚Äôs slow? What is actually the main contributor to a downward trend? The Performance Breakdown is a summary of response timing across all the monitored requests for a specific route. It shows you how long each part of the request took (fun fact: this was most requested feature in the private Performance Monitoring beta). This helps to show you what the biggest factor is in the response time of a given route. Typically, that timing breakdown contains items like: Database View HTTP Other: this can be slow performing code, network latency or anything else that doesn‚Äôt fit into the standard (or your custom) categories. And another cool part: it‚Äôs all customizable! You can add anything to this section (like the screenshot above shows) by utilizing the notify_performance_breakdown function . Check out Performance Breakdowns and other useful features by enabling Performance Monitoring !", "date": "2019-09-05"},
{"website": "Airbrake", "title": "Delectable digests & other notable notifications news", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/delectable-digests-other-notable-notifications-news", "abstract": "How many of you guys and gals love checking Airbrake everyday? I mean, maybe some of you do but it would be more nifty if Airbrake bundled up recent project stats or even told you when you should take a look right? That‚Äôs why we‚Äôve expanded the kinds of information you can have Airbrake automatically send to you. In this quick post we‚Äôll see what these simple but useful features do and why we built them. Reiterating something we said in our recent Deploy Dashboard 2.0 blog post : At Airbrake we believe that fast feedback helps you improve software quality with more calm and confidence. It‚Äôs even better when that fast feedback is automatic . Here, we‚Äôre looking at two different kinds of feedback we‚Äôve added: Reaction based: newly expanded High Volume notifications Interval based: completely new daily and weekly digest notifications These two different kinds of notifications allow you to step away from the Airbrake dashboard confidently, knowing that when you need to take a look at an issue, we‚Äôll tell you about it. Only want to know about errors when they happen often enough to be a problem? Our newly updated High Volume notifications send you repeat email notifications when errors reach thresholds in total occurrence counts. These help you never miss when an existing error group creeps up to problematic levels. For more info on the frequency of these notifications and where to enable them, check out our docs . Into something more generalized than individual error notifications? No problem, that‚Äôs where our daily and weekly digests come in. Our new digests give you a snapshot of what happened in your Airbrake over the last day or week by bundling up your projects‚Äô number of new errors, total occurrences, and deploy count and delivering into your inbox. You can learn more about our digest emails and how to enable them in our docs . Want to keep your notifications to only more high level monitoring? You can change your notification settings to only get exclusively digest and/or high volume notifications instead of every new and reoccurring error. Don‚Äôt have an Airbrake account yet? Try us out for free.", "date": "2018-09-04"},
{"website": "Airbrake", "title": "Performance Monitoring & Errors Team Up", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/performance-monitoring-errors-team-up", "abstract": "Our new Performance Monitoring for Rails apps is all about understanding the quality of your application through its responsiveness helping you to zoom into new performance issues and to fix them fast. Performance Monitoring, useful on its own but where the magic really happens is when error data and performance join forces to boost your debugging power. How widespread a problem is this error? 1% error rate? Maybe not a major problem. 90%!? Better take a look! These metrics bridge the gap between errors and performance monitoring. On the error dashboard, they help you understand how widespread an error is by showing the failure rate of a particular route associated. On the Performance Dashboard, they help you understand why a route could be experiencing issues. These little numbers might not seem like the flashiest feature but don‚Äôt underestimate how useful they can be. No joke ‚Äì we actually just used the route error percentage metric to identify and fix a bug in Airbrake. The issue was preventing automatic GitHub issues from being created. In this case, the route metrics told us what was broken, the error told us why , and the deploy told us how . Having them linked together like this actually was worth more than the sum of its parts. You can find a chart of errors right on your Performance Dashboard. You can also sort routes in the breakdown table by error occurrence count. More errors can impact performance and user satisfaction numbers. In the route view, you get a lot of useful error stats. That failure rate tells you a lot about the current reliability of your route and the associated errors tell you what is actually wrong. Are the errors unresolved? Then it might be an outstanding issue that needs your attention. This is the good ol‚Äô error overview you know and love but with a Performance Monitoring enhancement. This tells you how widespread a problem an error can be by showing how frequent errors happen for requests across a route. This is just the beginning! We have a lot more ideas on how to integrate Airbrake Error Monitoring and Performance Monitoring to help you catch and crush bugs like a boss. You can check this and all the other cool Performance Monitoring features by enabling it in your account settings page .", "date": "2019-09-26"},
{"website": "Airbrake", "title": "Introducing Go, Django, & Flask Performance Monitoring", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/introducing-go-django-flask-performance-monitoring", "abstract": "Airbrake Performance Monitoring was created to be an uncomplicated, highly usable tool that helps developers catch performance problems quickly and fix them easily. Because we have so many Rails developers that use Airbrake, we initially brought Airbrake Performance Monitoring support to Rails projects. We‚Äôre very pleased to announce that we‚Äôre expanding the supported Performance Monitoring languages! That‚Äôs right! We‚Äôre adding two new animals to the Performance Monitoring stable: gophers and pythons! Performance Monitoring now supports: Golang (for net/HTTP as well as Gin and Beego) Python (for pure Python along with Django and Flask frameworks) The coolest part? Go, Django, and Flask all support the latest Performance Monitoring features like Query Analysis , Performance Breakdowns , and Apdex tracking . We introduced Go support for Performance Monitoring with a good bit of dog-fooding because the API chunk of Airbrake is written in Go. We have implementation examples using the net/HTTP middleware and for the Gin and Beego frameworks. All of which you can find on our official GitHub Go library . Because Django and Flask are already specific web frameworks, we were able to build it so that there‚Äôs actually no added setup required in order to activate Performance Monitoring. It all ‚Äòjust works‚Äô out of the box . Isn‚Äôt that as nifty as a nonchalant narwhal? Python apps can use our performance tracking API directly. It‚Äôs built in to our latest notifier and you can find more in our docs . We‚Äôve been working on integrating Performance Monitoring into Airbrake even further and can‚Äôt wait to share all the new additions we‚Äôve been working on. Additionally, we have new supported languages coming soon like JavaScript and Node.js. Got something you want us to add? Let us know! Make sure to follow us on Twitter to stay up to date with the latest Performance Monitoring and feature news. And to try Performance Monitoring for free, just enable it from your account settings .", "date": "2019-12-03"},
{"website": "Airbrake", "title": "Express.js Joins the Airbrake Performance Monitoring Club", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/express-js-joins-the-airbrake-performance-monitoring-club", "abstract": "We‚Äôve brought our simple, developer-focused Performance Monitoring to Rails, Go, Django, and Flask recently. Now we‚Äôre giving our supported languages a new member of the family: Node.js! (Specifically the Express.js framework) That‚Äôs right! Express.js Performance Monitoring is now in early access. All Performance Monitoring features are supported after the simple setup like: Performance Breakdowns Apdex tracking Query Analysis Performance data integrated into your Error Dashboard No additional setup is needed for Express.js Performance Monitoring; you‚Äôll only need to make sure you‚Äôre on the latest version of our library and you‚Äôre using the same setup as our latest example Express.js app . Basically, that includes: Install, include our Node.js library Configure library with your Airbrake project‚Äôs credentials Add and set the Airbrake middleware All of this can be found in the Express.js example on our GitHub. We‚Äôd love to hear what you think about Performance Monitoring for Express.js so let us know ! Never miss cool feature announcements and news by following us on Twitter . Try Performance Monitoring for free by enabling it here .", "date": "2020-01-16"},
{"website": "Airbrake", "title": "Airbrake Raises $11 Million from Elsewhere Partners", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-raises-11-million-from-elsewhere-partners", "abstract": "Austin, TX and San Francisco, CA, April 9, 2020 ‚Äì Airbrake , a leading application performance, and code-level error monitoring software company, announced an $11 million financing round led by Elsewhere Partners . Airbrake offers real-time error monitoring for the end-to-end application stack, improving the efficiency of continuous integration and continuous development (CI/CD). Airbrake takes CI/CD to the next level by revealing real-time application errors, combining code-scanning and error-logging before it reaches the end-user. This increases the velocity that companies can release high-quality applications, reduces development costs, and improves customer retention. ‚ÄúAirbrake grew rapidly and profitably under the product-focused leadership of Joe Godfrey,‚Äù said Nick Stoffregen, Vice President at Elsewhere Partners. ‚ÄúThe company created a product that developers love, and Airbrake has grown organically as a result, without dedicated sales and marketing teams.‚Äù Several senior-level software company veterans have joined Airbrake to expand the Go-To-Market strategy and product roadmap. The team plans to focus on increasing value to the developer community and helping businesses accelerate digital transformation. The expanded executive team includes: Shelley Perry , Executive Chairman (Insight Partners, NTT, HP, TicketMaster) Treb Ryan , CEO (Dimension Data, OpSource) Eric Anderson , CTO (CopperEgg, Oracle, StackEngine) Chad Savoy , CRO (Datadog, SolarWinds) Joe Godfrey , CPO (Amazon, Ancestry) ‚ÄúWe‚Äôre excited to continue nurturing the strong relationships Airbrake has built with customers in the developer community,‚Äù said Treb Ryan, CEO of Airbrake. ‚ÄúOnce dev teams try Airbrake, they uncover real-world errors across the entire solution that they never knew existed,‚Äù Ryan said. ‚ÄúAirbrake is a textbook example of the success of product-led growth,‚Äù said Shelley Perry, Executive Chairman of Airbrake. ‚ÄúThis investment allows Airbrake to focus on value-led growth, which includes increasing customer feedback, building community, and investing in partnerships within the CI/CD ecosystem,‚Äù Perry said. About Airbrake Airbrake is a full-stack Application Monitoring service that helps thousands of engineering teams build and deploy great software. Airbrake provides real-time feedback on what‚Äôs broken, who‚Äôs affected, and how to fix it, allowing teams to ship better quality software with speed and confidence. It fits seamlessly within the existing workflow, integrating with Slack, JIRA, GitHub, GitLab, and other popular productivity tools. Thousands of companies use Airbrake to handle hundreds of millions of errors every month This includes the world‚Äôs leading streaming entertainment services, digital home security monitoring, and customer service and engagement platforms. About Elsewhere Partners Founded in 2017, Elsewhere Partners is a growth-stage venture capital firm founded by former Austin Ventures partners; the firm focuses investments on what they call ‚ÄúElsewhere Outliers‚Äù ‚Äì‚Äì business software companies that are located outside of traditional venture capital hubs and have achieved substantial customer traction and revenue growth that are ready to scale. Elsewhere Partners combines transitional capital with leadership expertise to help companies achieve exit readiness on their founder‚Äôs timetable. Elsewhere Partners portfolio includes Airbrake, ActivTrak, burstIQ, Foresite, Intential, OpsCompass, Relatient (exited), Statflo, Tasktop, and Vyopta.", "date": "2020-04-09"},
{"website": "Airbrake", "title": "With a Little Help From My Trends", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/with-a-little-help-from-my-trends", "abstract": "You may already be familiar with Airbrake email digests which give you a snapshot of what happened to your application‚Äôs health over the past week. Expanding on the week-to-week changes shown in digest emails, Airbrake now gives you a central hub for monitoring and comparing weekly changes in the health of your applications, your news friend: the new Trends Dashboard! By seeing trends week-by-week of your app‚Äôs key metrics, it allows you to easily spot good or bad trends. Now you can stay on top of longterm progress to surface problems you may have otherwise missed. Error data changes over the past week like the amount of occurrences and the total error groups made. New error groups mean new, unique errors your users are running into whereas total error occurrences is the amount of times each error group is being seen. Downward numbers are positive trends. Deploys where you see how your team is shipping code. See a downward trend? Your team might be less productive than last week. They could have a blocker or something you could help with. Performance data shows you how well your app is running. Are you doing better to serve pages responsively to your users? Is your Apdex score (user satisfaction score ‚Äì read more here! ) going up or down? Not using Performance Monitoring yet? Get started by enabling it here . All accounts on paid Airbrake plans get the new Trends Dashboard included at no additional cost! And even better, there‚Äôs zero extra setup required. All of the Trends Dashboard data is calculated automatically by Airbrake. Just visit the ‚ÄúTrends‚Äù link in your navigation bar to get started. Airbrake is only getting better. Never miss cool feature announcements (like this one!) by following us on Twitter .", "date": "2020-04-15"},
{"website": "Airbrake", "title": "Performance Monitoring Now Tracks Background Jobs", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/performance-monitoring-now-tracks-background-jobs", "abstract": "Now Airbrake Performance Monitoring automatically tracks your app‚Äôs background jobs . That‚Äôs right! Get direct insight into failure rates and durations all on your Performance dashboard. Correlate errors, performance issues, and job failures to identify and address problems fast. Now with Background Jobs Tracking, you can: Gain more visibility into the performance of your applications‚Äô background jobs Identify jobs that are failing frequently Link directly to the errors causing your jobs to fail Identify slow performing jobs Background Job Tracking is supported for Rails, Go, and Python apps for a bunch of different job processing libraries. Rails: Sidekiq, Resque, Sneakers, DelayedJob, ActiveJob, and Shoryuken Python: Celery Go: manual tracking support We‚Äôll be adding more languages and frameworks in the future. Let is know what you want to see! If you‚Äôve already enabled Airbrake Performance Monitoring, Background Job tracking is included at no additional cost. Plus, there‚Äôs zero extra setup required if you‚Äôre on the latest version of our notifier.¬† If you haven‚Äôt yet enabled Performance Monitoring, you can get started here . We‚Äôve begun the feature rollout for the first phase accounts and it should be widely available by the end of the week. Can‚Äôt wait? Send us a message to get bumped up in line. For Rails, all you need is to be on the latest gem version. For Go and Python, getting set up is easy, you can find all the info you need to start tracking Background Jobs in your Rails, Go, or Python app over on our docs site: Get more info on Background Jobs monitoring There‚Äôs lots more coming in the future. Never miss cool feature announcements (like this one!) by following us on Twitter . Try Performance Monitoring for free by enabling it here .", "date": "2020-02-05"},
{"website": "Airbrake", "title": "Announcing Single Sign-on for Large Teams", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/announcing-single-sign-on-for-large-teams", "abstract": "Got a large team and need the highest security? Airbrake‚Äôs newest feature addition got you covered. That‚Äôs right, the latest feature horse in the Airbrake stable is Single Sign-on for enterprise teams which bring support for OneLogin and Okta . I‚Äôm really glad you asked. (Also, how did you get in here?) SAML SSO is an open standard that enables a centralized service to be used to authenticate with other tools. This centralized authentication adds: Security: you and your team now have one, strong point that makes it easier to keep credentials safe ‚Äì no new passwords to lose or get hacked. Convenience: no need to make up and remember a new password makes it easier for you to log in from anywhere. Both OneLogin and Okta are supported SSO providers from the get-go. Got a new one you‚Äôd like us to add? Let us know ! Airbrake‚Äôs new SAML SSO also supports requiring that all users in your account use it for authentication. This helps you enforce secure practices across your organization. You can also leave it up to individual users to use SSO vs email and password if you want to provide the option. You can make sure you‚Äôre on a supported plan by visiting the plan settings page . After that, enable SSO from your security settings , then follow the instructions for your preferred SSO provider . Never miss cool feature announcements (like this very one!) by following us over on Twitter .", "date": "2020-03-10"},
{"website": "Airbrake", "title": "Digging Deeper into Databases", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/digging-deeper-into-databases", "abstract": "Airbrake Performance Monitoring gives you a broad view of real application quality while allowing you to drill down into what causes slowdowns to fix performance issues fast. Super important to the ‚Äúdrilling down‚Äù aspect are features like our previously blogged about Performance Breakdowns which give you the duration each component (database, view, HTTP, etc) takes for the requests in a specific route. Continuing this trend, our latest feature addition to Performance Monitoring is all about database performance: Query Analysis . Query Analysis shows you an aggregated view of the SQL queries, their locations, and the durations for a selected route. Do you see a big part of a slow route is being spent on database time? Query Analysis helps you understand why so you can fix it by directing you to the exact query that‚Äôs slowing things down. Query Analysis is a free addition to Performance Monitoring for Rails apps (support for other languages is in-progress) and you can start using it just by making sure you‚Äôre on the latest versions of our gems. Upgrade to the latest version of our gem (9.5.0) by updating your Gemfile: Then run the update command: Check out Query Analysis and other useful features by enabling Performance Monitoring in your account settings !", "date": "2019-10-28"},
{"website": "Airbrake", "title": "Airbrake Introduces On-Demand Errors", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-introduces-on-demand-errors", "abstract": "Today we are very pleased to announce Airbrake ‚ÄúOn-Demand‚Äù pricing for error monitoring . Beginning October 1st, Airbrake customers will never have to worry again about missing errors because they‚Äôve reached the limit of their Airbrake plan during a billing cycle. No application environment is static nor will its error count be. Continuous deployments, shifts in customer usage, non-code-related, or back-end issues can all effect both the types and volume of errors your app sends to Airbrake. Up to now, there were only three ways to account for that variability. Over-provision your Airbrake account with enough baseline errors to make sure you have enough capacity to catch every error ‚Äì including any intermittent spikes ‚Äì during a given billing cycle. Watch error usage like a hawk and upgrade your plan ‚Äújust in time‚Äù as you close in on or exceed your monthly error limits. Live within your plan threshold and miss seeing all errors from your app once you exceed your plan quota until your next billing cycle. Airbrake wants to make it easier for our customers to see and catch every error ‚Äì regardless of a customer‚Äôs plan limits. To that end, Airbrake On-Demand Errors features: Easy access. Current customers**¬†don‚Äôt need to do anything or switch plans to access On-Demand Errors. Beginning October 1, 2020, On-Demand Errors will be included standard with every paid Airbrake plan. At the start of your October billing cycle, you‚Äôll automatically be migrated to an On-Demand Errors enabled plan. No more guessing. Customers don‚Äôt need to commit to higher monthly plan levels ‚Äújust in case‚Äù there‚Äôs a spike in errors. Airbrake‚Äôs On-Demand Errors will make sure you don‚Äôt miss any errors and you‚Äôll only pay for what you need. Once you exceed the errors included with your base plan in any given billing cycle, Airbrake will continue to send you any errors we receive from your app for a small fee for each additional error. More errors = more cost-effective . Best of all, any on-demand errors delivered after you exceed your plan limit will cost less per error than the errors included in your current Airbrake plan. Yes, you read that right. Pricing for On-Demand Errors is actually 15-20% lower than the base price per error of Airbrake paid plans. For example, our Essential plan includes 100,000 base errors for $59 a month ‚Äì or $5.90 per 10,000 errors. The price for 10,000 on-demand errors for an Essential plan customer is just $5.00 per 10,000 errors, which is 15% less than the base error rate. (By the way, we‚Äôll charge your account at the end of the billing cycle for just the number of errors you use over your quota. The 10,000 error price shown above is just an example of how the lower on-demand pricing is calculated.) For more details: Check out detailed pricing information on the Airbrake website. No surprises. You remain in control. We understand that some customers might have concerns about unexpected charges from a spike in errors that results in a lot of on-demand errors. That‚Äôs why we‚Äôve introduced Usage Caps , which give Airbrake customers complete control over their monthly error counts. With Usage Caps, volume limits can be set to manage how many On-Demand Errors are received at the Account and/or Project level. This ensures there are no billing surprises and each customer can designate the flow of errors that makes sense for their business. Unlike other error monitoring companies, we don‚Äôt want to penalize our customers for catching additional errors. We feel it‚Äôs far more important to enable your success and provide the peace of mind that comes from knowing that you aren‚Äôt missing key information about the health of your app. Here at Airbrake, we do reward more usage with greater price breaks so our pricing allows you to save more money as your usage grows. Being realistic and picking the right plan for your expected usage is economically beneficial. Finally, we are here to make sure you get the most out of Airbrake and On-Demand Errors. Feel free to contact our customer success team via in-app chat, by phone, or email if you have any questions at any time. See an unusual or unexpected spike? Give us a holler and we will make sure to take care of it for you. Happy error hunting! **¬†On-Demand Errors are only available for customers on a paid, direct-billed Airbrake Plan. Please contact sales@airbrake.io if you are interested in upgrading your account to include On-Demand errors.", "date": "2020-09-28"},
{"website": "Airbrake", "title": "The PHP Exception Class Hierarchy", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/the-php-exception-class-hierarchy", "abstract": "In the past, understanding the PHP exception class hierarchy was easy, but the hierarchy included a somewhat serious flaw. In older PHP versions it often proved difficult, if not impossible, to handle fatal errors. In fact, most fatal errors typically caused the application to halt execution entirely. Now, thanks to changes introduced in PHP 7, exceptions are thrown (and can therefore be caught) when a fatal error occurs, allowing the application to continue functioning. As of PHP 7, PHP divides errors into two unique classes: Exception and Error . An Error is typically used for issues that have historically been considered fatal errors. When a fatal error occurs, PHP will now throw an Error class instance. An Exception instance, on the other hand, is thrown for more traditional, recoverable errors. To bring these two concepts together PHP 7 introduces the new Throwable interface, which both Exception and Error implement. Here‚Äôs a look at the entire PHP exception hierarchy: Throwable Error ArithmeticError DivisionByZeroError AssertionError ParseError TypeError Exception ClosedGeneratorException DOMException ErrorException IntlException LogicException BadFunctionCallException BadMethodCallException DomainException InvalidArgumentException LengthException OutOfRangeException PharException ReflectionException RuntimeException mysqli_sql_exception OutOfBoundsException OverflowException PDOException RangeException UnderflowException UnexpectedValueException Error ArithmeticError DivisionByZeroError AssertionError ParseError TypeError ArithmeticError DivisionByZeroError DivisionByZeroError AssertionError ParseError TypeError Exception ClosedGeneratorException DOMException ErrorException IntlException LogicException BadFunctionCallException BadMethodCallException DomainException InvalidArgumentException LengthException OutOfRangeException PharException ReflectionException RuntimeException mysqli_sql_exception OutOfBoundsException OverflowException PDOException RangeException UnderflowException UnexpectedValueException ClosedGeneratorException DOMException ErrorException IntlException LogicException BadFunctionCallException BadMethodCallException DomainException InvalidArgumentException LengthException OutOfRangeException BadFunctionCallException BadMethodCallException BadMethodCallException DomainException InvalidArgumentException LengthException OutOfRangeException PharException ReflectionException RuntimeException mysqli_sql_exception OutOfBoundsException OverflowException PDOException RangeException UnderflowException UnexpectedValueException mysqli_sql_exception OutOfBoundsException OverflowException PDOException RangeException UnderflowException UnexpectedValueException Below we‚Äôll briefly discuss each top-level exception type, providing a rough overview, which we‚Äôll expand upon in much more detail throughout further articles. As previously discussed, Errors encompass issues that would normally be considered fatal. Such errors are considered internal PHP errors. ArithmeticError ‚Äì Thrown when attempting invalid mathematical operations, such as performing a negative bitshift, or trying to get a result outside the bounds of integer . AssertionError ‚Äì Thrown when an assertion made via assert() fails. ParseError ‚Äì Thrown when an invalid parse attempt is made, such as with the eval() function. TypeError ‚Äì Thrown when provided argument or return value types do not match the declared type that is expected. Exceptions encompass all user exceptions in PHP ‚Äî anything that isn‚Äôt an internal Error is considered an Exception . ClosedGeneratorException ‚Äì Thrown when trying to request another value from a generator that has no more values to provide, and therefore has been finalized. DOMException ‚Äì Thrown when something goes wrong with XML-style document manipulation. ErrorException ‚Äì Used to translate from an Error exception to an Exception exception. IntlException ‚Äì Thrown when there‚Äôs an issue performing internationalization logic. LogicException ‚Äì Thrown when faulty programmatic logic is executed. PharException ‚Äì Thrown when an issue occurs while manipulating single-file PHP application file archives, typically referred to as phars . ReflectionException ‚Äì Thrown when attempting to perform an invalid operation during reflection. RuntimeException ‚Äì Thrown for exceptions that only occur during runtime, such as overflow or out of bounds issues. That‚Äôs just a small taste of the powerful, built-in exception class hierarchy provided with modern PHP. Stay tuned for more in-depth articles examining each of these exceptions in greater detail, and be sure to check out Airbrake‚Äôs robust PHP Exception Tracker , designed to help you streamline all your PHP exception handling practices!", "date": "2017-07-05"},
{"website": "Airbrake", "title": "What's New in C# 7.0? ‚Äì Expression-Bodied Members and Throw Expressions", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet/expression-bodied-members-throw-expressions", "abstract": "C# 7.0, the latest major version of the extremely popular programming language, was released in March 2017 alongside Visual Studio 2017, bringing a number of new features and capabilities to the table. Today we‚Äôll continue our deep dive into some of these awesome features in our ongoing series, What‚Äôs New in C# 7.0? : In Part 1 we thoroughly explored tuple types , tuple literals , and out variables . In Part 2 we looked at pattern matching and local functions . In Part 3 we examined the digit separator , binary literals , returning references and local reference variables . Today in part 4 we‚Äôll cover new expression-bodied members and throw expressions , so let‚Äôs get going! C# 6.0 introduced expression body definitions with method and property get declarations. The expression body definition syntax allows single-expression bodies to be written in a more concise and compact format. At the most basic level, an expression-bodied member looks like: member => expression; . As of C# 6.0, expression bodies can be used for methods and property get declarations. For example, here is a basic User class that provides the Email and Name properties using expression body syntax. The same syntax is also used for the ToString() override method: C# 7.0 adds a number of new expression-bodied members to the list valid list, including constructors , finalizers , property setters , and indexers . For the first three, below we‚Äôve modified our User class to include all expression-bodied members (except an indexer , since it doesn‚Äôt make much sense in this context): We also have a UserCollection class that contains a private User[] _users property: We can then instantiate a new UserCollection instance, use the indexer to retrieve the second User element, and then output the returned value to the console (using the ToString() override method we defined earlier): Closely related to expression-bodied members, C# 7.0 also introduces the ability to create throw expressions . In many places where an expression might be valid, a throw expression can be used to directly throw an Exception . For example, here we‚Äôre causing attempts to use the setter of the User.Email property to throw a new NotImplementedException : The Sharpbrake library provides robust exception tracking capabilities for all of your C# and .NET applications. Sharpbrake provides real-time error monitoring and automatic exception reporting across your entire project, so you and your team are immediately alerted to even the smallest hiccup, and can appropriately respond before major problems arise. With a robust API and tight integration with the powerful Airbrake web dashboard, Sharpbrake will revolutionize how your team manages exceptions. Check out all the great features Sharpbrake brings to the table and see why so many of the world‚Äôs top development teams use Airbrake to dramatically improve their exception handling practices!", "date": "2017-08-10"},
{"website": "Airbrake", "title": "What's New in C# 7.0? ‚Äì Digit Separators, Reference Returns, and Binary Literals", "author": "Unknown", "link": "https://airbrake.io/blog/csharp/digit-separators-reference-returns-and-binary-literals", "abstract": "Thanks to frequent updates and continuous support, C# remains one of the most popular modern development languages. The latest major version, released in March of 2017 and coinciding with the release of Visual Studio 2017, brings with it a number of new features, which we‚Äôve been covering in our ongoing series, What‚Äôs New in C# 7.0? . Thus far we‚Äôve investigated a number of topics: In Part 1 we thoroughly explored tuple types , tuple literals , and out variables . In Part 2 we looked at pattern matching and local functions . For part 3 today we‚Äôll examine the digit separator , binary literals , reference returns and local reference variables , so let‚Äôs get to it! A small but handy little feature introduced in C# 7.0 is the digit separator character, which takes the form of a single underscore ( _ ). This separator can be used within any numeric literal as a means of improving legibility. The existence of a digit separator in a numeric literal does not change the value in anyway. Any given number is always the same to the common language runtime, regardless of whether it uses separators or not. This feature can be particularly useful when creating extremely lengthy numeric literal values. For example, it canact as a thousands-place separator: Obviously, the first value is quite difficult to read at a glance, whereas it‚Äôs relatively easy to count the thousands places in the second number and deduce it‚Äôs somewhere around 123 quadrillion . While scientific notation can often be used for large numbers, in situations where exact precision is necessary (like above), the digit separator comes in handy. C# 7.0 also provides the ability to create binary literal values ( base 2 numbers, effectively). This adds onto the other numeric literal capabilities, such as hexadecimal literals , so you can write out exactly the value you mean to, in whatever format best suits your needs. Moreover, we can also use the new digit separator within hexadecimal and binary literals . Here we see the standard and digit-separated versions, using all three numeric literal forms: The output shows all our numbers are equivalent, as expected: Note: We‚Äôre using the Utility.Logging class in these examples, which can be found below : In the past, using references in C# merely consisted of passing an argument by reference . The ref keyword would precede the parameter type in the method definition. To coincide with the parameter ref keyword, ref would also come before the argument value being passed to said method. For example, here the SetByReference(ref int, int) method changes the value at the reference location to value , so we can change the index 2 array element from -42 to 24601 : Now, in C# 7.0 the ref keyword can be used in a couple more useful situations: Returning a reference value from a method, and creating a local variable to store a reference value. To illustrate these new features we have a simple Library class, the full code of which can be found below, then we‚Äôll explain what‚Äôs going on in more detail to follow: Our goal is to retrieve a reference from a Book Array collection based on a searched book Title property value. To accomplish this we have the GetReferenceByTitle(string, Book[]) method: This method just loops through the books array, by index, until it finds a matching Title , at which point it returns the reference to that matching Book element using the ref keyword. To illustrate how this might differ from the ‚Äúusual‚Äù method of returning by-value , we have the GetValueByTitle(string, Book[]) method: Since Book[] is an IEnumerable collection we can use LINQ, so with just a single little line of code we can search and return our matching Book element value . To illustrate how the ref return value works we start by creating our Book array collection, then specify the Book Title value we want to search for. In this case, we‚Äôre going to be looking in our collection for \"Moby Dick\" . We also call Array.FindIndex(T[], Predicate<T>) and output the actual index value that our searched Book was found at, which we‚Äôll use at the end of the example: The output of this initial setup code appears below: We‚Äôve confirmed that the collection contains four Books , and that \"Moby Dick\" is at index 1 , so now let‚Äôs make use of new reference return value functionality. To do so, we preface the call to GetReferenceByTitle(string, Book[]) with the ref keyword, which indicates we expect a reference to be returned. We also want to assign that returned reference value to a local variable, which is accomplished by preceding our var keyword with the ref keyword during assignment. Thus, here the local variable named reference contains the reference value that is returned by GetReferenceByTitle(string, Book[]) : We‚Äôve also made a call to GetValueByTitle(string, Book[]) with the same arguments passed, so we can output and compare the results of both types of returns (reference vs value): Excellent! So far everything is working as expected, so now we can use our local reference variable ( reference ) to change the value that said reference refers to. In this case, we‚Äôll create a new Book instance for \"Game of Thrones\" (the new season is awesome so far, by the way). Just to confirm we‚Äôre accessing the original array collection at the same location that \"Moby Dick\" was originally found at, we‚Äôre outputting the value at the index location, which we saved earlier: As intended, the output confirms that reassigning the reference variable successfully updated the underlying element value within our original books collection: Stay tuned for future parts in this series where we‚Äôll continue exploring the new features introduced in C# 7.0! And don‚Äôt forget, the Sharpbrake library provides robust exception tracking capabilities for all of your C# and .NET applications. Sharpbrake provides real-time error monitoring and automatic exception reporting across your entire project, so you and your team are immediately alerted to even the smallest hiccup, and can appropriately respond before major problems arise. With a robust API and tight integration with the powerful Airbrake web dashboard, Sharpbrake will revolutionize how your team manages exceptions. Check out all the great features Sharpbrake brings to the table and see why so many of the world‚Äôs top development teams use Airbrake to dramatically improve their exception handling practices!", "date": "2017-08-03"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.FormatException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-formatexception", "abstract": "Moving along through our in-depth .NET Exception Handling series, today we come across the System.FormatException. As the name implies, the System.FormatException is thrown in a wide variety of scenarios, yet they all revolve around providing an improperly formatted argument to a vast array of methods and API calls. We‚Äôll spend some time in this article exploring the System.FormatException in more detail, such as where it resides in the .NET exception hierarchy. We‚Äôll also take a look at a few functional C# code samples that will illustrate how the System.FormatException might be thrown in some everyday code, so you can better plan for handling them yourself. Let‚Äôs get going! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.FormatException inherits directly from System.SystemException . Like many of the Exception classes within .NET that inherit directly from System.SystemException , the System.FormatException is quite broad and encompasses a great deal of potential format-related issues. In fact, there are far too many edge cases to go through them all here, let alone provide code examples, so we‚Äôll just briefly list a few common scenarios that could lead to a System.FormatException : Conversion attempts using Convert class methods in an attempt to change a string into another data type by passing an invalid string value. DateTime class parse attempts that don‚Äôt conform to the expected culture-specific formatting patterns. GUIDs that aren‚Äôt 32-hexadecimal digits. Attempting to pass a format string to an object that implements the IFormattable interface, but where the format string isn‚Äôt one of the standard format strings . Calling String.Format() , whereby the provided format string contains a greater number of indices than the number of insertion object arguments that were given (e.g. String.Format(\"{0:t} on {1:D}\", DateTime.Now) ). There are many other possible scenarios to consider, so you are encouraged to check out the official documentation for all the details on the System.FormatException and see in which scenarios it might pop up. For our code examples today we‚Äôll be looking at two scenarios outlined above: Using methods of the Convert class with improper string values passed, and using an invalid format string for an IFormattable implementor object. As usual, we‚Äôll start with the full code sample below, then walk through it in more detail afterward: We begin with the ConvertStringToChar(string value) method, which does just as the name implies. As with all our example methods, we‚Äôre logging any caught System.FormatExceptions that may be thrown: We start by declaring a name variable and then passing it to ConvertStringToChar(string value) : As you may be aware, the Convert.ToChar(string value) method requires that the passed string be only a single character long, so we end up throwing a System.FormatException : Instead, we‚Äôll try setting name equal to only the first character, then pass it a second time (this is a bit convoluted, since name.First() already converts itself to a char object): Sure enough, this conversion works fine: We also have a similar ConvertStringToBoolean(string value) method that, again, attempts just what the method name states: To test this we‚Äôll first start with a string value of \"true\" , followed by a value of \"truthy\" : As it happens, Convert.ToBoolean(string value) only accepts values of \"False\" , \"false\" , \"True\" , or \"true\" , so while our first call succeeds, our second call throws another System.FormatException : Our last example attempts to provide a format string to an object that implements IFormattable . In this case, the FormatDecimal(decimal value, string format) method tries to format the passed value using the passed format string, then returns the result: To test this method we first declare the value variable, along with format using a valid standard numeric format string ( c , in this case, which signifies a currency). For our second call we try using a numeric format string of Z , which is invalid: As expected, our first call performs just as expected, while the second call throws yet another System.FormatException , informing us of the issue: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-07-17"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Web.Services.Protocols.SoapException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-web-services-protocols-soapexception", "abstract": "Making our way through the detailed .NET Exception Handling series, today we‚Äôll be tackling the System.Web.Services.Protocols.SoapException. The SoapException is only the second exception we‚Äôve covered in this series that deals with the Windows Communication Foundation ( WCF ) framework, which is used to build service-oriented applications. The System.Web.Services.Protocols.SoapException is a rather fundamental error type, as it‚Äôs the basis of exceptions thrown by WCF apps when a client makes service calls via the SOAP protocol. In this article we‚Äôll explore the SoapException in more detail, looking at where it fits within the .NET exception hierarchy, along with some sample code to illustrate how SoapExceptions are best thrown (and caught) in your own apps. Let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.Web.Services.Protocols.SoapException inherits directly from System.SystemException . The sample code we‚Äôll be using has just one major goal: Produce an exception on the server side (within the service ), which should translate into a SoapException on the client side. Since we‚Äôll be dealing with the WCF framework and a service application to illustrate how System.Web.Services.Protocols.SoapExceptions should be used, we‚Äôll be using some of the example service application code from our System.ServiceModel.FaultException article. We‚Äôll begin with the full sample code example below, after which we‚Äôll dig into it in a bit more detail. Before we break down the example code, it‚Äôs worth noting that the type of application this code is used in matters (to some degree). In particular, since we‚Äôre using the WCF framework for the LibraryService.ILibraryService interface and the LibraryService.LibraryService class, that code should be used in a WCF Service Library or similar project. This will generate some proper defaults values within files like the critical App.config . With that out of the way, let‚Äôs dig into the code. We begin with a basic Book class that implements the IBook interface, which we‚Äôll use as the basis of our service: Next comes the basic structure of our service. We‚Äôve defined the InvalidBookFault class, which applies the DataContract attribute (along with the DataMember attribute for its properties). These attributes simply tell the runtime that this object can be serialized (i.e. transformed to and from text)making it easier to transfer across the web: We then make use of that InvalidBookFault class in the ILibraryService interface, which declares just one ReserveBook method. The interface applies the ServiceContract attribute, which does what it sounds like and creates a service contract with the underlying WCF application. The ReserveBook method‚Äôs OperationContract is used in conjunction with ServiceContract , informing the service that this method can be invoked by the WCF app. Lastly, the FaultContract attribute specifies that we want any errors during processing within this method to return an InvalidBookFault (instead of the default FaultException ): The final part of our service code is the actual ReserveBook(string title, string author) method implementation. This method doesn‚Äôt do much and is mostly just an example, but its purpose is to reserve a book based on the passed title and author . If either field is empty an exception is thrown, otherwise the book is reserved and output is displayed: Now that our service layer is all setup we can move onto the client code, which isn‚Äôt too fancy. It begins by creating a new client connection to the LibraryServiceReference , then tries to reserve two books (first a valid, then an invalid one that‚Äôs missing an author argument). It also has numerous catch clauses to handle any unexpected exceptions: If we execute the above client code and attempt to reserve some books we get the following output including a success then a failure: There‚Äôs a couple interesting things going on here. Consider that the LibraryService.ReserveBook(string title, string author) method explicitly throws a System.Web.Services.Protocols.SoapException when a reservation fails. Moreover, the ILibraryService interface implemented a FaultContract attribute, so we return a LibraryServiceReference.InvalidBookFault if something goes wrong. However, in spite of both of these, we can see from the above output that our client code ended up catching a plain FaultException . As indicated by the error message, this is due to the configuration of the service application. Specifically, we currently have the <serviceDebug includeExceptionDetailInFaults=\"False\" /> behavior set, which suppresses some exception details that would otherwise be included. Let‚Äôs try setting that value to True and rerunning our client code: Even though we‚Äôre still catching a basic FaultException on the client side, we‚Äôre able to see that the underlying reason (the base exception on the server side) was a System.Web.Services.Protocols.SoapException , which was our intent. However, we‚Äôre still not making use of the custom InvalidBookFault that we created. As it happens, the proper way to handle custom exceptions on the server side of a WCF service application is to explicitly create a new instance of the fault object when it‚Äôs necessary, then throw a FaultException<T> of that type. Therefore, we‚Äôve surrounded our logical code within the LibraryService.ReserveBook(string title, string author) method with a try-catch block that catches a SoapException . When a SoapException is caught we create a new InvalidBookFault instance, assign some values to its properties, then throw a new FaultException<InvalidBookFault> and pass in the InvalidBookFault instance that was created: As a result, calling the service from our client code now produces the following output: We‚Äôre now able to catch all expected exceptions throughout the process, both server side and client side. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-07-22"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.IndexOutOfRangeException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-indexoutofrangeexception", "abstract": "Making our way through the .NET Exception Handling series, today we‚Äôll take a closer look at the System.IndexOutOfRangeException . As indicated by its name, the System.IndexOutOfRangeException is raised when attempts are made to access an invalid index of a collection, such as a list or array. In this article we‚Äôll dig deeper into the System.IndexOutOfRangeException , seeing where it resides within the .NET exception hierarchy, along with a few functional C# cod examples to illustrate how System.IndexOutOfRangeExceptions are typically thrown, so let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.IndexOutOfRangeException inherits directly from System.SystemException . As usual, to begin examining the System.IndexOutOfRangeException in more detail we‚Äôll start with the full code example and then explore what‚Äôs going on in more detail below. To begin we have a simple Book class that inherits from our IBook interface, allowing us to create some basic objects for manipulation: We then have a simple method in which we generate a new Book List , add a few books to it, and then perform a basic iteration over our book list using the index : Unsurprisingly this outputs all our book records for us: However, in our next method we try much the same thing but our index value is allowed to go up to library.Count . This will cause a problem because, like most programming languages, collections are zero-based so the largest index our library list contains is actually one less than the .Count property: Sure enough this throws an error our way: It‚Äôs worth noting that while the actual class type that was thrown there was a System.ArgumentOutOfRangeException (instead of a System.IndexOutOfRangeException ), the error message clearly indicates that this is a problem with the provided index being out of range. Another common technique is to change the values of an existing collection. There are many ways to accomplish this, but one method is to specify the collection element using the index of the element to be changed, which is what we‚Äôre doing in this next example method: Here we access and change the last element in our collection by changing library[library.Count - 1] (the last index) and assigning it to a new Book instance. The output shows that our library has been updated with a different final book: Now let‚Äôs try that again but this time we‚Äôll be accessing an index of our library collection that doesn‚Äôt exist ( library.Count , which is one value greater than the maximum index): Sure enough this throws another exception our way, indicating that the index provided isn‚Äôt within the allowed bounds: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-06-18"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Data.Linq.DuplicateKeyException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-data-linq-duplicatekeyexception", "abstract": "Moving along through our in-depth .NET Exception Handling series, today we‚Äôll take a closer look at the System.Data.Linq.DuplicateKeyException. The DuplicateKeyException is typically thrown when performing LINQ operations on an underlying database/data context, while attempting to insert or create a record with the same identifying key as another record. In this article we‚Äôll examine the DuplicateKeyException in more detail, looking at where it sits in the .NET exception hierarchy, along with a bit of sample code illustrating when System.Data.Linq.DuplicateKeyExceptions are (and are not) typically thrown, so let‚Äôs get going! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.InvalidOperationException inherits directly from System.SystemException . Finally, System.Data.Linq.DuplicateKeyException inherits directly from System.InvalidOperationException . As previously mentioned, a common scenario in which a DuplicateKeyException might occur is when performing LINQ modifications to a database, and attempting to add a record with the same PRIMARY KEY value of another record within that table. Since we‚Äôre dealing with databases here, while the included sample code will provide as much detail as possible, some portions of the project are automatically generated by Visual Studio; such components will only be described rather than included as code. With that out of the way, we‚Äôll start with our LINQ-based sample. If you aren‚Äôt aware, .NET has the ability to ‚Äúmap‚Äù programmatic relational objects (models) with corresponding database tables within an associated database. This type of mapping is quite common and can be found in many other languages and frameworks, such as Ruby on Rails and PHP. .NET provides a few different methods of achieving this connection, but when working with an existing database schema, by far the easiest option is to use the LINQ to SQL Classes component in Visual Studio. To add this to a project, simply right-click and select Add > LINQ to SQL Classes , just as you‚Äôd add any other project component. Note : Depending on your installation, it may be necessary to run the Visual Studio Installer application to explicitly install the LINQ to SQL Classes individual component, if it isn‚Äôt already present. Adding this component to our Visual Studio project creates a .dbml file. We‚Äôll be using it to access the library database, so we‚Äôre naming the overall file Library.dbml . We‚Äôve already created the library SQL Server database, so now we need to add a table to interact with. We‚Äôll start with the following query to create the Book table: Now we open the Library.dbml and drag and drop our newly-created Book table into the designer view. This will cause Visual Studio to automatically generate all the code necessary to map between our Book database table and a relational Book class object. Since this code is created for us, we won‚Äôt include most of it here, but this is a small sample of what is generated: Now that our database to relational object mapping is complete, we can start using LINQ to perform queries and insert new records into our table. This is where our own code is required, so we‚Äôll start with the full example below, after which we‚Äôll explain each section in more detail: We need to use the data context that was automatically generated via our LINQ to SQL Classes component. We‚Äôre able to do this by calling new LibraryDataContext() , since Visual Studio appends DataContext to whatever name we gave to the .dbml component. Our LinqAdapter constructor performs a few basic actions, starting by creating a handful of books and adding them to the database, then retrieving an existing book via LINQ, before finally attempting to add one final book that uses the same Id as an existing record: The AddBookToDatabase(Book book) method is where most everything takes place. Our Context is automatically mapped to a Table<Book> collection, into which we want to insert the passed book object when Context.SubmitChanges() is called: As you‚Äôll recall from our SQL creation string, the Book table does not have any sort of constraint placed on its Id PRIMARY KEY column: As a result, instantiating a new LinqAdapter object as seen above actually ends up creating one new book successfully, immediately followed by the throwing of three System.Data.Linq.DuplicateKeyExceptions : Let‚Äôs dig into this and figure out what‚Äôs going on. Since the Id column is an integer value, if no Id value is provided when we add a new Book to the database via LINQ, the Id value defaults to 0 before an insertion attempt is made. Our first book is added without any problem, since nothing in the table exists at the time. However, each subsequent attempt to add another record tries to use the same Id value of 0 , which results in a DuplicateKeyException being thrown. Therefore, our library.Book table only contains a single record at this point: In this case, the solution is to fix the configuration of the Book table, so that there‚Äôs some form of constraint on the Id PRIMARY KEY column. We also want the value to auto-increment. This is the updated SQL string we can use to create a proper Book table: Once the table is updated, we also need to update the Library.dbml file, which will automatically update all the behind-the-scenes mapping code. Once complete, running our example again results in all four books being added successfully: This may seem strange since we explicitly assigned the Id value of our fourth Book object to be equal to the Id value of an existing record. However, in this sort of scenario our modern development tools try to come to our rescue. Since it would (almost) never be desirable to attempt an insertion using a duplicate PRIMARY KEY value while an identity constraint is in place, such a request is merely ignored on our behalf, and a new (valid) Id is generated and used instead. As a result, our Book table now contains all our records: Since System.Data.Linq.DuplicateKeyException is housed within the Linq namespace, it stands to reason that it appears only when dealing with LINQ. But, what happens when we try to insert duplicate PRIMARY KEY values using direct SQL connections? To find out, we start with an explicit IBook interface and implementing Book class: To keep things simple, we‚Äôll be connecting to a local SQLite database, which we‚Äôre calling development.sqlite3 . We then create a Book table with the following basic query: Now, in our code, we once again start the process within the constructor of our SqliteAdapter class: As you can see, we perform similar steps as our LINQ example, except we have to be more explicit here since there‚Äôs no behind-the-scenes code to help us. We start by creating the database file, establishing a connection, creating the Book table, then adding some books. We finish by adding one final book with an explicit Id value of 1 , which should already exist due to adding some previous books. The CreateDatabase() and CreateBookTable() methods are quite basic and self-explanatory. The ExecuteSql(string sql, SQLiteExecuteType executeType) method is where most of the work gets done in this class, but overall we‚Äôre just asynchronously opening the database connection (if necessary), then executing our passed sql query, based on the execution type enumeration value: Lastly, to add a book to the database we have a few AddBookToDatabase() method signatures, depending whether we‚Äôre adding a book with or without an explicit Id value: With all that setup we can actually instantiate our SqliteAdapter class and see what happens when we try to add the same four books that we did in the LINQ example: As we can see, since we aren‚Äôt using LINQ, rather then getting a System.Data.Linq.DuplicateKeyException thrown our way, we get an SQLiteException instead. While the message is slightly different, the result is the same: We can‚Äôt use an identifier that already exists in the system! To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-07-26"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.AccessViolationException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-accessviolationexception", "abstract": "Making our way through the .NET Exception Handling series, today we‚Äôll be exploring the System.AccessViolationException in more detail. A System.AccessViolationException occurs when unmanaged/unsafe code attempts to use memory that has not been allocated, or to memory that it doesn‚Äôt have access to. In this article we‚Äôll explore the System.AccessViolationException a bit more, looking at where it resides in the .NET exception hierarchy. We‚Äôll also examine a functional C#/C++ code example to illustrate how System.AccessViolationExceptions are commonly thrown and what options you have for dealing with them in your own code, so let‚Äôs get going! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.AccessViolationException inherits directly from System.SystemException . As mentioned in the introduction, a System.AccessViolationException can only occur when your application is using unmanaged code. For many .NET applications, this will never occur, due to how .NET handles managed versus unmanaged code. Managed code is code that .NET compiles and executes using the common language runtime ( CLR ). Conversely, unmanaged code compiles into machine code, which is not executed within the safety of the CLR . Many languages that rely on .NET, such as C# and Visual Basic, are entirely compiled and executed in the CLR . This means that code written in C# is always managed code and, therefore, can never throw a System.AccessViolationException . However, a language like Visual C++ does allow unmanaged code to be written. In such cases, it‚Äôs entirely possible to access unallocated memory, and therefore, throw a System.AccessViolationException . To illustrate these differences and to see how System.AccessViolationExceptions might occur in your own projects we‚Äôll start with the full working code sample below, then break it down in more detail afterward. Since we‚Äôre using both C# and C++ in this example, we‚Äôll start with the C# and then move onto the C++: And here‚Äôs the (important) C++ code. While it obviously takes many more files and far more code to build a working C++ DLL, this shows the main source file ( FailingApp.cpp ) and the CreateReference() method we‚Äôll be using elsewhere: Now then, the entire purpose of the System.AccessViolationException is to inform us that something has gone wrong with our unmanaged code, so our example begins by importing a DLL using DllImport() , after which we include the method signature for the CreateReference() method that we‚Äôre importing for use in our managed C# app: Our unmanaged C++ code is very basic and contains just the CreateReference() method, inside which we have our breaking code attempting to create an invalid reference: With our unmanaged method imported we can try to use it in our managed C# app. We start with the ReferenceTest() method: Here we‚Äôre making a call to the imported CreateReference() method and trying to output a succesful result, while also catching any System.AccessViolationExceptions or global Exceptions that may occur. As you might suspect, the call to our imported CreateReference() method immediately fails and throws a System.AccessViolationException . However , for applications using .NET Framework 4.0 or higher, this exception is not caught by either of our catch blocks because the exception occurs outside of the memory reserved by the common language runtime. In other words, .NET purposefully ignores exceptions that don‚Äôt occur within the managed code of our C# application ‚Äî since the problem occurs within the unmanaged C++ code, we cannot catch this System.AccessViolationException by normal means. Therefore, our output just shows that an uncaught System.AccessViolationException has occurred: However, there may be some situations where it‚Äôs beneficial to actually catch System.AccessViolationExceptions and similar unmanaged code exceptions directly within managed code. This can be accomplished by applying the HandleProcessCorruptedStateExceptions attribute to all methods within your managed code that should be allowed to catch System.AccessViolationExceptions which originate from unmanaged code. Therefore, our ReferenceTestWithHandler() method includes the HandleProcessCorruptedStateExceptions attribute, but is otherwise identical to what we saw before in ReferenceTest() : Now, when we execute ReferenceTestWithHandle() and reach the unmanaged CreateReference() method we still throw a System.AccessViolationException , but our catch (System.AccessViolationException exception) block is able to catch it this time and send it along to Logging.Log() for proper output: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-07-02"},
{"website": "Airbrake", "title": ".NET Exception Handling ‚Äì System.ComponentModel.Win32Exception", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-componentmodel-win32exception", "abstract": "Today, in our continued journey through the .NET Exception Handling series, we‚Äôll be exploring the wide world of the System.ComponentModel.Win32Exception . As indicated by the Win32 part of the name, the System.ComponentModel.Win32Exception occurs only when dealing with legacy-style applications or code ‚Äî where your application must invoke direct operating system calls, such as trying to execute other applications. Throughout this article we‚Äôll dive into the System.ComponentModel.Win32Exception in more detail, including where it resides in the .NET exception hierarchy. We‚Äôll also dig into a few functional C# code examples to better illustrate how System.ComponentModel.Win32Exceptions might be commonly thrown in your own coding adventures, so let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.Runtime.InteropServices.ExternalException inherits directly from System.SystemException . Finally, System.ComponentModel.Win32Exception inherits from System.Runtime.InteropServices.ExternalException . The System.ComponentModel.Win32Exception is the most basic exception type that will occur within your .NET applications when something goes wrong while using internal win32 -style operating system calls. These can vary from invalid path and file not found errors to network address issues and resource management problems. Since System.ComponentModel.Win32Exceptions are wrappers for older forms of exceptions, each of the possible errors you can encounter will have its own NativeErrorCode property value, which is a 32-bit integer referring to the relevant Win32 Error Code value associated with the exception that was thrown. We won‚Äôt go over them all here, but that win32 error code URL will be a good reference when trying to debug your own System.ComponentModel.Win32Exceptions . To see a System.ComponentModel.Win32Exception in action the best place to start is with our example code. The whole snippet is displayed below, after which we‚Äôll go over it in a bit more detail: Most of our example occurs within the StartProcessFromPath() method, which accepts a string path value that should point to an executable file. We then instantiate a new Process and attempt to start it with the .Start() method. The .Start() method returns a boolean indicating if the attempt was successful, so we simply use that boolean to perform some extra logic, such as outputting some information to the log to indicate a success or failure, along with a small Sleep() period to give us time to see the newly launched window, if applicable. We finish up by killing the process with the .Kill() method. To illustrate both a success and failure our Main() method tries to launch notepad.exe as well as invalid.exe : As you might suspect, the first StartProcessFromPath() call works just fine and we see the Notepad window pop up for two seconds before disappearing due to the Kill() method call. We also get confirmation of the success from the console log output: On the other hand, our second StartProcessFromPath() call to the invalid.exe fails and throws a System.ComponentModel.Win32Exception our way: We also made sure to output the relevant Win32 Error Code by outputting the NativeErrorCode property when a System.ComponentModel.Win32Exception is caught, so we‚Äôre able to see that the win32 error code is: 2 . If we refer back to the Win32 Error Code table we find that the value of 2 (i.e. 0x00000002 ) corresponds to the ERROR_FILE_NOT_FOUND enumeration, with the description of The system cannot find the file specified. Sure enough, this description matches the System.ComponentModel.Win32Exception output message we got exactly! To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-06-30"},
{"website": "Airbrake", "title": ".NET Exception Handling ‚Äì System.ArgumentNullException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/argumentnullexception", "abstract": "Making our way through our .NET Exception Handling series, today we‚Äôll take a closer look at the System.ArgumentNullException . Similar to the System.ArgumentException that we covered in another article the System.ArgumentNullException is the result of passing an invalid argument to a method ‚Äî in this case, passing a null object when the method requires a non-null value. Similar to other argument exception types the System.ArgumentNullException isn‚Äôt typically raised by the .NET Framework library itself or the CLR , but is usually thrown by the library or application as an indication of improper null arguments. In this article we‚Äôll explore the System.ArgumentNullException in more detail including where it resides in the .NET exception hierarchy. We‚Äôll also take a look at some functional sample C# code to illustrate how System.ArgumentNullException should typically be thrown in your own projects, so let‚Äôs get going! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.ArgumentException inherits directly from System.SystemException . Finally, System.ArgumentNullException inherits directly from System.ArgumentException . As mentioned in the introduction the occurrence of a System.ArgumentNullException typically means the developer of the module or library you‚Äôre using wanted to ensure that a non-null object was passed to the method in question that caused the exception. Similarly, when writing your own code it‚Äôs considered a best practice to always validate the passed arguments of your methods to ensure no passed values are null and, therefore, might break your code or lead to unintended consequences. For more information on the code quality rules that apply see CA1062: Validate arguments of public methods . In practice this means that throwing System.ArgumentNullExceptions should be performed within virtually every method you write that should not accept a null argument. To illustrate we have a simple example of our custom Book class with a few properties of Author and Title : We‚Äôve opted to create the private _author and _title fields and then use them for our public properties of Author and Title , respectively. This allows us to create a custom Author.set() and Title.set() methods in which we check if the passed value is null . In such cases we throw a new System.ArgumentNullException and, rather than passing in a full error message as is often the case, System.ArgumentNullException expects just the name of the parameter that cannot be null . To illustrate this behavior we have two basic example methods: As you can see the ValidExample() method creates a new Book instance where both the Title and Author parameters are provided so no exceptions are thrown and the output shows us our book object as expected: On the other hand our InvalidExample() method passed null as the second Author parameter, which is caught by our null check and throws a new System.ArgumentNullException our way: Using copy constructors is another area to be careful of and to potentially throw System.ArgumentNullExceptions within. For example, here we‚Äôve modified our Book class slightly to include a copy constructor with a single Book parameter that copies the Author and Title properties. In addition, to illustrate the difference between regular instances and copies, we‚Äôve also added the IsCopy property and set it to true within the copy constructor method only : This presents a potential problem which we‚Äôll illustrate using two more example methods: ValidCopyExample() works just fine because we first create a base Book instance then copy that using our copy constructor to create the copy instance, which we then output to our log. The result is a Book instance with the IsCopy property equal to true : However, we run into trouble in the InvalidCopyExample() method when trying to pass a null object to our copy constructor (remember that C# knows we‚Äôre using that copy constructor since we‚Äôve only passed one argument and the other constructor [ Book(string title, string author) ] requires two arguments). This actually throws a System.NullReferenceException when we hit the : this(book.Title, book.Author) line since our code cannot reference properties of the null book object that we passed. The solution is to use an intermediary null checking method on our passed instance before we actually attempt to set the properties. Here we‚Äôve modified our copy constructor to use the newly added NullValidator() method: With these changes we can now invoke our InvalidCopyExample() method again and produce the System.ArgumentNullException that we expect because our passed book argument is still null : To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-06-07"},
{"website": "Airbrake", "title": ".NET Exception Handling ‚Äì System.InvalidCastException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/invalidcastexception", "abstract": "Moving along through our .NET Exception Handling series, today we‚Äôll dig into the System.InvalidCastException . Put simply, a System.InvalidCastException is thrown when trying to perform some type of conversion an object to an invalid type. ga In this article we‚Äôll examine everything about the System.InvalidCastException , including where it sits within the .NET exception hierarchy and by giving a few code examples to illustrate how this exception might come about. Let‚Äôs get going! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.InvalidCastException inherits directly from System.SystemException . There are a number of possible ways to throw a System.InvalidCastException , so let‚Äôs just jump right into some example code to see exactly what this error means and how to deal with it. Probably the most commonly used technique that could result in a System.InvalidCastException is performing a cast to convert one type to another type. In statically-typed languages like C# , after a variable is declared, it typically cannot be declared again or used to store data that is incompatible with that particular type. By using a cast , we‚Äôre able to tell the common language runtime ( CLR ) that we want to convert from one type to another while acknowledging that there could be data loss in the process. The cast syntax is typically to precede the variable name with the type to be cast into, which should be within bounded parentheses. For example, here we want to cast an integer to a decimal: This works without a problem because .NET understands how to properly convert from an integer (whole number) to a decimal representation of that same number. However, trouble can occur when trying to perform what is known as downcasting : Trying to convert an instance of a base (parent) type to one of its derived (child) types. For example, here we have a simple Book class with an Author and Title property. We then inherit the Book class to create the PublishedBook class, which adds the PublishedAt property: Let‚Äôs try to cast an instance of of Book to the derived type of PublishedBook : Sure enough, this fails and throws a System.InvalidCastException : While downcasting like this doesn‚Äôt work, let‚Äôs try upcasting instead, in which we convert from a derived type ‚Äúup‚Äù to a base type: The output shows us that upcasting works just fine, since the CLR knows how to ‚Äúreduce‚Äù a more complex object and convert to its simpler, base type. Another common action that could throw a System.InvalidCastException is when trying to use the cast operator syntax to convert to a string value. Here we‚Äôre attempting to convert our age object to a string value via casting : Unfortunately, .NET isn‚Äôt pleased with this and fails while also throwing a System.InvalidCastException : The recommended technique to use here is to call the ToString() method on the object in question. Since ToString() is defined by the Object class (and thus is inherited by all derived objects therein), it‚Äôs always available and will work: This works just fine and outputs our converted age: While there are a few others ways to incur a sysex , the last technique we‚Äôll cover here is when trying to call a primitive type‚Äôs IConvertible implementation to perform a conversion to a type that isn‚Äôt supported. The IConvertible interface can be used to provide a wide range of conversion methods, allowing the implementing type to convert to common language runtime types such as Boolean , String , Int32 , and so forth. To see IConvertible in practice, here we have a simple example where we‚Äôre trying to convert from a bool to a char type using IConvertible's ToChar() method: Unfortunately, there‚Äôs no way to convert from a bool to char so a System.InvalidCastException is thrown: The only solution in cases like this is to ensure the types you‚Äôre working with are compatible with one another, meaning that the CLR knows how to convert from one to the other. Here we‚Äôre trying to convert from an int to to Char , which should work just fine: Sure enough, the CLR knows how to convert from an intger to a character, so our conversion is successful: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-05-28"},
{"website": "Airbrake", "title": ".NET Exception Handling ‚Äì System.Net.WebException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-net-webexception", "abstract": "Moving along through our .NET Exception Handling series today we‚Äôll take a closer look at the System.Net.WebException . While .NET provides numerous exceptions that are related to connectivity and web issues, the System.Net.WebException is one of the most generic (and thus most common) errors you‚Äôll see in your own adventures. Throughout this article we‚Äôll dive into the System.Net.WebException in more detail and see where it sits within the .NET exception hierarchy. We‚Äôll also look at a fully-functional C# code example to help illustrate how System.Net.WebExceptions might occur in day-to-day coding, so let‚Äôs get started! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.InvalidOperationException inherits directly from System.SystemException . Finally, System.Net.WebException inherits directly from System.InvalidOperationException . Since .NET tends to feature far more complex (and specific) exception classes than simpler languages like Ruby or JavaScript, we usual with our System.Net.WebException exploration we‚Äôll just start off by looking at the full example source code first and then we‚Äôll walk through the major sections to see what‚Äôs going on: We‚Äôre also using a few Utility namespace classes which we won‚Äôt explain here but feel free to check out the inline documentation for more info. Note that we‚Äôre also making use of the powerful AngleSharp HTML parser library, so be sure to add that reference to your project if you‚Äôre trying this yourself. Since System.Net.WebExceptions are rather generic the basic purpose of our example script here is to send a WebRequest to a specific URI of our choice. If we‚Äôre able to successfully connect we then want to grab the HTML of the page in question using a WebResponse object. To simplify things so we don‚Äôt have to write everything from scratch we‚Äôre also using the AngleSharp parsing library to handle most of this work behind the scenes. Therefore, all we really need to start is our WebParser class and the GetHtmlDocument() method that uses AngleSharp to try to connect to the provided uri string, get a response result, read the result as a string (which is the HTML of the page in this case), then parse that result to convert it to an IHtmlDocument which we‚Äôll use later to extract some data from the page. The catch blocks in the GetHtmlDocument() method may seem a bit convoluted, but it ensures that we can capture any potential System.Net.WebExceptions that might be thrown. Now we have a simple ParseTest() method that we use to perform our business logic. In this case we‚Äôre creating an IHtmlDocument object from the uri , querying the resulting HTML to get all major header elements ( h1 and h2 ), extracting the text content of those headers, and then splitting the headers up into an array. This just serves as a simple example of creating a remote web connection and parsing the HTML for some info we want. The last step is to output the title of the page and the headers we collected to our log: To see this in action we have two different URIs we want to try in our ParseTest() method: For our first test we‚Äôre trying to connect to the Airbrake.io homepage and, as you might suspect, everything goes as planned. We were able to connect and gather the title of the page and the main header values, which is indicated by the log output of our script: Sure enough if we manually open the Airbrake.io homepage in a browser window we can confirm that the title and main headers all match what our application collected ‚Äî cool! However, our second ParseTest() call attempts to connect to a localhost port that my development machine doesn‚Äôt have open, so we invariably produce a number of errors. Most of those exceptions are actually contained within a System.AggregateException instance, which is why we needed the complicated method of exception extraction to see what actual exception object types we‚Äôre getting by digging into the InnerException property. Therefore, as it happens ‚Äî in addition to a few other exception types ‚Äî we also end up catching a System.Net.WebException , as seen in the log output: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-06-12"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Security.SecurityException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-security-securityexception", "abstract": "Next up in our journey through our .NET Exception Handling series, today we‚Äôll take a gander at the System.Security.SecurityException . System.Security.SecurityExceptions occur when the caller ‚Äî that is, the executing user account ‚Äî doesn‚Äôt have proper permissions to access a particular resource. Throughout this article we‚Äôll examine the System.Security.SecurityException in more detail, including where it sits in the .NET exception hierarchy, along with some code samples using C# that will illustrate how System.Security.SecurityExceptions might be thrown, so you can better understand how to handle them yourself. Let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.Security.SecurityException inherits directly from System.SystemException . Permissions can be a tricky thing to deal with during development, particularly as an application grows in size and scope, thereby requiring the use of additional libraries, modules, services, connections, and so forth. Each additional component added into the application is just another potential security risk, and something that needs to be properly managed with permissions that allow the application (and its own processes therein) to perform the tasks it needs to, while simultaneously disallowing unintended access. Due to these potential security risks the .NET Framework includes a vast array of security-related capabilities. The entire System.Security namespace provides numerous classes and helpers designed to make security management as easy and robust as possible. And, of course, the System.Security.SecurityException we‚Äôre looking at today is among those many tools. As previously mentioned, a System.Security.SecurityException is thrown when the application‚Äôs caller attempts to access a resource it doesn‚Äôt have permission for. These resources could be all sorts of things, but for our purposes here we‚Äôll use a similar example to that given by the official documentation: trying to manipulate the Windows registry without appropriate permissions. We‚Äôll start with the full working code example below, after which we‚Äôll break the code down a bit more to see what‚Äôs going on: Since we‚Äôre trying to manipulate registry keys we start with the CreateRegistryKey() method: The subKeyTree parameter is the registry key path we‚Äôre trying to create. The PermissionState state parameter is the permission state we want to use while attempting to make our registry change. To do so, we create a new PermissionSet and add a new RegistryPermission element with the state parameter value. Finally, we need to ensure that the current process doesn‚Äôt use any inherent permissions it may have from the operating system user account or the like, and instead, only uses the permissions we‚Äôve granted within the method. This is exactly what the call to permissionSet.PermitOnly() accomplishes. With everything set we can then try to create the registry key with the CreateSubKey() method. To test our CreateRegistryKey() method we first declare the registry key string, then call CreateRegistryKey() with PermissionState.None passed in: Since the temporary permission set we used includes PermissionState.None it isn‚Äôt much surprise that this ended up throwing a System.Security.SecurityException at us: In this case we can resolve our issue by passing PermissionState.Unrestricted to the CreateRegistryKey() method, which should ensure that our RegistryPermission object has unrestricted access: Sure enough, this works just fine and our log indicates that the registry key was generated: Opening regedit.exe and drilling down to that location in the registry also confirms that the registry entry was created. In order to clean up after ourselves and not leave any unnecessary registry keys lying around, we‚Äôve also defined the DeleteRegistryKey() method: This effectively attempts to reverse the registry key creation process we performed earlier, also by using permission sets. The use of the underlying .NET method DeleteSubKeyTree() forces us to provide the parent key name to our method, rather than the full subkey tree as we did with CreateRegistryKey() : Once again we‚Äôre trying two different calls to the DeleteRegistryKey() method; one with no permissions, and one with unrestricted permissions. The log output result shows both an initial failure on the first call, followed by success on the second: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the A irbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-07-03"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.DllNotFoundException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-dllnotfoundexception", "abstract": "Moving right along through our .NET Exception Handling series, today we‚Äôll take a closer look at the System.DllNotFoundException. As indicated by the name, a System.DllNotFoundException occurs when attempting to import a DLL that doesn‚Äôt exist. In this article we‚Äôll examine the System.DllNotFoundException in more detail, including where it resides in the .NET exception hierarchy, along with a functional C# code example that imports a few Win32 DLLs that allow our application to send keyboard inputs to other applications. Let‚Äôs get started! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.TypeLoadException inherits directly from System.SystemException . Finally, System.DllNotFoundException inherits directly from System.TypeLoadException . For many .NET applications there may be little to no reason to import DLLs, since the more modern frameworks like .NET and its respective functionality provides most everything that may be required. Now that .NET Framework has been the standard for well over a decade (and upwards of 15 years for some teams), fewer and fewer new applications are being developed that need to integrate with older Win32 -style unmanaged functions. Unfortunately, when your application must perform actions outside its own domain, particularly interacting with other windows and applications, there‚Äôs often no other option then to import some DLLs and get into the mess that is unmanaged code and APIs. That‚Äôs why the .NET Framework includes exceptions like the System.DllNotFoundException . We‚Äôll use the rest of this article to explore a relatively simple example of using a Win32 DLL to communicate between our C# application and another application: The one and only notepad.exe . Below you can find the full working code example. Feel free to glance over it or copy it to your own application if you‚Äôre following along: The purpose of our example application is simple: Open Notepad (if not already open) and send a few keystrokes to the input window, resulting in \"hello world\" being input. To get started we‚Äôve created a Screen class that contains most of the window-based logic: We begin with an instance property called Handle that will store the relevant window handle once we locate it. We also have the VirtualKeyCodes enumeration that contains a few important key codes (the full list can be found here ). Following that comes the most critical section of our code: Importing some unmanaged Win32 functions from outside DLLs: For this example we‚Äôre importing five different functions from user32.dll , though we could arguably get away with only two ( GetWindow and PostMessage ). For those unfamiliar with using DllImport() , the syntax is similar to other attributes in C#, where we indicate the DllImport() settings immediately prior to the function signature we‚Äôre importing. A few of the imported functions also include the EntryPoint property declaration for DllImport() , which indicates the explicit name of the function within the DLL library. By specifying an EntryPoint value, this allows us to rename the function that will be available to the rest of our application, typically by making it something more appropriate or easier to use. For example, we‚Äôve changed the base name of FindWindowEx to GetChildWindow . Next in the Screen class comes the constructor, an explicit destructor, and then a single helper method for sending keystrokes to the window: As indicated by the comments, the single constructor method allows us to retrieve the handle of a parent window first, and then retrieve (and set) the handle of a child window within that parent. This is important for our purposes, because Notepad itself has a parent window (which contains the title and menus and such), but then the actual window where text is input is a child window with a class name of \"Edit\" . The ~Screen() destructor allows us to call ReleaseContext() , which aims to release the window context of our retrieved window handle during the finalization process (after we‚Äôre all done with the Screen instance). This step isn‚Äôt necessary, but illustrates some extra functionality we‚Äôre pulling from the Win32 unmanaged code. Finally, PostKeyDown() accepts a passed Key , then uses the imported PostMessage() function to post a message to the handle of our window. We also need to pass a valid VirtualKeyCode , so here we‚Äôre using KeyDown . That‚Äôs most of the setup. Now we can try testing it out in Program.Main() : We start by verifying if the notepad process is already running by checking by name. If the result has no length, that indicates no process was found, so we create a new Process instance with the location of notepad.exe passed in, then Start() it up. Since this code is entirely synchronous, it‚Äôs also important that we don‚Äôt start sending key post messages to the window before it has fully loaded. Therefore, by calling process.WaitForInputIdle() the application will wait for Notepad to load up and accept user input before continuing. With Notepad ready to go we create a new Screen instance and pass in the parent class name (‚ÄúNotepad‚Äù), parent window name (‚ÄúUntitled ‚Äì Notepad‚Äù), and child class name (‚ÄúEdit‚Äù). This sets the screen.Handle property to the child input window of Notepad, which can actually accept our text input. Finally, we send some inputs using PostKeyDown() . In this case, we‚Äôre sending the standard ‚Äúhello world‚Äù string, followed by Return to create a new line. Sure enough, running this code works as expected; Notepad is opened (if it wasn‚Äôt already) and ‚Äúhello world‚Äù is printed to the editing window! Now that we have a working application that is successfully importing outside Win32 DLLs, let‚Äôs make a very minor tweak and see what happens. Here we‚Äôre modifying one DllImport() method call line with a small typo, changing user32.dll to user23.dll . We‚Äôre also adding a try-catch block to our Screen() constructor method so we can catch any exceptions: Now that we‚Äôre attempting to import an invalid DLL, as you might expect, attempting to run our application throws a System.DllNotFoundException at us: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-07-09"},
{"website": "Airbrake", "title": ".NET Exception Handling ‚Äì System.Net.Sockets.SocketException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/socketexception", "abstract": "Making our way through our .NET Exception Handling series, today we‚Äôre going to take a look at the System.Net.Sockets.SocketException . Typically, a System.Net.Sockets.SocketException is thrown when an error occurs within a socket , such as a failure to connect to a remote network. In this article we‚Äôll examine the System.Net.Sockets.SocketException in more detail, including where it resides within the .NET exception hierarchy, along with some working code examples to illustrate how System.Net.Sockets.SocketExceptions might be thrown in real-world code. Let‚Äôs get this party started! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.Runtime.InteropServices.ExternalException is inherited from the System.SystemException class. System.ComponentModel.Win32Exception is inherited from the System.Runtime.InteropServices.ExternalException class. Finally, System.Net.Sockets.SocketException inherits from System.ComponentModel.Win32Exception . As with most of the .NET exceptions, it‚Äôs easiest to understand how System.Net.Sockets.SocketException works by just starting right out with a code example. The full code is directly below, after which we‚Äôll take a bit of time to examine it: We won‚Äôt get into the Utility namespace or Logging class because we‚Äôve used that many times before and it‚Äôs just a means of simplifying our output needs during development. Instead, let‚Äôs look at the meat of our example, which resides in the Program class where we defined two simple methods to help us attempt to establish a socket connection. As you may recall, a socket (or network socket ) is an endpoint on another system for sending/receiving network data. Most commonly, a socket is used to generate a socket address , which consists of an IP address and port number that is used to connect with another machine. With that in mind we have our ParseIPEndPoint() method, which takes the provided server string value in the typical form of address:port , and attempts to parse a valid uri from that provided server IP and port. We aren‚Äôt covering anywhere near the full spectrum of possible Uris or connection types here, just the basics with and without http , but this should illustrate the point. If a valid uri is created, we return a new IPEndPoint instance, which is a .NET class that allows us to easily store network endpoint information (ip, port, etc). If the uri parse fails, we throw an exception. Now, we make use of the ParseIPEndPoint() method in the ConnectToSocket() method, which also expects a single string parameter representing our ip:port . We parse that and generate an IPEndPoint , then create a new Socket using the IPEndPoint that was generated. We‚Äôre connecting via TCP protocol (just like most web browsers), so that‚Äôs all fine. Finally, we attempt to establish a connection to our socket instance via the socket.Connect() method. If all goes well, we output a message indicating the connection was made, then Close() the connection. To test this out and see how a System.Net.Sockets.SocketException might be thrown, we have three basic calls to our ConnectToSocket() method, one that works and two that will fail: The first call works fine because my localhost machine ( 127.0.0.1 ) accepts a connection to the default http port ( 80 ): However, the second attempt fails because my machine does not accept connections on port 4444 (I tried to pick a random port number here, though some machines may run services on this port). As a result, my computer refuses the connection, which causes our little application to throw a System.Net.Sockets.SocketException , as we expected: Lastly, we try establishing a socket connection with a remote server, in this case one of Google‚Äôs DNS servers ( 8.8.8.8 ). Once again, our connection attempt fails, though for a slightly different reason this time: In this case, while it is valid to issue a ping 8.8.8.8 request to Google‚Äôs DNS, it doesn‚Äôt allow a socket connection to be established, so the attempt fails and an exception is thrown. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-05-12"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.ArgumentException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-argumentexception", "abstract": "Continuing through our .NET Exception Handling series, today we‚Äôll take a little gander at the System.ArgumentException . As the name implies, the System.ArgumentException is commonly thrown when there is an issue with a provided argument. As with a few other exceptions of its type, the System.ArgumentException is not thrown during normal execution by internal .NET classes or API calls but, instead, is commonly used by developers as an indication of an improper argument attempt. Throughout this article we‚Äôll further explore the System.ArgumentException , including where it sits in the .NET exception hierarchy, along with a bit of C# example code to see how we might go about using System.ArgumentExceptions in our own projects. Let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.ArgumentException inherits directly from System.SystemException . As described in the introduction, the System.ArgumentException is among a handful of .NET exceptions that were added into the .NET API, but are not typically triggered during the course of normal execution. That is to say, if you encounter a System.ArgumentException during the execution of an application, the act of throwing that particular error was put there intentionally by a developer, as a means of alerting you to a problem with your arguments, as opposed to some sort of system-level issue. In most cases, the common language runtime ( CLR ), or the particular class library you‚Äôre using, will have chosen to throw a System.ArgumentException , based on the arguments you‚Äôre providing. For example, here we‚Äôve created a simple GetFullName() method, which accepts two string parameters named first and last . As the name implies, we‚Äôre attempting to combine both of them and return the result: Now, the first option that comes to mind when attempting to pass invalid arguments to a method may be to simply pass nothing where a required parameter belongs: However, most code editors , or at least the CLR itself, will catch this issue during build and not allow the application to be executed, since it recognizes a required parameter is missing. Here is the particular build error reported to me after a failed build attempt: The other way we might provide invalid arguments to a method is to pass all the correct types where the method expects them, but using invalid values. This is where our if blocks within the GetFullName() method come in: Here we‚Äôve decided that neither parameter can be null , nor can their Length be zero. This is a basic form of validation, but it gets the job done for our purposes, and ensures that an empty String or null value are not acceptable. If either parameter matches those criteria, we throw a new System.ArgumentException to inform the user of the issue. With GetFullName() ready to go, we have a couple methods to test it out with. First is ValidExample() , which executes our code within a try-catch block and attempts to combine the names John and Doe then output the result: As expected, this works just fine and the output shows our combined name: On the other hand, our InvalidExample() method passes a null value to the second parameter of GetFullName() , which should throw a System.ArgumentException like we‚Äôve specified: Sure enough, while there‚Äôs no compilation/build issue, since the CLR and code editor both recognize null as a valid type to be passed to a String parameter field, our backup code catches that the last value is null , and throws our System.ArgumentException at us: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-05-19"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì KeyNotFoundException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-collections-generic-keynotfoundexception", "abstract": "Next up in our continued .NET Exception Handling series we come to the System.Collections.Generic.KeyNotFoundException. In most cases the System.Collections.Generic.KeyNotFoundException is thrown when attempting to access a Collection element using a key that doesn‚Äôt exist within said collection. In this article we‚Äôll take a closer look at the System.Collections.Generic.KeyNotFoundException , including where it sits in the .NET exception hierarchy, along with some functional C# code examples to help illustrate how System.Collections.Generic.KeyNotFoundExceptions are typically thrown, as well as how to handle the differences in collection types (and the inability to natively capture the key that caused the exception in the first place). Let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.Collections.Generic.KeyNotFoundException inherits directly from System.SystemException . Unfortunately, in spite of the fact that it belongs to the System.Collections namespace, the System.Collections.Generic.KeyNotFoundException sometimes has trouble capturing key errors from certain types of collections. For example, accessing an invalid key in List doesn‚Äôt throw a System.Collections.Generic.KeyNotFoundException , whereas doing the same in a Dictionary&lt;TKey, TValue&gt; does . To help illustrate some of these differences we‚Äôll start with the full code sample below, after which we‚Äôll go through the various methods and examples in more detail: We start with a simple IBook interface and the Book class that implements it, which we‚Äôll be using throughout our examples to create some data collections: Next we define the ListExample(IReadOnlyList list) method, which will output the list before attempting to explicitly output the element at index list.Count (which, as we know, will exceed the existing indices by one since elements are zero-based): We call the ListExample(IReadOnlyList list) method in our Program.Main() method by instantiating a new List collection to pass in: As you can probably guess this throws an exception that we see in our log output, however, that thrown exception it isn‚Äôt a System.Collections.Generic.KeyNotFoundException : As previously mentioned, unfortunately, using an invalid key within some collection types (such as List&lt;&gt; ) produces a System.ArgumentOutOfRangeException . Let‚Äôs try a Dictionary&lt;TKey, TValue&gt; object instead and see what happens. Here we have the DictionaryExample(IReadOnlyDictionary&lt;int, Book&gt; dictionary) method that performs the exact same logic as ListExample(IReadOnlyList list) , except with a passed in Dictionary&lt;int, Book&gt; instead: To test this method we start by creating a new dictionary instance to pass to the method: Executing this code now produces a System.Collections.Generic.KeyNotFoundException : There‚Äôs one major problem though: The System.Collections.Generic.KeyNotFoundException class doesn‚Äôt provide any means of determining which key was the problematic key that wasn‚Äôt present and caused the exception in the first place. There are a few different ways to deal with this problem: Use the Dictionary&lt;TKey, TValue&gt;.TryGetValue() method to explicitly check for a value at the specified key, then handle the boolean result of that method call to determine what should occur. Create a custom ImprovedKeyNotFoundException class that inherits from System.Collections.Generic.KeyNotFoundException , and includes a .Key property to track the problematic key. Then create an extension method for Dictionary&lt;TKey, TValue&gt; that checks if a passed key exists in the dictionary. If the key isn‚Äôt found, throw a new ImprovedKeyNotFoundException with the associated problematic .Key property set for use in the exception output message. Alternatively, create a custom ImprovedDictionary&lt;TKey, TValue&gt; class that inherits from Dictionary&lt;TKey, TValue&gt; and overrides the TValue method to perform a TryGetValue() method call for the provided key. If the key isn‚Äôt found, throw a new System.Collections.Generic.KeyNotFoundException with a modified Message that includes the problematic key value. Implementing the first solution of using Dictionary&lt;TKey, TValue&gt;.TryGetValue() is quite easy, so we‚Äôll start with that in the DictionaryUsingTryGetValueExample(IReadOnlyDictionary&lt;int, Book&gt; dictionary) method: We‚Äôre passing the same Dictionary&lt;TKey, TValue&gt; instance that we used before to call this, so executing the above causes the TryGetValue() method to fail, outputting our custom failure message that includes the missing key: The two remaining options for handling the invalid key are a bit more complex. However, of the two, the latter option of creating a new ImprovedDictionary&lt;TKey, TValue&gt; class that inherits from Dictionary&lt;TKey, TValue&gt; is far less code to implement, so we‚Äôll go with that one. To do so we start with the new class: Since this inherits Dictionary&lt;TKey, TValue&gt; the behavior is nearly identical to a normal dictionary, except for the extra check when retrieving a TValue . The downside, of course, is remembering to explicitly create dictionary instances using the new ImprovedDictionary&lt;TKey, TValue&gt; class. To test this out we‚Äôve created just such an object here: The result of our ImprovedDictionaryExample() method call attempting to access an invalid key element still throws a System.Collections.Generic.KeyNotFoundException , but notice that we successfully (and subtly) modified the exception Message property to include the problematic key: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-07-14"},
{"website": "Airbrake", "title": ".NET Exception Handling ‚Äì System.StackOverflowException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-stackoverflowexception", "abstract": "Today, as we continue through our .NET Exception Handling series, we‚Äôll be taking a closer look at the System.StackOverflowException . As indicated by the name, the System.StackOverflowException is thrown when a stack overflow occurs within .NET execution. Throughout this article we‚Äôll explore the System.StackOverflowException in more detail, including where it sits within the .NET exception hierarchy, along with a few code examples to illustrate some potential causes of System.StackOverflowExceptions . Let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.StackOverflowException is inherited from the System.SystemException class. Before we get into the specifics of how .NET deals with the System.StackOverflowException , we should first briefly review what a stack overflow indicates when it pops up during program execution. In most cases, computer programs are allocated a certain range of memory addresses upon execution. These addresses are simply pointers to bytes of data (memory) that the application can use. Thus, the address space of an executing application contains a specific quantity and range of memory addresses which can be safely used by the application to store and manipulate memory. Since available memory is finite, the address space assigned to our .NET application is limited to certain bounds. The actual size of this address space depends on many factors, but the result is that our application can only allocate and use a certain amount of memory before it runs out. In most cases, the common language runtime ( CLR ) will constantly free up unused memory from the stack , to be used by future processing. However, in some cases, the application‚Äôs code may attempt to perform tasks that require more space (more memory) in the address space than was allocated to the program in the first place. If this happens, the application will generate a stack overflow error which, in the case of .NET, throws a System.StackOverflowException . To illustrate how a System.StackOverflowException might appear in actual code, let‚Äôs take a look at a simple example: Here we have a simple StackOverflowExample() method in which we‚Äôre iterating our counter value. We then recursively call the self method ( StackOverflowExample() ), forcing execution to repeat our method call ad nauseam. Just to confirm we‚Äôre performing an iteration every time, we also output our counter value every 1000 iterations. Eventually, this infinite recursion will cause a problem; specifically, it will throw a System.StackOverflowException : As it happens, newer versions of .NET do not allow for System.StackOverflowExceptions to be caught in the typical try-catch block. Instead, the process terminates itself by default. Execution will break if a System.StackOverflowException occurs during debugging within Visual Studio, for example. But, in normal production applications, a System.StackOverflowException simply causes a fatal crash, which is obviously bad news. Therefore, the suggested way to handle potential System.StackOverflowExceptions is to write code that prevents them in the first place. In the example above with an infinite recursion, we can add a simple stop-gap measure that checks how many times our recursion has occurred, and back out of the process after a set number of times: For the PrevantativeExample() method we‚Äôve added a new COUNTER_MAX constant with a value of 10,000 . Within our method code, we only allow recursion to occur if counter <= COUNTER_MAX . Once our counter exceeds COUNTER_MAX , we halt recursion: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-04-25"},
{"website": "Airbrake", "title": ".NET Exception Handling ‚Äì System.OutOfMemoryException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-outofmemoryexception", "abstract": "Taking the next glorious step down the shining path of our .NET Exception Handling series, today we‚Äôll be looking over the amazing System.OutOfMemoryException . As the name implies, the System.OutOfMemoryException typically occurs when the common language runtime ( CLR ) is unable to allocate enough memory that would be necessary to perform the current operation. We‚Äôll spend this article seeing exactly where the System.OutOfMemoryException resides within the .NET exception hierarchy, while also examining a trio of possible causes that could present a System.OutOfMemoryException in your own code. Let the adventure begin! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.OutOfMemoryException is inherited from the System.SystemException class. In spite of the name, the most likely cause of a System.OutOfMemoryException is not technically due to a lack of memory. Instead, a System.OutOfMemoryException can occur when attempting to increase the length of an instance of the StringBuilder class, beyond what is specified by its current MaxCapacity property. To illustrate, here we have some simple code that generates a new StringBuilder instance called builder : As indicated by the comments, we‚Äôre using a particular override of StringBuilder , in this case the StringBuilder(Int32, Int32) override, which defines the capacity and MaxCapacity property during initialization. In this case, both are set to 3 , the length of our firstName string. We then .Append that initial value to our builder , after which we attempt to .Insert our second value at the end of the existing string index. However, because we‚Äôve already set the MaxCapacity value to 3 , and we‚Äôve appended 3 characters, we‚Äôve used up all allocated memory for our StringBuilder instance. Thus, our .Insert attempt throws a System.OutOfMemoryException : In this case, the issue is that we‚Äôve told the CLR how much memory to allocate using the MaxCapacity property, which was assigned by using the StringBUilder(Int32, Int32) override. The simplest solution is to use a different override, one that doesn‚Äôt assign the MaxCapacity property. This will cause the default value to be set, which is Int32.MaxValue (i.e. roughly 2.15 billion). Another potential cause of a System.OutOfMemoryException is, of course, actually running out of memory during execution. This could be due to repeatedly concatenating large strings, executing as a 32-bit process (which can only allocate a maximum of 2GB of memory), or attempting to retain massive data sets in memory during execution. We‚Äôll use the latter issue in our example snippet below: This code serves no real functional purpose, but instead just illustrates one possible way of manipulating a huge data set within memory, without using any form of chunking to reduce the allocated memory footprint of the application. In this case, we‚Äôre just looping some 200 million times and adding a random number to our list of Doubles every time. Every 10 million loops we also output our current total. The result is that, eventually, the system cannot handle the amount of memory being used, so a System.OutOfMemoryException is thrown: The final snippet we‚Äôll look at today is taken from the official documentation . However, this code isn‚Äôt producing a System.OutOfMemoryException due to a memory issue, as with our other examples. Instead, this snippet illustrates how System.OutOfMemoryExceptions should be properly handled: Since a System.OutOfMemoryException indicates a catastrophic error within the system, it‚Äôs recommended that anywhere a potential System.OutOfMemoryException could occur be passed to the Environment.FailFast method, which terminates the process and writes a message to the Windows Log . Sure enough, executing the snippet above generates a log entry in the Windows Log , which we can see using the Event Viewer application: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-04-17"},
{"website": "Airbrake", "title": ".NET Exception Handling ‚Äì System.BadImageFormatException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-badimageformatexception", "abstract": "Today, as we continue along through our .NET Exception Handling series, we‚Äôre going to take a look at the System.BadImageFormatException . System.BadImageFormatException has nothing to do with gifs or jpgs , but instead, occurs when a .NET application attempts to load a dynamic link library ( .dll ) or executable ( .exe ) that doesn‚Äôt match the proper format that the current common language runtime ( CLR ) expects. Throughout this article we‚Äôll see exactly where System.BadImageFormatException sits within the .NET exception hierarchy and look at a few potential causes of System.BadImageFormatExceptions , so let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.BadImageFormatException is inherited from the System.SystemException class. As previously mentioned, a System.BadImageFormatException occurs in very specific circumstances: When .NET attempts to make use of a .dll or .exe that is, in some way, incompatible with the current common language runtime. What qualifies as an ‚Äúincompatible common language runtime‚Äù can vary somewhat, but typically this means either the .NET version ( 1.1 , 2.0 , etc) OR the CPU type ( 32-bit vs 64-bit ) of the various compiled assemblies do not match. Ultimately, System.BadImageFormatExceptions are an indication of incompatible versioning. For many modern software applications, major versions of often include breaking compatibility issues, preventing backward compatibility with some aspects of previous versions. .NET assemblies ( .dlls or .exes ) are much the same, and attempting to make use of two different types of assemblies that contain incompatibilities will often generate a System.BadImageFormatException . To illustrate, we‚Äôll go through a few different examples. I‚Äôve included the full code example below for reference, after which we‚Äôll explore the specifics in more detail: The first (and arguably most common) way to raise a System.BadImageFormatException is when attempting to make use of an unmanaged assembly, as if it were an assembly created with the .NET Framework. Unmanaged assemblies are assemblies that have been generated from code that is not handled and compiled by the common language runtime of .NET. This includes many older applications and assemblies, particularly those created for 32-bit systems. As an example, here we‚Äôre trying to load an unmanaged assembly ‚Äî specifically the well-known notepad.exe assembly that resides in our Windows/System32 directory: .NET is not to pleased with this, since notepad.exe is not managed (wasn‚Äôt compiled using .NET), and thus throws a System.BadImageFormatException: Another way we might throw a System.BadImageFormatException is when trying to load an assembly that was compiled using a different CPU type than what we‚Äôre executing .NET on currently. For example, throughout many of our code snippets we‚Äôve been making use of our simple Utility namespace that contains the Logging class, making it a bit easier to output log information during debugging and testing. By default, our Utility.dll is compiled as a 64-bit assembly. However, if we switch our current CPU configuration to execute as an x86 (32-bit) CPU, we run into some trouble: When attempting to load our Utility.dll assembly, which is 64-bit, while compiling our current code as 32-bit, .NET throws a System.BadImageFormatException, informing us these formats are mismatched: Lastly, we also run into trouble if we attempt to load an assembly that was compiled using a much older version of .NET (such as .NET 1.1): In cases like the one above, the System.BadImageFormatException will often be thrown at compile-time, rather than at runtime, since the .NET compiler recognizes the incompatibility before attempting to execute any of the code in the first place. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-04-12"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.OverflowException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-overflowexception", "abstract": "Moving along through our detailed .NET Exception Handling series, today we‚Äôll be tackling the ever-popular System.OverflowException. With a name that most developers will probably recognize, the System.OverflowException in .NET indicates that an invalid arithmetic, casting, or conversion error occurred within a checked context. Throughout this article we‚Äôll explore the System.OverflowException in greater detail, starting with a look at the (rather simple) .NET exception hierarchy chain into which it falls. We‚Äôll also go over a few functional C# code samples that will illustrate the two different scenarios in which System.OverflowExceptions are commonly thrown, so you‚Äôre better able to handle them in your own code. Let‚Äôs get going! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.OverflowException inherits from System.SystemException . Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. To understand what the System.OverflowException is, we should first briefly examine what overflow errors are in a more general sense. There are a few different types of overflow in computing. As you may recall, we explored the notion of stack overflow in our .NET Exception Handling ‚Äì System.StackOverflowException article. Feel free to check that out for all the details, but the long and short of it is that a stack overflow occurs when an application attempts to utilize more memory than was allocated to it in the memory address space . This results in a stack overflow exception in most applications, because the system recognizes the application is attempting to use memory that doesn‚Äôt ‚Äúbelong‚Äù to it. As in the case of the System.OverflowException , a general overflow typically refers to an integer overflow . This is similar to a stack overflow , except that, instead of attempting to use memory outside of the allowable bounds, the application is attempting to create numeric values outside the allowable bounds. We explored this concept a bit in our Ruby Exception Handling: NoMemoryError article. The basic issue is that any given data type, such as an integer , has a maximum value based on the number of bits (or bytes ) it is allocated. When your application attempts to create a value that would exceed that number of bits to store, unless it can be automatically converted to a larger data type, an integer overflow is thrown. To see this in action we‚Äôve created two methods for testing. The first of these methods is MultiplyNumbers(int a, int b, bool @checked = true) : Nothing too fancy going on here, except we‚Äôre using the @checked boolean parameter to determine if we should use a checked or unchecked context during the calculation. In C#, a checked context forces the common language runtime ( CLR ) to raise System.OverflowExceptions when overflows occur, while unchecked context simply ignores them and truncates the resulting value. To test out our MultiplyNumbers(int a, int b, bool @checked = true) method we are making two calls to it: If you aren‚Äôt familiar, the underscores ( _ ) in our large number literal are a new feature added in C# 7.0 called digit separators , which allow us to visually change how numbers are displayed without impacting their underlying value. Feel free to read more about this and other C# 7.0 features in our What‚Äôs New in C# 7.0? ‚Äì Digit Separators, Reference Returns, and Binary Literals article. Anyway, as you can see we‚Äôre merely attempting to multiple one billion by three, which should result in a value of three billion. Executing these calls gives us the following output: As we can see, the first checked context call throws a System.OverflowException because the total value of three billion exceeds the maximum value that can be stored in an integer of 2,147,483,647 . On the other hand, the second unchecked context call doesn‚Äôt throw an error, and instead produces an interesting result of -1,294,967,296 . Why on earth are we getting a negative result when multiplying two positive numbers together? The answer lies in how the computer handles overflow truncation. To examine this, what what happens if we take the -1,294,967,296 result we got, then subtract int.MinValue and add int.MaxValue to it: That‚Äôs incredibly close to our expected result of three billion. In fact, the loss of one extra digit is due to the fact that signed number values must represent the number zero with a particular combination of bits. This ‚Äúextra‚Äù value that is taken up during overflow rollover/truncation is lost in our resulting number above, giving us one less than the expected value when added back together. Cool. Now let‚Äôs take a look at the ConvertValueToType<T>(int value, bool @checked = true) method: This one is a bit more complex because we‚Äôre allowing the method to be called with a generic type ( T ). This method attempts to convert the passed value into whatever type T was provided. We can use this to make some type conversions in our calling code: Just as before, we‚Äôre making two calls to our method, the first being checked and the second unchecked context. Our goal here is to convert the int value of 200 into a sbyte , which is stored as a signed 8-bit integer in the background. Calling this code produces the following output: The first checked context call, as expected, throws a System.OverflowException because we‚Äôre attempting to convert a value of 200 into a signed 8-bit integer , which can only handle a maximum positive value of 127 . However, our unchecked context call is also throwing a System.OverflowException for the same reason, even though it shouldn‚Äôt produce overflow errors. The reason can be gleaned from the stack trace that produced the error, which I‚Äôve left in the output above. Since our method makes use of the Convert.ChangeType() method to perform the actual conversion, that built-in .NET method is overriding our unchecked context setting and enabling a checked context within its own execution. To remedy this we can try explicitly converting our int value to an sbyte : Sure enough, running this code results in a properly converted value, as expected: As before, the result is negative because we‚Äôve ‚Äúrolled over‚Äù the maximum positive value of 127 , just as we did above with our integer multiplication attempts. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-08-19"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Data.ObjectNotFoundException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-data-objectnotfoundexception", "abstract": "Making our way through our detailed .NET Exception Handling series, today we‚Äôll tackle the lovely System.Data.ObjectNotFoundException. The System.Data.ObjectNotFoundException is typically used and thrown when dealing with ADO.NET (or other data layer components) and an expected object cannot be found. Throughout this article we‚Äôll explore the System.Data.ObjectNotFoundException in a bit more detail, starting with a brief look at where it sits in the overall .NET exception hierarchy. We‚Äôll also look at some functional C# code examples illustrating how System.Data.ObjectNotFoundExceptions might be used in your own applications, so let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.Data.DataException inherits from System.SystemException . Lastly, System.Data.ObjectNotFoundException inherits from System.Data.DataException . Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As you may be aware, the .NET Framework includes literally hundreds of built-in Exception types, each intended for a particular scenario or purpose. To that end, many built-in exceptions are part of a specific namespace, so even if the actual name of an exception class doesn‚Äôt give much indication about its intended purpose, the namespace to which it belongs can help clue us in. I bring this up because our little friend, the System.Data.ObjectNotFoundException , is an example of just such an exception. The phrase ObjectNotFound is extremely generic, and the official documentation description is just as vague: ‚ÄúThe exception that is thrown when an object is not present.‚Äù With these limited clues as to its intended purpose, we‚Äôre left to our own devices as developers to decide when it‚Äôs most appropriate to use the System.Data.ObjectNotFoundException . Enter the actual namespace to which the System.Data.ObjectNotFoundException belongs. While ObjectNotFound could obviously apply to any sort of code, System.Data indicates it should be applied to database-specific activities, so that‚Äôs where we‚Äôll be using it in our example code. Specifically, our goal is to throw a System.Data.ObjectNotFoundException when one of our attempted SQL queries fails to provide any resulting data. Before we get into the code, it‚Äôs worth noting that we‚Äôre using a remote Microsoft Azure SQL Server, which has a copy of the AdventureWorks sample database installed for testing purposes. We‚Äôll be connecting to this server with a basic ADO.NET connection string, along with our credentials that we‚Äôve setup in our project‚Äôs Properties > Settings panel in Visual Studio. These settings are then automatically copied in the App.config file, which we can access programmatically when necessary: We‚Äôve also created a ExecuteQuery(string query) method, which handles all the database connection and query execution logic for us: We use a SqlConnectionStringBuilder instance to create a connection string using our aforementioned project settings. Once connected, we then perform a rudimentary SqlCommand execution by passing the query parameter as the CommandText property. After executing the command we critically check if any rows are present in the data result. If not, we throw a new System.Data.ObjectNotFoundException and include the problematic query in the error message. Otherwise, we collect the row data and output it to the log. Again, this is by no means a complete method to actually handle all (let alone most) SQL queries, but it serves the purpose of illustrating how we might use System.Data.ObjectNotFoundExceptions in data-related code. To test this method out we are passing two queries, both of which query customers in the database based on their respective last names: The first query, which retrieves all records with the LastName of \"Miller\" , works just fine and outputs a handful of customer records: Now, let‚Äôs try the same query, but using the LastName of \"Bates\" , which doesn‚Äôt exist for any customer records in the database: All in all, quite boring if you ask me, but our code did what we asked. Most of the time we‚Äôll get some data back from a query and output said data. However, when a query doesn‚Äôt return any results, we throw a System.Data.ObjectNotFoundException . Obviously it‚Äôs not typically ideal to use exceptions as means of controlling application flow, but in certain situations I can imagine a use for throwing a System.Data.ObjectNotFoundException when a database query fails to find expected records for one reason or another. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-08-27"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Xml.XmlException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-xml-xmlexception", "abstract": "Taking the next step in our journey through the vast .NET Exception Handling series, today we‚Äôre taking a closer look at the System.Xml.XmlException class. As you might suspect from the name, the System.Xml.XmlException is the generic error that is thrown when most XML-related errors occur, such as failure to parse malformed XML content. In this article we‚Äôll examine the System.Xml.XmlException by looking at where it resides in the .NET exception hierarchy. We‚Äôll also go over some fully functional C# code examples that will illustrate how XML might be commonly used, and how that can potentially lead to System.Xml.XmlExceptions in your own code. Let‚Äôs get this party started! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.Xml.XmlException inherits from System.SystemException . Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. There‚Äôs no time like the present, so let‚Äôs just jump right into our code sample and get to working with some XML! For our example code we have a small collection of books contained within a few local XML documents, books.xml and books-malformed.xml : It‚Äôs worth noting that, if you manually add a file to your Visual Studio project (such as books.xml ), you‚Äôll likely need to adjust the file properties and set the Copy to Output Directory flag to Copy always or Copy if newer . This will ensure that the project file in question is locally available to your executing assembly. With our book data in hand, we want to extract that data and use it in code. Our goal is to create a series of Book class instances for each book element found in our XML documents. Here‚Äôs the simple Book class we‚Äôll be using: In order to parse our XML we have many options, including LINQ to XML. However, our example XML documents are fairly basic in structure, so we don‚Äôt need any fancy queries in this particular tutorial. To read the XML and create our Book instances we‚Äôve created the CreateBooksFromXml(string path) method: This method starts by attempting to create an XElement from the passed XML path , then retrieves the IEnumerable<XElement> collection of elements with the corresponding element name of Book . We then iterate over that collection of elements and create a new Book class instance for each element, passing the appropriate XML element values to the corresponding arguments of the Book constructor. Since the XElement.Value property is a string data type, we need to explicitly convert the PageCount property element to an int using int.TryParse() . Finally, once our Book instance is created we output it to the log. The Program.Main(string[] args) method tests out our functionality two times, once for each respective XML document: As you might suspect from the XML document names, the first call using books.xml works just fine, creating new Book instances for each parsed XML element and outputting the Book instance objects to the log: However, the second call using books-malformed.xml throws a System.Xml.XmlException at us, indicating the position of the character that caused the issue: You may have picked up on it already, but the problem is a missing greater-than sign ( > ) following the opening PageCount element in the first Book element of Dune : Obviously, we can fix this by adding that missing greater-than sign back. Doing so and running our code again produces the proper output we‚Äôre after for the books-malformed.xml parse: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-08-23"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Xml.XPath.XPathException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-xml-xpath-xpathexception", "abstract": "Continuing our journey through the in-depth .NET Exception Handling series, today we‚Äôll go over the System.Xml.XPath.XPathException. A XPathException is thrown anytime an error occurs while performing basic XPath parsing, using classes such as XPathNavigator and the like. Throughout this article we‚Äôll explore the XPathException in more detail, starting with where it sits in the .NET exception hierarchy. We‚Äôll also look over some functional C# code samples that will show how we might typically try to parse an XML file using XPath expressions, and what might, therefore, cause a XPathException to occur, so let‚Äôs get going! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. The full exception hierarchy of this error is: System.Object System.Exception System.SystemException XPathException System.Exception System.SystemException XPathException System.SystemException XPathException XPathException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. To see how a XPathException might be thrown, we first need to briefly review what XML Path Language (or XPath ) is and how it works. In the simplest sense, XPath is an query language syntax used to select nodes in hierarchical XML documents. Since XML is an elemental, hierarchical format, XPath represents the relationships between nodes (or elements) using forward slashes ( / ), along with a number of special characters. thus, consider an XML document that looks like this: With XPath, we could select nodes simply by indicating their element names , separated by a forward slash. Thus, the inner-most element could be selected with XPath of: //Base/First/Second There‚Äôs far more to learn about XPath, so if you‚Äôre interested, the MDN Documentation is a solid place to start. For our sample code today we‚Äôll be trying to select nodes from a simple books.xml file: Most of our code is found in the GetXPathNodesFromXml(string file, string xPath, XmlNamespaceManager manager = null) method: All this method really does is creates an XPathDocument for the passed XML file, then we use a new navigator to select the node(s) using the passed xPath string and (optional) XmlNamespaceManager . All selected nodes are output to the log. To test this out with our books.xml document we‚Äôve defined a relatively basic XPath expression that selects the Title element text for each unique Book element: Everything looks good, but executing this code immediately outputs a problem, in the form of a thrown XPathException : Experienced XPathers may have noticed the issue before we even tried to run this code, but the problem here is that our XML structure uses an XML namespace of Airbrake , which precedes the parent Books element. Since the XmlNamespaceManager manager = null parameter of our method defaults to null, we didn‚Äôt pass a manager to the navigator.Select(...) method call, which is required in this situation where our XML document uses a namespace. To resolve this, we‚Äôve added a signature override that accepts namespace information: As you can see, all we do here is add a new namespace to the XmlNamespaceManager instance, based on the passed @namespace name and namespaceUrl values, then we forward the rest of the execution onto our previous, baseline GetXPathNodesFromXml(string file, string xPath, XmlNamespaceManager manager = null) method signature. We can test this new method signature with the following code: Now that we‚Äôve added the required namespace, everything works as expected, selecting the Title nodes for each Book element and outputting the values: Finally, just for fun, we can slightly modify our XPath expression, using the special asterisk ( * ) character, to select all child elements within each Book element: The output shows that we‚Äôre able to get the value of each book‚Äôs child element collection, without needing to know the actual names of said child elements: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-09-11"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì RegexMatchTimeoutException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/regexmatchtimeoutexception", "abstract": "Making our way through our detailed .NET Exception Handling series, we next come to the RegexMatchTimeoutException . This exception is thrown when performing RegexMatchTimeoutException.Match() or RegexMatchTimeoutException.IsMatch() calls in which the specified timeout duration is exceeded while performing the regex operation. Let‚Äôs jump right in! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. The full exception hierarchy of this error is: System.Object System.Exception System.SystemException System.TimeoutException RegexMatchTimeoutException System.Exception System.SystemException System.TimeoutException RegexMatchTimeoutException System.SystemException System.TimeoutException RegexMatchTimeoutException System.TimeoutException RegexMatchTimeoutException RegexMatchTimeoutException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. There‚Äôs nothing particularly complicated about the RegexMatchTimeoutException ‚Äî just about every developer has used regular expressions during his or her time spent coding, as they can be a great tool when working with relatively small strings of text. However, there‚Äôs nothing inherently stopping a developer from writing code that attempts to perform regex functions on an excessively large string. If this occurs, it could very well lead to application bottlenecks, high resource costs, or, in the worst case, crashes and exceptions. For this reason, some of the core .NET Framework regular expression methods include signatures that accept a TimeSpan argument. If provided, this value indicates how long the method should be allowed to run and process before it automatically fails. In this timeout period is exceeded, a RegexMatchTimeoutException is thrown to indicate that something has gone wrong. This ensures that there aren‚Äôt any unforeseen lockups or overuse of resources when performing most regular expression logic. To see this in action, our sample code is quite basic. Our primary function is RegexMatchTimeoutExceptionTest(string input, string pattern, TimeSpan timeout, RegexOptions options = RegexOptions.IgnoreCase) : Nothing fancy going on here at all. We start by outputting some basic information about the regex match that is about to take place, then we execute the RegexMatchTimeoutException.Match() method with our passed parameters. If successful, the matching value is then output to the log. Now we can test this out in the Program.Main() method: Our input string merely contains the letter a , repeated the specified number of times. Our regex pattern of (a)+ simply tries to find the letter a , sequentially repeated as many times as possible. We begin with a few checks using a timeout duration of only 100 nanoseconds . The results are as follows: Executing our regex for an input string that is merely one character long is no problem, but trying to do so for a thousand-character string proves to be too much to accomplish in under 100 nanoseconds, so a RegexMatchTimeoutException is thrown. That‚Äôs a pretty short timeout, so let‚Äôs bump it up to a full second and try again, increasing the length of our input string each time: Unsurprisingly, modern computers are fast, so my system has no trouble performing this regex function on strings up to one million characters long. However, at one billion characters in length, rather than a RegexMatchTimeoutException , I actually get a System.OutOfMemoryException . Obviously, with enough memory and processing power, we could raise these length and timeout limitations over and over, until eventually we run into a RegexMatchTimeoutException once again, but in my case, turns out memory is the real bottleneck. Interesting! There‚Äôs one last caveat to mention here. If you run into a situation where you absolutely must ensure that an expensive regular expression method call continues processing indefinitely, without potentially timing out, you can use the InfiniteMatchTimeout constant. Just pass that constant to any invocation of a regex match method that expects a timeout parameter, and the call will never timeout: RegexMatchTimeoutExceptionTest(new string('a', 1_000_000), \"(a)+\", Regex.InfiniteMatchTimeout) To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-09-06"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Threading.ThreadAbortException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-threading-threadabortexception", "abstract": "Making our way through our detailed .NET Exception Handling series, today we‚Äôll dig into the fun System.Threading.ThreadAbortException. A System.Threading.ThreadAbortException is thrown when the Abort() method is invoked on a Thread instance. In this article we‚Äôll go over the ThreadAbortException in more detail, examining where it resides in the .NET exception hierarchy, along with some functional sample code illustrating how System.Threading.ThreadAbortExceptions are commonly thrown, so let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.Threading.ThreadAbortException inherits directly from System.SystemException . To understand the purpose of the System.Threading.ThreadAbortException we first need to discuss threading in .NET and, specifically, how threads can be terminated. One simple technique of halting a thread is to call the Abort() method on the thread in question. Doing so will typically throw a ThreadAbortException and will then attempt to terminate the thread. For example, here we create a new thread and pass it a lambda delegate method that just sleeps for one second before completing. After starting the thread we check the ThreadState , then call the Abort() method, which throws a System.Threading.ThreadAbortException and also causes the ThreadState to change to Aborted : That said, invoking Abort() on a thread does not guarantee it will be terminated. One such scenario is if the thread contains a finally block with extensive code. Calling Abort() triggers such finally blocks, so an issue in such code could cause a lengthy delay in actual thread termination (or may never abort the thread at all). One safety precaution is to call the Join method on the thread after Abort() is called. This temporarily blocks the calling thread (the thread in which the method was called) until the thread instance associated with the Join() has finished. Therefore, we can add thread.Join() to the end of our example above to ensure that the calling thread ( Main thread, in most cases) is blocked until it has finished any final processing: As you may notice by the timestamps, the invocation of Join() takes place almost instantaneously following the call to Abort() . This is because, even though our ThreadStart delegation method attempts to delay processing for one second, Abort() completes instantly because there‚Äôs no finally block holding things up. To see how integrating a finally block might work we have the BasicThreadTester class. Its constructor method creates a new thread and sets its ThreadStart method to PerformSuspension . The PerformSuspension() method outputs a starting message, then contains a finally block where we‚Äôve stuck our Thread.Sleep(1000) delay: Instantiating this class results in the following output, which shows that the call to Abort() was properly delayed that extra one second necessary to execute the finally block code, before the thread aborted and then joined with the Main thread: Now that we have a basic understanding of how aborting a thread works, let‚Äôs see how a System.Threading.ThreadAbortException might come up. We‚Äôll start with the full code sample below, then break it down afterward to see what‚Äôs going on: Our basic goal here is to use a singleton pattern ‚Äî which you can learn all about in our Singleton Creation Design Pattern tutorial ‚Äî to share a collection of Books between two threads. One thread will be actively destroying elements in the collection, while the other thread is outputting the changing Book count in the collection. While this is a simple example, it illustrates a basic structure that is commonly used to handle shared resources across multi-threaded applications. We won‚Äôt go into much detail of the Utility.Singleton<T> or the Utility.Logging classes. The former just maintains a singleton instance of itself and implements some methods for manipulating an underlying collection of type T objects, while the later is used to output to the console. Instead, we begin with the BookManager class, which instantiates a Singleton<Book> instance and implements two basic methods, DestroyBooks(int) and CountBooks(int, int) : DestroyBooks(int) loops through the Book collection of Singleton while it has values and outputs the result of Singleton.Pop() , which removes the last element of the collection. CountBooks(int, int) performs a loop ‚Äî once for every iterations (default 5) and with a delay of milliseconds (default 500) ‚Äî and outputs the current number of values in the Singleton Book collection. As previously mentioned, we‚Äôll be using two different threads to test these methods, aborting one midway through to see what happens. The AdvancedThreadTester class constructor performs all the required logic: It starts by instantiating a new BookManager instance, then adding a small collection of Books to the underlying Singleton<Book> instance collection. Next, a new thread called Secondary is created, to which we assign bookManager.DestroyBooks() as the delegate method when the thread starts. Speaking of which, we then Start() the secondary thread and output a message. Then we call bookManager.CountBooks() , which is invoked on the Main thread (and was so-named elsewhere in the code). This is where things become more interesting. Both DestroyBooks() and CountBooks() feature loops and intentional delays, so both threads are simultaneously processing for a few seconds, outputting their respective results. Eventually, CountBooks() completes execution and the Main thread moves onto the thread.Abort() call, which forces the Secondary thread to terminate itself before it finishes destroying all the books. As a safety precaution, we also Join() both threads together afterward. The output from this code shows what‚Äôs going on using relative timestamps, and with indications of which thread is performing what task: As we can see, the simultaneous processing worked as intended, allowing the Main thread to count the dwindling number of Books while the Secondary thread set out to destroy them. However, once the Main thread finished counting and invoked the Abort() method, our Secondary thread instantly threw a System.Threading.ThreadAbortException . To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-07-31"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.IO.PathTooLongException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/pathtoolongexception", "abstract": "Today, on our continued journey through the in-depth .NET Exception Handling series, we‚Äôll be taking a closer look at the System.IO.PathTooLongException in .NET. As the name implies, the System.IO.PathTooLongException is usually thrown when a path is passed to a variety of System.IO namespaced methods that is too long for the current .NET version and/or operating system configuration. In this article we‚Äôll examine the System.IO.PathTooLongException in more detail, starting with how the exception fits into the larger .NET Exception hierarchy. We‚Äôll then take a brief look at what path sizes are allowed, along with some functional C# code samples that illustrate how System.IO.PathTooLongExceptions are commonly thrown and can be avoided, so let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.IO.IOException inherits from System.SystemException . System.IO.PathTooLongException inherits from System.IO.IOException . Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. One of the biggest challenges when dealing with IO during development can be handling local file creation and access. From permissions to synchronicity to path structure and length, every platform has slightly different rules you must abide by. Therefore, exceptions like the System.IO.PathTooLongException that we‚Äôre looking at today must be present to handle outside cases. Since we‚Äôll be looking at the maximum allowed path length, let‚Äôs briefly go over the piece that make up a full path. We can use the System.IO.Path class to help us accomplish this through a variety of built-in methods: We start with a path, then extract and output all the various components that make up the path, until we finally retrieve the full path at the end. The result is an output that shows exactly what makes up a path to a file: It‚Äôs important to understand that .NET is looking at the full path when determining whether a path length is too long and, therefore, if a System.IO.PathTooLongException should be thrown. Most of our code sample logic takes place in the CreateFileByPathLength(int length, char character = 'a') method: Since all we care about is the length of the path, we‚Äôre creating file names with a single character repeated over and over, enough times to result in the full path length being equal to the passed length parameter. The CurrentPath property provides a convenient way of retrieving the full directory (without a file name) of where our executable resides, so we this to test if the length parameter is the same size (or smaller) than the full path length we‚Äôd need to actually create a new file. To create a new file we manually create a new path by combining the CurrentPath with a file name that repeats the passed character parameter as many times as necessary to result in a path length equal to length . Finally, we output the (shortened) version of the path and the actual path length to the console, before attempting to create a new file at that location. If successful, we output a message, and if creation fails, an exception is thrown and we catch and log that instead. That‚Äôs really all we need for setup, so now we can test this out by attempting to create files with full path lengths of various sizes. At this point it‚Äôs worth noting that the official documentation tells us that applications that target .NET Framework 4.6.2 or later will support paths up to 32,767 characters in length (the System.Int16.MaxValue value), unless the operating system returns a COR_E_PATHTOOLONG HRESULT value. The platform this code is being written and tested on is Windows 10 and the App.config file shows that we‚Äôre targeting a .NET Framework that exceeds 4.6.2: Keeping those things in mind, let‚Äôs see what happens when we test out different path length sizes: As you can see, we‚Äôre trying to cover the full spectrum by creating full paths a variety of path lengths. Our logging setup should cover every scenario, so let‚Äôs take a look at the output after running this code: Each call is separated by a blank line, along with the explicit output of the full path length for each attempt, so we can see what lengths work and which fail. As expected, a length of 1 far shorter than the base path length, so that was aborted. 90 , 255 , and 259 all work just fine, successfully creating new files of various lengths so the full path is equal to those sizes. The first interesting result we see is at exactly 260 length. In spite of the documentation claim that full paths must exceed 260 length to be a problem, when our path is exactly 260 characters we get a DirectoryNotFoundException . This seems to be some strange quirk, since obviously the directories in this call are no different than they were in the previously successful calls. Moreover, even though we saw that the .NET Framework 4.7 version we‚Äôre running on meets the 4.6.2 or higher requirement, our operating system is disallowed longer paths by default, so 32767 doesn‚Äôt work, throwing a System.IO.PathTooLongException our way instead. We also see that, in contradiction to the official documentation, the actual System.IO.PathTooLongException error message indicates that our path length must be less than 260 characters, which could explain the exception when using exactly 260 characters. One potential fix for this issue, depending on your Windows version, is to enable the use of long paths within the registry. Usual caveat: Don‚Äôt make changes to your registry unless you know what you‚Äôre doing. We take no responsibility for any damages you may incur. That said, to enable long paths for some Windows versions you can set the LongPathsEnabled registry entry to 1 (true): To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-08-09"},
{"website": "Airbrake", "title": ".NET Exception Handling: Exception Class Hierarchy", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/exception-class-hierarchy", "abstract": ".NET is among the most robust software frameworks on the market today, yet with that awesome power, comes the responsibility of managing a huge variety of exceptions. Given that .NET enabled many different languages across all sorts of platforms and devices, .NET must be capable of handling errors that deal with all manner of issues, from web traffic and I/O to operating system problems and database exceptions. In fact, the latest version of .NET has built-in classes to handle over 300 unique exceptions in total! Managing all these exceptions obviously presents a challenge, so Microsoft implemented a namespace system within the .NET framework. A namespace is basically just a unique name, which can be assigned to various objects or components, in order to more easily categorize and organize them. In the case of the .NET framework, namespaces are used to provide simple hierarchical structures to the thousands of classes that exist. For example, the System namespace is the senior-most namespace in the entire framework: every other class and/or namespace in .NET is in some way derived from (a child of) the System namespace. Namespaces are then indicated by separating namespaces and classes with a series of chained periods ( . ). For example, the Object class is part of the System namespace, so the full inheritance hierarchy is: System.Object . Whew! With the basics of how .NET uses namespaces out of the way, we can dive into the exception class hierarchy. Since there are hundreds of exceptions in total and an overview of every possible exception namespace is pointless, we‚Äôll just examine a few fundamental exception namespaces and their relative hierarchy, as shown in the official documentation . Here‚Äôs the basic list of .NET exception types, along with their base type that they inherit from: Below we‚Äôll examine each of these core exception types provided by .NET, looking at why and when they might be raised during normal execution. The bread and butter of all .NET exceptions, as the name suggests, the Exception class is the base class from which all other exceptions inherit. As with many exception handlers in other programming languages, the Exception class provides a number of useful properties that assist with exception handling: StackTrace : A stack trace to see where exactly the exception occurred. InnerException : Useful when exceptions chain off one another. This allows one type of exception to throw another type of exception, ad infinitum. Message : The detailed message indicating what happened. Data : A dictionary that can be used to store arbitrary data associated with this particular exception instance. SystemException houses all exceptions related to, well, the system. These include all runtime-generated errors, such as System.IO.IOException , which is thrown when an I/O error occurs. In short, SystemException is the base class that all non-application errors inherit from. If your application code screws up somehow, that‚Äôs handled by another exception type, but if the system screws up, it‚Äôs on SystemException to sort it out. The IndexOutOfRangeException is thrown anytime an array or collection is accessed using an index outside its bounds. If you attempt to use an object that is considered a null object, the NullReferenceException will be thrown. An AccessViolationException is thrown when unmanaged code attempts to access memory which is unallocated. For many .NET applications, this will never occur, due to how .NET handles managed vs unmanaged code. Managed code is code that .NET compiles and executes using the common language runtime . Conversely, unmanaged code compiles into machine code, which is not executed within the safety of the CLR . Many languages that rely on .NET, such as C# and Visual Basic , are entirely compiled and executed in the CLR . This means that code written in C# is always managed code and can, therefore, never throw an AccessViolationException . However, a language like Visual C++ does allow unmanaged code to be written. In such cases, it‚Äôs entirely possible to access unallocated memory, and throw an AccessViolationException . InvalidOperationException is a pretty cool and somewhat intelligent exception. It is typically thrown when the state of an object cannot support the particular method call being attempted for that object instance. For example, when the .MoveNext method is called on an enumerable object after elements in that collection have been modified. Since MoveNext can no longer determine which object should be next up, it throws an InvalidOperationException . As the name implies, ArgumentException is thrown when a call is made to a method using an invalid argument. One interesting note is that since an executing program is not intelligent enough to deduce whether or not a provided argument is valid for the context of the current execution, most of the time an ArgumentException is thrown, it‚Äôs because a developer placed it there intentionally, to be thrown in a particular situation. For example, if we create a FullName(string first, string last) method, we‚Äôre expecting a first and last name to be passed as arguments, both of which are strings. However, we may also have other requirements, like neither argument may contain any unexpected punctuation. We can purposely add logic into our code that validates the arguments that were passed, and if we determine the first name provided is invalid, we intentionally throw an ArgumentException . By doing so, this ensures that we (or any other developer that uses our method) know if we‚Äôre trying to pass invalid arguments to our method. ArgumentNullException is inherited from ArgumentException , but is thrown specifically when a method is called that doesn‚Äôt allow an argument to be null . Another child of ArgumentException , the ArgumentOutOfRangeException error is thrown when a method expects argument values within a specified range, yet the provided argument falls outside those bounds. ExternalException is the base exception used for any error occurring externally , outside the bounds of your own application. Typically, this means that it‚Äôs used when there‚Äôs a problem communicating with a web address, database, and the like. Examining ComException requires a bit of history, so please bear with me. Prior to the creation of the .NET framework, way back in 1993, Microsoft created and begin using the Component Object Model ( COM ) binary-interface, which effectively allowed code to be used across languages and environments, in an object-oriented fashion. COM handled exceptions through a property called HResult (or result handler ), which is a 32-bit value that combines a few fields together into a simple string. The encoded HResult would tell the application which exception was thrown and the application could respond appropriately. About a decade after COM was introduced, .NET was first released and it quickly began taking over as a much more powerful programming framework, and thus, the usage of COM quickly died out. Unlike COM , .NET is far more complex and primarily uses direct object-oriented handling of Exception classes for all exception management. However, in order to provide backward compatibility, .NET provides access to HResult through the Exception.HResult property. Each exception in .NET is mapped to a distinct HResult value. When managed code throws an exception, the common language runtime finds the appropriate exception class based on the HResult property, allowing COM objects to deal with normal, useful .NET exception classes rather than convoluted HResults . In cases where .NET sees an HResult that it‚Äôs unfamiliar with, a COMException is thrown. Also inherited from ExternalException , an SEHException acts as a sort of ‚Äúcatch-all‚Äù for unmanaged code exceptions which have not already been mapped to an existing .NET exception class. SEH , in this instance, stands for structured exception handling , which is a mechanism used in .NET for handling both hardware and software exceptions. Since an SEHException requires an exception from unmanaged code that has not already been mapped to an existing exception type which might better suit it, throwing of an SEHException is rather rare. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-02-23"},
{"website": "Airbrake", "title": ".NET Exception Handling ‚Äì System.IO.FileNotFoundException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-io-filenotfoundexception", "abstract": "Continuing along through the .NET Exception Handling series, today we‚Äôre going to examine the ever-popular System.IO.FileNotFoundException . The System.IO.FileNotFoundException is common because, as the name suggests, it primarily rears its head when attempting to access a file that doesn‚Äôt exist. In this article, we‚Äôll dive into where System.IO.FileNotFoundException fits into the .NET exception hierarchy, look at when System.IO.FileNotFoundExceptions typically appear, and see how to handle them if you run into one yourself. Let‚Äôs get crackin‚Äô! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. The System.SystemException class is inherited from the System.Exception class. System.IO.IOException is inherited from the System.SystemException class. System.IO.FileNotFoundException is inherited from the System.IO.IOException class. The most common method of accidentally throwing System.IO.FileNotFoundException is when manipulating a file that doesn‚Äôt exist, either due to an incorrect path or otherwise. For example, let‚Äôs first take a simple code snippet where we‚Äôve defined two methods, WriteLineToFile() and ReadLineFromFile() , both of which perform the function their name describes. We‚Äôve also ensured we aren‚Äôt producing any exceptions by using a try-catch block and catching FileNotFoundExceptions : Since we‚Äôre taking advantage of the using code block within both our methods, in which to use our StreamWriter and StreamReader objects, respectively, we don‚Äôt need to worry about calling Flush() or Dispose() methods for our reader/writer; .NET does this for us at the end of our using block. Therefore, the meat is simply in creating a new FileStream for the passed in fileName ( names.txt in this case), attaching it to our respective reader or writer , then writing a new passed in line value or reading the first line of the existing file. In both cases, we output the line to the console. As expected, our console output confirms that we did write our new line, and then in the call to ReadLineFromFile() , we were able to retrieve the line: Now, what happens if we add a second call to ReadLineFromFile() within our Main() method, but we pass an invalid file name to it? Let‚Äôs keep everything else we have in the previous code snippet, but our Main() method block now looks like this: As we might‚Äôve expected, running our code now behaves fine, up until it hits that second call to ReadLineFromFile() . Since the invalid.txt file doesn‚Äôt exist, we catch a System.IO.FileNotFoundException : As it happens, the solution in this case is rather simple. While arguably not a smart practice in production code, we can change the System.IO.FileMode in which our FileStream opens our file within the ReadLineFromFile() method. Originally, we were using FileMode.Open , which simply attempts to open the specified file path, and if it doesn‚Äôt exist, we throw a System.IO.FileNotFoundException . Instead, if we want to avoid a System.IO.FileNotFoundException in this case, we can change it to FileMode.OpenOrCreate , like so: While this isn‚Äôt the best long-term solution (we still produce a console output with no line text to pass to it), at the least we‚Äôre no longer producing our System.IO.FileNotFoundException . To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-03-13"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Activities.ValidationException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-activities-validationexception", "abstract": "Moving along through our in-depth .NET Exception Handling series, today we‚Äôll dig deeper into the System.Activities.ValidationException. The System.Activities.ValidationException is meant to be thrown when a Windows Workflow Foundation element, such as an Activity or Workflow , is in an invalid state. In this article we‚Äôll briefly examine what the Windows Workflow Foundation is, and how the System.Activities.ValidationException can be used in such applications. We‚Äôll also look at where the System.Activities.ValidationException fits in the larger .NET Exception hierarchy, along with a few functional C# code samples that illustrate how a Windows Workflow Foundation application might be created, so let‚Äôs get started! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.Activities.ValidationException inherits directly from System.SystemException . Before we get into the ValidationException itself let‚Äôs take a moment to explore the Windows Workflow Foundation ( WWF ) on which it relies. The official documentation features a great deal of useful information and tutorials, but the basic purpose of the WWF is to make it relatively easy to create workflows that closely resemble or mirror real world processes. Typically this is accomplished by creating sets of activities that indicate a particular action. A workflow typically consists if a series of activities, all linked together through various logical means, to form the whole of the process. The WWF is designed to make it easy to create and manage workflows within a visual editor. This allows members of the sales team, for example, to create and manipulate activities and adjust basic logic of the workflow process. That said, it‚Äôs rather difficult to illustrate and explain the creation and visual manipulation of workflows within Visual Studio using only words and limited screen captures, so we‚Äôll stick to creating coded examples of workflows, activities, and sequences. Both the visual and programmatic form of workflows are completely valid, but it will be much easier to follow along if everything is written in code. With that said, let‚Äôs start with the full code sample below, after which we‚Äôll examine each section in more detail to see how it all works: Since our goal is to show how an exception like a System.Activities.ValidationException can be thrown, we have two different avenues by which we‚Äôve programmatically created a workflow. We start with the CreateWorkflowSequence() method, which starts by creating a new Sequence activity and adds three Activities to it, which will be executed in order. The second Activity is a Throw object, which allows us to throw an exception, so here we‚Äôre throwing a System.Activities.ValidationException as a new InArgument<Exception> object: With the Sequence created, we then need a way to handle the exception, so we‚Äôve created a new WorkflowApplication instance and passed our sequence object as the primary Activity that will be executed. Within the WorkflowApplication declaration we specify a delegate to handle unhandled exceptions. In this case, we‚Äôre just outputting the Exception using the Logging.Log(Exception) method, then terminating the workflow that caused the issue. Keen observers may also have noticed the Utility.Activities.LoggerActivity object we were using as our first and last Activity . This is a custom class that inherits from CodeActivity , which can be used to create custom activities with virtually any code and logic we want: Nothing too fancy going on in this class, but by inheriting from CodeActivity we can override the Execute(CodeActivityContext) method, which is fired when the Activity executes. With a combination of InArgument<T> properties, we‚Äôre able to use various Logging.Log() method overloads to output the passed property values of this activity. TLDR: LoggerActivity allows us to spruce up our output, as compared to just using a new WriteLine object as an Activity . With all that setup, now we can call the CreateWorkflowSequence() method: The expectation is that our custom Sequence activity workflow will execute by starting with the first LoggerActivity output message, then it will throw of a new System.Activities.ValidationException , which should be caught by the OnUnhandledException delegate that was specified in the WorkflowApplication declaration. This should then output our error and terminate the workflow, which means our third and final activity (another LoggerActivity ) will not execute. Sure enough, running this code produces the following output: Alright, so creating a handler for UnhandledExceptions in a WorkflowApplication is all well and good, but what if we want more control over how exceptions are handled? What if we want to handle specific exceptions? One solution is to create a base activity for our workflow as a TryCatch object, which inherits from the NativeActivity and allows for explicit catch blocks to be specified in response to exceptions thrown during execution of the workflow. The CreateTryCatchSequence() method shows how to create such an entity: As you can see, we have a TryCatch object as our main Activity , which tries to create a Sequence object just as we saw before. This also contains three different activities, the second of which throws a System.Activities.ValidationException . The key difference is that the TryCatch object contains a Catches collection, where we can specify new Catch<T> elements that indicate what type of Exception should be caught, and what action to perform when doing so. We have two different catches, so the ActivityAction<T> for each corresponds to the appropriate type of exception we‚Äôre handling. You may also notice that we instantiated a few local variables at the top of this method, which were DelegateInArgument<T> instances that we can then pass as Arguments to the ActivityAction<T> elements. Doing so allows the Handler of each action to use that localized Argument object to capture the contextual exception that was caught. Attempting to forgo the Argument = validationException assignment produces a System.Activities.InvalidWorkflowException , because the ActivityAction<T> has no runtime context while it is executing. This means it cannot access locally-scoped variables, like validationException , unless it is provided as an Argument , giving it the local context it needs to be used by the Handler property. Finally, we have a, well, Finally element, which we assign to a single LoggerActivity to provide another output message. We finish it all off by invoking our TryCatch sequence with WorkflowInvoker.Invoke() . As expected, executing this method results in the following output: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-08-06"},
{"website": "Airbrake", "title": ".NET Exception Handling: System.Data.SqlClient.SqlException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-data-sqlclient-sqlexception", "abstract": "As we continue down the beautiful path that winds through our .NET Exception Handling series, today we‚Äôll be examining the System.Data.SqlClient.SqlException . The System.Data.SqlClient.SqlException is typically thrown when an accessed SQL Server returns a warning or error of its own. In this article, we‚Äôll explore where System.Data.SqlClient.SqlException resides within the .NET exception hierarchy, examine when System.Data.SqlClient.SqlExceptions most commonly appear, and see how to handle them should you encounter one yourself. So, let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.Runtime.InteropServices.ExternalException is inherited from the System.SystemException class. System.Data.Common.DbException is inherited from the System.Runtime.InteropServices.ExternalException class. Finally, System.Data.SqlClient.SqlException is inherited from the System.Data.Common.DbException class. Since the occurrence of a System.Data.SqlClient.SqlException is directly related to a problem with the SQL server , it‚Äôs important to take a moment to understand how to connect a C# application to an SQL server , and therefore what scenarios System.Data.SqlClient.SqlExceptions might occur. As with most anything in .NET, there are many ways to tackle the problem of database connection and usage, so we‚Äôll just provide an example for this article, and you can apply it to your own experiences or setups. For the following code, we‚Äôre using a Microsoft Azure cloud-based SQL Server and SQL Database , so there‚Äôs no need to setup an SQL server on our local machine. Setting up an SQL Server/Database on Azure is beyond the scope of this article, but once it‚Äôs configured, we can connect to it using a standard ADO Connection String , which is just a group of key/value pairs that informs an application where our database server is located and how to connect to it. An ADO string typically looks something like: Server=[server],1433;Initial Catalog=[catalog];... To make use of our database, and to keep our example code a bit cleaner, we‚Äôve opted to store our ADO string and our SQL credentials within the App.config file for our C# project. Below you can see the full App.config we‚Äôre using, with a bit of obfuscation where necessary to retain privacy. It includes the applicationSettings element, where we‚Äôve stored our app settings related to our SQL server: With that in place, we‚Äôll take a look at the example application code, which aims to perform two SQL queries (one successfully, and one unsuccessfully). The full code is below, after which we can break it down a bit more to see what‚Äôs going on: The Utility namespace is where our Logging class resides, which is just used as a convenience for outputting information during debugging, so we won‚Äôt go into anymore detail on that section. The meat and potatoes of our code here is in the Program.PerformQuery method: private static void PerformQuery(string query) The comments provide a bit of guidance, but effectively this is just one way we can create a new connection to our SQL server (using the SqlConnectionStringBuilder class), open it, pass our query parameter to the CommandText , then issue an ExecuteReader method call to make that request to the server. Once a result is returned, we loop through it, outputting the information to our log, before closing everything out. We also are checking to see if any System.Data.SqlClient.SqlExceptions occur, and catching those if necessary. Lastly, we have two actual query strings we‚Äôre trying: The first is a basic query using the well-known AdventureWorks sample database, grabbing the first 20 Products and their associated ProductCategory . This query works fine and the output is as expected: However, our second query explicitly makes a call to a stored procedure that doesn‚Äôt exist in our database, so we‚Äôre expecting a System.Data.SqlClient.SqlException to be raised. Sure enough, the output shows us exactly the problem: While this is just a brief glimpse and example, hopefully it illustrates just how a System.Data.SqlClient.SqlException might show up, and give some insight for your own future projects working with SQL servers. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-03-17"},
{"website": "Airbrake", "title": ".NET Exception Handling ‚Äì System.InvalidOperationException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-invalidoperationexception", "abstract": "Moving right along through the magical world of our .NET Exception Handling series, today we‚Äôre going to cover the System.InvalidOperationException . The System.InvalidOperationException is a fairly common exception, as it is typically thrown when there‚Äôs a failed attempt to invoke a method, caused by something other than invalid arguments passed to that method. In this article, we‚Äôll examine where System.InvalidOperationException sits within the .NET exception hierarchy, look at why System.InvalidOperationExceptions typically appear, and see how to deal with them should you encounter one yourself. Let‚Äôs get this party started! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.InvalidOperationException is inherited from the System.SystemException class. Unlike many exceptions in .NET, you may have noticed that System.InvalidOperationException resides quite close to the top of the exception hierarchy, as a direct descendent of System.SystemException . This typically indicates a .NET exception that is very common, or is applicable in many scenarios, and System.InvalidOperationException (arguably) falls into both camps. The challenge with describing the System.InvalidOperationException is that it can occur in a wide variety of scenarios. As mentioned in the introduction, a System.InvalidOperationException is thrown when a method invocation fails for a reason other than invalid arguments. The official documentation gives a few potential examples of what might cause this, including: When an IEnumerator.MoveNext call is made on a collection that has since been modified after the enumerator was generated (more on this one later). Calling ResourceSet.GetString if the resource was already closed prior to this call. Modifying XML via the XContainer.Add method, if doing so would generate invalid XML . Attempting to modify the UI from a secondary thread that is not the main/UI thread. This is by no means an exhaustive list, so it‚Äôs impossible to cover all potential scenarios that a System.InvalidOperationException could occur. Instead, to continue our examination, we‚Äôll just take a look at one particular means by which a System.InvalidOperationException is typically raised: Modifying a collection after the enumeration of that collection has been generated, then continuing to utilize the enumeration. To illustrate this in action, we‚Äôve got our full code example below: We won‚Äôt get into detail about the Utility namespace, but instead we‚Äôll look at the Airbrake.InvalidOperationException namespace, where our problematic code resides. In this somewhat realistic example, we‚Äôve got an interface called IBook , which specifies a few fields ( Author and Title ) for our Book class: Now, using our Book class, our InvalidExample method generates a List<Book> collection called books , and adds a few of my favorites selections to the list. From there, we confirm that our collection contains the five Books we added, then we generate our Enumerator using the foreach loop block. Inside our loop, we output the current book instance, then create a newBook of Robinson Crusoe . We then call books.Add to add our newBook to the collection, and continue the loop using our previously established enumeration : The trouble is, our enumeration was established back when we had only five books, but before our second call to foreach , we‚Äôve modified the collection and added a sixth book. Sure enough, this throws a System.InvalidOperationException : If adding new items to the collection during the enumeration is a necessity, the best way to do it is to generate a static enumeration beforehand; one that doesn‚Äôt directly access the modified collection each loop. For example, using for , instead of foreach , allows us to reference pre-determined indexes of the collection items, rather than direct collection items during the loop. Here is our slightly modified code to illustrate a successful fix: The key is to detach enumeration from the collection that is changing. We‚Äôve initially stated that our enumerator will only loop through a total of the first five items (indexes), regardless of what is added to the collection afterward. This produces an expected result without a System.InvalidOperationException : To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-03-29"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Management.ManagementException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-management-managementexception", "abstract": "Moving along through the detailed .NET Exception Handling series, today we will be exploring the System.Management.ManagementException . A ManagementException is thrown when something goes wrong while working with the Windows Management Instrumentation ( WMI ) components contained within the System.Management namespace. WMI essentially allows scripts and applications to perform queries against local or remote systems, devices, and even other apps. These queries can retrieve a variety of information, including logical disk data, CPU utilization, database connectivity, and so forth. Throughout this article we‚Äôll explore the ManagementException by looking at where it sits in the larger .NET exception hierarchy. We‚Äôll also look at some fully-functional C# sample code to illustrate not only how WMI works to retrieve system information, but also how invalid queries or issues might result in ManagementExceptions in your own code, so let‚Äôs get going! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. The full exception hierarchy of this error is: System.Object System.Exception System.SystemException ManagementException System.Exception System.SystemException ManagementException System.SystemException ManagementException ManagementException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Windows Management Instrumentation ( WMI ) allows applications and scripts to manage Windows-based systems and devices, both locally and remotely. Once a connection is established to a system, WMI can be used to perform SQL-like queries, which effectively provides an API to the executing application, allowing it to retrieve data or perform changes to the underlying system. Covering the whole of the WMI infrastructure is well beyond the scope of this little tutorial, but feel free to check out the official documentation for more information. However, in order to see how a ManagementException might be thrown, we need to get into the basics of WMI and how it can be manipulated via code. Before we access system information programmatically, it helps to look at some system data through a visual tool. Thankfully, most newer versions of Windows already include such a tool, known as the Windows Management Instrumentation Tester (or wbemtest.exe ). To launch it, open your Start menu and search for wbemtest.exe , then press enter to run the application. Once open, let‚Äôs start by connecting to the local computer. Click Connect and verify that root\\cimv2 is entered into the Namespace field, then click Connect in this second dialog. Now, click Open Class and in the Target Class Name field enter Win32_LogicalDisk and click OK . This should bring up an Object Editor screen for the Win32_LogicalDisk class of data found within your local system. As you can see from the titles above the main boxes, there are some Qualifiers , Properties , and even some Methods that can be performed via WMI to query or adjust the local disk. We won‚Äôt be doing anything harmful in this tutorial, since we‚Äôll just be retrieving data via the Properties , so feel free to scroll through those and see what sort of property values exist for your local disks. Now, let‚Äôs move onto the sample code to see how we can perform similar queries using C#. We begin with a custom Manager class, which was created to help ‚Äúmanage‚Äù the various WMI -related objects needed to establish a connection and perform queries: There are a handful of properties for the Manager class, but the important one is the ManagementObjectSearcher Searcher property, which is the fundamental class we‚Äôll be using to perform queries. To create a new ManagementObjectSearcher instance we need to specify a ManagementScope , which is effectively the path to the specific system/computer, along with the namespace within said computer, that will be queried. root\\cimv2 is the primary namespace, and in this case, I7 is the name of the computer that I‚Äôm querying, so that‚Äôs where we get the ScopePathDefault constant value of \"\\\\\\\\I7\\\\root\\\\cimv2\" . The ManagementObjectSearcher instance also needs a query, which we create by passing a string to a new ObjectQuery instance. Both the OutputProperty(string property) and DumpResults() methods are fairly simple and self-explanatory, so we won‚Äôt get into those. Now, our goal is to retrieve local disk information, specifically regarding storage capacity. To format the produced output a bit better, we‚Äôve also created a simple extension method of ToStorageString(this ulong value) : This method extends ulong (i.e. UInt64 ) values, making it easy to convert these large values into recognizable byte-based output formats, such as MB, GB, TB, etc. Now that everything is setup, let‚Äôs use our Manager class and the ToStorageString(this ulong value) extension method to query our disks and get some info. We start with the GetDiskInfo() method: Here we perform a simple query of getting all data from the Win32_LogicalDisk class (which we explored with the wbemtest.exe tool), then loop through the resulting data and get some specific property values to produce a readable log output. The result of executing this method on my local system shows all three of my primary logical disks and their current free space/capacity: Cool! However, WMI is capable of much more, so let‚Äôs expand a bit and query every field in the Win32_LogicalDisk class and output it, just to see the values of everything we could potentially want to look at. This is performed in the GetFullDiskInfo() method, which also uses the Manager.DumpResults() method: Executing this code produces the full, formatted list of property key/value pairs for each local disk: Finally, everything has worked just as expected up to this point, but let‚Äôs see what happens if we make a mistake in our query or order of execution when creating a ManagementObjectSearcher . To illustrate this we have the GetDiskInfo_InvalidQuery() method: This may look similar to the GetDiskInfo() method (and it is), but the subtle difference is the class we‚Äôre querying is Win32_PhysicalDisk instead of Win32_LogicalDisk . Executing this method results in the following output: As it happens, Win32_PhysicalDisk is not a valid class in WMI , so a ManagementException is thrown indicating as much. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-09-24"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Web.HttpParseException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/httpparseexception", "abstract": "Making our way through our detailed .NET Exception Handling series, today we‚Äôll be taking a closer look at the System.Web.HttpParseException . An HttpParseException should be thrown when something goes wrong while attempting to parse an HTML page. In this article we‚Äôll examine the HttpParseException by looking at where it resides in the overall .NET exception hierarchy. We‚Äôll also go over a simple code sample that illustrates how one might use HttpParseExceptions in their own code, so let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. The full exception hierarchy of this error is: System.Object System.Exception System.SystemException System.Runtime.InteropServices.ExternalException System.Web.HttpException System.Web.HttpParseException System.Exception System.SystemException System.Runtime.InteropServices.ExternalException System.Web.HttpException System.Web.HttpParseException System.SystemException System.Runtime.InteropServices.ExternalException System.Web.HttpException System.Web.HttpParseException System.Runtime.InteropServices.ExternalException System.Web.HttpException System.Web.HttpParseException System.Web.HttpException System.Web.HttpParseException System.Web.HttpParseException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. The overall inner workings of ASP.NET pages are fairly complex, but to properly understand what the presence of an HttpParseException means we‚Äôll just go over the simple basics of page creation. Specifically, we need a basic understanding of how .NET converts the XML-like content of ASP.NET pages ( Web Forms ) into executable .NET code. Firstly, ASP.NET is a dynamically compiled language. Thus, when the first client request comes into the application all ASP.NET pages ( .aspx ), services ( .asmx ), handlers ( .ashx ), and global app files ( .asax ) are parsed by a PageParser . This is effectively an advanced text parser that recognizes the XML markup of ASP.NET pages. When a valid tag is recognized and parsed, that element is compiled into a normal .NET class instance, just like instances created in ‚Äúnormal‚Äù code. The parser and compiler work together to create the proper relationships between all controls and elements in the page, as well as across the entire application. In short, this parsing and compilation process is where an HttpParseException can be thrown, when appropriate, to indicate that something about the parsing of the ASP.NET page has gone awry. A normal ASP.NET application is rather complex and difficult to fully include in text. Thus, our example code for this article shows the basic structure of creating a custom control and throwing an HttpParseException when necessary, without including all the fluff that would normally be in a full ASP.NET application. We‚Äôre showing how we can force a custom HtmlSelect control to only contain our own custom dropdown option controls as child elements. Thus, we start with the MyCustomOption class, which is the option child control we want to add: Now, the MySelectBuilder class inherits from the standard HtmlSelectBuilder , and will be used by our custom HtmlSelect control to check if child controls are of the appropriate type: The GetChildControlType(string tagName, IDictionary attributes) method is overridden from the base HtmlSelectBuilder class and performs a basic logical check that child controls are of the MyCustomOption type. If not, a new HttpParseException is thrown, indicating that we only allow such child controls. Finally, the actual CustomHtmlSelect class, which inherits from the standard HtmlSelect class and overrides just one method, AddParsedSubObject(object obj) : As the method name suggests, AddParsedSubObject(object obj) adds the parsed obj parameter control to the CustomHtmlSelect control. We‚Äôre explicitly casting from the passed obj object to MyCustomOption , which results in a null of the cast fails (hence, the nullibility check afterward). If successful, we know the parsed child object is of the proper MyCustomOption type, so we create some text and add the item to the Items list property. With everything setup, we can now test things out. As mentioned, we‚Äôre foregoing the inclusion into a full ASP.NET application by just directly creating a builder and calling the GetChildControlType(string tagName, IDictionary attributes) method: The GetChildControlOfControlBuilder(ControlBuilder builder, string tagName) method attempts to get the child control of the passed builder. If successful, it outputs some basic information about the builder and the type that was found as a child control. Otherwise, it catches expected or unexpected Exceptions . We test this out by calling GetChildControlOfControlBuilder(ControlBuilder builder, string tagName) twice using a new MySelectBuilder instance. First, we check for child controls with a MyCustomOption.Suffix suffix, which works as expected and produces the following output: However, our second attempt to get child controls with the Invalid suffix throws the expected HttpParseException , informing us that such child controls are invalid: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-10-06"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Security.Authentication.InvalidCredentialException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/invalidcredentialexception", "abstract": "Making our way through the detailed .NET Exception Handling series we‚Äôve been creating, today we‚Äôll be looking into the System.Security.Authentication.InvalidCredentialException . The InvalidCredentialException occurs when authentication fails for one of a number of authentication stream classes in the .NET Framework. In this article we‚Äôll explore the InvalidCredentialException by looking at where it resides in the overall .NET exception hierarchy. Then, we‚Äôll also show a fully-functional code sample that illustrates how an authentication stream might be created between a client and a listener (server), both successfully and failingly, so let‚Äôs get to it! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. The full exception hierarchy of this error is: System.Object System.Exception System.SystemException System.Security.Authentication.AuthenticationException InvalidCredentialException System.Exception System.SystemException System.Security.Authentication.AuthenticationException InvalidCredentialException System.SystemException System.Security.Authentication.AuthenticationException InvalidCredentialException System.Security.Authentication.AuthenticationException InvalidCredentialException InvalidCredentialException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. The whole of the connectivity support provided in the .NET Framework is far too intricate and advanced to even begin to scratch the surface in this tiny tutorial. Therefore, we‚Äôll simply rely on the code sample to illustrate the basics of (one small) example for how a client/server connection might be established to send some data, and how failure to authenticate can potentially lead to a InvalidCredentialException . In the realm of DevOps, there‚Äôs little doubt when it comes to the ‚Äúchicken-or-the-egg‚Äù concerns of the server and the client: The server always comes first. Thus, we‚Äôll continue this trend by going over our server project code first. We accomplish this with a TcpListener instance, which blocks the thread while listening for incoming connections from a TCP client. This occurs within the Listener class: The CreateListener(IPAddress ipAddress, int port = 11000) method performs the basic creation and execution of the TcpListener , then blocks until a client connects, which we then attempt to authenticate via the AuthenticateClient(TcpClient client) method: We start by converting the TcpClient stream into a NegotiateStream , which uses the negotiate security policy to determine the best way for the client/server to authenticate with one another. The generated ClientState instance can be passed to the negotiateStream.BeginAuthenticateAsServer(...) method, along with a reference to our callback method, which awaits the client‚Äôs authentication request. Once client authentication is complete, we then use the stream‚Äôs BeginRead(...) method to read the byte-message that was sent by the client, before closing the stream and client entirely. Both the callback methods are fairly simple: EndAuthenticateCallback(IAsyncResult asyncResult) basically performs the same process we did before to begin authentication, but in reverse. After converting the IAsyncResult parameter to a NegotiateStream once again, we attempt to end the authentication process via EndAuthenticateAsServer(...) , then outputting the authentication result. We also make sure to invoke Waiter.Set() on the client, which frees up the current thread for other execution. The EndReadCallback(IAsyncResult asyncResult) method does much the same, except it finalizes reading of the byte data sent by the client. Lastly for the server, the ClientState class is just the basic object, with a few important properties, that we‚Äôre passing along as our asynchronous object when attempting to authenticate the client: Now, let‚Äôs move on to the client code, which is contained in the Client class: The Connect(...) method performs most of the logic, which is explained by the comments so we won‚Äôt go through it step by step. In essence, the client creates a TcpClient instance and attempts to connect to the specified host and port. Once connected, authentication is attempted by invoking the NegotiateStream.BeginAuthenticateAsClient(...) method (the opposite of the Server version we used in the server code). If authentication succeeds, it then attempts to send a simple message to the server, in the form of encoded bytes, before closing the stream. The EndAuthenticateCallback(IAsyncResult asyncResult) and EndWriteCallback(IAsyncResult asyncResult) methods perform the opposing actions that we saw on the server side, this time invoking EndAuthenticateAsClient(...) and EndWrite(...) , respectively: Now, to test everything out we need to execute both our projects simultaneously, starting with the Listener class. Once it is up and running, we can then test out some client connections, as seen in the code below: Nothing too fancy going on here. We‚Äôre simply creating new Client instances, the first with default values, and the second by using credential authentication with a username and password. Both our client and server are running separately, but, if all goes as expected, they‚Äôll connect to one another and the various Logging.Log(...) outputs in the code will show some results. Here is the output produced from the first new Client(); call, on the client side: And here‚Äôs the output from the server : Cool! Everything seems to be working as expected. As you can see from the client output, the default ImpersonationLevel when we don‚Äôt provide any credentials is Identification . Since both the client and server are running on the localhost ( 127.0.0.1:11000 ), there‚Äôs no trouble authenticating, so the client was able to send its message and the server received it! Now, let‚Äôs see what the output is from the second Client(\"username\", \"password\") call, starting with the client : And the server output: Lo and behold, a InvalidCredentialException is thrown our way, indicating on both the client and server side that the logon attempt using \"username\" and \"password\" as our credentials has failed. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-09-17"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.DivideByZeroException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/dividebyzeroexception", "abstract": "Moving along through our in-depth .NET Exception Handling series, today we face off against the System.DivideByZeroException. The System.DivideByZeroException is thrown when attempting to divide an integer or a decimal by zero. Normally divide by zero errors are pretty boring, but in this article we‚Äôll examine the System.DivideByZeroException in more detail and see how .NET converts your written code into low-level human-readable instructions, a handful of which can bubble up to a DivideByZeroException. We‚Äôll look at some functional code samples in both C# and the Common Intermediate Language ( CIL ) that is executed behind the scenes, so let‚Äôs get going! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. The full exception hierarchy of this error is: System.Object System.Exception System.SystemException System.ArithmeticException System.DivideByZeroException System.Exception System.SystemException System.ArithmeticException System.DivideByZeroException System.SystemException System.ArithmeticException System.DivideByZeroException System.ArithmeticException System.DivideByZeroException System.DivideByZeroException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. The System.DivideByZeroException is not a particularly exciting or difficult exception to understand, considering the massive quantity of unique exceptions the .NET Framework provides. However, a discussion of exactly how the System.DivideByZeroException works and is thrown, behind the scenes, leads to some interesting territory. As mentioned in the introduction, the manner in which .NET compiles and processes the high-level code you write (in C# or otherwise) is by converting it into machine-readable instructions known as the Command Intermediate Language or CIL . This CIL is then converted to bytecode , from which a Common Language Infrastructure assembly is created, which can then be directly executed by the computer. To understand what all this means it‚Äôs much easier to look at some code examples. We‚Äôll start with our C# code, which defines a couple constants ( Numerator and Denominator ), then performs a handful of tests by trying to divide by zero using int , double , and decimal value types. For example, here we have the series of instructions for performing a division by zero using doubles : The TestToDouble() method houses the try-catch block, so that each unique data type test can throw an exception separately, without hindering execution of other tests. Executing the double divide by zero test works just fine, without throwing any exceptions. Instead, as we can see in the output, since we‚Äôre using floating-point numbers in this case, the result is a value of positive infinity : However, let‚Äôs see what happens when we use int and decimal values instead: In both cases, attempts to divide by zero result in a System.DivideByZeroException . To see exactly why int and decimal attempts throw an exception, but double does not, we need to dig into the CIL code that is produced when compiling our C# code above. Below we see the full Airbrake.DivideByZeroException namespace C# code converted into CIL : Note: To view the CIL of your own .NET code, check out a reflection tool such as ILSpy . As you can see, CIL is a stack-based assembly language, interpreting instructions in an ordered fashion. There‚Äôs far too much to go over everything here, so we‚Äôll instead focus on a few snippets of CIL that are pertinent to our System.DivideByZeroException example. Here we have the DivideInt() method, which accepts two int parameters and performs division of a over b , then returns the result as int : Let‚Äôs break down what‚Äôs happening here. The method signature with the int32 parameters a and b is easy to parse, since it‚Äôs similar to how normal .NET code looks and behaves. The .maxstack property indicates how many items are required within the stack to fully execute this particular method. In this case, we only need to reserve two items in the stack. .locals specifies what value type local variables that aren‚Äôt declared a specific type should be set to. In this case, int32 is the only type we‚Äôre using, so that‚Äôs the default. Now we get into the actual instruction set of the method. All of these instructions begin with an opcode , which essentially defines what instruction to perform. nop is a placeholder instruction. ldarg.0 loads the first argument onto the evaluation stack. ldarg.1 loads the second argument onto the evaluation stack. div is the bread and butter of this method. It divides the previous two values on the evaluation stack (which we just loaded), and adds the resulting floating-point or integer value onto the stack. stloc.0 extracts the current value from the top of the stack (in this case, the result of our division) and stores it in the first local variable index. br.s (unconditionally) transfers control to the specified instruction ( IL_0007 in this case). This is similar to jmp or goto instructions found in other assembly languages. ldloc.0 loads the first local variable, which we stored two instructions ago using stloc.0 . This causes the result of our division to be loaded to the top of the stack. Finally, ret returns from the current method and pushes the value at the top of this method‚Äôs stack to the calling method‚Äôs evaluation stack. So, why is it important to know how the CIL works when calling these division methods? Because, only a select handful of CIL opcodes are actually capable of producing a System.DivideByZeroException . As you might have guessed, one such CIL opcode is div , which was part of the fundamental instruction we saw in the CIL of the DivideInt() method above. In fact, the way the CIL works is that if the second value in the evaluation stack (the one we loaded using ldarg.1 above) is equal to zero , a System.DivideByZeroException is thrown. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-09-03"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.ServiceModel.EndpointNotFoundException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/endpointnotfoundexception", "abstract": "Making our way through our detailed .NET Exception Handling series, today we‚Äôll dive into the System.ServiceModel.EndpointNotFoundException . The EndpointNotFoundException is thrown when something goes awry while trying to connect to a Windows Communication Foundation ( WCF ) service-oriented application. In this article we‚Äôll examine the EndpointNotFoundException in more detail by looking at where it sits in the larger .NET exception hierarchy. We‚Äôll also look at some functional C# code samples that illustrate how a basic service can be setup, and how invalid connections to such a WCF service might lead to EndpointNotFoundExceptions , so let‚Äôs get crackin‚Äô! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. The full exception hierarchy of this error is: System.Object System.Exception System.CommunicationException EndpointNotFoundException System.Exception System.CommunicationException EndpointNotFoundException System.CommunicationException EndpointNotFoundException EndpointNotFoundException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As mentioned in the introduction, the EndpointNotFoundException is tightly correlated with the Windows Communication Foundation ( WCF ), which is a .NET framework for easily creating service-oriented applications. Essentially, a WCF application provides at least one service endpoint ( URI ), which can be connected to and utilized via the service‚Äôs API. Plus, such API method calls can even be made asynchronously. For the code sample today we‚Äôve created a default WCF service application named MyService . It starts with the IMyService interface, which defines the basic service and data contracts the service will provide: From there, the MyService service implements the IMyService interface, providing the GetData(int value) method to ‚Äúretrieve‚Äù some data. Alternatively, a data contract can also be used to retrieve data, but for our simple example we‚Äôll stick with directly invoking GetData(int value) : Now, to access the MyServiceClient() class we need to specifically reference the MyService service in our Visual Studio project. This can be done by right-clicking the project name and selecting Add > Service Reference . On this screen, click Discover to automatically detect available services from other projects that are active/in the same solution. In our case, MyService.svc is listed, so we select that, then we change the Namespace to MyServiceReference and click OK . Going through this process will automatically add a reference to the MyService service in our App.config file, as seen below: We‚Äôve defined a few test methods to verify our connection to the MyService service, one which is a synchronous call ( GetDataTest(int value) ), and the other that is asynchronous ( GetDataAsyncTest(int value) ): Running the above test code attempts to connect to MyService and passes the int value of 0 , before returning the results, which we‚Äôve output to the console log: Cool, everything seems to be working as expected. The async call returns a System.Thread.Tasks.Task object, which is why the result is much more complicated than the direct method call, but we can see that the Result property is the same for both method calls. Now, that‚Äôs all well and good, but we can also manually add services to our App.config file. Let‚Äôs see what happens if we change the endpoint.address value in App.config to the name of an invalid service, such as InvalidService.svc : Executing the same two test methods with this change to the endpoint.address property produces the following output: Ah hah! Here we see our good friend the EndpointNotFoundException popup. As the error message indicates, the specific reason for a thrown EndpointNotFoundException could be any of a variety of reasons, but typically it‚Äôs is because the provided endpoint.address value in App.config is incorrect. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.[contact-form][contact-field label=‚ÄùName‚Äù type=‚Äùname‚Äù required=‚Äùtrue‚Äù /][contact-field label=‚ÄùEmail‚Äù type=‚Äùemail‚Äù required=‚Äùtrue‚Äù /][contact-field label=‚ÄùWebsite‚Äù type=‚Äùurl‚Äù /][contact-field label=‚ÄùMessage‚Äù type=‚Äùtextarea‚Äù /][/contact-form]", "date": "2017-09-29"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Data.EntityException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-data-entityexception", "abstract": "Moving along through the detailed .NET Exception Handling series, today we will be exploring the EntityException . The EntityException is the base exception class used by the EntityClient provider, which is part of the overall Entity Framework , which enables model-to-object mapping and relationships throughout ADO-based applications. In this article we‚Äôll examine EntityExceptions by looking at where it resides in the overall .NET exception hierarchy. We‚Äôll also go over some functional C# sample code to illustrate the basics of working with the Entity Framework in .NET, which can be used to create, read, update, and delete SQL databases with ease. Let‚Äôs get started! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. The full exception hierarchy of this error is: System.Object System.Exception System.SystemException System.Data.DataException EntityException System.Exception System.SystemException System.Data.DataException EntityException System.SystemException System.Data.DataException EntityException System.Data.DataException EntityException EntityException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Exploring the entirety of the Entity Framework is well beyond the scope of this article, but we need at least a basic understanding of it‚Äôs purpose and functionality to see how EntityExceptions may be thrown and captured. Traditionally, associating a physical object model (i.e. a row in a database table) with a logical object model (i.e. a programmatic instance of an object written in source code) would require manually creating and managing complex SQL statements. On the other hand, the Entity Framework provides an easy means of mapping logical and physical database models to one another. Thus, with just a few extra lines of code, the Entity Framework can associate an existing logical model with the underlying data layer and its physical model representation. The framework will handle all ‚Äústandard‚Äù SQL statements, database creation, and CRUD (create, read, update, delete) functionality. To see this in action we‚Äôve got a simple example. We start with a Book class, which is implements from the IBook interface and primarily consists of a few basic properties: Critically, since the Entity Framework maps logical models like Book with a physical version within a relational database, our logical Book model needs some sort of identifying key. By default, Entity Framework will look for a property named [ClassName]Id (e.g. BookId ). However, we don‚Äôt want to directly add a key to the Book class, so we‚Äôll inherit it with the new BookEntity class, which we‚Äôll use to add extra stuff just for this Entity Framework example: The constructors are self-explanatory and they merely implement the base Book constructors. However, we‚Äôve added two new properties of CompositeId and Id . Id is our primary key, which we specify with the KeyAttribute and DatabaseGeneratedAttribute . We want it to be an auto-incremented identity, so we also want to pass the DatabaseGeneratedOption.Identity argument to the DatabaseGeneratedAttribute . Just to illustrate the functionality of creating composite keys, the CompositeId dynamically retrieves its value by concatenating the Author and Title properties. Now, to connect our logical BookEntity model to a physical model we need to create a new System.Data.Entity.DbContext instance that includes a DbSet<BookEntity> property: Now, instantiating BookEntityContext allows us to perform all manner of functionality within our physical database model. To test things out we start with the AddBookEntityToContext(BookEntity book, BookEntityContext context) method: As you can see, this method merely adds the passed BookEntity parameter to the passed BookEntityContext , then saves the new changes to the physical database model. Additionally, after making modifications, we‚Äôll want to look at the database contents, so the OutputBookEntitiesOfContext(BookEntityContext context) method does this for us with a basic LINQ statement and log output: Alright! Everything is setup, so let‚Äôs test this out in our Program.Main() method: We start by creating a new instance of BookEntityContext . We then need to delete the underlying physical database (if it exists), since running this code multiple times would otherwise cause issues. We also then recreate the database after deleting it, so we start with a clean slate before adding data. Next, we call AddBookEntityToContext(BookEntity book, BookEntityContext context) a few times by passing in some books from the excellent Riftwar Saga series, before finally outputting the current data. Executing this code results in the following output: Cool! Everything worked just as expected. As we can see, our BookEntities were properly created, and our extra Id and CompositeId properties were populated as expected. Now, you may be asking, ‚ÄúWhere‚Äôs the database connection string?‚Äù In an effort to keep things as simple as possible out of the box, the Entity Framework defaults to trying to use localdb or SQL Express , if either is locally installed (which is usually the case when using modern versions of Visual Studio). In this case, we can connect to sqlexpress.Airbrake.Data.EntityException.BookEntityContext.dbo and are greeted with a BookEntities table that has all the appropriate columns and is populated with the three recently added books! Since there are so many potential problems that could lead to EntityExceptions that we‚Äôll just look at a simple example. Here we‚Äôve added the UpdateBookPageCount(int id, int pageCount, BookEntityContext context) method: This method attempts to update the page count of a BookEntity via its Id property. However, this implementation is poor, since we‚Äôre finding said matching book by iterating through all context.Books elements, rather than performing a LINQ query or similar. Still, it should get the job done, so let‚Äôs test it out: Unfortunately, executing this code throws an EntityException at us, which includes an inner exception: As indicated by the error, the issue is that we‚Äôre attempting to perform a new transaction, via context.SaveChanges() , while an active transaction thread is already occurring due to the foreach(var book in context.Books) iteration loop. In essence, we aren‚Äôt allowed to make changes to an element of an iterated collection while said iteration is still taking place. To resolve this we‚Äôll clean up the way we find a book by Id by using a simple query, as previously mentioned: Executing this new version works as expected, adjusting the PageCount property to our database record for the BookEntity with Id of 1 : To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-10-20"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì InvalidAsynchronousStateException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/invalidasynchronousstateexception", "abstract": "As we approach the end of our in-depth .NET Exception Handling series, today we‚Äôll be taking a closer look at the System.ComponentModel.InvalidAsynchronousStateException . An InvalidAsynchronousStateException is a complex exception that occurs when an operation is attempted for which its target thread no longer exists, or has no message loop. Throughout this article we‚Äôll explore the InvalidAsynchronousStateException by looking first at where it sits in the larger .NET exception hierarchy. Then, we‚Äôll take a look at some functional sample code that shows how you might run into an InvalidAsynchronousStateException in your own multi-threaded application if you aren‚Äôt careful as a developer. Let‚Äôs get started! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. The full exception hierarchy of this error is: System.Object System.Exception System.SystemException System.ArgumentException InvalidAsynchronousStateException System.Exception System.SystemException System.ArgumentException InvalidAsynchronousStateException System.SystemException System.ArgumentException InvalidAsynchronousStateException System.ArgumentException InvalidAsynchronousStateException InvalidAsynchronousStateException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As mentioned, the appearance of an InvalidAsynchronousStateException indicates a problem with threading within your application. Usually, it indicates that an operation was attempted within a thread that no longer exists. Since multi-threading is such a broad and complex topic, it‚Äôs well beyond the scope of this tiny article, so we‚Äôll just cover the basics in our own code example. Just keep in mind that this technique is by no means representative of the only way to accomplish multi-threading. For our example we‚Äôre creating a Windows Form Application (i.e. an application with user interface elements, as opposed to the normal console-based applications we usually create). There‚Äôs no need to include all the code, but here we can see that our main Program.Main() method includes a call to our custom DualThreadTester() class: The DuelThreadTester class is intended to create a new foreground and background thread, and perform some basic iteration a few times a second with output. In addition, we want to create a new UI element (a background Form , in this case), and be able to perform an InvalidAsynchronousStateExceptionocation within this UI control to invoke a specific method. This will make more sense in code, so let‚Äôs start with the structure, including our single _backgroundForm property, along with the BackgroundThreadDelegate(string message) delegate, and the BackgroundThreadDelegateMethod(string message) method: We‚Äôll be InvalidAsynchronousStateExceptionoking this delegate and method from our _backgroundForm control, so it‚Äôs important we establish these first. Next comes the primary looping method of IterationTest() : Since this method is used by both our foreground and background threads, we start by checking if the current thread is background, in which case we instantiate a new BackgroundForm control and Show() it. From there, we perform a simple iterative loop 10 times. During each loop, since our foreground thread will execute slightly before our background thread (in most cases), we check if _backgroundForm exists within the foreground thread iteration. If it exists, we use the thread safe method of calling an InvalidAsynchronousStateExceptionoke() method on our _backgroundForm control. The InvalidAsynchronousStateExceptionokeRequired property simply checks if the current thread differs from the thread that created the _backgroundForm control. If so (which is always the case here), we explicitly call _backgroundForm.Invoke(...) and use our BackgroundThreadDelegate delegate to create a simple output message. If InvalidAsynchronousStateExceptionokeRequired is false, we can just directly change the control (in this case, by changing the background color to red). Regardless of which thread is iterating, we output the thread name and the current iteration count to the log, then pause for a quarter of a second before repeating. Once all iterations complete, we output that the thread has finished iteration. Overall, it‚Äôs not too complicated, so let‚Äôs create our actual threads in the DualThreadTester constructor: As the comments explain, we‚Äôre simply instantiating two new threads, naming them and setting the appropriate IsBackground property, then starting them up. This will cause both threads to begin execution of the IterationTest method. Let‚Äôs execute this code and see what happens. There we go. As we can see from the output, our foreground thread only began a single iteration, then reached the _backgroundForm.Invoke(new BackgroundThreadDelegate(BackgroundThreadDelegateMethod),count); statement, which blocks the foreground thread from executing until this invocation can be executed. Thus, foreground waited the 2.5 seconds until the background thread finished its iterations, then the _backgroundForm.Invoke(...) method call was executed. However, as indicated by the InvalidAsynchronousStateException we see, this operation could no longer complete because the background thread closed itself out once it finished its iterations. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-10-27"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì RangeError: repeat count must be non-negative", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/rangeerror-repeat-count-non-negative", "abstract": "As we stroll our way down the winding path of our JavaScript Error Handling series, today we‚Äôre stopping to smell the aroma of the¬†Negative Repeat Count¬†error. The¬†Negative Repeat Count¬†error, similar to the¬†Infinite Repeat Count¬†error, occurs when using the repeat() method of a¬†String¬†object in JavaScript, but in this case when the¬†count¬†parameter passed to that method is a negative value. In this article we‚Äôll take a look at a few specific code examples that might produce a¬†Negative Repeat Count¬†error, and how to catch and handle this error when it appears. Here we go! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The RangeError object is inherited from the Error object. The¬†Negative Repeat Count¬†error is a specific type of¬†RangeError¬†object. Similar to the¬†Infinite Repeat Count¬†article, we‚Äôre using a simple code example to illustrate when a¬†Negative Repeat Counterror might appear. Below we have our¬†count¬†variable, which represents the number of repetitions of our¬†String, and the¬†name¬†variable, which is our string to be repeated. Then we move on to calling the¬†repeat()¬†method and attempt to catch our expected¬†RangeErrors¬†using a simple¬†printError¬†function to format the error output: Since the¬†count¬†parameter we‚Äôre passing here has a negative value of¬†-5, as expected, we catch a¬†Negative Repeat Counterror with our little example snippet. As with many other JavaScript errors, often the output messages will differ depending on the JavaScript engine (usually based on the browser in question), and here we see a clear example of this. Often the engine powering Chrome tends to be more explicit and verbose in its error reporting, but this is one exception (no pun intended) where Firefox takes that honor by explicitly stating that the repeat count value was a negative, whereas Chrome just indicates it is invalid, but fails to indicate why. As it happens, that‚Äôs all there is to the¬†Negative Repeat Count¬†error, since it only occurs explicitly when that¬†count¬†parameter value is a negative integer. The¬†repeat()¬†method itself is even smart enough to catch attempts to pass other object types, such as¬†Strings, into the¬†count¬†parameter, and will automatically convert such a value to an¬†integer¬†before proceeding as normal. Here, we‚Äôre trying to pass a¬†String¬†representation of a negative number,¬†‚Äò-99‚Äô, but JavaScript will have no part of these shenanigans: Both browsers first convert this value to a number, then produce the same expected¬†Negative Repeat Count¬†error: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-01-13"},
{"website": "Airbrake", "title": "Airbrake & LogicMonitor = Awesome Sauce!", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-joins-logicmonitor", "abstract": "Over the past 10+ years, I‚Äôve witnessed the rapid growth and evolution of the observability space. At CopperEgg, the first company I founded, I saw the adoption and growth of cloud solutions and the accompanying need for developers to have real-time visibility in the health of their app. Then, again at StackEngine, a company that helped DevOps teams manage containers at scale, I saw a dramatic expansion of developer responsibilities. And now at Airbrake, we‚Äôre 100% focused on developers‚Äô needs for monitoring and understanding the health of their applications. The common theme across all these experiences is that the role of a developer has evolved from simply building services and software to also having to deploy, manage, and scale their products and services in new environments, such as Kubernetes and serverless platforms. As businesses place more and more responsibility on developers to own their code beyond deployment, the entire engineering team requires a similarly dramatic increase in operational knowledge and visibility. This shift is happening across companies of all sizes, from startups to large enterprises, and corresponds with a growing focus on observability. While the walls between operations and development have been blurring for many years, the tools used by each function have remained siloed and tailored to the needs of distinct teams. Most of these solutions are exceptional at what they do; mainly helping operations teams manage resources, while helping developers consume resources. However, the blurring of engineering and operational roles and responsibilities is not a trend that‚Äôs likely to reverse itself. In fact, this shift has given rise to a blended DevOps function. To that end, new tools and solutions must emerge that span the needs of both functions, while giving businesses powerful new insights into the customer experience and growth opportunities. As I mentioned before, Airbrake‚Äôs application error and performance monitoring has long been a developer-centric service, built with passion by developers, to enable the visibility of applications from the inside-out. What‚Äôs been missing is additional visibility into the platform applications run on, and the environment they run within; both of which are critical to fully understanding the context and root cause of an issue. Knowing about an error, or performance problem within your application is just the first layer. There are many other components and moving parts that can (and do!) impact the experience of what we build and what our customers expect. This broader context has always been missing from developer-centric tools and services. Today, that changes as Airbrake joins LogicMonitor. And this is where I get excited! LogicMonitor is an award-winning infrastructure monitoring and observability platform that delivers the additional platform and environment visibility Airbrake aspires to. Together Airbrake and LogicMonitor will enable developers with the depth of platform observability they desperately need, while also bringing code-level application insights to IT and operations teams. I‚Äôm thrilled to join the LogicMonitor engineering team, where I will help architect and deliver the next generation of observability tools that will bridge the gap between development and operations to drive new opportunities for our customers. Want to learn more about today‚Äôs news that Airbrake is joining LogicMonitor? Read the press release here . You can also learn more about LM capabilities in general at logicmonitor.com . Looking forward to this next step of our journey, Eric, Airbrake CTO", "date": "2021-02-23"},
{"website": "Airbrake", "title": "New Development Tools in Chrome 61", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/new-development-tools-in-chrome-61", "abstract": "The latest version of the popular Chrome browser was officially released this week, and with it comes a handful of exciting new features for developers and technical managers alike. From out of the box ES6 module support and mobile device throttling to WebUSB API support and storage usage statistics, there are a bunch of new development tools in Chrome! Moreover, Chrome continues to dominate the browser market with a vast and continually rising lead over the competition. According to recent statistics gathered from billions of page views worldwide , as of August 2017 Chrome has approximately 55% global market share. By comparison, its next closest competitor, Safari, clocks in at less than a third of that with around 15% of the market. Moreover, Chrome has been reliably gaining about half a percent of the market every month for a few years now, with no signs of stopping. Safari was the first major browser to provide ES6 module support out of the box, and now Chrome 61 joins the club, instantly ensuring roughly 70% of the worldwide userbase can freely use applications that take advantage of ES6 modules, without the need for a third-party transpiler. This is great news and an amazing trend for developers. While older browser support is always a concern, the technical landscape is constantly shifting and adjusting to the needs of the majority. Just as we‚Äôre now seeing Adobe Flash lose support (Adobe itself is planning to end-of-life Flash by the end of 2020), ES6 modules have quickly become a dominant form of organizing code within large JavaScript applications. While a full explanation of ES6 modules is beyond the scope of this article, we‚Äôll briefly look at how they work and what benefit they provide. ES6 modules allow code to be selectively exported and imported across various files (i.e. modules ). This makes it much easier to keep code separate and far more object-oriented, while explicitly importing and exporting only the particular functionality (modules) that are required. Here‚Äôs a simple example of exporting the add(x, y) function from the add.js file, then importing it in the test.js file, where it can be used as normal: If you‚Äôre running the latest version of Chrome (or Safari), you can test ES6 modules for yourself by checking out the ESModules Todo MVC project. Chrome 61 also adds to the already-powerful mobile device toolbar by adding the ability to select mid- and low-tier device profiles. This is a convenient way to throttle performance and test different device configurations with just a few clicks of a button. Access this new feature by opening the device toolbar ( Ctrl + Shift + M ), then selecting the Online dropdown menu: Another awesome new feature is support for the WebUSB API, which allows web apps to communicate with USB devices, once user consent is given. This opens up a ton of cool possibilities for the future of web application and hardware interoperability, but may also worry both users and developers when it comes to privacy and security concerns. Check out the full WebUSB spec document to learn exactly how the API aims to handle such concerns. You can now also take a look at how much storage space the current origin is using within the DevTools ( Ctrl + Shift + I ) > Application > Application > Clear storage screen: Best of all, this data is broken down into each type of storage technology, such as IndexedDB , Web SQL , local , session , and so forth. The command menu ( Ctrl + Shift P ) is a convenient way to quickly perform common actions during development and testing. Chrome 61 has now added the ability to toggle the FPS meter panel through the command menu , providing a convenient way to check framerate performance in your applications. Check out Airbrake‚Äôs Airbrake-JS error tracking tool, which quickly and easily integrates into any new or existing JavaScript application, providing you and your team with real-time error reporting and instant insight into exactly what went wrong. Airbrake-JS works with all the latest JavaScript frameworks and supports full source map control, to ensure your error reports are as detailed as possible. Airbrake-JS also allows you to easily customize error parameters and grants simple filtering tools so you only capture and report the errors you care about most.", "date": "2017-09-07"},
{"website": "Airbrake", "title": "Error Monitoring vs. Logging", "author": "Unknown", "link": "https://airbrake.io/blog/debugging/error-monitoring-vs-logging", "abstract": "When it comes debugging, which is better: error monitoring or logging? As a developer, you know that whenever any activity happens on your servers, a record is created and stored. This is referred to as the log file. These log files hold all data produced by applications, so their value cannot be underestimated. However, simply allowing records to be written to log files by themselves will not help us much due to the vast amounts of data collected daily. The sheer volume of these records, if left alone, are virtually impossible to navigate. In a way, log files become the proverbial ‚Äúhaystack‚Äù of data, where our needles of ‚Äúinformation‚Äù live. Before error monitoring , you were required to engage in a series of logging practices with the aim of managing this data into more usable chunks. This is time-consuming. Error monitoring vastly simplifies your ability to push out code without needing to delve into thousands of lines of data to find just one line of code where your error is located. In the past, log files were our primary source of data. At one time or another, we‚Äôve had multiple windows open at a time, grepping for errors on each screen. This approach may work for relatively small collections of data, but it‚Äôs not as effective when looking through huge chunks of data. For example, say we are digging through our logs looking for fatal errors using grep. While effective if we know exactly what we are looking for, this approach is not particularly efficient for spotting problems. We are forced to dig through and manually look at individual errors using a variety of different parameters and attributes. For large organizations, moving from grep to Splunk was an epiphany: it provided some automation to the grepping process. However, even with Splunk, we still needed to know what we were looking for to find it. Most of the time, errors have patterns that are often associated with a specific file, deployment, and/or a single user. However, there‚Äôs more in the logs than errors. You might find patterns of system slowdowns or bottlenecks that may not be immediately evident by looking at specific messages. Furthermore, we may not notice the gaps between the beginning and end of processes. Even with basic errors, activity by one user can throw off an entire log. We may see a long row of errors, all of which are associated with activity by a specific person, but this may not be obvious in the beginning. It can take forever to notice these patterns within the log file. Similarly, errors may appear as a result of a specific browser, server, OS, etc. Essentially, all of this can be summed up in one sentence: Logging does not define patterns. This is especially a problem for large log files. Whether it‚Äôs a single file or multiple files, there‚Äôs simply too much data to sort through. As we have moved to cloud computing, we are now often paying for storage space. Logging can take up a significant portion of available storage due to multiple files being stored on the server‚Äôs hard disks. If there is a significant amount of activity occurring on these systems, these files can grow to be extremely large in a short amount of time.¬† The more data we choose to log (especially if we are in debug mode), the faster these files fill up. If there are multiple applications running simultaneously, it‚Äôs easy to run out of system resources. Similarly, the very act of searching files for errors or patterns is often memory intensive. As a result, most people do not keep logs for a long time. Because of this, contextual data gets lost. If we are dealing with a system with an intensive user interface, the amount of time logging takes can impact users negatively, leading to a lower Apdex Score . Tracking errors across multiple systems and log files can be difficult, particularly if you‚Äôre running multiple or duplicate processes. Even with Splunk, you still need to search files for issues. What‚Äôs really needed is an error monitoring tool. Monitoring is the practice of tracking log files with a separate tool. This allows for applications to remain available while responding to user or system requests within a reasonable timeframe. Good error monitoring tracks large amounts of data and presents it to users in the form of easily consumable information. Airbrake is a good example. Airbrake Error Monitoring provides developers with a great deal of information about what‚Äôs happening in their app via dashboards. With logging, everything is abstract and difficult to find. Monitoring aggregates key information and trends to help you easily pinpoint issues. Monitoring tools can solve several problems associated with logging. In an application like Airbrake, you don‚Äôt have to dump old log files. Instead, this data is aggregated so you can see clear historical patterns, without having to write and run elaborate queries off of data that no longer exist. In addition to this, error and performance monitoring can track deployments, code diffs, and stack traces. We¬†can also use monitoring tools to identify certain business trends.¬†For example, if there is a large amount of activity occurring at certain times or locations, this could signify that a particular marketing campaign, seasonality, or global event may be impacting a business. Don‚Äôt underestimate the power of error monitoring, especially if you are a small company that can‚Äôt afford errors. Monitoring will save you time, money, and resources. Of course, monitoring cannot completely eliminate the need for logging. In the end, both serve two separate purposes and functions. Ideally, you want to both log and monitor at the same time. The logging process is about managing data inside the log files (e.g. aggregation, storing, identification of duplication, the security of data, etc.). Without effective logging, we cannot monitor. The monitoring process exists at a higher level, so you need data to be well-managed and organized before it can be monitored. Once this is done, you‚Äôll quickly see the big picture of what is going on within your application. When you understand what‚Äôs going on within your application, you can then use logging practices to access the raw log files during the debugging process. As you can see, both truly do work together. To make the best use of your logging and monitoring tools, it is wise to follow a few best practices. These include: Configuration : Set up your system to send log data directly to your monitoring tools. This way we can get a real-time picture of what is occurring at any given point in time. Once configured, your monitoring tools will alert you to various issues before you spot them in the log. Triage : Log only data that is necessary for troubleshooting and/or compliance. Set up a series of rules for your log files to store important pieces of data and to discard the rest. Structure :¬† Structured data such as user id, error type, operating system, and more will make it a lot easier for your monitoring tools to be able to track common problems. The best solution to catch bugs is to use both logging and error monitoring tools. This way, you‚Äôll see the big picture of what is going on without needing to scrape through every single line of code to find an error. Furthermore, without logging, there is no monitoring and troubleshooting individual issues can become complicated. Where can you find a powerful and affordable error monitoring tool? Try Airbrake! Our error monitoring and performance monitoring applications provide insight into your entire app stack. It‚Äôs simple to install and works with several languages and frameworks, such as Ruby, Java, Golang, Python, etc. See for yourself and sign up for a free 30-day trial , which includes unlimited errors, unlimited user accounts, and unlimited projects.", "date": "2021-01-19"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.Web.HttpException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-web-httpexception", "abstract": "Moving along through our in-depth .NET Exception Handling series, today we‚Äôll be going over the System.Web.HttpException . The HttpException is the most basic type of web-based exception, so it can be used for many general purposes that relate to something going wrong when processing an HTTP request in an ASP.NET or similar application. Throughout this article we‚Äôll explore the HttpException in more detail, starting with where it sits in the overall .NET exception hierarchy. Then we‚Äôll take a look at a fully-functional C# code sample that illustrates one example of how you might use HttpExceptions in your own code. Let‚Äôs get started! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. The full exception hierarchy of this error is: System.Object System.Exception System.SystemException System.Runtime.InteropServices.ExternalException HttpException System.Exception System.SystemException System.Runtime.InteropServices.ExternalException HttpException System.SystemException System.Runtime.InteropServices.ExternalException HttpException System.Runtime.InteropServices.ExternalException HttpException HttpException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As mentioned in the introduction, the HttpException is a baseline, generic HTTP-based exception, so it can be used in a variety of situations that you deem appropriate. In the simplest sense, an HttpException should be thrown when something goes wrong while processing any HTTP request. Thus, you can freely throw HttpExceptions throughout your web application, wherever they are appropriate. To illustrate how you might use a HttpException in your own code our sample begins by creating a standard ASP.NET web app. There‚Äôs little reason to go through all the files included in the project, since they‚Äôre primarily all the defaults. Instead, the goal of this example code is to create a simple web form that allows the user to enter some fields to create a Book , such as Title , Author , Page Count , and Publication Date . Upon submitting the form, our code performs some basic validation on the server-side. If validation is successful, a new Book instance is created and the string format is output to the user. If validation fails, a new HttpException is thrown, indicating what went wrong so the user can resolve it. Thus, we start with a basic Book class that includes the previously mentioned properties. It also includes a slightly modified ToString() method override, which checks if PublicationDate is present, and therefore, whether it should be included in the Book output: Our Default.aspx page uses Bootstrap for CSS classes, but otherwise is a pretty traditional collection of TextBox fields to enter data, and associated Labels : We‚Äôve also added the BookSubmit_Click() method to the OnClick event of the BookSubmit Button , which will trigger our validation. The BookLabel Label will serve as a basic output for the user should anything go wrong. Finally, the actual C# code for our Default.aspx page starts with the standard Page_Load(object sender, EventArgs e) event method, but we aren‚Äôt performing any actions in there so it‚Äôs blank: We next have a private CreateBook() helper method that attempts to create a new Book instance using all the entered data from our Book form: We don‚Äôt want to create a Book that has no Author or Title , so we explicitly throw a new HttpException if either field is empty. We have decided to allow PageCount to be empty, so we set the default value to 0 if it‚Äôs not empty, otherwise we convert the string value in BookPageCount.Text to an integer. Finally, we also need to check if the user has selected a date within the BookPublicationDate calendar control. If not, the value is equal to the DateTime.MinValue , so we call a different Book constructor overload then if a publication date was selected by the user. From there, we need to add the BookSubmit_Click(object sender, EventArgs e) method, which is our event handler for when the submit button is clicked: Here we‚Äôre just creating a new Book instance using the CreateBook() method, then outputting the newly-generated Book to the debug log, as well as formatting the BookLabel to show the user the new Book . However, if an HttpException occurs we output that to the log, and also alter the label output to display the error for the user. With everything in place let‚Äôs run our little web application and try playing around with creating some Books . We start with all four fields ( Title , Author , Page Count , and Publication Date ) empty/unselected. If we click Submit without making any changes, the first validation that fails is the Title check, which outputs an HttpException to the user and the log: Let‚Äôs enter The Stand into the Title field and try to Submit again. Now Author is the problematic field: In our case, we‚Äôre talking about The Stand by Stephen King, so let‚Äôs add him to the Author field and Submit a third time. Lo and behold, no exceptions are thrown and we get a new Book output: We explicitly allowed zero pages to be specified, so that‚Äôs what we get. However, that‚Äôs not quite right, so let‚Äôs change it to the correct value of 1153 and try again: Now let‚Äôs select the publication date of September 1st, 1978 and Submit once more: This all works as intended, but what happens if we try to use an incorrect value type? For example, let‚Äôs change the numeric Page Count field from 1153 to a written form of one-thousand, fifty-three and Submit one final time: Here we see two exceptions are output to the log (while only the HttpException is shown to the user on the page). The reason for this is that we attempt to convert the BookPageCount.Text string value to an integer using Convert.ToInt32(...) , but the string we passed cannot be parsed and converted by the default API. Therefore, this throws a System.FormatException , which we explicitly catch in the CreateBook() method, outputting that to the log and manually throwing our own HttpException that can be caught elsewhere and shown to the user. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-10-13"},
{"website": "Airbrake", "title": "The Best APM Tools for Developers", "author": "Unknown", "link": "https://airbrake.io/blog/apm/best-apm-tool-for-developers", "abstract": "Application Performance Monitoring (APM) has gone beyond the realm of operation professionals, such as IT and system engineers. Developers need APM, as well. But not every tool included in your average APM is necessary for your code. So, as a developer, what are the best APM tools you should be using? Here are three tools we believe are essentials for developers: Apdex Tool Error rate HTTP information These three tools are guaranteed to improve your code and application‚Äôs performance. Let‚Äôs take a closer look. If you‚Äôre not familiar with Application Performance Monitoring in general, you might not be familiar with an Apdex Score . An Apdex Score is a unit of measurement which quantifies the user experience (UX). Its measurement is based on five variables: T, Satisfied Count, Tolerating Count, Frustrated Count, and Total Samples. The formula appears as so: Image Source: https://en.wikipedia.org/wiki/Apdex When all of your variables are placed into the following formula, you‚Äôll come up with a number between 0 and 1. The closer your score is to 1, the better your user experience. What the heck does this have to do with coding? Your Apdex Score can tell you when something is seriously wrong with your application. Imagine: you deploy a new batch of code and your Apdex Score tanks. Your poor user experience is most likely related to that new deployment. As a developer, you can easily find the point where your Apdex Score fell and fix the error causing it. When looking for potential APMs for your application, make sure to invest in one with an Apdex Score tool. Wait, what if I already have an error monitoring software? Why would Error Rate be an important metric to me as a developer? Great question! Application Performance Monitoring is excellent when it comes to giving you a general idea of what‚Äôs going on with your application. Error monitoring is great for deep-dives into your code so you can find and fix errors quickly. For Airbrake specifically, Error Rate perfectly enriches our Error Monitoring software because it tells you immediately if there‚Äôs an increase in errors and how those errors may be impacting your application and its users. That‚Äôs what Airbrake APM is all about: immediate, real-time, information about your application. Consider this: a one-second delay in app response time can result in a 16% decrease in customer satisfaction. This is why it‚Äôs important that your app runs quickly and is optimized to prevent slowdowns. The problem is that you might not know you were experiencing a slowdown based on looking at your code alone. This is where APM and HTTP monitoring comes in. You know how HTTP works, but how does it work in the context of application health? Typically, HTTP issues tend to be dealt with by IT and other operation professionals. But as a developer, there‚Äôs plenty of information you can glean from HTTP relating to your code. For example, what if your request and request rates remain the same, but your response times have significantly slowed down? At that point, you can assume it‚Äôs not the servers that need to be fixed, but something related to your code.¬†Maybe you recently deployed new code. Do these slowdowns coincide with this new deployment? This is something performance monitoring can tell you. And this is just one example of how monitoring HTTP information can give you invaluable information about your code. Will these three APM tools fix your code? No, but they can help you consider the quality of your code within the context of your application‚Äôs health. Together, they give you a complete and quick overview of how well your application is functioning and how your code is impacting your users. You don‚Äôt have to go far to use these tools. Airbrake Application Performance Monitoring gives you access to all these tools and gives you data about your code, production environment, and user experience; as well as: Contextual Drill Downs A Streamlined UI Performance Data The best part? Airbrake APM is automatically part of every Error Monitoring Plan. So if you‚Äôre already on an Airbrake plan, you already have APM. All you have to do is to click on the Performance tab. Airbrake plans include 50K free performance events each billing cycle and can currently be used with Rails , Node.js (Express.js) , Go , Django , and Flask projects.", "date": "2020-12-15"},
{"website": "Airbrake", "title": "Get Ready for Launch", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-launch-plan-starting-at-19", "abstract": "Earlier this year, Airbrake released it‚Äôs free Developer Tier. This was our first full-featured, always free development tier for new apps. While it‚Äôs been very popular, its existence showed we had a hole when it comes to the life cycle of applications. We needed a plan which would fit nicely between app production and scaling up your users. Basically, something ‚Äújust right‚Äù between the always-free Developer Tier and the Essential Tier. That‚Äôs why we‚Äôve created our new Airbrake Launch Plan . For just $19/month, you‚Äôll receive 25k errors and 50K performance events (APM).  Plus, you‚Äôll have access to all of Airbrake‚Äôs features, including: Single-Sign-On Unlimited Users Unlimited Integrations Unlimited Projects 30 Days of Data Retention On-Demand Errors Chat & Email Support This is one of the most affordable error monitoring plans on the market. And you‚Äôll never pay extra for additional Airbrake features . We think this plan is perfect for those who find the free Developer plan to be too limiting at 7.5k errors a month, but you‚Äôre not quite ready to invest in 100k errors. Maybe you have a side or a start-up project taking off and you find yourself constantly hitting the limit of your free plan. So, we opted to create something for developers who are stuck somewhere in the middle. The great part is you‚Äôre not limited to just 25k errors a month. As a Launch Plan account, you‚Äôll be able to use On-Demand Errors, which is perfect in case you see unexpected spikes in errors. With On-Demand Errors, you can receive errors past your plan‚Äôs threshold, while paying a small discounted fee per error. Log into your Airbrake account and upgrade to the Launch Plan, today. Within minutes, you‚Äôll have access to all of Airbrake‚Äôs features and 25k errors. Discover the power of Airbrake Error Monitoring and APM with a risk-free 30-day trial , where you‚Äôll have complete access to millions of errors, unlimited user accounts, unlimited projects, unlimited integrations, Single-Sign-On, and so much more.¬†At the end of your free trial, you can select the Airbrake plan that‚Äôs right for you.", "date": "2020-12-07"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì SocketException", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/java-socketexception", "abstract": "Making our way through our in-depth Java Exception Handling series, today we‚Äôll be going over the SocketException . As the name suggests, a SocketException occurs when a problem occurs while trying to create or access a Socket . Throughout this article, we‚Äôll examine the SocketException in more detail, starting with where it sits in the overall Java Exception Hierarchy. We‚Äôll then look at some functional sample code that will illustrate how a typical socket connection can be established, and how connectivity issues between client/server can produce unexpected SocketExceptions , so let‚Äôs begin! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Error java.io.IOException SocketException java.lang.Throwable java.lang.Error java.io.IOException SocketException java.lang.Error java.io.IOException SocketException java.io.IOException SocketException SocketException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. This code sample also uses the Logging utility class, the source of which can be found here on GitHub . The SocketException is similar to the SocketTimeoutException we explored last month , but, believe it or not, SocketTimeoutException is not inherited from the broader SocketException class. Instead, SocketTimeoutException ‚Äî which indicates a timeout occurred during a read or acceptance message within a socket connection ‚Äî inherits from java.io.InterruptedIOException , which itself inherits from java.io.IOException (the same parent class used by SocketException ). In practical terms, this means that SocketException is usually indicative of a more generic connection issue, while SocketTimeoutException is explicitly thrown only when timeout problems occur. To illustrate how a SocketException can commonly occur we‚Äôll start with a simple client/server configuration, similar to that we used in a previous post. We run the test by running both the client and server on separate threads, then the server will prompt the client to enter a message. Once the client enters a message, that value is transferred to and received by the server, before the server then prompts for a new message. This repeats until the client gracefully ends the connection. We‚Äôll start by looking at the Server.java class: Executing the Server.main() method invokes CreateServer(int port) and creates a ServerSocket(int port) and the DefaultPort of 24601 . The server socket accepts incoming connections on that port, creates a PrintWriter using an output stream to send a prompt message to the client. Once sent, the server creates a new InputStreamReader from the input stream coming from the client, then reads and outputs the message the client sent. A continuous while loop is used to repeat this whole process over and over, awaiting a connection, prompting for input, and outputting the received input from the client. Meanwhile, here‚Äôs the Client.java class: The Client.main() method creates a new Client instance, which invokes Connect(...) two times. The first invocation uses default values (including port 24601 ), while the second connection does the same but with a very short 1 ms timeout period. Otherwise, functionality of Client.Connect(...) is rather similar to Server.CreateServer(int port) . It begins by establishing a new Socket instance and connecting to the proper host ( localhost ), port, and using the passed timeout value. An InputStreamReader is used to get the input stream from the server, which is output to the client. The client is then prompted to send a message, which is passed to the server. If the client enters quit or exit keywords, the socket connection is closed. Meanwhile, another while loop repeats thie entire process over and over. If we test this out we start by running Server.java , then Client.java afterward. The server outputs: And the client outputs after entering ‚ÄúHello‚Äù at the prompt: Everything is working as expected. But, what happens if we interrupt the client connection in some way, such as terminating the process? Immediately the server experiences a problem and catches the thrown SocketException : This shouldn‚Äôt be much of a surprise that closing the client connection produces an error on the server. However, what happens if we reverse the process and terminate the server process while connected? As it happens, the client prompt remains open and awaits input from the user, due to these code statements: Execution halts while awaiting for user input. However, as soon as a message is entered the client recognizes that the server has disconnected, so the client now throws a SocketException when execution resumes: The Client constructor invokes a second Client.Connect(...) call after the first, so now that the server has been terminated, the second attempt by the client to establish a new Socket connection results in a SocketTimeoutException , since no connection could be established to the server: The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-12-25"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì NotSerializableException", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/notserializableexception", "abstract": "Continuing along through our in-depth Java Exception Handling series, today we‚Äôll be looking into the NotSerializableException . The NotSerializableException is thrown when attempting to serialize or deserialize an object that does not implement the java.io.Serializable interface. Throughout this article we‚Äôll get into the nitty-gritty of the NotSerializableException , starting with where it resides in the overall Java Exception Hierarchy. We‚Äôll also dig into a functional code example illustrating how to perform basic serialization on Java objects, and how improperly doing so might lead to NotSerializableExceptions , so let‚Äôs get to it! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Error java.io.IOException java.io.ObjectStreamException NotSerializableException java.lang.Throwable java.lang.Error java.io.IOException java.io.ObjectStreamException NotSerializableException java.lang.Error java.io.IOException java.io.ObjectStreamException NotSerializableException java.io.IOException java.io.ObjectStreamException NotSerializableException java.io.ObjectStreamException NotSerializableException NotSerializableException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. This code sample also uses the Logging utility class, the source of which can be found here on GitHub . Let‚Äôs briefly take a moment to review what serialization is, in a general programming sense. Effectively, serialization is the act of transforming a structured piece of data (such as an object) into a format that can be easily stored and transmitted. Typically, a serialized format might be a memory stream, a series of characters (i.e. a string), a local file, and so forth. Additionally, deserialization is the act of reversing a previous serialization process ‚Äî converting a string, memory stream, file, or what not to the original structured piece of data (object) that the element began as. There are many advantages to serialization, but this ability to convert complex data structures into a rudimentary form (such as a string) makes it particularly easy to transmit specific objects from one source to another, then re-create the original with no data loss. As with many other programming languages, Java includes built-in serialization support through the Serializable interface. Implementing this interface within a class definition allows that class to be serialized and deserialized through standard methods. To illustrate, we begin with our custom Book class: Most importantly, we‚Äôve implemented the Serializable interface for the Book class, which will allow our Book objects to be serialized: We‚Äôve also added the toFilename() method, which attempts to encode a compatible file name out of the author and title fields of the Book instance. We‚Äôll use this somewhat unique filename to create a local file for serialization purposes: Speaking of which, let‚Äôs look at our Main.Serialize(Object object, String filePath) method: This method attempts to serialize the passed Object object parameter by passing it to the ObjectOutputStream.writeObject(...) method. Our ObjectOutputStream instance is attempted to write to the FileOutputStream created from the String filePath parameter. If successful, we output a log message, otherwise we catch and log any exceptions. Conversely, the Deserialize(String filePath) generic type method reverses the process by calling ObjectInputStream.readObject() to deserialize the object found in the passed String filePath location: To test this out we have the TestBookSerialization(Book book) wrapper method: As you can see, all we‚Äôre doing here is creating a local file name (using the Book.toFilename() method we looked at before), then attempting to first serialize and then deserialize the passed Book book object. To see if everything works as expected our Main.main(...) method creates two different Book instances and performs our serialization tests: Executing the Main.main() method produces the following output: Everything seems to be working just as expected. Our encoded filenames are created, and our Book instances are successfully being serialized and saved to the file, then deserialized. To confirm, if we open up the the+name+of+the+wind-patrick+rothfuss.ser local file the contents look like this: Looks like a mess to us since it‚Äôs not stored in a human-readable format, but this further confirms that our serialization is working properly. However, let‚Äôs pretend we did everything as before, expect for one minor mistake: We forgot to add implements Serializable to our Book class definition: With all other testing code exactly as it was before, executing our Main.main() method again now produces the following output: Suddenly we experience our first NotSerializableExceptions , which indicate that the io.airbrake.Book class is not serializable. In this case, we know it‚Äôs because we didn‚Äôt implement the Serializable interface. However, it‚Äôs worth noting that serialization can only work if the entire series of related objects are serializable. This means that, if one of the fields of our Book class was private Publisher publisher , where Publisher was a unique class of its own, we could only serialize a Book instance if both Book and Publisher classes implemented the Serializable interface. Alternatively, we could also serialize a Book instance even if Publisher did not implement Serializable , but only if the private Publisher publisher field was annotated as a transient field. The transient annotation indicates that the field should not be serialized. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-12-04"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì NullPointerException", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/nullpointerexception", "abstract": "Today we start the journey through our Java Exception Handling series with a deep dive into the java.lang.NullPointerException. A java.lang.NullPointerException is thrown there‚Äôs an attempt to use null anywhere an object is actually required, such as trying to directly modify a null object. In this article we‚Äôll look at where the java.lang.NullPointerException sits within the Java Exception Hierarchy, plus, we‚Äôll also explore some functional code samples that illustrate how these exceptions might be raised during your own development adventures, so let‚Äôs get crackin‚Äô! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. java.lang.Exception inherits from java.lang.Throwable . java.lang.RuntimeException inherits from java.lang.Exception . Finally, java.lang.NullPointerException inherits from the java.lang.RuntimeException class. As we saw in the hierarchical breakdown, the java.lang.NullPointerException inherits from java.lang.RuntimeException , so quite clearly this is an issue that will pop up during execution of an application. Specifically, virtually anytime an attempt is made to directly access a field, method, or the like of a null object a java.lang.NullPointerException is thrown. To illustrate we‚Äôll start with the full code example below, after which we‚Äôll walk through it step-by-step to see what‚Äôs going on: Probably the most typical case where a java.lang.NullPointerException could be thrown on accident is when calling an instance method or field of an object that has (unknowingly) been set to null . Therefore, we begin with the callInstanceMethodOfNull() method, which creates a new age variable, sets it to null , and then attempts to call the age.toString() method: As you can probably guess, executing the callInstanceMethodOfNull() method results in a java.lang.NullPointerException coming our way, as we see in the log output: The obvious fix in the case above would be to confirm that a mutable object, like age , is not null prior to calling a method on it: We also have defined a simple Book class as part of our example, which we‚Äôll use within the callInstanceFieldOfNull() method: As you can see, we‚Äôre just using Book here to illustrate the creation of a custom class instance object. We then set that new book object to null , then try to access a the book.author field in a log output. As suspected, this also throws a java.lang.NullPointerException at us: Again, the simple solution is just to check that our book object isn‚Äôt null prior to making the field call. In some cases it might be ideal to directly throw a different exception in the event that an object your code is using is null when it shouldn‚Äôt be: Obviously, in the case above we‚Äôre just moving from one type of exception to the other, but this is often a good practice if the circumstances are appropriate. Executing this new method shows our new (unexpected) exception was caught by our catch (Throwable exception) block, which is generally a bad practice but helps to illustrate this particular scenario: The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free fo r 30 days .", "date": "2017-07-12"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì NumberFormatException", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/numberformatexception", "abstract": "Making our way through our in-depth Java Exception Handling series, today we‚Äôre taking a look at the java.lang.NumberFormatException. As you may suspect, the NumberFormatException is thrown when code attempts to convert an invalid String into one of the other generic numeric wrapper classes, such as Integer , Byte , Long , and so forth. Throughout this article we‚Äôll explore the java.lang.NumberFormatException in greater detail, looking at where it resides in the Java Exception Hierarchy, as well as looking at some basic and functional sample code that illustrates how NumberFormatExceptions might be commonly thrown. Let‚Äôs get going! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. java.lang.Exception inherits from java.lang.Throwable . java.lang.RuntimeException inherits from java.lang.Exception . java.lang.IllegalArgumentException then inherits from java.lang.RuntimeException . Finally, java.lang.NumberFormatException inherits from java.lang.ReflectiveOperationException . Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. The abstract Number class is the core superclass that is used to represent numeric values which can be converted into the primitive types of byte , double , float , int , long , and short . As such, Java throws a java.lang.NumberFormatException when a failed attempt is made to convert into one of those types. In addition, each of the numeric primitive types has its own wrapper class, namely Byte , Double , Float , Integer , Long , and Short . Like most wrappers, these classes can be used to represent a value object of the underlying primitive type, while also providing additional functionality and methods (such as the MAX_VALUE field). For our sample code we‚Äôre testing conversion from String to each of the wrapper class types using their built in parseType() method (e.g. Integer.parseInt() for the Integer class). Just to keep things tidy we‚Äôll traverse through them in alphabetical order, starting with Byte , which we test in the convertStringToByte(String string) method: As you can see, nothing fancy going on here. We merely take our passed String parameter and attempt to parse it via Byte.parseByte(String string) . If we catch an Exception we output it. To call this method we have two different String values we‚Äôre trying: 20 and 200 . As you‚Äôre probably aware, the maximum positive value of a Byte is 127 , so the first call works, but the second throws a java.lang.NumberFormatException , indicating that the value of 200 is out of range: Next we have our Double testing method and executing code: Here we‚Äôre trying three different values to show how we can use those build-in fields, like Double.MAX_VALUE . However, an unrecognizable character of x at the end of our third String value results in another java.lang.NumberFormatException : Here‚Äôs our test for conversion to a Float object: Our first value call works fine, as does the second, except the output is Infinity . This is because the maximum positive value of a Float is a little less than 2^39 , so while there‚Äôs no parse error, a Float object cannot handle that value so it wraps to an infinite representation. Our third call, however, again uses an invalid character of x instead of the exponent e , so another NumberFormatException is thrown: For our Integer test we again use an invalid character of x : As expected, the second call throws another NumberFormatException : Next we have the Long value, which is essentially just the much larger form of an Integer : As you can see by the comment, the maximum positive value of a Long is 2e63 - 1 , which we‚Äôve converted to its decimal format as a String . Both these first two conversions work fine, but increasing the value to one above the MAX_VALUE produces another NumberFormatException : Finally, we have the Short conversion. While Long is a much larger Integer , Short is limited to a far smaller value: Again we‚Äôre testing using the maximum positive value of a Short ( 32,767 ), which works fine, but the increase to one more than that throws yet another NumberFormatException : As we can see, NumberFormatExceptions can occur in a variety of scenarios, but typically they‚Äôre due to either typos in the numeric String values that are being parsed, or because the resultant value would exceed the bounds of the target object type. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-08-20"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì AssertionError", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/assertionerror-java", "abstract": "Making our way through our detailed Java Exception Handling series we arrive at the AssertionError that we‚Äôll be going over today. As with many other languages, the AssertionError in Java is thrown when an assert statement fails (i.e. the result is false). Within today‚Äôs article we‚Äôll explore the detailed of the AssertionError by first looking at where it sits in the larger Java Exception Hierarchy. We‚Äôll also examine some fully functional Java code that will illustrate one example of a best practice for using assertions in Java applications, and how such code should lead to an unexpected AssertionError if something goes wrong. Let‚Äôs take a look! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Error java.lang.AssertionError java.lang.Throwable java.lang.Error java.lang.AssertionError java.lang.Error java.lang.AssertionError java.lang.AssertionError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. This code sample also uses the Logging utility class, the source of which can be found here on GitHub . To understand how AssertionErrors should be thrown within Java code we should first briefly review how assertions and the assert keyword are intended for use. The purpose of assertion is to test assumptions about the application‚Äôs logic. These assumptions might include pre-conditions, post-conditions, invariants, and the like. As with most other programming assertion features, the Java assert keyword expects a boolean expression that the code assumes will be/should be true. This is because, the moment an assert expression is false the Java Virtual Machine ( JVM ) will throw an AssertionError , which should typically halt execution of the application. Before we go any further it‚Äôs worth noting that, by default, assertions are disabled for most JVMs. Thus, executing code with a failing assertion will completely ignore the failure and will not throw an AssertionError . This is typically not desired, since the purpose of using assert expressions at all is to properly test the assumptions throughout your code. To enable assertion checking you‚Äôll need to add a command-line switch: -enableassertions or -ea . For example, if you‚Äôre executing code via the java command line tool, you‚Äôd need to issue something like the following command: $ java -ea <class> . For most IDEs such as IntelliJ IDEA or Eclipse, you should look in the run configuration for JVM/VM command-line options, in which you can add the -ea flag. There is a bit of discussion and debate in the Java development community about the exact and proper use of assertions, but the general consensus is that the appearance of an AssertionError should indicate a fundamentally broken application/code snippet. Consequently, assert statements should be used as a form of sanity checks as final ‚Äúno-turning-back‚Äù statements that should never be reachable by proper code. In other words, it is common to use an assert statement that always produces a false value, yet in a location where execution of the assert statement should not be possible. To illustrate this particular usage of assertions we‚Äôve created a modified version of our Book class called BookWithStringPublicationType : As the name indicates we‚Äôre using a simple String value to store the PublicationType field of each Book . We then perform a simple sanity check prior to setting the value within the setPublicationType(String type) method: As you can see we perform a simple switch case test on the passed String type parameter. If it is one of the two valid values we set the value and explicitly break from the switch statement. However, any other value will reach the default case, which contains an always-false assert false expression, with an additional argument passed to it that will be used for the error message of the subsequent AssertionError instance. In this case, the goal of the code is to be completely certain that a publicationType field can never be set to something that is invalid. Attempting to do so will produce a failure via an AssertionError , which will require alteration by a developer to fix the bug. To illustrate how this works in practice we have the testEnumPublicationType method: We start by creating a valid BookWithStringPublicationType instance with a publicationType property of \"PAPERBACK\" . We then try to change to publicationType to \"INVALID\" before outputting the resulting object. To give us something to show when a failure occurs we‚Äôre explicitly catching any AssertionErrors that are thrown here, but in normal code we would not want to catch such errors, allowing them to instead crash the application. Executing the testStringPublicationType() method produces the following output: Everything works just as expected. Our original BookWithStringPublicationType instance as a \"PAPERBACK\" is instantiating just fine, but attempting to change it to \"INVALID\" throws an AssertionError , since execution within the BookWithStringPublicationType.setPublicationType(String type) method reached the final, default switch case and executing the assert false statement. While this example illustrates one common way to use assertions in Java, we can also modify how the BookWithStringPublicationType class handles the publicationType to ensure it doesn‚Äôt rely on an assertion statement, while also ensuring that code cannot try to set invalid values for the field. We do this for the plain Book class by using the PublicationType enum : Since only the publicationType field and its related getter/setter methods were modified to use the PublicationType enum we‚Äôll only look at these changes in code: As with enumerations in other languages, using one in Java allows us to maintain a collection of valid values for a particular data type. To illustrate this the testEnumPublicationType() method seen below creates an intial Book instance with the PublicationType.PAPERBACK value for publicationType , then attempts to invoke the book.setPublicationType(PublicationType.INVALID) method call to change it: As it happens, since the JVM can identify the enumeration that is used here during compilation time, we can‚Äôt even execute this code ‚Äî the compiler detects that PublicationType.INVALID is, well, not a valid symbol within the PublicationType enum, so it halts compilation and delivers an error message. This implementation serves the same purpose of the assert technique seen above, except it captures an issue at compilation/development time, rather than during runtime. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-12-11"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì StackOverflowError", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/stackoverflowerror", "abstract": "Making our way through our in-depth Java Exception Handling series, today we‚Äôll dig into the Java StackOverflowError. As with most programming languages, the StackOverflowError in Java occurs when the application performs excessively deep recursion. However, what exactly qualifies as ‚Äúexcessively deep‚Äù depends on many factors. In this article we‚Äôll explore the StackOverflowError a bit more by first looking where it resides in the overall Java Exception Hierarchy. We‚Äôll also look at a simple, functional code sample that will illustrate how deep recursion can be created, and what might cause a StackOverflowError in your own code. Let‚Äôs get going! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Error java.lang.VirtualMachineError StackOverflowError java.lang.Throwable java.lang.Error java.lang.VirtualMachineError StackOverflowError java.lang.Error java.lang.VirtualMachineError StackOverflowError java.lang.VirtualMachineError StackOverflowError StackOverflowError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Before we look at what might cause a StackOverflowError in Java code, let‚Äôs first take a moment to review what a stack overflow actually is. Most applications are allocated a range of memory addresses that the application can use during execution. These addresses are stored and used as simple pointers to bytes of data (i.e. memory). This collection of addresses is known as the address space assigned to the application, and it contains a specific range of memory addresses that can be safely used by the application. Unfortunately, at least for the foreseeable future, available memory is a finite resource. A Java application is limited to the bounds of its assigned address space . Processes like garbage collection will constantly free up memory that is no longer in use, but, by and large, there is a limited quantity of memory addresses available to any given application. When an application attempts to use memory outside of its assigned address space a stack overflow error typically occurs. The runtime that is handling the application cannot safely allow said application to use memory that hasn‚Äôt been assigned to it, so the only logical course of action is to throw an error of some sort. In the case of Java, this is where the StackOverflowError comes in. There are many different ways a stack overflow can occur within any given application, but one of the most common (and easily understood) is infinite recursion . This essentially means that a function or method is calling itself, over and over, ad nauseam. Different languages handle infinite recursion differently, but the Java Virtual Machine ( JVM ) handles infinite recursion by eventually throwing a StackOverflowError . To illustrate this behavior our example code is quite simple, primarily performed in the Iterator class: As you can see, we have a few private members, along with the increment() method, which attempts a simple task: Iterate the count field, then call itself again. We also catch the potential errors (or Throwables ) that might come up from this process. Let‚Äôs create a new instance of Iterator and start the recursive process by calling the increment() method: Executing the few lines of code above produces the following output: We can see that a StackOverflowError was thrown, as expected, and it took about 7,200 iterations before the error occurred, with a total processing time of about 5.2 milliseconds. This is just one test, so let‚Äôs run it a few more times and record the results: What‚Äôs immediately interesting is that, while a StackOverflowError is thrown every time, the number of recursive iterations necessary to cause the error changes every time, but within a reasonably similar range. The reason for this difference is due to the vast quantity of different factors within the system when execution occurs. For example, the JVM I‚Äôm testing this on is Windows 10 64-bit with 16GB of memory, but if we run this application on other machines ( with different JVM configurations ), we might see completely different iteration counts and/or elapsed times. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-08-28"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì NoSuchMethodError", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/nosuchmethoderror", "abstract": "Making our way through our comprehensive Java Exception Handling article series, today we‚Äôll be looking into the NoSuchMethodError . As you may suspect based solely on the name, the NoSuchMethodError is thrown when a class can no longer locate the method definition of the specified method. While this error is typically caught by the compiler, it‚Äôs possible to find yourself in scenarios where it can occur during runtime, such as when a class was modified without other dependant classes being updated. In this article we‚Äôll explore the NoSuchMethodError in more detail by first looking at where it sits in the larger Java Exception Hierarchy. We‚Äôll then go over some functional sample code that illustrates how NoSuchMethodErrors might actually occur during runtime, depending on your own particular development habits and practices. With that, let‚Äôs get this party started! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Error java.lang.LinkageError java.lang.IncompatibleClassChangeError NoSuchMethodError java.lang.Throwable java.lang.Error java.lang.LinkageError java.lang.IncompatibleClassChangeError NoSuchMethodError java.lang.Error java.lang.LinkageError java.lang.IncompatibleClassChangeError NoSuchMethodError java.lang.LinkageError java.lang.IncompatibleClassChangeError NoSuchMethodError java.lang.IncompatibleClassChangeError NoSuchMethodError NoSuchMethodError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As mentioned, in most cases a potential NoSuchMethodError will be caught by the compiler or integrated development environment ( IDE ) you‚Äôre working with. For example, the Jet Brains IntelliJ IDEA IDE explicitly highlights and provides an internal error in the editor when a code statement references a class method that no longer exists. Thus, in most scenarios, it‚Äôs fairly unlikely to see a NoSuchMethodError during actual runtime. However, that doesn‚Äôt mean it‚Äôs not possible, particularly as projects get larger or multiple people become involved. All it takes to see a runtime NoSuchMethodError is to have one class modified and recompiled, while a dependant class does not get recompiled at the same time. In those situations, the outdated class may still reference a class method that no longer exists, causing a runtime NoSuchMethodError . To see this in action with functional code we start with our basic Book class: Nothing special going on here, we‚Äôre just using this to represent a possible scenario of the ‚Äúcausal‚Äù class that might be updated and recompiled. Our Main class then has the createBook() method that does just as it says, creating a Book instance: Notice that we‚Äôre explicitly calling the book.toFormattedString() method, which outputs the Book into a formatted string as seen below: It‚Äôs worth noting that we normally would override the built-in toString() method of the Book class for this purpose, but since Java automatically generates that method if it‚Äôs not explicitly defined in a class definition, it wouldn‚Äôt work for our purposes here. Anyway, executing createBook() works fine and produces the output that we expect: Now comes the trouble. Imagine we‚Äôve made some changed to the Book class. Specifically, we‚Äôve removed (or renamed) the toFormattedString() method. For our purposes here, we‚Äôll just rename it to toString() , since that is the ‚Äútraditional‚Äù way to handle this: Now, let‚Äôs recompile just the modified Book class: Now, our Main class hasn‚Äôt changed, and it also includes a second method for creating a poem instance of Book this time: Executing the createPoem() method now throws a NoSuchMethodError : As we can see, the problem here is that the call to poem.toFormattedString() references a method that no longer exists, since we renamed it to toString() and recompiled the Book class. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-10-18"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì MalformedURLException", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/malformedurlexception", "abstract": "Moving along through the in-depth Java Exception Handling series we‚Äôve been going through, we next arrive at the MalformedURLException . A MalformedURLException is thrown when the built-in URL class encounters an invalid URL; specifically, when the protocol that is provided is missing or invalid. In today‚Äôs article we‚Äôll examine the MalformedURLException in more detail by looking at where it resides in the overall Java Exception Hierarchy. We‚Äôll also take a look at some fully functional code samples that illustrate how a basic HTTP connection might be established using the URL class, and how passing improper URL values to it can result in MalformedURLExceptions , so let‚Äôs get started! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Exception java.io.IOException java.net.MalformedURLException java.lang.Throwable java.lang.Exception java.io.IOException java.net.MalformedURLException java.lang.Exception java.io.IOException java.net.MalformedURLException java.io.IOException java.net.MalformedURLException java.net.MalformedURLException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. This code sample also uses the Logging utility class, the source of which can be found here on GitHub . As the official documentation states, a MalformedURLException is thrown either when ‚Äúno legal protocol could be found in a specification string,‚Äù or when ‚Äúthe string could not be parsed.‚Äù In practice, modern Java versions have particularly robust string parsing capabilities, so the vast majority of MalformedURLException occurrences will be due to the former problem: an invalid or unrecognized protocol . The parlance used in Java (and elsewhere) for terms like protocol can be a little confusing, so we‚Äôll briefly refresh ourselves on what this means in the realm of URLs. To begin with, the broader term for identifiers of network resources is ‚ÄúUnified Resource Identifier‚Äù, or URI as it‚Äôs more commonly known. A URI is merely a string of characters that identify a resource over a network. Uniformed Resource Locators, or URLs , are a type of URI . A URL is unique in that it typically includes multiple forms of information about accessing the resource, including the protocol , the domain , and the resource to be requested. For example, in the URL https://airbrake.io/blog/ the specified protocol is https , the domain is airbrake.io , and the resource is /blog/ . It‚Äôs worth noting that the protocol section is often referred to as the scheme in the parent URI object type, because a URI can contain many different types of schemes to indicate how the resource should be accessed. For example, a scheme of https is common for URLs , but a scheme value of file might be used to access a local file resource. Moreover, many custom URI schemes exist, which allow applications to perform special actions and open resources on behalf of other applications. For example, the popular Steam online gaming platform will recognize and open URIs with a scheme of steam , as shown in the developer documentation . All that said, since the MalformedURLException in Java is typically thrown via the URL class, it stands to reason that the URL class refers to the scheme portion of the URL as the protocol . To illustrate this in action we begin with a simple HttpMethod enumeration: This will come in handy in a moment, when we need an easy way to specify the HTTP method we‚Äôll be using for our connection. Speaking of which, we‚Äôve also created a custom HttpResponse class to help simplify the creation and connection process, in order to ultimately retrieve a response from a particular URL that we wish to connect to: I‚Äôve opted to use a Factory Design Pattern , which we explored in our Creational Design Patterns: Factory Method article, which allows us to execute a sub-method after instantiating a new HttpResponse object. Specifically, we want to execute the initialize() method after the constructor completes, but we also need a way to avoid race conditions, which is where we might get unexpected results if our code is performing multiple connections simultaneously, and where our code could behave differently depending on the order of execution. By avoiding race conditions via the factory method pattern, we ensure that execution always occurs in the order we require. Thus, client code wishing to create a new HttpResponse instance can only access the create() method overloads, which creates a new HttpResponse instance via the private constructor, then invokes the initialize() method, before finally returning the generated HttpResponse object. The initialize() method is where we perform the actual connection attempt and retrieve the response, so we start by creating a new URL instance from the url property, then open an HTTPS connection to that url . We then set the request method using the string-converted httpMethod property, which is where the HttpMethod enum comes into play. Next, we retrieve the response code and, if it‚Äôs valid ( 200 ) we process the response by appending each line to an output and assigning the response to the response property. As a result, client code that invokes the create() method can then immediately call the getResponse() method, which retrieves the formatted (or null ) response property value of the HttpResponse instance: To test this out we‚Äôll create a handful of HttpResponse instances, passing slightly different URL string arguments each time: The first test produces the following output: Here we can see that everything appears to be working. We start by establishing a connection to https://airbrake.io , set the request method to GET , set the User-Agent to tha latest Chrome agent string, and get a response code of 200 . The full response contains 484 lines, so we truncate that result down to the maximum of 200 characters, as specified in the HttpResponse.MAX_RESPONSE_LENGTH property. Next, let‚Äôs try another test to connect to the slightly incorrect htps://airbrake.io URL : Immediately we get a MalformedURLException , indicating that the protocol value at the start of our URL is invalid. As previously discussed, URLs are a sub-classification of URIs , so while a URI can have a wide range of standard and custom scheme values, a URL can only have a select handful of accepted protocol values, and htps is not one of them. Our third test attempts to connect to https://airbrakeio : Here we see everything works and no MalformedURLException is thrown, but we actually get an UnknownHostException instead. This is because, while https://airbrakeio is a perfectly valid form of URL , it isn‚Äôt a recognized host . The same is true when we try to use an invalid character in our host name ( , ): The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-12-18"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì UnknownHostException", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/unknownhostexception", "abstract": "Next up in our comprehensive Java Exception Handling series we‚Äôll be looking over the UnknownHostException . The UnknownHostException can be thrown in a variety of scenarios in which a remote connection fails due to an invalid or unknown host (i.e. IP, URL, URI, etc). Throughout this article we‚Äôll explore the UnknownHostException in more detail, first looking at where it sits in the overall Java Exception Hierarchy. We‚Äôll then examine some functional code that illustrates how to establish a socket-based client/server connection, and how issues here may result in an unexpected UnknownHostException . Let‚Äôs get crackin‚Äô! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Exception java.lang.IOException UnknownHostException java.lang.Throwable java.lang.Exception java.lang.IOException UnknownHostException java.lang.Exception java.lang.IOException UnknownHostException java.lang.IOException UnknownHostException UnknownHostException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Since the UnknownHostException only occurs when dealing with some kind of IO connection, most of our sample code will illustrate a basic example of how to establish a client/server connection. Thus, let‚Äôs start by going over the simple Server class: All the logic occurs within the CreateServer(int port) method, so let‚Äôs briefly walk through what‚Äôs going on. We start by creating a new ServerSocket instance at the specified port. Then, we create an infinite loop so we can repeat the process over and over as new clients appear. Now we await a new client connection. Once a connection is established, we create an output writer , which sends a specified message to the connected client. Since we want the client to send a message back, we next establish a reader and read from the input stream sent by the client. The sent message is then output to the console, before closing the writer and socket, and repeating the process. Now, the client side is handled in the Client class: Just as before, most of the logic takes place in a single method, Connect(String host, int port) . Again, we‚Äôre starting with an infinite loop so we can maintain our connection the server once established. We start by creating a new Socket to the specified host and port , then create a both a reader and writer . The reader gets the input stream sent from the server and outputs the message. We also give ourselves a few keywords ( exit and quit ) that can be used to actively disconnect from the server. Since both the client and server scripts effectively block other threads with infinite loops, we‚Äôll need to establish two different threads to test this. We start by executing the Server class, creating a new server: Now we launch a new Client instance, which starts with a default connection to localhost:24601 . As the client output shows, this works fine: As intended, the Server recognized the connection and sent a message of \"Enter a message for the server.\" . Now, our client side is awaiting user input in the console, so we‚Äôll enter the sentence, \"Are you alive?\" : The client output shows that we successfully sent our message to the server. The Server output confirms that the message was received from the Client : Now, let‚Äôs intentionally shut down this connection to localhost:24601 by using the \"quit\" keyword: This closes the existing client connection and, per our code, establishes a new connection to localhose:24601 : Notice the slight typo in the host name. We immediately see the output showing an intention to connect, followed by a brief pause and then an expected UnknownHostException is thrown: As mentioned in the introduction, the UnknownHostException can occur for a variety of reasons, so this is just one example. In this case, the host localhose doesn‚Äôt exist, so no connection can be established. Note that this is specifically different from other connection errors where the host simply refuses connections, or hangs and eventually produces a timeout. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-09-19"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì UnsatisfiedLinkError", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/unsatisfiedlinkerror", "abstract": "Moving along through our in-depth Java Exception Handling series, in today‚Äôs article we‚Äôll be looking over the UnsatisfiedLinkError , which is thrown when attempting to dynamically load a native library that cannot be located by the Java Runtime Environment ( JVM ). We‚Äôll examine the UnsatisfiedLinkError by looking at where it resides in the overall Java Exception Hierarchy, as well as exploring some functional sample code illustrating how one might load native libraries during runtime, and how that might lead to UnsatisfiedLinkErrors . Let‚Äôs get going! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Error java.lang.LinkageError UnsatisfiedLinkError java.lang.Throwable java.lang.Error java.lang.LinkageError UnsatisfiedLinkError java.lang.Error java.lang.LinkageError UnsatisfiedLinkError java.lang.LinkageError UnsatisfiedLinkError UnsatisfiedLinkError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Note: As mentioned in the code documentation, some code used in this sample was obtained from this StackOverflow comment . To understand why an UnsatisfiedLinkError might be thrown, we should first briefly talk about native libraries in Java. Most code that is created and executed within a given Java application is written using Java code , which can then be interpreted by the JVM to create a running application. Additionally, the Java Native Interface ( JNI ) was introduced to support code written in other programming languages , which can then be interpolated and run alongside standard Java code. For example, a library written and compiled in the C programming language could be converted into a native .dll file that most Windows users are familiar with, and this ‚Äúnative library‚Äù can then be loaded by the JNI and executed within a normal Java application. Now, the potential for a thrown UnsatisfiedLinkError occurs when attempting to load such a native library that doesn‚Äôt exist, or is otherwise incompatible with the executing Java application. To illustrate, our sample code is somewhat complex, but much of it is broken up into a series of helper classes. Thus, we start with the simple listLoadedLibraries() method, which does just as the name suggests, listing all currently loaded native libraries: Executing the above outputs the following, showing that my current JVM isn‚Äôt running much in the way of additional libraries: Now, you may run into a scenario where you wish to dynamically unload an already-loaded library. There isn‚Äôt a direct API method that allows for this, because the JVM instead only unloads classes loaded by a class loader when garbage collection takes place. For example, the following unloadLibraryByName(String libraryName, String methodName) method attempts to unload the passed library by assigning it to a new class loader, then nullifying it and performing garbage collection: Since we only have the zip library currently loaded, let‚Äôs see what happens if we try to unload it: Attempting to unload the java.util.zip library above actually produces a SecurityException , indicating that the java.util.zip package name is prohibited: This particular restriction is intended to prevent user code from modifying standard Java packages, which could potentially present significant security threats, since the native classes have very low-level system access. Therefore, while the unloadLibraryByName(...) method can be used to unload a custom native library, it can‚Äôt unload a standard Java package, as we saw above. Alright, so unloading a native library is all well and good, but how do we actually load a library? There is actually an API method for that, as we can see in the loadLibraryByName(String name) method: Simply calling System.loadLibrary(String libname) will attempt to load the passed native library file ( .dll , .so , etc). To illustrate, let‚Äôs try loading a native library: As you may suspect, attempting to load a library named InvalidLibrary throws an UnsatisfiedLinkError , indicating that such a library cannot be found in the java.library.path : The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-09-28"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì OutOfMemoryError", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/outofmemoryerror", "abstract": "Making our way through our detailed Java Exception Handling series, today we‚Äôll be going over the OutOfMemoryError , which is thrown when the Java Virtual Machine ( JVM ) is unable to allocate an object due to a lack of memory. In this article we‚Äôll explore the OutOfMemoryError in more detail, starting with where it sits in the larger Java Exception Hierarchy. We‚Äôll then take a look at some fully-functional Java code samples that will illustrate how memory allocation works, and how improper memory management might lead to OutOfMemoryErrors in your own code, so let‚Äôs get started! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Error java.lang.VirtualMachineError OutOfMemoryError java.lang.Throwable java.lang.Error java.lang.VirtualMachineError OutOfMemoryError java.lang.Error java.lang.VirtualMachineError OutOfMemoryError java.lang.VirtualMachineError OutOfMemoryError OutOfMemoryError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. To understand why an OutOfMemoryError might occur, we must first briefly examine Java‚Äôs memory management scheme. When the Java Virtual Machine ( JVM ) first launches, it sets aside a chunk of heap memory (commonly referred to simply as the heap ). A heap is an area of memory that the JVM can use to store newly allocated objects. Any object within the heap that is referenced by another object is considered active, which forces that object to remain in the heap for the duration if its lifespan (i.e. while it remains referenced). Once an object is no longer referenced it is considered garbage, and the garbage collector will reclaim the memory that the object had previously required. The size of the heap depends on two factors, which can be controlled by commmand-line options when launching Java. -Xms is used to set the initial heap size , which is the initial amount of memory the application allocates to the heap. The -Xmx flag is used to set the maximum heap size , which, as the name suggests, specifies just how many bytes the heap is allocated in total. In short, the amount of heap memory given to the application will impact how many objects, and of what size, can be allocated at once before running into issues. In addition to heap memory , the JVM also manages another set of memory called non-heap memory . As the name suggests, this is memory that isn‚Äôt part of the heap used to store objects, but, instead, is used to store class structures pools, field data, method data, and the executing code of said methods and constructors. This non-heap memory pool can be adjusted, but is initially created when the JVM starts. Now that we know a bit more about how memory limitations in Java are set and attributed, let‚Äôs take a look at some sample code. We‚Äôll start with the allocateMemory(long bytes) method, which holds the majority of the logic that we‚Äôll be using in this example: The allocateMemory(long bytes) method attempts to allocate memory equivalent to the number of passed bytes . We do so by initializing byte[] arrays of equal size to the number of bytes . However, since Java limits the size of arrays to slightly under the maximum size of an Integer , if the passed bytes parameter exceeds this maximum, we need to create a series of arrays to properly allocate all memory. The MAX_ARRAY_SIZE constant defines the largest array size we can use: With that, we determine how many ‚Äúchunks‚Äù (maximized arrays) we can fit within the bytes parameter by passing it to the getArrayChunkCount(long bytes) method: Once determined, we create a two-dimensional array with the first dimension size equal to the number of chunks, and the second dimension equal to MAX_ARRAY_SIZE . Finally, we determine the remainder after chunking and allocate that to its own single-dimension array. If allocation was successful (i.e. no errors occurred), we output a success message to the log. Otherwise, we output a failed message and the expected OutOfMemoryError . During processing, we also call the printMemoryUsage() method, which uses the ManagementFactory class to retrieve heap and non-heap memory usage data: With the help of the formatNumber(long number) method, we‚Äôre able to cleanly output the current memory usage during each memory allocation attempt. Alright, with everything setup we can test this out by intentionally allocating various amounts of memory. Our Main.main(String[] args) method does so by passing increasing numeric values to allocateMemory(long bytes) : This produces the following output, showing the attempt to allocate, the current memory usage stats, and the success message: Even with a small allocation amount of 24,601 , we can see some interesting data from the memory usage stats. Particularly, notice that the heap memory used is only about 4 MB , which is even less than the non-heap memory used to store the application code. Let‚Äôs bump it up a bit to 10,000,000 : Nothing else has really changed except for the heap memory used , so it can accommodate the 10 MB we‚Äôve allocated. Here we‚Äôll try the maximum Integer size, along with a long value that is an order of magnitude larger than that: Now we‚Äôre starting to really see things ramp up by using over 2 GB of memory. Even the heap memory committed quantity has to be increased, which is essentially the combined amount of working heap memory , plus current memory stored in garbage collection. Thus, the committed amount will (almost) always exceed the actual used heap memory value. Finally, let‚Äôs try somewhere around 3 GB and an excessively large 10 PB to see what happens: The 3 GB allocation finally puts us over the top and throws an OutOfMemoryError , indicating that the Java heap space has been exceeded. This indicates that our total memory usage has exceeded the heap memory max value of ~3.8 GB . Unsurprisingly then, the attempt to allocate 10 petabytes also slightly exceeds my current JVM limitations by just a bit. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-10-04"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì UnsupportedClassVersionError", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/unsupportedclassversionerror", "abstract": "Moving along through our detailed Java Exception Handling series, today we‚Äôll be taking a closer look at the UnsupportedClassVersionError . The UnsupportedClassVersionError can be rather confusing, but the simplest explanation is that it occurs when the Java Virtual Machine ( JVM ) attempts to access a class file that was compiled using a different Java version than is currently supported. In this article we‚Äôll dig into what might cause a particular version to be unsupported, where UnsupportedClassVersionErrors fit into the larger Java Exception Hierarchy, and how changing the way in which classes are compiled can sometimes work around these potential issues. Let‚Äôs get going! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Error java.lang.LinkageError java.lang.ClassFormatError UnsupportedClassVersionError java.lang.Throwable java.lang.Error java.lang.LinkageError java.lang.ClassFormatError UnsupportedClassVersionError java.lang.Error java.lang.LinkageError java.lang.ClassFormatError UnsupportedClassVersionError java.lang.LinkageError java.lang.ClassFormatError UnsupportedClassVersionError java.lang.ClassFormatError UnsupportedClassVersionError UnsupportedClassVersionError Unlike most of our Java Exception Handling articles thus far, this one won‚Äôt include a great deal of functional source code. Since the UnsupportedClassVersionError is thrown due to compilation and versioning issues, as opposed to most errors that are due to problems in the source code, we‚Äôll forego a lot of code in this post and focus more on the explanation and nuances of compilation issues within Java. As previously mentioned, an UnsupportedClassVersionError is thrown when the JVM attempts to use a class that was compiled using an incompatible or unsupported Java version than what is currently running. For example, the most recent stable version of Java is 8 , and there have been about ten major versions since the beta release way back in 1994. Each new major version brings a great deal of features and syntactic improvements, just like with most languages, which dramatically improve the flexibility and ease of use for developers that are able to upgrade to the new platform. However, migrating an existing application to the latest and greatest major Java version isn‚Äôt always feasible. Many mission-critical systems have been built over the years using Java. Google, Amazon, YouTube, eBay‚Ä¶ the list of massive companies and projects that rely on Java goes on and on. In many cases, it simply isn‚Äôt feasible to upgrade existing, functional systems to the newest releases, given the potential of introducing massive, unforeseen issues when doing so. This conundrum may invariably lead to a scenario in which a Java application that was compiled using one (typically older) version of Java, must be executed on a different version. For the most part, backward compatibility is supported by newer versions, meaning that older applications can be run on newer versions of the JVM . However, some situations may arise where there are incompatibilities between the version the application (or class ) was compiled on, and the version that is attempting to execute said application. It is these situations where an UnsupportedClassVersionError may be thrown. For example, consider the following (extremely simple) Main.java file: We‚Äôve got almost nothing going on in this code. When the main(String[] args) method is executed, we print out a confirmation message that also includes the java.version property value, which will indicate the currently executing Java version. Thus, on my own system that is running Java 8, executing the main(String[] args) method produces the following output: This means that I‚Äôm running on the latest stable major version 1.8 (aka 8 ), with a minor version of 131 . I happen to have a the unstable Java 9 installed, which I‚Äôm able to verify by running the update-alternatives command from the terminal: I can use the unstable Java 9 version by selecting it from the prompt. After doing so, let‚Äôs execute the Main class again and see what we get: Cool! Since it‚Äôs preferable to use the stable release in most cases, I‚Äôll switch back to Java 8 for now. Now, what if we want to compile an application using a specific version of Java? We can accomplish that by providing a few options flags to the javac compiler. For example, if we wanted to compile the Main class that was written in version 1.7 we‚Äôd use the -source 1.7 flag: As you can see, we‚Äôre given a warning in indicating that we need to specify the bootstrap path. The bootstrap classes are a collection of classes packaged up into an rt.jar file, which is included with each JRE or JDK installation. This file essentially houses all the runtime classes that comprise the core Java API. Thus, the javac compiler needs to know where it can find the rt.jar file that is from the matching Java version we‚Äôre compiling from. Let‚Äôs now try adding the -bootclasspath option and tell the compiler where to look. Since no output is typically shown when successfully compiling, we also added the -verbose flag to see what‚Äôs going on: This confirms that our Main.class was successfully compiled, so let‚Äôs try executing it: Interesting. So, even though we explicitly sourced this compile using version 1.7 , it was still able to execute just fine on our version 1.8 installation. As previously mentioned, this is expected due to backward compatibility of most newer Java versions. Let‚Äôs change our JVM to run on version 1.7 , and try executing the Main class again: As expected, we‚Äôre able to run our script sourced and targeting version 1.7 in a JVM using Java 7 (i.e. 1.7 ). Now, let‚Äôs try compiling from one version, but targeting a different version. We can do this by adding the -target flag to the javac command: Here we‚Äôre sourcing from version 1.7 , but targeting version 1.8 . Given that we‚Äôre still running our JVM on version 1.7 , what happens now when we try to execute the Main class? Lo and behold, our friend the UnsupportedClassVersionError finally rears its ugly head. As the error message indicates, the Main.class file is targeting a major.minor version that is not supported. Obviously the number 52.0 that is provided doesn‚Äôt look anything like the 1.7 and 1.8 versions we‚Äôve been seeing up to now. This is merely because of how the actual bytecode of a Java .class file is setup. Specifically, the major version of 52 is equivalent to Java SE 8 , whereas a version of 51 would be Java SE 7 . In other words, the error is telling us Java 8 ( 1.8 ) is unsupported, because its a newer version than the 1.7 we‚Äôre currently running on, and because the Main.class was compiled as 1.7 . The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-09-14"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.ServiceModel.FaultException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-servicemodel-faultexception", "abstract": "Moving along through our .NET Exception Handling series today we‚Äôre going to take a gander at the System.ServiceModel.FaultException . The System.ServiceModel.FaultException is the first error we‚Äôve dealt with in this series that is tied directly to the Windows Communication Foundation ( WCF ) platform of services. These services act as a remote interface, such as an API, that can be accessed by clients and other applications to perform some actions, without the client knowing about the underlying logic of the service. In this article we‚Äôll dig into just what the System.ServiceModel.FaultException is including where it sits in the .NET exception hierarchy. We‚Äôll also explore some functional C# code examples which will illustrate how System.ServiceModel.FaultExceptions are thrown and how to properly handle them, so let‚Äôs get started! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.ServiceModel.CommunicationException inherits directly from System.SystemException . Finally, System.ServiceModel.FaultException inherits from System.ServiceModel.CommunicationException . Working with WCF services can be a little confusing compared to ‚Äúnormal‚Äù, localized code, so we‚Äôll start out with the full working code example and then walk through it afterward: Ignoring our Utility functions for logging, our service application example consists of three basic components: An ILibraryService interface, a LibraryService class, and then a LibraryClient that uses the service to make something happen. Therefore we start with a basic (albeit very simple) service interface: Here we‚Äôre using a lot of [attributes] to specify the expected behavior of our service interface. We really just have one invokable service method called ReserveBook , which finds a book by title and author before trying to reserve it. What‚Äôs particularly important here is the InvalidBookFault class, which we use to communicate the potential error from the LibraryService to our client. This allows the client to be informed of what specifically went wrong. Next is our LibraryService class which implements the ILibraryService interface. To make things a bit more interesting we‚Äôve specified that the ReserveBook() method should be provided valid title and author argument strings, otherwise it‚Äôll throw an ArgumentException error. However, this is still all ‚Äúserver-side‚Äù so we need to catch the produced ArgumentException and generate a contractual fault that can be relayed to the invoking client. This is where our previously-defined InvalidBookFault comes into play. Within the ArgumentException catch we create a new InvalidBookFault instance, populate it with values from our exception (such as the basic error message), then throw a new FaultException<InvalidBookFault> : Finally our simple LibraryClient application actually invokes our LibraryService (via a service reference in Visual Studio) to acquire a client connection. From this we can open the connection and then call the ReserveBook() service method: We begin with a valid set of title and author arguments for our first ReserveBook() call, so the result is as expected and our service ‚Äúreserves‚Äù our book for us as show in the output: However, the second ReserveBook() call includes a null value for the second argument. As you‚Äôll recall this isn‚Äôt acceptable and triggers our chain of exception and fault events: The LibraryService throws a new ArgumentException , which is caught and then creates and throws a new InvalidBookFault . Our LibraryClient then catches the FaultException<LibraryServiceReference.ArgumentExceptionFault> and can safely report that issue to the end-user/client, as we see in the output: We‚Äôve successfully created a System.ServiceModel.FaultException of type LibraryClient.LibraryServiceReference.InvalidBookFault and it‚Äôs populated by relevant error information that came from our service. This powerful technique allows clients and services to securely communicate exception information without breaking any contracts. To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-06-23"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì InterruptedException", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/interruptedexception", "abstract": "Moving along through our detailed Java Exception Handling series, today we‚Äôll be going over the InterruptedException . An InterruptedException is thrown when a thread that is sleeping, waiting, or is occupied is interrupted. In this article we‚Äôll explore the InterruptedException by first looking at where it resides in the overall Java Exception Hierarchy. We‚Äôll also look at some functional Java code samples that illustrate how working in multithreaded applications can potentially cause InterruptedExceptions . Let‚Äôs get going! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Exception InterruptedException java.lang.Throwable java.lang.Exception InterruptedException java.lang.Exception InterruptedException InterruptedException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Since the InterruptedException is thrown when an active or sleeping thread is interrupted, this is typically only relevant when working with multithreaded applications. That is to say, since a single-threaded application would immediately halt all execution if the main thread was interrupted, you‚Äôll actually be catching and responding to InterruptedExceptions only when there‚Äôs at least one additional thread in which to process the interruption. With that, let‚Äôs jump right into our example code. To make things easier to track and log we‚Äôve created the InterruptableThread class, which extends the base Thread class: Nothing particularly fancy going on here. The constructor expects a single String name argument and passes that along to the base Thread constructor that also accepts a single String parameter for the name property. Otherwise, we implement the run method, since Thread implements the Runnable interface, which provides the abstract void run() method that will be executed when the thread starts. Within run() we output some messages to the log and call the sleep(2000) method to pause execution of this thread for two seconds. Otherwise, we catch any exceptions and that‚Äôs it. For actually testing InterruptableThread instances we‚Äôve also created the InterruptableThreadTest class. Since working with many default-valued parameters in Java can be annoying, rather than using multiple constructor overloads we‚Äôve opted for a builder pattern, which we deeply dug into in a previous article . The linked article will explain a great deal more about the builder pattern if you‚Äôre curious, but the basic purpose is to simplify the process of changing many mutable (editable) properties, without the need to explicitly specify or modify any particular properties. We can alter only the properties we care about using chained method calls, while all other properties remain untouched. The InterruptableThreadTesterBuilder class implements the builder pattern for the underlying InterruptableThreadTest class: With the builder setup we can set the modified properties of InterruptableThreadTest in the primary constructor, then actually perform our logic and processing: Here we create a secondary InterruptableThread and then start() it immediately. We also use the modified properties to determine if the main Thread should be slept, for how long, and if the secondary InterruptableThread should be interrupted. Our Main.main(...) method instantiates an InterruptableThreadTestBuilder object and calls whatever property setters we need, before finally calling createInterruptableThreadTest() , which returns the fully-constructed InterruptableThreadTest instance: In this first example we‚Äôre not interrupting the secondary thread and we‚Äôre not sleeping the main thread. Executing this test produces the following output: Everything works as expected. The secondary thread is started, sleeps for two seconds, then completes. However, let‚Äôs try interrupting the secondary thread and see what happens: Running this test throws an InterruptedException , because, as we intended, we explicitly interrupted the secondary thread during its two second sleep period: In this case, you‚Äôll recall that the InterruptableThreadTest constructor checks the shouldSleepMain property to determine if the main thread should also sleep, which occurs immediately after the secondary thread is started: Thus, let‚Äôs run another test where we sleep the main thread for 2500 milliseconds (which is 500 milliseconds longer than the secondary thread is sleeping): Executing this test no longer throws an InterruptedException and shows both threads sleeping their expected durations: What‚Äôs also important to note is that we still attempt to interrupt the secondary thread by calling the interrupt() method. However, since the secondary thread is not in an active or sleep state, doing so doesn‚Äôt produce an InterruptedException . The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features¬†Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2018-01-03"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì NoSuchElementException", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/nosuchelementexception", "abstract": "Our journey continues through our in-depth Java Exception Handling series as, today, we dig into the depths of the NoSuchElementException . As the name suggests, a NoSuchElementException is thrown when trying to access an invalid element using a few built-in methods from the Enumeration and Iterator classes. Throughout this article we‚Äôll examine the NoSuchElementException in greater detail by looking at where it sits in the overall Java Exception Hierarchy. We‚Äôll also get into some function Java code samples that will illustrate the basic usage of an Iterator , how it compares to more modern Java versions collection iteration practices, and how improper use of Iterators can lead to NoSuchElementExceptions in your own code, so let‚Äôs get going! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Exception java.lang.RuntimeException java.util.NoSuchElementException java.lang.Throwable java.lang.Exception java.lang.RuntimeException java.util.NoSuchElementException java.lang.Exception java.lang.RuntimeException java.util.NoSuchElementException java.lang.RuntimeException java.util.NoSuchElementException java.util.NoSuchElementException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Java includes a few different ways to iterate through elements in a collection. The first of these classes, Enumeration , was introduced in JDK1.0 and is generally considered deprecated in favor of newer iteration classes, like Iterator and ListIterator . As with most programming languages, the Iterator class includes a hasNext() method that returns a boolean indicating if the iteration has anymore elements. If hasNext() returns true , then the next() method will return the next element in the iteration. Unlike Enumeration , Iterator also has a remove() method, which removes the last element that was obtained via next() . While Iterator is generalized for use with all collections in the Java Collections Framework, ListIterator is more specialized and only works with List -based collections, like ArrayList , LinkedList , and so forth. However, ListIterator adds even more functionality by allowing iteration to traverse in both directions via hasPrevious() and previous() methods. For our example today we‚Äôll just be sticking with the traditional Iterator class, along with a comparison to a more modern built-in syntax for iterating over common collections (an ArrayList , in this case). We start with the forEachLoopTest(ArrayList<Book> list) : This method uses the ArrayList.forEach(Consumer<? super E> action) method, which provides a simple method for performing an action on every element in an Iterable collection, such as our ArrayList<Book> . Moreover, we‚Äôre using the modern method reference syntax for our lambda expression, which simply passes the Book element that is obtained in the forEach(...) loop to our Logging.log method, which outputs it to the log. To test this out we create a new ArrayList<Book> collection and add a few new Books to it: Executing this code produces the following output: As expected, our Books are created and added to our ArrayList<Book> books collection, then passed to and iterated through using the forEach(Logging::log) lambda method expression. This is the simplest way to iterate over all elements, but if we need more explicit control over iteration, we‚Äôd likely want to use an actual Iterator instance, which we‚Äôre testing in the iteratorTest(ArrayList<Book> list) method: Here we‚Äôve obtained the Iterator instance of our ArrayList<Book> list collection via the iterator() method, then perform a loop while iterator.hasNext() is true , in which we grab the next element via iterator.next() , convert it from an Object to a Book type, and output it to the log. We also return the obtained Iterator instance, which we‚Äôll use in a moment. Just as before, this works as expected, so executing this method produces the following output: However, let‚Äôs see what happens if we use the now-exhausted Iterator instance returned by the iteratorTest(ArrayList<Book> list) method and try to obtain the next() element from it: Unsurprisingly, this throws a NoSuchElementException our way, because we‚Äôve already retrieved all three elements of the iterator within the iteratorTest(ArrayList<Book> list) method itself: The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2018-01-10"},
{"website": "Airbrake", "title": "Runtime Error Handling in AWS Lambda", "author": "Unknown", "link": "https://airbrake.io/blog/debugging/runtime-error-handling-in-aws-lambda", "abstract": "AWS Lambda offers some powerful resources for running serverless applications. It enables developers to create code without having to worry about the headaches of running and managing servers in the cloud. However, with these remote processes, it can be a bit difficult to track errors.¬†On a local or remote system, a developer can see verbose text associated with errors by logging into the system itself (via ssh or other methods), making it relatively easy to track down and solve problems. On Lambda, because there is no server running, errors can just occur, and the application may stop due to a timeout or another reason without providing a clear message. When a Lambda instance errs, it can be difficult to track. ¬† The function itself is gone, but errors and logs remain.¬†So, how do you find errors within AWS Lambda? This guide will go over a few methods for detecting, tracking, and (with some luck) solving some errors that occur when running in the¬†Lambda environment. Most of the time when Lambda fails, it does so because of the following: Unhandled Exceptions ‚Äì these are cases where an invalid input is received, there is an error associated with an API, or there‚Äôs simply a coding error. Timeouts ‚Äì these can occur when your Lambda code runs longer than a specified timeout duration.¬†One can set these timeouts to up to 5 minutes; however, the default case is 6 seconds. Memory errors ‚Äì If Lambda runs out of memory for a task, it will¬†kill the function during the runtime and typically return an error which states, ‚ÄúProcess exited before completing request.‚Äù In each of these cases, Lambda may attempt to retry, but how it reties depends on the reason for the error. For synchronous events,¬†such as through the API gateway, retries are re-triggered by the service that called the function. In other words, the responsibility for restarting an application needs to be done outside of Lambda. In most cases, if the problem is simply due to a system hiccup (external temporal issue, like networking blips),¬†it should automatically rerun successfully.¬†If it does not, this means that there is an error in the originating application, which should be addressed. However, for most uses of Lambda, communication with applications is occurring asynchronously. In these cases, the application is no longer present to take care of the failure that occurs, so AWS will typically attempt to handle these on its own. It will retry this multiple times.¬†If it fails after a couple of attempts, the error message will be sent to AWS‚Äôs dead letter queue, where the log file can be monitored. The third type of error in Lambda is associated with streaming events. In these cases, Lambda will attempt to run the application repeatedly until the data has either processed successfully or the information expires.¬†One thing that is common with each of these is that Lambda simply keeps trying until success or a specified failure limit has been met. Lambda will not accept any new input from an action until this condition has been satisfied. Most Errors can be retrieved from the log files. These can typically be found in CloudWatch by opening the Lambda console functions. From here, you can choose your specific function that is erring, and then choose ‚Äúmonitoring.‚Äù¬† Once you‚Äôre in monitoring, you can access individual log files by clicking on ‚ÄúView Logs in Cloudwatch.‚Äù Below are some examples of types of errors one can retrieve from Lambda. ServiceError enables you to retrieve all errors directly from Lambda If you need to retrieve errors for specific error classes, use individual exceptions. For example: Errors are returned in JSON format. For instance, the following code: will generate the following error One common issue many users face when first deploying to Lambda is the dreaded ‚Äúmissing gem/library/package‚Äù error. This type of error is caused by various missing libraries or files. Here‚Äôs an example of one of these types of errors: This particular error can be remedied by rebuilding the gems in the Ruby library to install the correct bundle. By using the Serverless framework and VS Code, one can mimic Lambda‚Äôs behavior on a local machine. All you need to do is use the ‚Äú invoke local ‚Äù command. You may wish to install serverless as a dev dependency to both allow other developers to be able to make use of the functionality, but also to prevent incompatibility issues. The use of AWS Lambda can help reduce the large amount of server overhead required to run complex applications. The biggest challenges occur when trying to monitor any errors during the process. Once you understand the types of errors that Lambda can produce, use tools like Airbrake Error Monitoring to ensure things run smoothly.", "date": "2021-02-04"},
{"website": "Airbrake", "title": "APM: What You Need to Know", "author": "Unknown", "link": "https://airbrake.io/blog/devops/apm-what-you-need-to-know", "abstract": "Application performance management ( APM ) is the practice of monitoring and managing the performance, availability, and capability of modern software applications. APM doesn‚Äôt have an explicit, dictionary definition, but is rather an industry-created term that encompasses nearly everything to do with monitoring and managing code, application performance, transaction times, and end user experience. The overall goal of application performance management is to detect, diagnose, and assist in resolving complicated application performance problems, in order to maintain a pre-determined ‚Äúminimal level of service.‚Äù Of course, every organization and application will have a different definition of what that minimal level of service can be. However, by following a basic set of overall application performance management principles, a team and project of virtually any size should be able to implement a workable and beneficial monitoring solution. In this article, we‚Äôll explore the basic principles of application performance management, along with a handful of the best tools and techniques for implementing these principles into your own project. Let‚Äôs take a look! In late 2016 Gartner Research , one of the world‚Äôs leading technology research groups, proposed the latest iteration of their APM Conceptual Framework specification, which proposes five fundamental application performance management principles. By working to implement and abide by these principles, most APM models should be stable enough to provide ample coverage against all potential pitfalls. Commonly referred to as real-time application monitoring the goal of the end user experience principle is to ensure that communication between a client/user request and a server/remote response is efficient and effective. Passive monitoring is the first of two components that make up the end user experience, and should perform an agentless monitoring of ports and services used within the application (such as HTTP requests, database queries, and so forth). Active monitoring , on the other hand, uses explicit agents that should each actively probe and test systems, while the system is performing basic business transactions. As the name suggests, the overall goal of tracking the end user experience is to maximize responsiveness to actual users, regardless of the incoming traffic or application activity at that particular moment in time. Proper APM practices should give your team insight into the application‚Äôs performance and the end user experience at all times of day. This principle aims to ensure bottom-up monitoring is active and functional, which provides a direct and measurable correlation between the topology of the network and your application‚Äôs architecture. Ideally, you should implement some form of automated transaction mapping, in order to track each of the application‚Äôs infrastructure components and see how each interaction that said components perform is carried out, relative to the rest of the application infrastructure. With such capabilities in place, your team can better perform impact assessment for upcoming features, releases, and other major system changes. The goal here is to try to categorize the multitude of potential detailed transactions your application may be capable of making into a smaller, more manageable high-level categories. For example, consider the many different URL endpoints an application might have related to the /user domain: /user/create /user/#id /user/#id/delete /user/#id/feed /user/#id/message /user/#id/subscribe /users/ And so forth‚Ä¶ Modern applications will likely have dozens if not hundreds of potential endpoints (and, therefore, transactions) that each resource can perform, so keeping track of these can be difficult, even using the best application monitoring tools. Therefore, it is generally beneficial to try to categorize this large assortment of transactions into broader categories, which can then be monitored and more easily referenced in reports and other business communications. In the example above, a resource-based user category may serve as a good starting point for all user-related transactions. Through the use of explicit agents and tools, your monitoring solution should be capable of providing real-time feedback of the particular language-specific application stack your software is using, and relate to the team how each component within said stack is connected to and performs user-defined business transactions. Ideally, the result should show a clear, traceable path traversing from source code execution up through the component stack and back to the final source of the transaction request (i.e. from the client/user). Since this piece should involve everything from the local program runtime to any application middleware, the benefits include better code reviewing, more accurate quality assurance and testing, and overall performance insights. The final and perhaps most important component of a successful application performance management model is adequate and robust analytics reporting. This involves first determining what common set of metrics should be collected and reported within the application, or even for each individual component of said application. From there, you‚Äôll need to establish a standardized view for how the data should be presented, so everyone on the team is on the same page when viewing or discussing said data. In most cases, it is better to have too much source data than not enough ‚Äî collect as much raw data as possible, and from there you and your team can decide what useful insights can be pulled from that dataset to actually create useful reports and analytics. Creating insightful, useful, and visually appealing APM reports can be a massive challenge unto itself. Not only are there a million ways to approach the actual gathering of raw data, but combining data into a useful collection that can provide actionable feedback is a major undertaking. Thankfully, many different tools exist to aid your team with application perform management implementations. In general these fall into a few broad categories of tools, including tools aimed at helping developers with actual code creation, tools aimed at helping administrators handle server infrastructure management, and tools aimed at helping everyone monitor the results of a production application. Code profilers allow developers (and other team members) to quickly analyze written or executing source code, in order to detect potential bottlenecks, stack issues, or other performance related problems specific to the code itself. There are dozens of powerful and popular tools, but below are a handful listed for various common languages and platforms. ReSharper for Visual Studio ‚Äì A Visual Studio extension for analyzing and profiling C#, VB.NET, XAML, ASP.NET, ASP.NET MVC, JavaScript, TypeScript, CSS, HTML, and XML code. Includes dotTrace code profiler, dotMemory memory profiler, and dotCover unit test runner and code coverage tool. Code style and formatting functionality with fine-grained, language-specific settings will help you get rid of unused code and create a common coding standard for your team. You can instantly navigate and search in the whole solution. Jump to any file, type, or type member, or navigate from a specific symbol to its usages, base and derived symbols, or implementations. VisualVM ‚Äì A visual tool integrating commandline JDK tools and lightweight profiling capabilities, designed for both development and production time use. VisualVM automatically detects and lists locally and remotely running Java applications. VisualVM monitors application CPU usage, GC activity, heap and metaspace / permanent generation memory, number of loaded classes and running threads. VisualVM provides basic profiling capabilities for analyzing application performance and memory management. VisualVM takes and displays thread, heap, and core dumps, for an immediate insight of what is going on in the target process. cProfile ‚Äì Provides deterministic profiling of Python programs. A profile is a set of statistics that describes how often and for how long various parts of the program executed. These statistics can be formatted into reports via the pstats module. V8 CPU & Memory Profiler ‚Äì Captures and analyzes CPU profiles and heap snapshots for Node.js applications. With V8 CPU profiling you can get a better understanding of which parts of your code take up the most CPU time, and how your code is executed and optimized by the V8 JavaScript engine. You can also open and explore profiles and snapshots captured in Google Chrome DevTools for your client-side code. Once your application is actually up and running an application monitoring tool or service will help your team keep track of critical health metrics within the app, such as transaction traces, database and server responsiveness, cloud resource performance, mobile telemetry, and much more. Again, there are a multitude of powerful services and tools available, so we‚Äôve highlighted just a few of the most established and powerful options below. ManageEngine Applications Manager ‚Äì .NET, Java, and Ruby on Rails code-level diagnostics. Provides a single, integrated platform to monitor your entire application ecosystem ‚Äì end user, applications, and underlying infrastructure components such as application servers, databases, big data stores, middleware & messaging components, web servers, web services, ERP packages, virtual systems and cloud resources. Scout ‚Äì Ruby on Rails, Elixir, and Python application monitoring for developers. Scout tracks the key health metrics you‚Äôd expect for every web endpoint and background job. Long-running metrics are kept for common Ruby dependencies as well: ActiveRecord, Redis, Elasticsearch, and more. Transaction traces break down time and memory allocations with precision to include critical context with each trace like backtraces, flags on N+1 queries, number of ActiveRecord rows returned, and more .Pricing is based on your app‚Äôs transaction volume, decoupling your architecture from per-server pricing. Microsoft Azure Application Insights ‚Äì .NET, Java, and Node.js app monitoring with advanced and customizable querying and reporting tools. Automatically detects performance anomalies. Application Insights includes powerful analytics tools to help you diagnose issues and to understand what users actually do with your app. It‚Äôs designed to help you continuously improve performance and usability. It integrates with your DevOps process, and has connection points to a variety of development tools. It can monitor and analyze telemetry from mobile apps by integrating with Visual Studio App Center and HockeyApp. Amazon CloudWatch ‚Äì A monitoring service for AWS cloud resources and the applications you run on AWS. Use Amazon CloudWatch to collect and track metrics, collect and monitor log files, set alarms, and automatically react to changes in your AWS resources. Amazon CloudWatch can monitor AWS resources such as Amazon EC2 instances, Amazon DynamoDB tables, and Amazon RDS DB instances, as well as custom metrics generated by your applications and services, and any log files your applications generate. Use Amazon CloudWatch to gain system-wide visibility into resource utilization, application performance, and operational health. Airbrake ‚Äì Powerful, language-agnostic error monitoring software that guarantees that your team will never need to worry about losing track of production errors. Airbrake provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-01-23"},
{"website": "Airbrake", "title": "What is the Software Development Life Cycle (SDLC)?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/what-is-the-software-development-life-cycle", "abstract": "The Software Development Life Cycle is a process that ensures good software is built. Some more specific takes on SDLC include: Each phase in the life cycle has its own process and deliverables that feed into the next phase.¬† There are typically 5 phases starting with the analysis and requirements gathering and ending with the implementation.¬† Let‚Äôs look in greater detail at each phase: This phase is critical to the success of the project. ¬†Expectations (whether of a client or your team) need to be fleshed out in great detail and documented.¬† This is an iterative process with much communication taking place between stakeholders, end users and the project team.¬† The following techniques can be used to gather requirements: Identify and capture stakeholder requirements using customer interviews and surveys. Build multiple use cases to describe each action that a user will take in the new system. Prototypes can be built to show the client what the end product will look like.¬† Tools like Omnigraffle , HotGloo and Balsalmiq are great for this part of the process. In a corporate setting, this means taking a look at your customers, figuring out what they want, and then designing what a successful outcome would look like in a new bit of software. Technical design requirements are prepared in this phase by lead development staff that can include architects and lead developers.¬† The Business Requirements are used to define how the application will be written.¬† Technical requirements will detail database tables to be added, new transactions to be defined, security processes and hardware and system requirements. Let‚Äôs look in more detail at some of the activities involved in this stage: Risk analysis Threats and vulnerabilities which may arise from interactions with other systems. External or legacy code needs to be analyzed to determine if there are security vulnerabilities. High-risk privacy projects could require review with a legal department. This review should consider what personal data to collect, how to collect it, and permissions/authorizations to make changes. This type of review is especially necessary with corporate projects. Functional Specifications Includes a description of interface requirements such as definition of data entry fields (allow numeric or alpha only, can it be left blank?) Important details, like: can date entered be before current date? What timezone will user logins default to? Workflow ‚Äì after clicking approve button, which screen appears next? Audit trail for every update on the database. This is where error monitoring and logging tools can be useful. Non-Functional Specifications Extensibility of the system ‚Äì will current system easily allow new enhancements or features with the next rollout? This is critical for any application that you‚Äôll be adding new features and updating often. Has the current or future capacity been analyzed for database requirements? Will the current build plan result in capacity issues shortly after you finish building? Performance and response time ‚Äì Has the expected response time been determined? Resource Constraints ‚Äì Are there constraints that need to be taken into consideration in this phase? Common ones include disk space, bandwidth, etc. This phase is the actual coding and unit testing of the process by the development team.¬† After each stage, the developer may demonstrate the work accomplished to the Business Analysts and tweaks and enhancements may be required.¬† It‚Äôs important in this phase for developers to be open-minded and flexible if any changes are introduced.¬† This is normally the longest phase of the SDLC.¬† The finished product here is input to the Testing phase. Once the application is migrated to a test environment, different types of testing will be performed including integration and system testing.¬† User acceptance testing is the last part of testing and is performed by the end users to ensure the system meets their expectations.¬† At this point, defects may be found and more work may be required in the analysis, design or coding.¬† Once sign-off is obtained by all relevant parties, implementation and deployment can begin. Implementation/Deployment The size of the project will determine the complexity of the deployment.¬† Training may be required for end users, operations and on-call IT staff.¬† Roll-out of the system may be performed in stages starting with one branch then slowly adding all locations or it could be a full blown implementation. One of two methods can be followed in a SDLC process.¬† Waterfall is the more traditional model and has a well structured plan and requirements to be followed.¬† This method works well for large projects that may take many months to develop.¬† The Agile Methodology is more flexible in the requirements, design and coding process and is very iterative.¬† This process works best for smaller projects and expectations of continuous improvement to the application.¬† Whether you use one over the other will also depend to a large extent on the corporation and skills of the IT dept. Continues improvement and fixing of the software is essential, Airbrake provides robust bug capturing in your application. In doing so, it notifies you with bugs instantly, allows you to easily review them, tie the bug to an individual piece of code, and trace the cause back to recent changes. Airbrake enables for easy categorization, searching, and prioritization of errors so that when bugs occur, your team can quickly determine the root cause. The amount of development time and effort saved by capturing your bugs with Airbrake is invaluable. What is the Software Development Life Cycle? - Airbrake :: Airbrake - Weltmeister Marketing & Technologies (P) Limited says: July 13, 2013 at 4:39 am [‚Ä¶] What is the Software Development Life Cycle? ‚Äì Airbrake :: Airbrake [‚Ä¶] What is System Development Life Cycle? - Airbrake.io Official Blog says: January 9, 2015 at 12:52 am [‚Ä¶] forming an integrated whole‚Äù it‚Äôs a term that can be used in different industries, therefore Software Development Life Cycle is a limited term that explains the phases of creating a software component that integrates with [‚Ä¶]", "date": "2013-07-09"},
{"website": "Airbrake", "title": "What is System Development Life Cycle?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/what-is-system-development-life-cycle", "abstract": "System Development Life Cycle (SDLC) is a series of six main phases to create a hardware system only, a software system only or a combination of both to meet or exceed customer‚Äôs expectations. System is a broad and a general term, and as per to Wikipedia; ‚ÄúA system is a set of interacting or interdependent components forming an integrated whole‚Äù it‚Äôs a term that can be used in different industries, therefore Software Development Life Cycle is a limited term that explains the phases of creating a software component that integrates with other software components to create the whole system. Some more specific takes on SDLC include: Below we‚Äôll take a general look on System Development Life Cycle phases, bearing in mind that each system is different from the other in terms of complexity, required components and expected solutions and functionalities: The Planning phase is the most crucial step in creating a successful system, during this phase you decide exactly what you want to do and the problems you‚Äôre trying to solve, by: Defining the problems, the objectives and the resources such as personnel and costs. Studying the ability of proposing alternative solutions after meeting with clients, suppliers, consultants and employees. Studying how to make your product better than your competitors‚Äô. After analyzing this data you will have three choices: develop a new system, improve the current system or leave the system as it is. The end-user‚Äôs requirements should be determined and documented, what their expectations are for the system, and how it will perform. A feasibility study will be made for the project as well, involving determining whether it‚Äôs organizationally, economically, socially, technologically feasible. it‚Äôs very important to maintain strong communication level with the clients to make sure you have a clear vision of the finished product and its function. The design phase comes after a good understanding of customer‚Äôs requirements, this phase defines the elements of a system, the components, the security level, modules, architecture and the different interfaces and type of data that goes through the system. A general system design can be done with a pen and a piece of paper to determine how the system will look like and how it will function, and then a detailed and expanded system design is produced, and it will meet all functional and technical requirements, logically and physically. This phase comes after a complete understanding of system requirements and specifications, it‚Äôs the actual construction process after having a complete and illustrated design for the requested system. In the Software Development Life Cycle, the actual code is written here, and if the system contains hardware, then the implementation phase will contain configuration and fine-tuning for the hardware to meet certain requirements and functions. In this phase, the system is ready to be deployed and installed in customer‚Äôs premises, ready to become running, live and productive, training may be required for end users to make sure they know how to use the system and to get familiar with it, the implementation phase may take a long time and that depends on the complexity of the system and the solution it presents. Bringing different components and subsystems together to create the whole integrated system, and then Introducing the system to different inputs to obtain and analyze its outputs and behavior and the way it functions. Testing is becoming more and more important to ensure customer‚Äôs satisfaction, and it requires no knowledge in coding, hardware configuration or design. Testing can be performed by real users, or by a team of specialized personnel, it can also be systematic and automated to ensure that the actual outcomes are compared and equal to the predicted and desired outcomes. In this phase, periodic maintenance for the system will be carried out to make sure that the system won‚Äôt become obsolete, this will include replacing the old hardware and continuously evaluating system‚Äôs performance, it also includes providing latest updates for certain components to make sure it meets the right standards and the latest technologies to face current security threats. These are the main six¬†phases of the System Development Life Cycle, and it‚Äôs an iterative process for each project. It‚Äôs important to mention that excellent communication level should be maintained with the customer, and Prototypes are very important and helpful when it comes to meeting the requirements. By building the system in short iterations; we can guarantee meeting the customer‚Äôs requirements before we build the whole system. Many models¬†of¬†system development life cycle came up from the idea of saving effort, money and time, in addition to minimizing the risk of not meeting the customer‚Äôs requirement at the end of project, some of theses models¬†are SDLC Iterative Model , and SDLC Agile Model . Continues improvement and fixing of the system¬†is essential, Airbrake provides robust bug capturing in your application. In doing so, it notifies you with bugs instantly, allows you to easily review them, tie the bug to an individual piece of code, and trace the cause back to recent changes. Airbrake enables for to¬†categorize, search, and prioritize errors so that when bugs occur, your team can quickly determine the root cause. The time and effort you save¬†by capturing your errors¬†with Airbrake is invaluable! What is the Software Development Life Cycle? - Airbrake.io Official Blog says: January 13, 2015 at 1:34 am [‚Ä¶] Update: check What Is System¬†Development Life Cycle? [‚Ä¶]", "date": "2015-01-09"},
{"website": "Airbrake", "title": ".NET Exceptions ‚Äì System.NotImplementedException", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet-exception-handling/system-notimplementedexception", "abstract": "Making our way through the .NET Exception Handling series, today we‚Äôll dive into the depths of the System.NotImplementedException . Similar to System.ArgumentException and a handful of other exceptions of this type, the System.NotImplementedException is not an error that is accidentally thrown. Instead, a System.NotImplementedException is used when calling a method or accessor which exists , but has not yet been implemented . In large part, this is used to differentiate between methods that are fully implemented for production code and those that are still in development. To explore a bit further we‚Äôll take some time in this article to swim through all the nooks and crannies of System.NotImplementedException , including where it resides in the .NET exception hierarchy. We‚Äôll also take a brief look at the related errors of System.NotSupportedException and System.PlatformNotSupportedException , including some code examples of each, so let‚Äôs dive in! All .NET exceptions are derived classes of the System.Exception base class, or derived from another inherited class therein. System.SystemException is inherited from the System.Exception class. System.NotImplementedException inherits directly from System.SystemException . As mentioned in the introduction, a System.NotImplementedException is not something you‚Äôll run into often, and when you do, it‚Äôs because the developer of the method that you‚Äôre calling has explicitly decided to throw an exception to indicate that the method is still under development. For this reason, it is recommended that if you encounter a System.NotImplementedException when using a third-party library or module you shouldn‚Äôt attempt to handle the error with a typical try/catch block. Instead, you should (temporarily) remove the code that invokes the non-implemented method. It‚Äôs a far safer practice, since it will keep your code base stable until a later date when the method is actually implemented, at which point you can choose to integrate it back into the application, if desired. Throwing a System.NotImplementedException is fairly straightforward. As mentioned, it should be thrown inside any method or property that must actually exist , but otherwise has no functional purpose. For example, if you‚Äôre using test-driven development ( TDD ) practices, particularly when implementing larger features, it may be helpful to create methods and properties so they can be invoked prior to their actual functional implementation. This allows you to create an (initially failing) test, then create a series of ‚Äúempty‚Äù methods and properties that are just placeholders that throw System.NotImplementedException when invoked. When executing your tests, these methods will clearly cause the tests to fail due to the thrown exception, but now you can then make your way through those skeletal methods until everything is working as expected and you no longer have any System.NotImplementedExceptions being thrown. Implementing a System.NotImplementedException in code is quite simple. Here we have a basic IBook interface that is used by our Book class. This class allows us to create Book instances that are empty, or which are assigned properties by passing the title and author parameters: Beyond that, we don‚Äôt currently have any properties or parameters related to publication, but we know that eventually we‚Äôll want a way to find out the publication date of our book. Therefore, rather than not including anything right now, we‚Äôve decided to add a PublicationDate() method that throws a System.NotImplementedException , indicating to the user that this method is not implemented. We also use a few tricks with .NET reflection to get the type (namespace and class) and the method name automatically, so we can output that information within the System.NotImplementedException error message. Using our Book class is just like any other class. Here we create a new instance for The Stand by Stephen King, then output the contents of our book instance using our Logging.Log method (which uses quite a bit of reflection capabilities itself to spit out a human-readable representation of our passed object): The resulting output shows our book instance was created and outputs the contents of it, but then our call to book.PublicationDate() throws a System.NotImplementedException just as we intended: As we can see, using System.NotImplementedException is quite simple. However, there are a few additional .NET exceptions that are related to System.NotImplementedException and used in similar yet slightly different situations: System.PlatformNotSupportedException and System.NotSupportedException . We‚Äôll briefly cover the use of these related exceptions, as recommended by the official documentation . A System.PlatformNotSupportedException should be thrown when the method in question is technically implemented , but is not intended to be used on the particular platform the code is being run on. For example, let‚Äôs add the PageCount() method to our Book class. However, we want to ensure that PageCount() cannot be used on Windows 7 platforms (for whatever reason). To help us determine if the platform is supported or not we have a new static class called Platforms that just contains a list of substrings which represent the underlying operating system value for the related string. Within the PageCount() method we use Environment.OSVersion to get the current full platform string, which looks something like this: Microsoft Windows NT 6.1.7601 Service Pack 1 . While this example isn‚Äôt robust, we can check whether our current full platform string contains the string of any OS we don‚Äôt support. In this case, we don‚Äôt support Windows 7 , so if our current platform string contains that matching substring, we throw a System.PlatformNotSupportedException . Here we‚Äôre making use of this new PageCount() method to see it in action: The output shows that, sure enough, when running on Windows 7 a System.PlatformNotSupportedException is thrown: It is also recommended that a System.Not‚ÄãSupported‚ÄãException be thrown when a method must be implemented in your code, but supporting that method doesn‚Äôt make any sense in the current context. This might occur when you have an abstract class that is intended to be overriden by subclasses. In some situations, not all of the methods attached to the abstract parent class are applicable to every possible subclass that may inherit from it. As a simple example, here we have a new abstract Publisher class with two properties: Name and Revenue . Most of us would probably agree that all publishers typically have a name of some sort, so that property makes sense. However, we might imagine a type of publisher ‚Äî such as a blogger using their laptop to make posts about cute cat ‚Äî which doesn‚Äôt have any revenue to speak of, nor any need to track it. So while a big name publisher like ‚ÄúSimon & Schuster‚Äù would track their revenue, your aunt making posts to her own blog would not. For that reason, our Blog class that inherits from Publisher must override both Name and Revenue properties. However, we don‚Äôt have a use for the Revenue property in this context of a simple blog, so we‚Äôre throwing a System.Not‚ÄãSupported‚ÄãException in both the getter and setter of the Revenue property: Let‚Äôs try creating a new Blog instance and then calling the Revenue property: Sure enough a System.Not‚ÄãSupported‚ÄãException is thrown because we‚Äôve decided not to support the Revenue property in this particular subclass: To get the most out of your own applications and to fully manage any and all .NET Exceptions, check out the Airbrake .NET Bug Handler , offering real-time alerts and instantaneous insight into what went wrong with your .NET code, along with built-in support for a variety of popular development integrations including: JIRA, GitHub, Bitbucket, and much more.", "date": "2017-05-22"},
{"website": "Airbrake", "title": "How to Speed Up Website Loading Time to Improve User Experience", "author": "Unknown", "link": "https://airbrake.io/blog/apm/how-to-speed-up-website-loading-time-to-improve-user-experience", "abstract": "A fast website is crucial in maintaining a positive user experience. Evidence suggests that users become distracted if there is even a one-second delay .¬†Every second after that increases the likelihood the end-user will leave. This is why it‚Äôs imperative your website loads quickly. This article will briefly address a number of methods that you can use to speed up your website‚Äôs loading time. The amount of content that can be delivered in a discrete amount of time is limited by a finite amount of bandwidth. All things being equal, the larger the files on a site, the longer it takes for them to load. While large file sizes may not have much of an impact on users who use extremely high-speed connections (such as T1 or T3 connections), it will impact those running on slower hookups. The best way to reduce file sizes is to run your images through various optimization techniques. Some techniques include: Compressing images via tools such as Photoshop and/or Compress PNG . There are several image compression tools out there that make it simple to make files smaller. Resizing your image so it‚Äôs smaller. The smaller it is, the faster it loads. Picking a file type appropriate for your image. Typically, you‚Äôll choose between JPEG, GIF, and PNG. JPEG is great for quality in a small size, GIFs should only be used for thumbnails and as decorative images, and PNGs are excellent because their quality won‚Äôt degrade with re-saves. Sometimes, you might need to consider eliminating some files. The less your website has to load, the better. After reducing file sizes, compress images on the server using HTTP compression. This will reduce the amount of bandwidth required to load content, thus improving the speed of your website. One way you can compress files is with Gzip compressing. Gzip can compress HTML, JavasScript, XML, CSS, fonts, and just about anything you render on your site. Gzipping can be enabled on an Apache server using the mod_deflate module in your root .htaccess file and adding a filter for each file type that your site delivers. If a website requires a webpage load every time there is a unique visit, then every file that you have on the page needs to be downloaded individually.¬† This includes everything from the HTML, CSS, JavaScript, and any other assets your site provides. This can lead to slow load times for a particular webpage. The best way to prevent this is to use the caching function most browsers have built-in. Doing so will speed up the response time of a page on subsequent visits. In addition to this, you can let browsers know to serve a cached version of a webpage by adding Expires Headers . These headers tell the browser which content is static and which content is dynamic. This is a great option to cut some of the load time for repeat visitors. Too many calls to the server can lead to significant slowdowns of your website. Sending any request to a server requires full communication, including a request and response, before the page can be rendered. Here are a number of ways you can reduce HTTP calls. Creating CSS image sprites is one easy way to reduce the number of server calls your website receives. Instead of loading 20 individual images to a site, sprites load one large image containing all the necessary elements in it so it can be zeroed in using CSS. If several 3xx response codes appear on your website, you are likely sending users to get information from too many locations. Avoid doing this, even if it is for SEO purposes. Anytime your site sends instructions to a server to look for a file that doesn‚Äôt exist, a 404 error will appear. Too many 404s can increase your page load time. Take the time to fix any 404 s you come across. Doing so will significantly improve your website. While a blank space within CSS and JavaScript files may appear to be empty to the human eye, each blank character must be read and processed by the browser engine. In cases such as these, make sure to minify by reducing the number of blank characters in files. Doing so will decrease the amount of time it takes a web browser to render content. There are several free tools you can use to minify your files: HTML Minifier CSS Minifier JavaScript Minifier Some sites automatically convert HTML into an in-site scripting language. As you can imagine, the time it takes to convert HTML can slow down your website. It‚Äôs better for your website if your content is delivered as raw HTML. CSS should be placed near the top of your page. This ensures the page loads right away and is rendered properly. JavaScript can take a while to load, so you want it near the bottom of the page. This way it runs after the rest of the page loads. With CSS near the top, this will make sure users at least have content while the rest of the webpage loads. If you are using a small amount of JavaScript, avoid calling it in a separate file. Instead, to reduce HTTP requests, include JavaScript code directly on the page. Note: if you intend to use any popular JavaScript libraries, use a CDN to deliver your content to take advantage of the fact that many people will already have these downloaded in their browser caches. This will significantly reduce page load time. Writing well-designed query database calls can have a significant impact on the time it takes for content to be delivered to your site. Poorly written queries can have a pronounced negative effect on page load time.¬† This is particularly true for sites that have quite a bit of traffic and/or deliver a large number of products. While database optimization is a large topic, here are a few quick tips. One of the most common mistakes made by developers is to use a wildcard query to retrieve results. Take, for instance: ‚Äúselect * from table_name‚Äù A large table can slow you down quite a bit. If you don‚Äôt need every field, request individual keys from the table, like so: ‚Äúselect field1, field2 from table_name‚Äù Other ways you can improve performance include making sure that the database is properly indexed, reducing correlated subqueries, and avoiding temporary tables. A website is only as fast as its weakest link, so choosing a good web provider and plan may prove to be a crucial factor in delivering your site at optimum speeds. If you‚Äôre using large central providers such as AWS, you may wish to use Content Delivery Networks (CDNs). Physical distance from the server can increase the time it takes for a server to respond to an HTTP request.¬†By using CDNs, you can place servers in different locations around the globe, which will reduce load times for people in different regions. This is only a small sampling of different techniques one can use to speed up a website. Each one could easily be covered in more detail.¬†However, you may wish to use this piece as a checklist of techniques you can try if your site has slow response times. Not sure if your website is running slow? That‚Äôs where Airbrake‚Äôs Performance Monitoring comes in. Our developer-centric Performance Monitoring software gives you the tools you need to make sure your app or website is running smoothly and quickly. With Performance Monitoring, you‚Äôll have access to requests and response times, Apdex Score , error occurrences, and so much more. Try Airbrake Performance Monitoring today with a free 30-day trial where you‚Äôll get unlimited performance events, error monitoring, unlimited users, and unlimited projects.", "date": "2021-01-28"},
{"website": "Airbrake", "title": "Software Testing: Are Users Discovering Your Production Errors?", "author": "Unknown", "link": "https://airbrake.io/blog/software-testing/who-discovers-your-production-errors", "abstract": "After months (or even years) of blood, sweat, and tears, you and your team have finally launched your latest application into production and are basking in the glow of a job well done. And yet, there‚Äôs that tiny itch in the back of your minds, nervously waiting and wondering if the other shoe will drop. Nothing seems terribly wrong for some time, as hours turn to days, which eventually turn to weeks without any major issues. Sure, production errors crop up from time to time, but nothing too impactful. The real question is, how are these production errors being discovered? Are you and your team finding them due to diligent software testing practices? Or, are your users running into problems and either reporting them to you directly, or worse, assuming your application is faulty and no longer using it at all? Production errors are the bane of many otherwise well-designed applications. After all that effort to get a solid project built and launched, it can all be brought down (or, at the least, dramatically degraded) by only a handful of unexpected and impactful production errors. Things don‚Äôt have to be this way. By practicing just a bit of diligence in how you go about software testing, your team can be confident that you‚Äôll have a smooth production launch with few, if any, error reports coming in from users that you aren‚Äôt already aware of and actively fixing. Making every effort to avoid user-reported productions errors can be challenging, but doing so is critical for building up and maintaining the reputation of your team, your business, and your product. In the rest of this article we‚Äôll explore a few tips and techniques, which are used by various business leaders around the world, that will help you and your team reduce your production error rates, while completely eliminating the need for user error reports. Every software testing suite should include some form of automated unit tests. While functional tests are focused entirely on the what of your application, unit tests are concerned with the how , allowing them to verify that each line of source code and each component in the overall application behaves exactly as expected. Since unit tests tend to be among the most ‚Äúlow-level‚Äù types of tests your team will implement in your overall software testing practices, these should usually be created by developers or other team members closely acquainted with the exact inner-workings of the application code. However, developer man hours are vitally important, so it is paramount that unit tests be automated , allowing developers to get back to the important work of improving the application code, rather than focusing an abundance of their work hours on executing and monitoring unit tests. As discussed, functional tests are intended to verify that your software is doing what it should be. Functional tests do not concern themselves with how the application goes about completing a particular goal. Thus, functional testing is often used to confirm application pages, user interfaces, and other end-to-end components are behaving as expected, without explicitly taking a look at the source code under the hood that powers said functionality. Automated functional tests extend the normal benefits of functional tests by allowing your team to consistently and automatically execute tests and compare results without human intervention. Non-developers are particularly well-suited to creating and managing automated functional tests, since they can often be generated with an easy user interface or script, then executed on a consistent basis, such as following every build or release. Another critical component to a robust software testing suite is thinking, planning, and developing outside the bounds of a typical testing practices. Planning for unexpected behaviors, on both the part of the application as well as your end users, will lead to a much healthier application and dramatically reduce the number of errors once production finally comes around. Build in intentional fail-safes into your application, along with your software testing suite, to ensure that these rare but possible events don‚Äôt lead to dramatic problems down the road. For example, it should be assumed that users will misuse your application, whether they do so intentionally or not. A user is likely to click on a series of UI components out of the ‚Äúexpected order.‚Äù If your application has an order confirmation button element, at the very least your application should have a built-in fail-safe that prevents the user from clicking the order button multiple times, or ignores subsequent clicks after the first. Whether you choose to inform the user of their improper action is more about business practices and beyond the realm of software testing, but it‚Äôs critical that any and all such unintended behaviors be assumed and accounted for. Similarly, even attempting to plan for every eventuality will leave gaps here and there in the application code ‚Äî something will occur that wasn‚Äôt expected nor planned for. In such cases, it‚Äôs often smart to ensure your application code catches and handles all unexpected exceptions. These should be logged, reported, or monitored via error handling software, but no matter how you choose to deal with them, better that your application code handles things then for your user to experience an ugly or even application-breaking error. Error monitoring software provides a constant pulse on the health and reliability of your application, whether its running in development or even out in the wilds of production. All errors are quickly identified, examined, and are ready to be fixed, without the need for convoluted user-generated reports or expensive, time-consuming quality assurance support. The best error monitoring services allow you and your team to see the exact nature of every error, including a plethora of detailed metadata. For example, when an error occurs using Airbrake.io‚Äôs error monitoring software, Airbrake is able to report the error type, error message, parameters, the API method that generated the error, the detailed backtrace, the client machine data, the environment in which the error occurred, the file that caused the error, and much more. Thus, not only does error monitoring software allow you to track and immediately identify exceptions when they occur, it also provides a substantial safety net, particularly during production releases. While you‚Äôll still want to plan accordingly and establish a sound software testing suite, error monitoring services provide a bit of breathing room by promising to inform you of any unforeseen issues. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices!", "date": "2017-10-24"},
{"website": "Airbrake", "title": "Bugs In Your Code: How Much Are They Really Costing You?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/bugs-in-your-code-cost", "abstract": "Bugs in your code might be hurting more than just the quality of your software. We dug up this infographic from SourceNinja that outlines the financial pitfalls of bugs in¬†code ‚Äì especially open source code. The findings¬†are¬†eye-opening! If you‚Äôre using any open source code in your project, you‚Äôll want to take a look at this, and consider taking a look at an error monitoring tool like Airbrake. It could save you a ton of time, money and grief. Key Findings: 9 out of 10 companies use¬†open source projects. 4 out of 10 companies experience problems because of¬†third party code. Only 35% of third party code is tested for bugs. Compare that to 70% of internally developed software. Defective software costs $60 billion annually. 9 out of 10 companies use¬†open source projects. 4 out of 10 companies experience problems because of¬†third party code. Only 35% of third party code is tested for bugs. Compare that to 70% of internally developed software. Defective software costs $60 billion annually. In 2010, Coverity released an analysis of the Android kernel (a very high quality open source project). They found 57 control flow issues 36 error handling issues 17 incorrect expressions 53 incidences of insecure data handling 23 issues with integer handling 83 null pointer dereferences 57 control flow issues 36 error handling issues 17 incorrect expressions 53 incidences of insecure data handling 23 issues with integer handling 83 null pointer dereferences You can‚Äôt afford to have buggy open source code powering your app, but the fact of the matter is you probably do üôÅ This is exactly why Airbrake‚Äôs error monitoring¬†tool exists. You‚Äôll be notified of all the bugs holding your code back, and be able to trace them right back to the source. In addition to employing some kind of error reporting or monitoring tool, we recommend keeping close tabs on software updates! Open-source libraries are often maintained quite well, and keeping your code up to date could mean the difference between crippling bugs in your code and a clean, secure application. When updates for a library are dwindling, it may be time to consider moving on to a different solution. Are there bugs¬†in your code from open source software? Can you afford to inherit¬†those bugs? Even if you think you can‚Ä¶is that how you want to maintain your application? Whether you use Airbrake or not, we highly recommend you take the time to think about these questions and come up with a plan to maintain clean and secure code.", "date": "2016-10-13"},
{"website": "Airbrake", "title": "7 Tips for Reducing Production Defects", "author": "Unknown", "link": "https://airbrake.io/blog/debugging/7-tips-reducing-production-defects", "abstract": "We all make mistakes. Such a mistake might be forgetting to turn the lights off before leaving the house, or unintentionally cutting off another driver on the way to work. Or, as a software developer, it might be accidentally introducing a defect into the newest software project the team is working on. While defects are inevitable during development, they can largely be identified, fixed, or prevented entirely long before they reach a production environment. Throughout this article we‚Äôll explore a few tips for reducing production defects, which will boost overall software quality, reduce regressive issues, improve inter-team communication, and increase customer satisfaction. Let‚Äôs take a look! Many businesses and organizations have a strong tendency to view defects in a skewed and unhealthy light. Defects are inevitable at some point throughout the overall software development life cycle, but many traditionally-managed organizations view defect and error management as a basically binary battle to beat back the bugs. There is rarely acknowledgement that defects will crop up, and that healthy processes to combat their arrival must be planned out and executed. Instead, the ultimatum from the executives and managers on high can often be summarized thusly: ‚ÄúAttention maggots! Proceed with elimination of X% of defects. TAKE NO PRISONERS!‚Äù While defects during development are a necessarily evil, the goal shouldn‚Äôt be to just eliminate bugs, but rather to develop practices and procedures that simplify the identification, debugging, and resolution of defects. Just as importantly, these processes should be implemented early in the development life cycle, and constantly improved upon. With healthy practices in place, defects can become something that are no longer considered an inevitability , but are instead a rare surprise, like seeing a digital unicorn on a distant hill ‚Äî you didn‚Äôt expect it, but you‚Äôre glad you spotted it, and have a desire to investigate it further. This change in attitude, particularly for well-established organizations that may be accustomed to more traditional outlooks on defects, may be difficult, but the shift in attitude must be a top down process. Executives and managers need to alter their perceptions that defects are inevitable (particularly in production), and instead, view bugs as exceptional. This change in perception will eventually traverse downward throughout the company, eventually leading to a paradigm shift in the groupthink attitudes about defects. This will open an avenue toward changes in how the organization handles problems, which will eventually lead to a dramatic reduction in production defects. Set aside an adequate block of time on a regular basis (weekly, monthly, quarterly, etc) and meet with the managers and development leads throughout the team to discuss the detailed software requirements of the project. This process should identify exactly what requirements are necessary for the overall application, as well as detailed component- or feature-specific requirements. The major benefit of this practice is uncovering potential pitfalls and preventing a large portion of unnecessary defects that may otherwise crop up down the road. For example, during a software requirements analysis meeting your team may come to the conclusion that the data layer implementation that was previously planned (like Azure) may not work with a required third-party component, so the requirements must be changed to another solution (such as AWS). Failing to identify such an issue early in the development life cycle will often lead to an assortment of painful issues, and if ignored long enough, could cause a slew of production defects that could have been easily prevented. Since the vast majority of defects that crop up during an application‚Äôs development are related to failures during software requirement planning ‚Äî as opposed to actual coding and implementation issues ‚Äî it‚Äôs critical that this process be taken seriously, and be performed both early and often. With a solid plan for establishing sound software requirements laid out, the next habit to get into is to implement organization-wide code refactoring practices. Refactoring aims to improve and redesign the structure of already existing code, without modifying its fundamental behavior. Simple examples of refactoring include fixing improperly names variables or methods, and reducing repeated code down to a single method or function. This self-review process on code should also include peer review. Many companies find great success in pair programming techniques, whereby two individuals sit together during actual code development, with one developer writing code and the other watching as an observer. While this practice increases the man-hours required to complete any given line of code studies show that code produced from pair programming will contain approximately 15% fewer defects than code produced by solo programmers. The best way to reduce production defects through any form of code review is to ensure the processes your organization has established are practiced frequently ‚Äî repetition will create habitual processes that invariably catch potential problems and existing defects well before they reach the production environment. Regression testing is a form of software testing which confirms or denies the functionality of software components after these components undergo alterations. In the event that a change is made to a software component and a defect is discovered, regression testing is required to confirm the issue, and to attempt to resolve it. Regression testing should ideally be performed on a regular schedule or basis, such as after every change, at the end of every day, weekly, bi-weekly, and so forth. Regression tests should also typically be executed anytime a previously discovered issue has been fixed. Generally speaking, the more often regression testing can occur, the more issues can be discovered and resolved, and the more stable the application will become, which will reduce production defects dramatically. Invariably, some defects will appear at some point in the software development life cycle, so it‚Äôs important that your team takes full advantage of the benefits these provide. Specifically, a defect presents the opportunity to perform deep analysis on the affected components of the software and make improvements to all areas that were impacted. How your organization chooses to perform analysis will be specific to your team and application, but there are a few key principles to keep in mind when sussing out the root cause of any given defect: Aim to Improve Quality : Above all else, all the tips and practices laid out in this article are aimed at improving the quality of the software throughout future iterations and into production releases. Thus, defect analysis should aim to both prevent defects or, for those that still slip through the cracks, to detect them as early as possible. Rely on Expert Team Members : Quality Assurance departments are beneficial and often necessary for particularly large projects, but don‚Äôt neglect the members of your development team that were involved with actually producing the code or components that caused the defect. Identifying these members is not to pass down any judgment or shame them, but rather to empower these individuals to analyze the problem and come up with the most elegant solution. Prioritize Systematic Defects : Throughout the typical development life cycle there will tend to be a handful of defects that are regressive ‚Äî issues that repeatedly appear again and again, in spite of the team‚Äôs best efforts to squash them. Such systematic defects should be prioritized during the analysis process and heavily focused on, as doing so will have the biggest impact on overall defect rates. The concepts of continuous integration , continuous delivery , continuous deployment , and the like are not merely buzzwords; they are highly effective practices that can dramatically improve software quality by taking much of the headache out of iterative releases and deployments. Continuous integration is the practice of automatically building and testing your application on a regular basis. The frequency of testing will depend on your business needs, but with the many powerful tools that are now available this process can occur for every build, or even for every single commit to the shared repository. Continuous delivery is less of a practice and more of a concept; the idea that your code base should always be release-ready. What this means is debatable, but the basic idea in most implementations is that your application should always be ready for a single-click (or scheduled and automated) full release into a staging or production environment. Lastly, continuous deployment is the culmination of these continuous practices and is where the actual deployment of releases or patches take place and are available for wider use (staging, production, etc). Some organizations choose to streamline these processes so much that they are deploying new, updated builds to the production environment on a daily basis. Automated exception tracking and reporting tools, like Airbrake, ensure that your team is immediately aware of exceptions the moment they occur. Airbrake‚Äôs powerful error monitoring software guarantees that your team won‚Äôt need to worry about losing track of that rare production defect that slips through the cracks. Airbrake provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize defect parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs defect monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-12-05"},
{"website": "Airbrake", "title": "Is Your Security Scaling Up Along with Your Operation?", "author": "Unknown", "link": "https://airbrake.io/blog/software-testing/security-testing-scaling-with-operation", "abstract": "Throughout an entire software development life cycle, it is all too common for security practices to be neglected in favor of the more tangible, immediate benefits of adding that next cool application feature or landing another large swath of users. However, as we‚Äôve witnessed with the many massive data breaches in recent years, scaling up your information security through proper security testing and analysis has never been more crucial to maintain a healthy business and reputable brand. In this article we‚Äôll briefly examine what modern information security is all about, along with a few tips and tricks you can use within your own organization to maintain proper security testing and other best practices. Let‚Äôs dig right in! The primary tenants of information security revolve around six basic concepts: confidentiality , integrity , availability , authentication , authorization , and nonrepudiation . Below, we‚Äôll briefly explore the each concept and see a simple example of how these ideas are used within and impact the notions of proper information security. Think back to grade school, when you told your friend Jennifer a juicy little secret, only to find out hours later that little snitch told someone else! Ignoring the dastardly social tactics that Jennifer has undertaken, the fact remains that this is an early example of that information (your secret) losing its confidentiality . The same principles apply to online information security. In most cases, it is often critical that certain types of data remain completely confidential, since we‚Äôve witnessed first hand what happens when supposedly confidential information gets out. The recent Equifax breach is just the latest and highest profile example of this trend, so it‚Äôs vital that organizations make every effort to keep user data confidential and secure. In the most mission-critical cases, information confidentiality is a matter of legal requirement. Medical records, banking transactions, debt collections, and so forth are all examples of information that must legally be kept confidential. When you heard that Jennifer had told your secret to others, you may have started to notice a few minor modifications to the content of that secret. A name was slightly changed and the details were a bit jumbled, which means that the integrity of the original information had been lost. In devops, loss of integrity can occur when data is accessible over an insecure network, or is improperly handled (whether said mishandling was intentional or not). As you might imagine, data integrity is particularly crucial when even slight alterations to said data could cause catastrophic results, such as financial services or medical prescriptions. The next day at school it turns out Jennifer is out sick. Many other kids are anxiously asking around, trying to get the latest scoop on your secret that she had been spreading. But, try as they might, Jennifer isn‚Äôt there to give them all the dirt, and you certainly aren‚Äôt going to spill the beans. This situation has created a loss of availability for your secret information. This same loss of availability can occur within information security when data is erased or is otherwise inaccessible. This unavailability isn‚Äôt to be confused with intentional denial of said information, where information is purposely withheld from certain users based on credentials or the like. Instead, information availability refers to an unintended loss or inaccessibility of data ‚Äî users who should have access to the data are unable to do so. Service-oriented businesses typically rely heavily on information availability, so they can properly track customer interactions, handle orders, issue shipments, and so forth. When Jennifer returns to school she seems to have spent her time away coming up with a scheme to determine if any given kid asking for the secret information is worthy of bestowing this glorious tidbit upon them. She asks each kid that comes to her to prove that they‚Äôre in her class by showing her their very own one-of-a-kind name tag. Jennifer does this as a form of authentication , to prove that the kid in front of her is who they say they are. With proper authentication taken care of, Jennifer then decides that only a handful of particular kids are actually authorized to receive this secret morsel. Just as Jennifer first needed to authenticate kids to determine which are authorized to proceed, the same security measures should always be taken and used together in application security to determine if a user is who they say they are, and whether that should allow them access to the requested information. If a user finds a way to fake their authentication credentials, they can gain access to information that should normally be out of their reach. Likewise, if authorization can be bypassed, it doesn‚Äôt matter who (or what role) the system authenticates that user to be. In your class, your friend Jennifer decides to get systematic with her secret dispersal techniques. She starts scratching out little ‚Äúcontracts‚Äù on perforated notebook pages, in her writing and with her name on them, stating that she has told your secret to the specific kid standing in front of her. She then requires this kid to sign the contract before any information will be divulged. At the end of the day as you‚Äôre going home, you see Jennifer carrying a big old wad of these contracts, tightly folded up and clutched in her fiendish little mitts. As it turns out, Jennifer has created her own little form of nonrepudiation . This term simply means that there is some form of proof of a transaction taking place, such that neither party within the transaction can later refute that the transaction took place. In Jennifer‚Äôs case, her little signed contracts are a grade school version of this concept, showing that both she and the other kid she told your secret to agreed to this illicit exchange of information. In information security it is crucial to create some form of nonrepudiation within your application. Whether through logs or historical transaction records, it‚Äôs important that each transaction be explicitly tracked and marked in some way, so neither the sender nor the recipient can claim that they did not send nor receive the transaction in question. A code review is simply an examination of source code written by another developer. When it comes to improvements in security, a thorough code review process should look for any potential vulnerabilities that the code may introduce. Even seemingly small, accidental issues, like adding secret key strings to the public via a code repository push, could cause major confidentiality, authorization, and authentication issues down the road. Another important step when performing security testing is to assess potential vulnerabilities in the application. These could range from insecure server access to improper injection attack deterrence, but it‚Äôs critical that everyone on the team be constantly aware of and thinking about potential vulnerabilities during the software development life cycle. Since every team member has a unique perspective on the application ‚Äî and each member will often have dramatically different training and experience ‚Äî every voice can and should be able to create vulnerability assessment reports. These assessments should then be tested via penetration testing , which is the actual act of attempting to exploit the proposed vulnerability and see if it still exists, or if a recent change has closed up that avenue of attack. Since most applications will go through constant changes to both the code and the environment on which they‚Äôre being executed, it‚Äôs crucial that these phases are repeated throughout the entire development life cycle ‚Äî particularly just prior to and after a major release. While not all applications are written in a language or framework that allows for it, but consider the the possibility of using self-protection measures within the application runtime itself, or just outside it on the network. A common example is a firewall , which monitors incoming traffic and determines if said traffic is safe and should be allowed, or unsafe and should be blocked. Many techniques used to gain unauthorized access to a network or application have been detected and well-documented, so it‚Äôs important that you and your team use the knowledge and experience gathered by other security professionals to lock down your own application as much as possible. The Open Web Application Security Project ( OWASP ) is a great non-profit organization dedicated to tracking, documenting, and improving software security. Their site includes a great deal of useful information, including numerous checklists like the Web Application Security Testing Cheat Sheet , which can be used by your security team to test for many of the most common and dangerous loopholes out there today. While the goal of security testing should be to identify and resolve potential vulnerabilities before they are exploited during production or otherwise become a problem, it‚Äôs not always the case that you‚Äôll be able to identify and catch 100% of these possible issues. Moreover, not all security problems present themselves as a direct attack. Often, a security loophole is discovered due to an unexpected error from the application, which requires investigation by the development team. Resolving this error sometimes sheds light on a security problem that should be resolved, so it‚Äôs crucial that you and your team stay on top of all errors throughout the entirety of the software development life cycle. One particularly useful tool is error monitoring software, which provides a constant pulse on the health and reliability of your application, whether it‚Äôs running in development or even out in the wilds of production. All errors are quickly identified, examined, and are ready to be fixed, without the need for convoluted user-generated reports or expensive, time-consuming quality assurance support. The best error monitoring services allow you and your team to see the exact nature of every error, including a plethora of detailed metadata. For example, when an error occurs using Airbrake.io‚Äôs error monitoring software, Airbrake is able to report the error type, error message, parameters, the API method that generated the error, the detailed backtrace, the client machine data, the environment in which the error occurred, the file that caused the error, and much more. Thus, not only does error monitoring software allow you to track and immediately identify exceptions when they occur, it also provides a substantial safety net, particularly during production releases. While you‚Äôll still want to plan accordingly and establish a sound security testing suite, error monitoring services provide a bit of breathing room by promising to inform you of any unforeseen issues. Check out Airbrake.io‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices!", "date": "2017-10-31"},
{"website": "Airbrake", "title": "Waterfall Model: What Is It and When Should You Use It?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/waterfall-model", "abstract": "First introduced by Dr. Winston W. Royce in a paper published in 1970 , the waterfall model is a software development process. The waterfall model emphasizes that a logical progression of steps be taken throughout the software development life cycle (SDLC), much like the cascading steps down an incremental waterfall. While the popularity of the waterfall model has waned over recent years in favor of more agile methodologies, the logical nature of the sequential process used in the waterfall method cannot be denied, and it remains a common design process in the industry. Throughout this article we‚Äôll examine what specific stages make up the core of the waterfall model, when and where it is best implemented, and scenarios where it might be avoided in favor of other design philosophies. Some more specific takes on SDLC include: Actually implementing a waterfall model within a new software project is a rather straightforward process, thanks in large part due to the step-by-step nature of the method itself. There are minor differences in the numbers and descriptions of the steps involved in a waterfall method, depending on the developer you ask (and even the year during which you ask him or her). Regardless, the concepts are all the same and encompass the broad scope of what it takes to start with an idea and develop a full-scale, live application. Requirements : During this initial phase, the potential requirements of the application are methodically analyzed and written down in a specification document that serves as the basis for all future development. The result is typically a requirements document that defines what the application should do, but not how it should do it. Analysis : During this second stage, the system is analyzed in order to properly generate the models and business logic that will be used in the application. Design : This stage largely covers technical design requirements, such as programming language, data layers, services, etc. A design specification will typically be created that outlines how exactly the business logic covered in analysis will be technically implemented. Coding : The actual source code is finally written in this fourth stage, implementing all models, business logic, and service integrations that were specified in the prior stages. Testing : During this stage, QA , beta testers, and all other testers systematically discover and report issues within the application that need to be resolved. It is not uncommon for this phase to cause a ‚Äúnecessary repeat‚Äù of the previous coding phase, in order for revealed bugs to be properly squashed. Operations : Finally, the application is ready for deployment to a live environment. The operations stage entails not just the deployment of the application, but also subsequent support and maintenance that may be required to keep it functional and up-to-date. While the waterfall model has seen a slow phasing out in recent years in favor of more agile methods, it can still provide a number of benefits, particularly for larger projects and organizations that require the stringent stages and deadlines available within these cool, cascading waters. Adapts to Shifting Teams : While not necessarily specific to the waterfall model only, using a waterfall method does allow the project as a whole to maintain a more detailed, robust scope and design structure due to all the upfront planning and documentation stages. This is particularly well suited to large teams that may see members come and go throughout the life cycle of the project, allowing the burden of design to be placed on the core documentation and less on any individual team member. Forces Structured Organization : While some may argue this is a burden rather than a benefit, the fact remains that the waterfall model forces the project, and even the organization building said project, to be extraordinarily disciplined in its design and structure. Most sizable projects will, by necessity, include detailed procedures to manage every aspect of the project, from design and development to testing and implementation. Allows for Early Design Changes : While it can be difficult to make design changes later in the process, the waterfall approach lends itself well to alterations early in the life cycle. This is great when fleshing out the specification documents in the first couple stages with the development team and clients, as alterations can be made immediately and with minimal effort, since no coding or implementation has actually taken place up to that point. Suited for Milestone-Focused Development : Due to the inherent linear structure of a waterfall project, such applications are always well-suited for organizations or teams that work well under a milestone- and date-focused paradigm. With clear, concrete, and well understood stages that everyone on the team can understand and prepare for, it is relatively simple to develop a time line for the entire process and assign particular markers and milestones for each stage and even completion. This isn‚Äôt to suggest software development isn‚Äôt often rife with delays (since it is), but waterfall is befitting the kind of project that needs deadlines. While some things in software development never really change, many others often fall by the wayside. While Dr. Royce‚Äôs initial proposal of what is now known as the waterfall model was groundbreaking when first published back in 1970, over four decades later, a number of cracks are showing in the armor of this once heralded model. Nonadaptive Design Constraints : While arguably a whole book could be written on this topic alone, the most damning aspect of the waterfall model is its inherent lack of adaptability across all stages of the development life cycle. When a test in stage five reveals a fundamental flaw in the design of the system, it not only requires a dramatic leap backward in stages of the process, but in some cases, can be often lead to a devastating realization regarding the legitimacy of the entire system. While most experienced teams and developers would (rightfully) argue that such revelations shouldn‚Äôt occur if the system was properly designed in the first place, not every possibility can be accounted for, especially when stages are so often delayed until the end of the process. Ignores Mid-Process User/Client Feedback : Due to the strict step-by-step process that the waterfall model enforces, another particularly difficult issue to get around is that user or client feedback that is provided late into the development cycle can often be too little, too late. While project managers can obviously enforce a process to step back to a previous stage due to an unforeseen requirement or change coming from a client, it will be both costly and time-consuming, for both the development team and the client. Delayed Testing Period : While most of the more modern SDLC models attempt to integrate testing as a fundamental and always-present process throughout development, the waterfall model largely shies away from testing until quite late into the life cycle. This not only means that most bugs or even design issues won‚Äôt be discovered until very late into the process, but it also encourages lackadaisical coding practices since testing is only an afterthought. In spite of going through an explicit testing phase during implementation of a waterfall model project, as discussed above, this testing is often too little, too late. In addition to the normal testing phase, you and your team should strongly consider introducing an effective error management tool into the development life cycle of your project. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2016-12-08"},
{"website": "Airbrake", "title": "Iterative Model: What Is It And When Should You Use It?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/iterative-model", "abstract": "The iterative model is a particular implementation of a software development life cycle (SDLC) that focuses on an initial, simplified implementation, which then progressively gains more complexity and a broader feature set until the final system is complete. When discussing the iterative method , the concept of incremental development will also often be used liberally and interchangeably, which describes the incremental alterations made during the design and implementation of each new iteration. Throughout this article we will take a deeper dive into the iterative model, including where it originated from, how the process is actually implemented within a project, and both the advantages and disadvantages that can arise from its use, so let‚Äôs get crackin‚Äô! Some more specific takes on SDLC include: While agile development models such as the iterative model have come to be a generally accepted evolution over the traditional waterfall model of the past, it turns out that iterative methods were used in projects as early as the 1950s. During this period, the United States Air Force and NASA worked together to develop the X-15 hypersonic aircraft, using a largely iterative design process throughout. While this wasn‚Äôt directly a software development project, the success of this process led NASA to use an iterative model for the software development of Project Mercury , which was the first manned spaceflight for the United States. In the subsequent decades since, iterative methods have been implemented in a wide range of software applications, from modern web applications and high-performance gaming clients, to the United States Department of Defense‚Äôs software acquisition standard document 5000.2 , stating that ‚ÄúThere are two approaches, evolutionary and single step [waterfall], to full capability. An evolutionary approach is preferred.‚Äù Unlike the more traditional waterfall model , which focuses on a stringent step-by-step process of development stages, the iterative model is best thought of as a cyclical process. After an initial planning phase, a small handful of stages are repeated over and over, with each completion of the cycle incrementally improving and iterating on the software. Enhancements can quickly be recognized and implemented throughout each iteration, allowing the next iteration to be at least marginally better than the last. Planning & Requirements : As with most any development project, the first step is go through an initial planning stage to map out the specification documents, establish software or hardware requirements , and generally prepare for the upcoming stages of the cycle. Analysis & Design : Once planning is complete, an analysis is performed to nail down the appropriate business logic, database models, and the like that will be required at this stage in the project. The design stage also occurs here, establishing any technical requirements (languages, data layers, services, etc) that will be utilized in order to meet the needs of the analysis stage. Implementation : With the planning and analysis out of the way, the actual implementation and coding process can now begin. All planning, specification, and design docs up to this point are coded and implemented into this initial iteration of the project. Testing : Once this current build iteration has been coded and implemented , the next step is to go through a series of testing procedures to identify and locate any potential bugs or issues that have have cropped up. Evaluation : Once all prior stages have been completed, it is time for a thorough evaluation of development up to this stage. This allows the entire team, as well as clients or other outside parties, to examine where the project is at, where it needs to be, what can or should change, and so on. Now the real fun begins! This is the crux of the entire iterative model, whereby the most recently built iteration of the software, as well as all feedback from the evaluation process, is brought back to the planning &amp; development stage at the top of the list, and the process repeats itself all over again. Inherent Versioning : It is rather obvious that most software development life cycles will include some form of versioning, indicating the release stage of the software at any particular stage. However, the iterative model makes this even easier by ensuring that newer iterations are incrementally improved versions of previous iterations. Moreover, in the event that a new iteration fundamentally breaks a system in a catastrophic manner, a previous iteration can quickly and easily be implemented or ‚Äúrolled back,‚Äù with minimal losses; a particular boon for post-release maintenance or web applications. Rapid Turnaround : While it may seem like each stage of the iterative process isn‚Äôt all that different from the stages of a more traditional model like the waterfall method ‚Äî and thus the process will take a great deal of time ‚Äî the beauty of the iterative process is that each stage can effectively be slimmed down into smaller and smaller time frames; whatever is necessary to suit the needs of the project or organization. While the initial run through of all stages may take some time, each subsequent iteration will be faster and faster, lending itself to that agile moniker so very well, and allowing the life cycle of each new iteration to be trimmed down to a matter of days or even hours in some cases. Suited for Agile Organizations : While a step-by-step process like the waterfall model may work well for large organizations with hundreds of team members, the iterative model really starts to shine when its in the hands of a smaller, more agile team. Particularly when combined with the power of modern version control systems, a full ‚Äúiteration process‚Äù can effectively be performed by a number of individual team members, from planning and design through to implementation and testing , with little to no need for outside feedback or assistance. Easy Adaptability : Hinging on the core strength of constant, frequent iterations coming out on a regular basis, another primary advantage of the iterative model is the ability to rapidly adapt to the ever-changing needs of both the project or the whims of the client. Even fundamental changes to the underlying code structure or implementations (such as a new database system or service implementation) can typically be made within a minimal time frame and at a reasonable cost, because any detrimental changes can be recognized and reverted within a short time frame back to a previous iteration. Costly Late-Stage Issues : While not necessarily a problem for all projects, due to the minimal initial planning before coding and implementation begin, when utilizing an iterative model, it is possible that an unforeseen issue in design or underlying system architecture will arise late into the project. Resolving this could have potentially devastating effects on the time frame and costs of the project as a whole, requiring a great deal of future iterations just to resolve one issue. Increased Pressure on User Engagement : Unlike the waterfall model , which emphasizes nearly all user/client engagement within the initial stages of the project during a brief crunch time period, the iterative model often requires user engagement throughout the entirety of the process. This is sometimes an unfortunate obligation, since each new iteration will likely require testing and feedback from users in order to properly evaluate any necessary changes. Feature Creep : Not only does the iterative model require user feedback throughout the process, but this also inherently means the project may be subject to undesired feature creep, whereby users experience the changes in each iteration, and are inclined to constantly put forth new requests for additional features to be added to future versions. With the adept agility and rapid turnaround of iterative model projects, you need an exception management tool that can keep up the pace, without the overhead of user-intervention. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2016-12-15"},
{"website": "Airbrake", "title": "Even More Tips for Refactoring Rails Models", "author": "Unknown", "link": "https://airbrake.io/blog/rails/tips-for-refactoring-rails-models", "abstract": "There are many indicators that your models have grown too big, but the most indicative is when your model breaks the single responsibility principle . First introduced by software engineer and author Robert Cecil Martin in his book Agile Software Development, Principles, Patterns, and Practices , the single responsibility principle states that every class in an application should have responsibility over one, and only one aspect of the overall software. Martin defines ‚Äúresponsibility‚Äù as a ‚Äúreason to change,‚Äù indicating that each class should only ever have one reason to change. In our Top Tips for Refactoring Fat Models in Rails article we looked at a handful of suggestions for cleaning up and streamlining bloated models. Today, we‚Äôll be looking at even more tips for refactoring Rails models, so let‚Äôs jump right in! In many cases, your Rails application may need to perform some logic to determine what views and other UI elements are active for the user. However, while it‚Äôs relatively easy to start throwing such logic directly into .erb files, refactoring this logic into view objects can save a lot of time and headaches down the road. For example, consider a scenario where our application needs to present a series of navigation menu links (i.e. tabs ) to the user. The initial implementation might look something like this, within the header.html.erb view: We‚Äôre using the popular and powerful CanCan gem to make it easy to check permissive behaviors, but doing so also adds some additional logic within our view. We also reference the same ApplicationHelper#is_tab_active? method numerous times: Arguably, this is maintainable code, even with the no-no of including CanCan logic in the header view. However, this code is also far from beautiful and will eventually lead to problems down the road. What if we want to add additional tabs that are found in a different view ? Maybe administrators on the site need to view some different tabs, which are created within the admin.html.erb view: Now, not only do we have to modify two different .erb view files when changing tabs, but the HTML structure of how tabs are created (i.e. <div class=\"tabs tab-XYZ\"> ) is spread over multiple files as well. The solution is to create our own view object , which is just a plain old Ruby object that acts as an interface , which can be extended through other classes to handle the actual view-based logic we need. Now, let‚Äôs create a generic Tabs view object, which can be inherited by specific implementations (i.e. application components). While the number of lines of code has slightly increased from the original implementation, we‚Äôve dramatically reduced the complexity of how navigation tabs are handled in the codebase. We can now simply invoke the appropriate view object class in the actual view. For example, the header.html.erb code goes from this: ‚Ä¶ to this: Plus, encapsulating all the logic into separate view objects makes it much easier to modify existing tabs in the future, or even add new sections. For example, to add the admin tabs section we just need to implement the base Tabs interface: As you may recall, in our previous article with refactoring fat models in Rails we discussed creating service objects . A service object is essentially a class that encompasses complex behaviors, typically across multiple models. More importantly, service objects inherently deal directly with data (i.e. ActiveRecord objects), so invoking a service object will usually force actual changes to the database. However, there are some scenarios where you may not need to change data, but must still invoke multiple models or complex behavior to retrieve some particular information. For such scenarios, a policy object is ideal. A policy object can be extracted from your application code by identifying anywhere where one or more business rules are used to determine something about data that is already in memory . For example, consider the following snippet from our previous article, in which we created a simple service object called BookCleanup that updates the featured flag of all Books that have a low rating score: Clearly, we can see that update_all(featured: false) causes this #cleanup method to modify the database. However, what if we just wanted to determine if a particular Book is considered ‚Äúhighly rated‚Äù (i.e. it has an average rating score of at least 4.5 )? We might implement a BookPolicy object: Now, wherever we need to check if a Book is highly rated, we can create a BookPolicy instance and invoke the #highly_rated? method. Moreover, we can expand the functionality of the BookPolicy object when we want to include additional checks, such as if a Book was published in the last year: The last refactoring technique we‚Äôll cover today is making decorators out of existing callbacks. A decorator object essentially allows you to modify or ‚Äúadd onto‚Äù the behavior of existing objects, such as ActiveRecord models, without adjusting the behavior of outside code. Extracting decorators from existing code is typically useful when your model has been given too much responsibility, or where some behavior must only execute under certain circumstances. For example, consider what happens when a user creates a new Book in our book-based application. We might want to trigger a tweet on Twitter on the user‚Äôs behalf, letting their friends know they just read the newly-added Book . Such logic doesn‚Äôt belong in the Book model, since Twitter handling falls outside its purview. However, a decorator object is perfect for this scenario: Here we‚Äôve created the TwitterBookNotifier class. As you can see, it‚Äôs quite simple. It expects a Book argument passed during initialization, and it provides a #save method, which is similar to the normal Book#save method we‚Äôd be using. However, in addition to calling #save on the passed Book instance, it also invokes the #tweet method, which connects to the Twitter API and sends out a tweet. Now, to make use of the TwitterBookNotifier object we can use it in our controller, just as we‚Äôd use an actual Book instance that is being created and saved: There we have it! A handful of cool, new tips for refactoring rails models! Also, be sure to check out Airbrake‚Äôs Rails exception handling gem , which simplifies the error-reporting process for all of your Ruby web framework projects, including Rails , Sinatra , Rack , and more. Built on top of Airbrake‚Äôs powerful and robust Airbrake-Ruby gem, Airbrake provides your team with real-time error monitoring and reporting across your entire application. Receive instant feedback on the health of your application, without the need for user-generated reports or filling out issue tracker forms. With built-in integration for Ruby web frameworks, Heroku support, and even job processing libraries like ActiveJob , Resque , and Sidekiq , Airbrake can be integrated into your application and begin revolutionizing your debugging workflow in just a few minutes. Start using Airbrake today with a free 30-day trial .", "date": "2017-09-27"},
{"website": "Airbrake", "title": "12 Tips for Managing Software Teams", "author": "Unknown", "link": "https://airbrake.io/blog/devops/12-tips-managing-software-teams", "abstract": "Managing software teams can be difficult, even for the most disciplined and well-established organizations. Every aspect of the software development process must be carefully considered and balanced, allowing multiple teams to equally and efficiently produce software that customers will truly love. Managing these teams requires an understanding of the details of the project, along with the broader picture of relationships within and among teams, as well as the business requirements behind each executive decision. To better cope with these management challenges, we‚Äôve collected a handful of the top 12 tips for managing software teams from around the industry, all of which have been practiced and successfully implemented across many projects over the past few decades. Let‚Äôs get into it! Managing software teams shouldn‚Äôt be focused on digging into the minutiae of every developer‚Äôs daily work, nor should it be about monitoring whether each member is dedicating a full eight hours a day to producing. Not only is this sort of micromanagement highly ineffective, it‚Äôs also extremely detrimental to overall team morale. Nobody wants a boss or executive lurking around or taking note of their every move. Thus, one of the most important roles you have while managing software teams is to hire the right people . What this means will vary from organization to organization, but a tried-and-true litmus test is whether developers enjoy the kind of work they‚Äôre doing enough to do similar stuff on their own time. Critically, we‚Äôre not talking about developers that are actually doing work while off the clock (that‚Äôs a quick route to ‚ÄúBurnout Avenue‚Äù), but instead, developers that like to code their own personal projects, just for fun. In fact, Google became somewhat (in)famous for their ‚Äú20 percent time‚Äù policy that allowed employees to spend 20 percent of their time working on their own projects and ideas. In spite of what some reports claimed the past few years, the practice is still in full swing at Google, and has become common practice throughout the industry. One of the most fundamental rules of software development is that adding more people to a troublesome, delayed project will not expedite the process but will, counterintuitively, slow progress down, which results in an even greater delay. Yet, time and again, executives and managers come to the seemingly obvious conclusion that more manpower equates to more output. This rule may be fruitful in certain realms of production, such as adding more hands on the widget factory line, but even in such fantasy scenarios, at some point those extra hands will get in the way of existing hands-in-progress, causing more trouble than benefit. Similarly, development is an especially complex production, which cannot be brute forced into submission ‚Äî software development is an elegant ballet where great ideas meet robust implementation. Make every effort to avoid falling behind schedule or allowing your teams to experience major setbacks, but, should such a problem occur, one of the worst things you can do is try to bring on swaths of new people to get things back in shape. Outside of mass exodus causing a severe shortage of manpower, your focus should be on reshaping the practices and mindsets of those existing team members who are already intimately familiar with the project and its particular intricacies and requirements. If new blood must be added to an already-bleeding project, make sure it is added through a slow drip, as opposed to a quick injection straight to the heart. This concept isn‚Äôt limited just to your personal limitations as a leader, but should also be applied to the rest of the team, along with the problems that must be resolved within a project at any given moment. Put simply, the point here is to always keep perspective when approaching a seemingly intractable issue. Instead of trying to come at it headlong and tackle it in one go, divide it into smaller and smaller tasks, until the scope of said tasks seems manageable and can be handled by the team. If this divide and conquer technique is practiced frequently enough, there will never be any major, insurmountable problem. Practice actively listening to team members and other managers, to better understand the ongoing status and progress of each team and project. Actively listen to comments, feedback, and inquiries, then be sure to circle back around with your own follow-up questions, such as ‚ÄúWhat did you work on? Did it come together? Why? Why not? What can be improved?‚Äù Ultimately, your role when managing software teams isn‚Äôt to manage projects or products, but to maintain the happiness and production of people working around you. As such, you should practice proactive communication , whether that be checking in with team leads or managers on a regular basis, or simply walking around and informally chatting with developers. It may sound formulaic to plan for and implement a technique as humanly basic and ‚Äúwalking around and talking to people,‚Äù but, if practiced frequently enough and with genuine interest and effort, eventually you‚Äôll establish respectful bonds, if not relationships. This will allow and encourage team members to approach you with problems that might have otherwise gone unsaid. Whether these problems are project-related or personal, it‚Äôs all positive if communication is proactive and not bottled up or hidden behind a facade of worker v. manager. Managing multiple software teams can be challenging even in the best of environments, but nothing makes this task more difficult then when said teams are completely separated from one another, geographically, chronologically, and so forth. It probably comes as no surprise that studies have shown that teams perform much better when they are working in close proximity to one another. If at all possible, get all teams working in the same building, ideally on the same floor or even in the same workspace. This will dramatically increase the dissemination of information in an informal manner (i.e. around the ‚Äúwater cooler‚Äù). Coworkers that are working on completely different teams will tend to naturally share information about their projects, which will invariably lead to outside-the-box problem solving when a member of Team A suggests a solution to something troubling Team B. Moreover, any animosity between teams tends to evaporate (by force, if nothing else) when teams are collocated. For example, forcing developers and quality assurance testers to work near to and with one another improves relations, while also dramatically reducing problematic code and error rates. In short, team members will scratch each others‚Äô backs. Software development life cycles should not be thought of as an intense sprint, but rather, as a well-paced marathon. Forcing software teams to constantly produce at an excessive rate will quickly lead to burnout throughout the team, which will inevitably cause development problems, bugs in the code, and ultimately a lengthier, more expensive development process. Happy developers produce high quality code, so managing software teams should allow for a healthy work-life balance. That said, this isn‚Äôt to suggest there are never situations that call for an extra push. Colloquially, such phases are often referred to as sprints because, just as if you‚Äôve been running a marathon at a steady pace for some time, toward the end you may need to kick into a sprint for the last little bit to get across the finish line in time. Most teams can handle occasional sprints, so long as these periods are the exception and are offset by moderate pacing the rest of the development life cycle. Burnout can also occur as a result of spreading manpower too thin. While managing multiple software teams should provide opportunities for teams to work closely and sometimes with one another, it should not present situations where members are working on multiple projects simultaneously. Most people cannot cognitively juggle work on two separate projects at the same time, and attempting to do so will only be a detriment to both projects. Instead, ensure that teams are clearly defined and work is focused on the high priority project for each team. Attempting to create complex, robust software without any form of requirements in place is like trying to erect the four walls of a house without any support beams ‚Äî even if you manage to rig things up, eventually everything will collapse onto itself. The problem with software requirements is that they are finicky, ambiguous, and complicated. Requirements may be over-scoped or underwritten ‚Äî one project may contain virtually no requirements documentation, while the next project may include thousands of pages of requirement info. Finding the proper balance between depth and dexterity is a real challenge for most software development projects. With more traditional waterfall methodologies of project management, it wasn‚Äôt uncommon for requirements to be thick documents filled with everything under the sun. This often led to projects that were so massive in scope and so packed with requirements that development progressed at a snail‚Äôs pace ‚Äî often, by the time the final product was released, the customer‚Äôs needs and/or the market had entirely shifted gears. Consequently, modern Agile practices avoid pitfall this by swinging the pendulum the other way, often pushing requirements off to the side in favor of ‚Äúgetting some hands dirty.‚Äù That said, requirements are an unfortunate necessity, because they ultimately usurp any and all software development methodologies you may have in place ‚Äî no matter how you develop software, the benefits and purpose of the software (and thus its requirements) will not change. Requirements are particularly important when considering customer/user input, since customers rarely know what they want. Executives, managers, developers, and everyone in between will talk endlessly about all sorts of concepts aimed at measuring the software‚Äôs progress and potential success, such as requirements, budgeting, scheduling, features, and so forth. However, the final verdict about whether the software your teams are producing comes from users: If people love your software, your project was a success; all else be damned. As such, you should try to manage with that notion beating at the back of your mind at all times: ‚ÄúWill people love this? Why or why not?‚Äù While it‚Äôs important not to force an untenable development pace (rather, go for a marathon approach), it‚Äôs also just as important to establish the high quality standards you expect of your teams right out of the gate. Most developers will respond well to positive reinforcement in the first few days of a project, such that demanding a certain quality of code during this early stage, and giving praise for said quality, will encourage developers to strive for that level throughout the rest of the software development life cycle. By nature of the work they do, developers tend to be logical and intensely focused individuals. Consequently, the last thing they need while deeply concentrating on a tough problem is to be bothered with random meetings or administrative busywork. As such, one of your roles as a manager is to reduce (or even eliminate) these potential distractions. This may take the form of setting aside blocks of time in the day for uninterrupted development work (should individuals want such a thing), managing accessible task lists and statuses, and effectively documenting product requirements well before the first line of associated code is to be written. If infinite monkeys can eventually produce the works of Shakespeare ‚Äî in spite of the near-total pandemonium that would certainly erupt ‚Äî then it stands to reason that a smaller group of professional developers can produce valuable, robust software over a much shorter period of time. The challenge, as a software team manager, is finding the correct balance between ordered process and chaotic pandemonium. When too much order and procedure is injected, the whole thing grinds to a halt and little forward progress is achieved because of all the pseudo-red tape. Similarly, too much disorder also halts progression, as chaotic development leads to chaotic software and bugs galore. The trick is to find that balance between the two, which generally begins with the idea that only the minimal amount of procedure should be injected into the process. For example, establishing a complex process by which software bugs are tested for, reported, tracked, resolved, retested, confirmed, and so forth is a daunting procedure to force onto every team member. Instead, the mantra should be to find the minimal level of acceptable procedure that can be used to accomplish the task at hand. In this case, your team‚Äôs error handling techniques need to elegantly scale alongside the rest of the project. Airbrake‚Äôs powerful error monitoring software guarantees that your team won‚Äôt need to worry about losing track of production errors! Airbrake provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices! Managing software teams, especially in larger organizations, can lead to copious amounts of day to day busywork. Responding to emails, attending meetings, taking calls; all of it can quickly add up and suck up the majority or even the entirety of your day. This inevitably leaves no time for the real meat and potatoes of your job: Encouraging others to create software people love. Thus, it is vital to the success of your teams that you don‚Äôt get bogged down in the minutiae of daily responsibilities, and always leave yourself enough time and energy to perform the broader tasks necessary for your role, many of which we‚Äôve covered throughout this article!", "date": "2017-12-19"},
{"website": "Airbrake", "title": "5 Common Mistakes in Rails Development", "author": "Unknown", "link": "https://airbrake.io/blog/rails/5-common-mistakes-rails-development", "abstract": "Rails is a powerful and relatively easy to use framework. Its dominant principles heavily emphasize convention over configuration, allowing new Rails applications to be up and running in a fraction of the time for applications created in many other, more verbose languages. However, the simplicity that Rails provides can also be a pitfall, particularly for newer developers just getting into the design space. In this article we‚Äôll examine a handful of some of the most common mistakes in Rails development, and provide guidance on how these can best be avoided in your own coding adventures, so let‚Äôs get to it! Rails is, by default, a model-view-controller ( MVC ) framework. While other similar MV_ patterns have been introduced and become more popular as of late, the fundamental nature of Rails is to rely on models to handle business logic, views to render visual components to the user, and controllers to manage the connection between the other two. Most developers strongly encourage data access logic inside your models , leaving your views free to focus purely on the layout and visual aspect of your application. Unfortunately, views are typically written using a templating engine such as ERB , which is the default selection for new Rails applications. ERB and the like allow inline Ruby within the ERB file itself. This often leads to the common mistake that some newer Rails developers make: including application logic inside views . For example, consider this snippet of the views/books/index.html.erb file, which displays a header indicating the title property of the favorite_book variable, which stores the user‚Äôs favorite book. However, if favorite_book doesn‚Äôt exist, the view cannot display the title, so it defaults to UNKNOWN : There are two issues going on here. The first is that there is application logic occurring within the view , which can be difficult to manage as the application grows, not to mention a nightmare to debug. The second issue is that we‚Äôre effectively using a constant, hard-coded value of UNKNOWN , which is never a good idea. To improve this simple example we‚Äôll move the majority of the logic out of the view file and into a controller ‚Äî in this case, as a helper_method . Normally this method shouldn‚Äôt be in the ApplicationController , but we‚Äôre throwing it in there for the sake of this example. Either way, we can now perform logic to check if the favorite_book variable exists: Now we have the #favorite_book helper method that attempts to find the Book in the database based on the session[:favorite_book_id] value, if it exists. If not, a new Book instance is created and the title is set to the default value of UNKNOWN . With the logic moved out of the view , our views/books/index.html.erb code has been dramatically simplified: Now we don‚Äôt need to worry about whether the user has already picked a favorite book or not inside our view . Instead, we just access the title property no matter what, and the appropriate value is returned regardless. Another common mistake during Rails development is improperly using predicate methods . For those unaware, a predicate method is any method that syntactically ends with a question mark ( ? ) and that should return only a truthy result. A truthy result is commonly known as true or false , but it‚Äôs important to understand the slight difference in some potential values. Specifically, both false and nil are considered truthy-false values in Ruby, meaning both will effectively be considered a false or negative result when returned by a predicate method. Any other value will be considered truthy-true , which is effectively indicates true or a positive result. When creating your own predicate methods , it‚Äôs important to understand their main purpose. To that end, a predicate method should never perform any action or alter any data. For example, this predicate method determines if the favorite book is currently within the library, and, if not , it changes the book.library property to true : This is a direct manipulation of data that should never occur in a predicate method . Instead, the predicate should only examine existing data and return a boolean result. In the case above, we should remove the book.library assignment and return the result of the property check. We can accomplish this with a single line: The phrase ‚Äúfat model, skinny controller‚Äù is a well-known and often divisive best practice. It suggests that your models should be sizeable and contain the majority of your domain logic, while your controllers should remain small and only perform the basic functionality of linking models and views . However, as Rails has matured and been used for larger and more complex applications, the notion that a fat model is always the proper avenue to take has fallen by the wayside. ActiveRecord (which is now technically ApplicationRecord , which extends ActiveRecord ) is the base class for all models in Rails. The purpose of ActiveRecord is to closely map to the underlying data objects in a persistent storage medium; most commonly a database. In fact, ActiveRecord is itself an implementation of an object relational mapping ( ORM ) system. As your application grows in size and complexity, it can be all too easy to throw any and all business logic into the models and call it a day. Obviously, you don‚Äôt want to put extra logic into the controllers or views , so the model is the most obvious dumping ground for most newer Rails developers. However, given the tight integration between the data layer and your models , its easy to quickly fall into the trap of enormous models that go well beyond the ‚Äúsingle responsibility‚Äù principle they should focus on. After all, every model is created and named after a corresponding data table in the database, so when a model extends its functionality and logic outside the scope of that particular domain, things start to get messy. The question then remains: How do we avoid obese models ? There are a few schools of thought, but the simplest answer is to vigilantly refactor your existing models to keep them thin and relevant to their singular responsibility. This can be accomplished through the extraction and creation of a number of secondary object types: Value Objects ‚Äì Immutable classes that are compared using their value rather than their identity . Service Objects ‚Äì Classes that encompass complex behaviors. Service objects often make use of multiple models at once, lending themselves to the notion that no single model should ‚Äúown‚Äù this logic or behavior. Form Objects ‚Äì Classes which manipulate multiple models when a user submits a form. These are often referred to as presenter objects . Query Objects ‚Äì Classes that handle complicated database queries. There are many more options available to trim down extraordinarily fat models . In fact, we‚Äôll go into much greater detail and provide code examples in a future article dedicated to refactoring obese models in Rails, so be on the lookout for that! Most Rails developers have gone through an all-too-familiar experience at some point in their career. As you‚Äôre getting into Rails and discovering all the magical things it can do, you find the plethora of gems and their rich ecosystem, which supports millions of developers around the world. Gems can accomplish so much, with so little effort. Need to solve a particular problem? Chances are there‚Äôs already a gem for that. But beware! The call of the RubyGems repository is a dangerous siren song if not properly considered and managed. The biggest potential drawback when adding a new gem to your application is application-breaking bugs. While smart developers will only use the most stable and well-tested gems, even those can cause unexpected behaviors or have their own bugs that slip through the cracks. Putting aside the potential that the gem itself is flawed in some way, adding a gem to perform a task is often more resource intensive than if you were to code the solution yourself. A gem that can help your application perform one task is often going to provide additional functionality (and thus, resource usage) that your application simply doesn‚Äôt need. For example, if you need an easy way to parse some XML data you might consider the popular nokogiri gem, which is a powerful parsing API that has been around for many years now. While your application may only ever use a small portion of a gem‚Äôs full power, you‚Äôre often still loading the entirety of the gem and uses resources that you could be saving or using elsewhere. Lastly, when your Gemfile indicates a new gem dependency required by your application, that gem itself often includes gem dependencies of its own, which may, in turn, have their own dependencies, and so on. Again, the better gems will avoid dependencies as much as possible, but if you aren‚Äôt particularly careful, your application can quickly grow from a couple dozen base gems for most Rails applications to hundreds in a very short period of time. The bottom line is, think carefully before adding gems that you may not need. Whenever possible, roll your own coded solution to perform tasks that are specific to your business requirements. This will give you better control over how those tasks are performed, while also dramatically improving debugging capabilities when something (invariably) goes wrong. Another common mistake when first getting into Rails developer is making direct application calls to third-party services . For example, when a new user signs up and provides their telephone number, your application may use a third-party service, like Twilio , to automatically text the user a multi-factor authentication confirmation code. The relevant code might look something like this #send_authentication_code method: If the #send_authentication_code method is directly called in your application, you risk your application hanging while the third-party service is contacted and the request is executed. To avoid potentially hanging your application while accessing outside services, it‚Äôs best to integrate a job system that allows a queue to store and execute work behind the scenes, independent of your main application threads. In fact, Rails 4.2 introduced the ActiveJob class, which was specifically built for this purpose and can be easily integrated with other popular queuing backends like Sidekiq , Resque , and more. Check out Airbrake‚Äôs Rails exception handling gem , which simplifies the error-reporting process for all of your Ruby web framework projects, including Rails , Sinatra , Rack , and more. Built on top of Airbrake‚Äôs powerful and robust Airbrake-Ruby gem, Airbrake provides your team with real-time error monitoring and reporting across your entire application. Receive instant feedback on the health of your application, without the need for user-generated reports or filling out issue tracker forms. With built-in integration for Ruby web frameworks, Heroku support, and even job processing libraries like ActiveJob , Resque , and Sidekiq , Airbrake can be integrated into your application and begin revolutionizing your debugging workflow in just a few minutes. Try Airbrake today with a free 30-day trial .", "date": "2017-08-18"},
{"website": "Airbrake", "title": "Top Tips for Refactoring Fat Models in Rails", "author": "Unknown", "link": "https://airbrake.io/blog/rails/top-tips-for-refactoring-rails-models", "abstract": "For most Rails developers, a massive benefit of using the Rails framework is the power of its core components, like the dominant Active Record . Acting as the model in the core model-view-controller paradigm that Rails is built around, according to the official documentation , an Active Record is the ‚Äúlayer of the system responsible for representing business data and logic. Active Record facilitates the creation and use of business objects whose data requires persistent storage to a database.‚Äù In other words, an Active Record model should represent a data layer component (typically a database table ), and each instance of a particular model is a one-to-one representation of an object in the database. This relationship is typically known as Object Relational Mapping (or ORM ). As Uncle Ben (Spider-Man‚Äôs very own kin) is oft-quoted, ‚ÄúWith great power comes great responsibility.‚Äù This is certainly applicable in the nerdy realm of Rails‚Äô models, because it‚Äôs all too easy to write code with the assumption that the notion of all ‚Äúbusiness data and logic‚Äù, for which models are intended, encompasses anything and everything that doesn‚Äôt directly relate to the view or controller components of the MVC architecture. For many developers, particularly those new to the Rails platform, projects can quickly spiral out of control with rapidly growing models, taking on more and more responsibility as the application scope increases. Without explicit care and precise refactoring, you may quickly find you‚Äôve got one or more \"fat models\" (as they‚Äôre colloquially known) on your hands. Like tiny little bulls made up of ones and zeroes, these monstrosities can wreak havoc in the china shop that is your codebase. In our 5 Common Mistakes in Rails Development article, we looked at a handful of issues that frequently trip up both new and seasoned Rails developers. One topic we briefly discussed is obese models , promising a follow-up article taking a deeper dive into this issue and how to manage it. In today‚Äôs article we‚Äôll tackle just that problem, examining the nature of fat models , the goals you should strive for in your own model design, and a few tips and tricks to help you with refactoring rails models that have already grown a little to big for their britches. Let‚Äôs get this party started! There are many indicators that your models have grown too big, but the most indicative is when your model breaks the single responsibility principle . First introduced by software engineer and author Robert Cecil Martin in his book Agile Software Development, Principles, Patterns, and Practices , the single responsibility principle states that every class in an application should have responsibility over one, and only one aspect of the overall software. Martin defines ‚Äúresponsibility‚Äù as a ‚Äúreason to change,‚Äù indicating that each class should only ever have one reason to change. For example, imagine a class that handles sending out email confirmations to users after sign up. This class might include just a few fields like email and content . Perhaps, when initially creating this class, it was decided that each user has a unique email address, so the email field (which is a string) is sufficient. However, later down the road, there‚Äôs eventually a need to associate this class with more complex relationships, because, perhaps users can register through some identifier besides their email address. Now we‚Äôre in a situation where this simple class intended to send out email confirmations actually has more than one responsibility or reason to change. One possible reason is when emails need to be sent out in different ways, perhaps based on their frequency, recipients, or email protocol type. Another reason to change is when we want to move from the old email identification to a more robust means, such as an association with a User class object found elsewhere in the application. This will allow users to be contacted not just by email, but by text message or otherwise. Anyway, we could get into a deep rabbit hole of theoretical examples, but the same principles apply: If a model has grown to the point that some part of it is handling multiple responsibilities, it‚Äôs best to try to refactor it and trim it down so it focuses solely on its single, independent job. A value object is an immutable class that is compared using its value rather than its identity . Common examples of value objects include numbers, dates, monetary values, and strings. For example, a penny is a value object . I can have five unique copies of a penny in my pocket at once, but their usefulness as currency is not dependant on their unique identification. Instead, they are identified based on their value as a representation of one cent. Similarly, the string \"ABC\" is equal to a second copy of the string \"ABC\" . Even though these are two unique objects, their equivalence is always based on their value , rather than their identify. As it happens, looking for value objects within your model is a great way to refactor and slim things down. For example, consider an application with a Book class. We allow users to rate a Book from 1 to 5, and we keep track of the total number of ratings in an array. We can then retrieve the current #rating by averaging all the values thus far: While this method works, its rather limiting. What if we want a more complex form of rating? What if we need to perform additional logic based on the ratings that were provided? We can accomplish these goals, while also slimming down our primary Book class, by extracting the rating-related methods and placing them into their own value object class, Rating : Now the Book class can reference the Rating class, rather than just a plain integer value, and we can perform more advanced logic within Rating as needed. Another useful type of class to create, particularly as part of model refactoring, is a service object . A service object is a class that encompasses complex behaviors. Service objects often make use of multiple models at once, lending themselves to the notion that no single model should ‚Äúown‚Äù this particular logic or behavior. For example, consider an infrequent maintenance activity like cleaning up the Book records in the database every quarter. Perhaps the system should look at all Books and determine if their Ratings are below a certain threshold. If not, such Books should no longer be featured elsewhere in the application. While this code could be placed inside the Book model, it wouldn‚Äôt make logical sense because the Book class represents a single instance of a book, rather than the whole collection of books. Therefore, this is a perfect scenario in which to use a service object class: As a simple example, here the BookCleanup service object is used to change the featured flag to false for all Books with Ratings below 3 . Somewhat similar to a service object , a form object is ideal when handling a form request that manipulates multiple models at once. For example, when a User submits a rating on a book, this (may) require manipulation of the Book model and the User model. While we could choose to handle this within either the Book or the User model, doing either would break the single responsibility principle we‚Äôre aiming for, so creating a separate form object class to handle this update is ideal: There are many more options available to trim down extraordinarily fat models , but hopefully this brief look at a few critical tips and ways to slim down these models can help you in your own future Rails projects. Check out Airbrake‚Äôs Rails exception handling gem , which simplifies the error-reporting process for all of your Ruby web framework projects, including Rails , Sinatra , Rack , and more. Built on top of Airbrake‚Äôs powerful and robust Airbrake-Ruby gem, Airbrake provides your team with real-time error monitoring and reporting across your entire application. Receive instant feedback on the health of your application, without the need for user-generated reports or filling out issue tracker forms. With built-in integration for Ruby web frameworks, Heroku support, and even job processing libraries like ActiveJob , Resque , and Sidekiq , Airbrake can be integrated into your application and begin revolutionizing your debugging workflow in just a few minutes. Try all the features packed into Airbrake and start improving your exception handling practices today with a 30-day free trial !", "date": "2017-09-01"},
{"website": "Airbrake", "title": "Python Exception Handling ‚Äì UnboundLocalError", "author": "Unknown", "link": "https://airbrake.io/blog/python/unboundlocalerror", "abstract": "Making our way through our in-depth Python Exception Handling series, today we‚Äôll be getting into the UnboundLocalError . An UnboundLocalError is raised when a local variable is referenced before it has been assigned. This error is a subclass of the Python NameError we explored in another recent article . Throughout the remainder of this post we‚Äôll examine the UnboundLocalError in more detail, starting with where it sits in the larger Python Exception Class Hierarchy . We‚Äôll also look at some functional sample code showing the slight difference between NameErrors and UnboundLocalErrors , and how you can avoid UnboundLocalErrors with special statements found in Python like global . Let the games begin! All Python exceptions inherit from the BaseException class, or extend from an inherited class therein. The full exception hierarchy of this error is: BaseException Exception NameError UnboundLocalError Exception NameError UnboundLocalError NameError UnboundLocalError UnboundLocalError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As the name suggests, UnboundLocalErrors are only raised when improperly referencing an unassigned local variable. In most cases this will occur when trying to modify a local variable before it is actually assigned within the local scope. To illustrate we‚Äôll get right into our sample code and the increment_local_count() function: As you can see the increment_local_count() function does just what the name implies: trying to increment the local count variable by one and then outputting the result. However, there‚Äôs a distinct lack of assignment for the count variable in the local scope of our function block, so executing this code raises an UnboundLocalError : That sort of makes sense. Since no count variable could be located by the parser no resolution can occur for the increment statement. However, this may look very similar to the NameError we looked at previously, which is raised when ‚Äúglobal or local names are not found.‚Äù So, what makes UnboundLocalError different from NameError ? We can illustrate this difference in our second test function, set_locaL_book_title(title) : Just as with the increment test we‚Äôre trying to use a local variable ( book ) that has not been assigned within the local function scope. However, executing this function raises a NameError , rather than an UnboundLocalError : As we can see by the produced error message the difference here is that, since we‚Äôre referencing the title property of book , the compiler assumes that book is actually a global name, so the CPython interpreter evaluates the instruction before it even reaches the secondary instruction that references the title property we‚Äôre ultimately attempting to reference. We can use the dis module to disassemble our functions and see the full bytecode that the CPython interpreter actually processes during execution. We won‚Äôt go into full detail of these instructions and how the interpreter parses them, but check out our NameError article from last week for more details. Here is the bytecode instruction set for the book.title = title source code line in set_local_book_title(title) : As we can see, the first instruction is LOAD_GLOBAL using the book argument, indicating that the interpreter thinks book is a global. This is why a NameError is produced, even though book is actually an undefined local in this case. One way to resolve this is by using the special global statement to reference a global variable that is assigned outside the local function scope. Here we see global_book is assigned to a value outside of the set_global_book_title(title) function scope: However, if we run this test function we‚Äôre able to successfully update the global_book.title property: Just as within set_local_book_title(title) , the bytecode of set_global_book_title(title) shows the global_book.title = title source code statement contains the LOAD_GLOBAL instruction for the global_book object, but our use of the global statement informs the interpreter to actually seek out the globally-scoped name for reference: Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-02-07"},
{"website": "Airbrake", "title": "Python Exception Handling ‚Äì NameError", "author": "Unknown", "link": "https://airbrake.io/blog/python/python-nameerror", "abstract": "Our journey continues through our detailed Python Exception Handling series with a deep look at the NameError found in Python. Just as with many other programming languages, Python source code (typically found in .py files) is initially compiled into bytecode , which is a low level representation of source code that can be executed by a virtual machine via the CPython interpreter. Part of this process involves loading local or global objects into the callstack. However, when Python attempts to load an object that doesn‚Äôt exist elsewhere in the callstack it will forcefully raise a NameError indicating as much. In today‚Äôs article we‚Äôll explore the NameError by looking at where it resides in the overall Python Exception Class Hierarchy . We‚Äôll also look at some functional sample code that illustrates the basic compilation process Python source code goes through to turn into bytecode , and how improper references can result in NameErrors during this process. Let‚Äôs get right into it! All Python exceptions inherit from the BaseException class, or extend from an inherited class therein. The full exception hierarchy of this error is: BaseException Exception NameError Exception NameError NameError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. This code sample also uses the Logging utility class, the source of which can be found here on GitHub . As mentioned in the introduction, a NameError will occur when the CPython interpreter does not recognize a local or global object name that has been provided in the Python source code. Let‚Äôs jump right into some example code in normal Python, after which we‚Äôll see how we can disassemble this code into the bytecode that CPython actually reads and interprets. We begin with two extremely simple functions, log_object(value) and log_invalid_object(value) : The majority of the code for each of these is merely there for error handling, as the core functionality takes place on a single line: Logging.log(value) and Logging.log(valu) , respectively. In essence, we‚Äôre merely using these two functions to log the content of the passed value parameter to the console. However, in the case of log_invalid_object() we have a slight typo of valu instead of value . Let‚Äôs test these out by creating a simple Book object instance and passing it to each of our two log_ functions: As you can probably guess, executing this code produces an expected Book object output, followed by raising a NameError because our typo of valu is not a recognized name: That‚Äôs all well and good, but Python is a powerful language that allows us to look ‚Äúunder the hood‚Äù a bit and see the actual bytecode that each of these log_ functions generates for the CPython interpreter. We‚Äôll be using the built-in dis disassembler module, which was created for this very purpose. By passing a function reference to the dis.dis() method we are provided a full output of the disassembled bytecode that CPython interprets during execution. Our local disassemble_object(value) function is a small wrapper for this purpose: Thus, we can see what the bytecode of the log_object(value) function looks like by running the following: This produces the following output: This may appear a bit overwhelming at first, but this data is actually quite easy to interpret with a bit of knowledge about what we‚Äôre looking at in each column. The first column (e.g. 41 , 42 , 43 ‚Ä¶ 48 ) is the actual line number in the source doe for the corresponding set of instructions. Thus, we can see that all of the following instructions‚Ä¶ ‚Ä¶were generated from a single line of source code (#42): The column with multiples of two ( 0 , 2 , 4 , etc) is the memory address in the underlying bytecode for the given instruction. Modern Python stores instructions using two bytes of data, hence the multiples of two. The next column contains the opname (i.e. instruction) that should be executed, all of which can be found in the official documentation . The column after that contains any arguments , if applicable, that each particular instruction will use. The final column provides a human-friendly version of the instruction, so we can better visualize how the bytecode instruction correlates to source code. Thus, let‚Äôs look back at the single line 42 source code of Logging.log(value) and the generated bytecode instruction set to see what‚Äôs going on: It starts with LOAD_GLOBAL to load the global name Logging onto the stack. It then loads the log attribute onto the top of the stack ( TOS ). LOAD_FAST pushes a reference to a local variable called value onto the stack. Next, CALL_FUNCTION calls the function at argument stack 1 , which is the log method added two instructions prior. POP_TOP removes the most recent item added onto the stack, which is the local value object. Every frame of execution contains a stack of code blocks , which are the logical groupings we see and create when writing source code that is locally grouped. For example, a nested loop or, in this case, a try-except block, is contained within a separate code block in the stack. Since the next instruction that we‚Äôre jumping to with JUMP_FORWARD 88 is exiting the end of the try block found in our source code, POP_BLOCK is used to remove the top (current) block from the code block stack. Cool, so let‚Äôs see how this compiled bytecode for log_object differs from the slightly modified log_invalid_object function: We‚Äôll ignore the majority of the bytecode produced here since it is identical to that produced by log_object , but here we have the instruction set from the same corresponding Logging.log(valu) source code line we examined before: Everything looks exactly the same as before with two exceptions: The line number of 58 is obviously different, since we‚Äôre compiling a different line of source code. The second difference is the third instruction, which changed from LOAD_FAST 0 (value) to LOAD_GLOBAL 2 (valu) . Why? Because the compiler cannot reconcile a local object named valu , since the actual local parameter passed into the function is value , without the typo. Therefore, the compiler assumes valu is a global name, and tries to load it via LOAD_GLOBAL . As we know from executing the log_invalid_object function earlier, the CPython interpreter is unable to locate a global named valu during execution, so a NameError is raised to indicate as much. Neat! Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-01-31"},
{"website": "Airbrake", "title": "Python Exception Handling ‚Äì KeyError", "author": "Unknown", "link": "https://airbrake.io/blog/python/python-keyerror", "abstract": "Today, as we make our way through our detailed Python Exception Handling series, we‚Äôll be looking into the KeyError , which is the close sibling of the IndexError we looked at last week. Whereas the IndexError is raised when trying to access an invalid index within a list , the KeyError is raised when accessing an invalid key within a dict . Throughout this article we‚Äôll explore the KeyError in great depth by first looking at where it sits in the overall Python Exception Class Hierarchy . We‚Äôll also show some fully functional Python code samples that illustrate the basic usage of dictionaries in Python, and how improper key access can lead to KeyErrors . Let‚Äôs go! All Python exceptions inherit from the BaseException class, or extend from an inherited class therein. The full exception hierarchy of this error is: BaseException Exception LookupError KeyError Exception LookupError KeyError LookupError KeyError KeyError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Since the IndexError deals with lists and the KeyError deals with dicts , we should briefly explore the difference between these two common data structures in Python. Python‚Äôs lists are similar to arrays in most other programming languages. It is an ordered collection of objects that are each assigned in incremental numeric index to identify each element. Lists are commonly used as stacks , which allows for the ‚Äúfirst-in, last-out‚Äù behavior that is so crucial in many applications. Dicts , on the other hand, are known as associative arrays in most other languages. A dict is also a collection of objects, but it is unordered , and instead of using numeric indices , a dict uses immutable data types as keys . When you see reference to key: value pairs in Python, this is an indication the collection holding those pairs is a dict . To illustrate how to use dicts we‚Äôll create a series dict object and add a trio of Books to it. Our key values are merely the relative order each book is found in the series, but we could have used anything for these keys : Once our series dictionary has some elements we‚Äôll output them to the console to confirm what‚Äôs in there using the log_dict(collection, include_key=False) method: Executing our main(...) method produces the following output: Everything looks as expected ‚Äî our Books were added and are being output via the modified Book.__str__(self) method: However, let‚Äôs see what happens if we try to access an invalid key in our dict : Here we‚Äôre trying to access the len(series) + 1 key of the dictionary, which is a shorthand way of accessing the key of value 4 . Since the series only contains three Books in total, executing this code raises a KeyError : Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices! Try Airbrake for free with a 30-day trial .", "date": "2018-01-17"},
{"website": "Airbrake", "title": "Python Exception Handling ‚Äì SyntaxError", "author": "Unknown", "link": "https://airbrake.io/blog/python/python-syntaxerror", "abstract": "Moving along through our in-depth Python Exception Handling series, today we‚Äôll be going over the SyntaxError . As with (probably?) every other programming language ever created, a SyntaxError is an indication that there is a syntactic error in the code, which causes the parser or compiler or executor to be unable to determine what the intention of the code is. In the case of some programming languages a SyntaxError is a compiler error and not considered a runtime error , which can be caught by in-code execution. In the case of Python, a SyntaxError can be either a runtime or a compiler error, depending on the scenario and the code that generated it. Throughout this article we‚Äôll examine the SyntaxError by exploring where it sits in the larger Python Exception Class Hierarchy . We‚Äôll also look at some fully functional code examples that illustrate the various ways in which SyntaxError can occur, and how they can be differentiated between runtime and compiler errors, so let‚Äôs get going! All Python exceptions inherit from the BaseException class, or extend from an inherited class therein. The full exception hierarchy of this error is: BaseException Exception SyntaxError Exception SyntaxError SyntaxError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As previously mentioned, Python is among a number of modern languages that (occasionally) allow you to actually catch SyntaxErrors under certain circumstances, so that code execution can continue. That said, it is usually a terribly bad idea, for a variety of reasons, to continue code execution once a SyntaxError has been raised. In many cases, a SyntaxError indicates that surrounding code could have been executed in an insecure or unintended way, which could be catastrophic. Regardless, for the code examples we‚Äôll be going through we‚Äôre making every effort to catch SyntaxErrors , just to illustrate the difference between runtime and compiler versions of the error. To begin we‚Äôll start with the built-in exec() function, which can be used to dynamically execute Python code, usually by parsing a string that contains valid Python code. The code is evaluated and executed as if it were normal code written directly in a .py script file. This practice is generally considered quite dangerous, given the risk of injection attacks , which are when a third-party injects unexpected code into the string that is being exec() d. Such injection used to be a popular method of attack against SQL databases in particular, where an attacker inputs malicious SQL statements into form text boxes that are tied to SQL database queries where the incoming query statement isn‚Äôt properly escaped. For example, imagine a login form that accepts the value entered into username text box and blindly inserts them into an SQL statement: In this scenario, anything entered into the username test box is injected into the username_field_value place in the SQL statement above. So, what happens if we enter something like abc'; DROP TABLE users; SELECT * FROM sys.tables WHERE '1' = '1 ? The full SQL statement becomes: We‚Äôve injected the DROP TABLE users; statement into the mix, telling the SQL database to delete the entire users table! The power of such injection attacks should be clear, which is why direct execution of code in Python and other languages via exec() or eval() can be so dangerous. All that said, this is for science, so here‚Äôs our exec_syntax_test.py file: To make things a little more readable we‚Äôve defined all our code strings as global constants at the beginning of the file. Essentially, the DOUBLE_DEFINITION just defines a function called double(x) that doubles the passed numeric value and returns the result. DOUBLE_EXECUTOR invokes double(5) and logs the result to the console. Executing our main() function produces the following output: As expected, the invocation of exec() for the DOUBLE_X strings worked fine, but we ran into a SyntaxError when invoking the TRIPLE_EXECUTOR string. As you may have noticed, TRIPLE_EXECUTOR contains a slight syntax error because it‚Äôs missing the final closing parenthesis ( ) ) to complete the Logging.log() function call. This is the first example of a catchable SyntaxError , which is allowed because exec() and eval() are effectively executed AFTER the containing script code is evaluated and executed. Thus, all the surrounding code is confirmed to be valid, so statements like try: ... except SyntaxError as error: ... work as expected. Next, let‚Äôs look at the eval() example found in the eval_syntax_test.py file. While I‚Äôd normally place all test code in a single file and split it out using different functions or methods, as we‚Äôll see in a moment, because some SyntaxErrors can‚Äôt be caught during execution, placing each test in a unique file helps differentiate the scenarios. This test using the eval() function is similar to the exec() test before, with some slight variance. The primary difference between eval() and exec() is that exec() is used to directly execute code of any kind, such as a function definition we saw in the last example. On the other hand, eval() is used purely to evaluate the result of a statement, which it ‚Äúreturns‚Äù within the calling code. Put simply, eval('x + 1') would return the value of whatever x is, plus 1 , whereas eval('x = 2') would fail, because eval() cannot be used for complex execution the way that exec() can. Executing the eval_syntax_test.py file produces the following output: Once again, we start with a functional example by evaluating TOMORROW_DEFINITION , which takes the existing today object and adds one more day via the datetime.timedelta(days=1) call, then returns a formatted date string. Meanwhile, the DAY_AFTER_TOMORROW_DEFINITION string contains a slight syntax error in the form of a missing period ( . ) separator between (today + datetime.timedelta(days=2)) and strftime(...) . The final example is the most common type of SyntaxError , in which a syntax problem is created outside of eval() or exec() strings, but is directly in script code. string_literal_syntax_test.py merely attempts to assign the name variable to 'Alice , which does not contain the necessary closing quotation mark ( ' ): Executing the string_literal_syntax_test.py file produces the following output: As you can see, unlike the eval() and exec() examples, since the problematic code is executed at the same time as the rest of the file, we cannot capture this error because Python doesn‚Äôt know how to evaluate surrounding code like the try: ... except SyntaxError as error: ... block. Another similar way to raise SyntaxErrors , which we won‚Äôt explore here, is via an import statement that tries to import a script that contains a syntax error itself. Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-12-20"},
{"website": "Airbrake", "title": "Python Exception Handling: IndexError", "author": "Unknown", "link": "https://airbrake.io/blog/python/python-indexerror", "abstract": "Moving right along through our in-depth Python Exception Handling series, today we‚Äôll be going over the IndexError , in all its glory. The IndexError is one of the more basic and common exceptions found in Python, as it is raised whenever attempting to access an index that is outside the bounds of a list . In today‚Äôs article we‚Äôll examine the IndexError in more detail, starting with where it resides in the larger Python Exception Class Hierarchy . We‚Äôll also look into some functional Python sample code that will illustrate how basic lists are used and improper indexing can lead to IndexErrors . Let‚Äôs get into it! All Python exceptions inherit from the BaseException class, or extend from an inherited class therein. The full exception hierarchy of this error is: BaseException Exception LookupError IndexError Exception LookupError IndexError LookupError IndexError IndexError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Since the IndexError is raised when dealing with lists , our code sample is setup to handle the basic creation and iteration of a list of Books . The log_list(collection, include_index=False) method iterates through the passed collection list by converting to an enumeration, then outputting each item (with or without the index ): To test this out we start by creating a new list and appending a handful of books (from a great fantasy series, by the way) onto it: Now, we need to pass our books list to the log_list(...) method, so we‚Äôll confirm that both the basic and index-included outputs work: As expected, this code works as it should and outputs the following Book details to the console: Just like arrays and other common collections in programming, Python lists are zero-indexed, so our three elements are only indexed up to a maximum of 2 . However, let‚Äôs see what happens if we try to access index 3 of the books list: As you probably suspect, this raises an IndexError , indicating that the list index is out of range: Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices! Try Airbrake for free with a 30-day trial .", "date": "2018-01-12"},
{"website": "Airbrake", "title": "Techniques for Preventing Software Bugs", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/techniques-for-preventing-software-bugs", "abstract": "Preventing software bugs can be a tricky business. Bugs can occur as a result of all sorts of problems, from improper testing or messy code to lack of communication or inadequate specifications documents. In this article we‚Äôll explore the three main categories of software bug, along with the various causes of each, and how implementing a few simple techniques can help you and your team prevent such software bugs in your own projects. Let‚Äôs take a look! These types of bugs occur when an accurate specification documentation exists, but the actual code implementation is faulty in some way. Such bugs might pop up for a variety of reasons including regression, messy code, and inadequate testing. Regression is when an application works correctly at first, but a problem later arises within what was previously-tested and valid code. These types of bugs are fairly common across the development industry, so it is not abnormal for a regression to suddenly appear and cause bugs to surface, throughout the development life cycle. Test-driven development is a common practice in which development works backwards from the normal order of ‚Äúcode, test, debug, repeat‚Äù. Instead, test-driven development (or TDD ) focuses on initially creating failing tests that define and test for the exact functionality the software should handle. Once the tests are in place, only then is code written that can successfully pass the previously-failing tests. If the code fails to pass a test, it is modified until all tests pass, which provides a strong indicator that the code is doing what it should. Test-driven development is an extremely beneficial technique when trying to prevent or reduce implementation bugs in your software. In the case of regression bugs, TDD is a primary means by which your team can maintain a stable code base throughout the development life cycle. By properly creating tests first, and then writing code that passes those tests, the chances of regressive bugs popping up drops dramatically. Messy code (commonly known as smelly code or code smell ) is a term used to describe a minor, surface-level problem with a code base that hints at a larger issue deeper down in the code. In many cases, developers and other team members can pick up on a code smell with experience and practice, preventing much larger issues well before they become a problem. However, it‚Äôs common for development to be kicked into overdrive to meet deadlines, which often leads to the unintentional introduction of bugs, as messy code begins to grow and impact larger features in the application. Test-driven development is another incredible technique for preventing bugs that are result of code smell . TDD encourages development to break out the code base into cleaner, separated concerns. It also heavily favors frequent code review and refactoring. Combined, these techniques dramatically reduce the frequency of bugs occuring due to smelly code. If you or your team are unable to dedicate enough time and resources to testing, it‚Äôs only a matter of time before new bugs crop up as a result. While it can often feel like a waste of time to a developer and a waste of money to a manager/executive, the truth is that adequate testing procedures will be one of the most beneficial practices your team can implement to help quell the potential onslaught of bugs. Continuous integration is the practice of automatically building and testing code after every single code commit is made, across the entire team. Implementing continuous integration provides numerous benefits, including the ability to near-instantly determine if pushed changes are compatible with the existing code base, or whether issues crop up that must be addressed. Consequently, continuous integration is a powerful technique that can largely prevent bugs that might otherwise occur due to inadequate testing. It will typically reduce turnaround time between builds, which will improve overall development and implementation speed, providing more time for testing and quality assurance purposes. Another proven technique to help make up for inadequate testing is implementing automated exception tracking and reporting tools like Airbrake , which ensures that your team is immediately aware of exceptions the moment they occur. Airbrake‚Äôs powerful error monitoring software guarantees that your team won‚Äôt need to worry about losing track of that rare production defect that slips through the cracks. Airbrake provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize defect parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs defect monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices. A specifications document is typically used in software development to define what functions the software should be capable of performing. This documentation is often the technical portion of a pairing with the requirements document . Since the specification defines what functionality the software (or components within said software) should provide, it stands to reason that an improper specification will eventually lead to the introduction of preventable bugs within the code base. The most common direct cause of a specification problem that eventually results in a bug is a simple lack of proper communication somewhere within the team. Whether it‚Äôs developer to developer, manager to developer, executive to department head, or any other combination therein, a failure in communication will often cause a breakdown in the produced specification document. This may take the form of a missing specification section, or a totally incorrect specification that is aimed at dealing with a critical component of the software. In such cases, bugs will crop up all over the place as the software matures beyond the initial stages and other better-defined specifications are implemented alongside lesser, broken features. Behavior-driven development , or BDD , is a software development methodology that combines practices from test-driven development and domain-driven design . BDD aims to simplify development through the use of a common domain-specific language ( DSL ), which is used to adapt natural language sentences and phrases into executable tests. It many cases, BDD implementation starts at the broadest levels of expertise and works toward the deepest, lowest points of understanding. By crossing through these thresholds, the team has a much better overall understanding of the scenarios and domains to be implemented, which leads to better-designed, more robust software. This forces and, therefore, improves communication across the team, dramatically reducing the potential for bugs that might result from an improper specification document due to lack of communication. Specifications are only as useful and as accurate as the team members writing them. While some people may consider themselves without flaw, the reality is we all make mistakes from time to time, and the process of creating specification documents is no exception. As such, there may be instances where a single specification document is created that circumvents or takes precedent over an existing specification, without the team fully knowing or understanding which specification is proper and which should be thrown into the trash. In these scenarios where multiple specifications exist and cover the same component or functionality, it‚Äôs common for bugs to crop up later in the development life cycle, as a result of such conflicts. The best technique for preventing specification conflicts is to dedicate one or more team members to vigilantly managing and reviewing specifications throughout the development process. Since specification documents tend to be fairly technical in nature, it‚Äôs critical that the person(s) assigned to this duty have a technical background and a clear understanding of the overall software functionality. Failing that possibility, such as when the project is massive or spans multiple teams, the specification specialist should understand the intricacies of the software component for which his or her team is assigned. Additionally, behavior-driven development techniques will also help prevent conflict-related specification bugs, since it encourages a common domain-specific language ( DSL ) to be created prior to and during development. The existence of a DSL ensures everyone on the team can easily communicate (and, thus, document) all the specifications necessary to create the final application. The last general type of bug occurs when specifications are simply absent. In other words, if a bug appears as a result of the software being asked to do something completely outside the realm of what you and your team originally envisioned as possible or plausible, it falls into the category of absent specification bugs . Such unknown scenarios are unknown for a reason : They are completely outside of the scope of what was considered likely to affect the software, so they were never introduced into an existing specification document. The most likely cause of an absent specification bug is a simple lack of planning on the part of the team prior to development. Such planning failures may manifest themselves in the form of improper specification documentation, inadequate requirements, under-performing operations infrastructure, poorly written code, or many other potential pitfalls. It‚Äôs not necessary that you and your team accurately estimate each and every particular area that could cause a problem in the future. Instead, it‚Äôs critical that you ‚Äúhave a plan to plan‚Äù ‚Äî create a simple procedure by which any team member can begin the process of outlining and documenting a potential problem area well ahead of time. This will dramatically improve the chance that the team adequately plans for and covers most troublesome details, since it encourages everyone working on the project to be open and vocal about things they might foresee as a problem, without relying on a handful (or even one) individual to come up with everything . As you may suspect, behavior-driven development is a powerful technique here as well, since it promotes the heavy reliance on crowdsourcing questions (and solutions) throughout the entire software development life cycle. Similar to, yet slightly different from, improper planning is the concept of making incorrect assumptions about the software, the requirements, the specifications, teams‚Äô capabilities, and so forth. There are many possible assumptions that must be made throughout software development, so a few incorrect assumptions are certainly going to occur. In such cases, a specification will often go unwritten, which may lead to bugs later on in development (or even in production). Preventing incorrect assumptions throughout the software development life cycle starts with open communication and dialogue. If too much bureaucracy and ‚Äúred tape‚Äù exists within the organization, it may prevent intelligent individuals from broaching/discussing critical issues that may dramatically impact the software and the overall development process in the long run. Therefore, it is vital that your organization maintains open communication within and, if possible, across all departments. BDD practices can help here as well, but they are certainly not a requirement. Instead, merely adopting an open door and open communication policy will allow discussion of critical topics and ensure nothing comes as a major surprise after many incorrect assumptions may have already been made.", "date": "2017-12-26"},
{"website": "Airbrake", "title": "Python Exception Handling ‚Äì EOFError", "author": "Unknown", "link": "https://airbrake.io/blog/python/eoferror", "abstract": "Moving along through our in-depth Python Exception Handling series, today we‚Äôll be going over the EOFError . The EOFError is raised by Python in a handful of specific scenarios: When the input() function is interrupted in both Python 2.7 and Python 3.6+, or when input() reaches the end of a file unexpectedly in Python 2.7. Throughout this article we‚Äôll examine the EOFError by seeing where it resides in the overall Python Exception Class Hierarchy . We‚Äôll also look at some fully functional code examples that illustrate how the different major versions of Python handle user input, and how improper use of this functionality can sometimes produce EOFErrors , so let‚Äôs get to it! All Python exceptions inherit from the BaseException class, or extend from an inherited class therein. The full exception hierarchy of this error is: BaseException Exception EOFError Exception EOFError EOFError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Before we can take a look at some code samples we need to briefly review the built-in input() function in Python. Simply put, in Python 3 input() presents a console prompt to the user and awaits user input, which is then converted to a string and returned as the result of the input() function invocation. However, Python 2 had a slightly different behavior for input() , as it still prompts the user, but the input the user provides is parsed as Python code and is evaluated as such. To process user input using the Python 3 behavior, Python 2 also included the raw_input() function, which behaves the same as the Python 3 input() function. To better illustrate these differences let‚Äôs take a look at a few simple code snippets, starting with the input_test_3.6.py file: As you can see, the only thing we‚Äôre doing here is requesting user input() two times for a book author and title, then outputting the result to the log. Executing this code in Python 3.6 produces the following output: That works as expected. After entering The Stand at the prompt for a title and Stephen King at the author prompt, our values are converted to strings and concatenated in the final output. However, let‚Äôs try executing the same test in Python 2.7 with the input_test_2.7.py file: Running this and entering The Stand for a title immediately raises a SyntaxError , with an underlying EOFError : As discussed earlier, the problem here is how Python 2 interprets input from the, well, input() function. Rather than converting the input value to a string, it evaluates the input as actual Python code. Consequently, The Stand isn‚Äôt valid code, so the end of file is detected and an error is thrown. The resolution is to use the raw_input() function for Python 2 builds, as seen in raw_input_test_2.7.py : Executing this in Python 2.7 produces the following output: Everything works just fine and behaves exactly like the input() test running on Python 3.6. However, we also need to be careful that the input isn‚Äôt terminated prematurely, otherwise an EOFError will also be raised. To illustrate, let‚Äôs execute raw_input_test_2.7.py in Python 2.7 again, but this time we‚Äôll manually terminate the process ( Ctrl+D ) once the title prompt is shown: Unexpectedly terminating the input raises an EOFError , since the behavior from the Python interpreter‚Äôs perspective is identical to if it evaluated input and reached the end of the file. Similarly, let‚Äôs perform the same manual termination with input_test_3.6.py running on Python 3.6: It‚Äôs worth noting that the gw_utility helper module isn‚Äôt written for Python 2 versions, so we don‚Äôt see the fancier error output in the previous Python 2 example, but otherwise the behavior and result is identical in both Python 2 and Python 3. Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-12-27"},
{"website": "Airbrake", "title": "Python Exception Handling: ImportError and ModuleNotFoundError", "author": "Unknown", "link": "https://airbrake.io/blog/python/importerror-and-modulenotfounderror", "abstract": "Making our way through our detailed Python Exception Handling series we arrive at the ImportError , along with its single child subclass of ModuleNotFoundError . The ImportError is raised when an import statement has trouble successfully importing the specified module. Typically, such a problem is due to an invalid or incorrect path, which will raise a ModuleNotFoundError in Python 3.6 and newer versions. Within this article we‚Äôll explore the ImportError and ModuleNotFoundError in a bit more detail, beginning with where they sit in the overall Python Exception Class Hierarchy . We‚Äôll also take a look at some simple code samples that illustrate the differences in import statement failures across newer (3.6) and older (2.7) versions of Python, so let‚Äôs get started! All Python exceptions inherit from the BaseException class, or extend from an inherited class therein. The full exception hierarchy of this error is: BaseException Exception ImportError ModuleNotFoundError Exception ImportError ModuleNotFoundError ImportError ModuleNotFoundError ModuleNotFoundError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. The seemingly simple import statement found in Python is actually rather complex when looking under the hood. At the most basic level an import statement is used to perform two tasks. First, it attempts to find the module specified by name, then loads and initializes it, if necessary. It also automatically defines a name in the local namespace within the scope of the associated import statement. This local name can then be used to reference the the accessed module throughout the following scoped code. While the import statement is the most common technique used to gain access to code from other modules, Python also provides other methods and functions that makeup the built-in import system. Developers can opt to use specific functions to have more fine-grained control over the import process. For our code samples we‚Äôll stick to the common import statement that most of us are accustomed to. As mentioned in the introduction, behavior for failed imports differs depending on the Python version. To illustrate we start with the outer_import_2.7.py file: The outer prefix for the file name indicates that we‚Äôre testing an ‚Äúouter‚Äù or globally scoped import statement of gw_utility.Book . Executing this code produces the following output: The overall issue here is that the gw_utility.Book module doesn‚Äôt exist. In fact, the proper module is lowercase : gw_utility.book . Since the import statement is at the top of the file, it exists outside our try-except block, so the ImportError we get in the log is not caught ‚Äî execution was terminated entirely when the error was raised. Alternatively, let‚Äôs see what happens if we move the import statement inside a try-except block, as seen in inner_import_2.7.py : Running this code ‚Äî also using Python 2.7 ‚Äî produces the same ImportError , but we‚Äôre able to catch it and perform further processing of the caught ImportError , if necessary: The ModuleNotFoundError was added in Python 3.6 as a subclass of ImportError and an explicit indication of the same kind of errors we‚Äôre seeing above in the 2.7 code. For example, let‚Äôs look at the outer import example in Python 3.6 with outer_import_3.6.py : Once again, here we‚Äôre performing the import outside the try-except block, so running this code halts execution and produces the following output: The cause of this error is the exact same as the 2.7 version, but with 3.6+ the more specific ModuleNotFoundError is now raised. Additionally, we can actually catch such errors if the import is executed within a try-except context: This code allows us to output the Python version and process the error: We‚Äôre also outputting the name and path attributes of the ImportError object, which were added in Python 3.3 to indicate the name of the module that was attempted to be imported, along with the path to the file that triggered the exception, if applicable. In this case our code is rather simple so, unfortunately, neither attribute is particularly useful. Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices! Try Airbrake free with a 30-day free trial .", "date": "2018-01-05"},
{"website": "Airbrake", "title": "Python Exception Handling ‚Äì MemoryError", "author": "Unknown", "link": "https://airbrake.io/blog/python/memoryerror", "abstract": "Continuing along through our in-depth Python Exception Handling series, today we‚Äôll dig into Python‚Äôs MemoryError . As with all programming languages, Python includes a fallback exception for when the interpreter completely runs out of memory and must abort current execution. In these (hopefully rare) instances, Python raises a MemoryError , giving the script a chance to catch itself and break out of the current memory draught and recover. However, since Python uses the C language‚Äôs malloc() function for its memory management architecture, it is not guaranteed that all processes will be able to recover ‚Äî in some cases, a MemoryError will result in an unrecoverable crash. In today‚Äôs article we‚Äôll examine the MemoryError in more detail, starting with where it sits in the larger Python Exception Class Hierarchy . We‚Äôll also examine a simple code sample that illustrates how large memory allocations can occur, how the behavior of using massive objects differs depending on the particular computer architecture and Python version in use, and how MemoryErrors may be raised and handled. Let‚Äôs get into it! All Python exceptions inherit from the BaseException class, or extend from an inherited class therein. The full exception hierarchy of this error is: BaseException Exception MemoryError Exception MemoryError MemoryError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. In most situations, a MemoryError indicates a major flaw in the current application. For example, an application that accepts files or user data input could run into MemoryErrors if the application has insufficient sanity checks in place. There are tons of scenarios where memory limits can be problematic, but for our code illustration we‚Äôll just stick with a simple allocation in local memory using strings and arrays. The most important factor in whether your own applications are likely to experience MemoryErrors is actually the computer architecture the executing system is running on. Or, even more specifically, the architecture your version of Python is using. If you‚Äôre using a 32-bit Python then the maximum memory allocation given to the Python process is exceptionally low. The specific maximum memory allocation limit varies and depends on your system, but it‚Äôs usually around 2 GB and certainly no more than 4 GB. On the other hand, 64-bit Python versions are more or less limited only by your available system memory. In practical terms, a 64-bit Python interpreter is unlikely to experience memory issues, or if it does, the issue is a much bigger deal since it‚Äôs likely impacting the rest of the system anyway. To test this stuff out we‚Äôll be using the psutil to retrieve information about the active process, and specifically, the psutil.virtual_memory() method, which provides current memory usage stats when invoked. This information is printed within the print_memory_usage() function: We‚Äôll start by using the Python 3.6.4 32-bit version and appending MEGA_STR strings (which contain one million characters each) onto the end of an array until the process catches a MemoryError : After we run out of memory and break out of the loop we output the memory usage of the array, along with overall memory usage stats. The result of running this function is the following output: This shows our base memory usage at the top, and the array size we created at the bottom. As expected, after about 15 seconds of execution on my system we experienced a MemoryError . The alloc_max_str() function test creates a large string instead of an array, but we should see similar results: Sure enough, executing alloc_max_str() results in a raised MemoryError after a relatively short execution period: As mentioned, there is a huge difference between 32- and 64-bit versions of Python. If we swap to Python 3.6.4 64-bit and execute the same code no MemoryError has been thrown after 5+ minutes of iteration. As discussed, this is because 64-bit Python isn‚Äôt artificially limited, but can more or less use most of the available system memory! Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices! Try Airbrake free with a 30-day trial .", "date": "2018-01-24"},
{"website": "Airbrake", "title": "Python Exception Handling: AttributeError", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/attributeerror", "abstract": "Moving along through our in-depth Python Exception Handling series, today we‚Äôll dig into the AttributeError . The AttributeError in Python is raised when an invalid attribute reference is made, or when an attribute assignment fails. While most objects support attributes, those that do not will merely raise a TypeError when an attribute access attempt is made. Throughout this article we‚Äôll examine the AttributeError by looking at where it sits in the larger Python Exception Class Hierarchy . We‚Äôll also discover a bit about how attributes and attribute references work in Python, then look at some functional sample code illustrating how to handle built-in and custom attribute access, and how doing so can raise AttributeErrors in your own code. Let‚Äôs get started! All Python exceptions inherit from the BaseException class, or extend from an inherited class therein. The full exception hierarchy of this error is: BaseException Exception AttributeError Exception AttributeError AttributeError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As previously mentioned, the AttributeError is raised when attempting to access an invalid attribute of an object. The typically way to access an attribute is through an attribute reference syntax form, which is to separate the primary (the object instance) and the attribute identifier name with a period ( . ). For example, person.name would attempt to retrieve the name attribute of the person object. When evoking an attribute reference, under the hood Python expects to find the attribute that was directly accessed. If it fails to locate a matching attribute it will then call the __getattr__() method of the object, which performs a less efficient lookup of the instance attribute. If this also fails to find a matching attribute then an AttributeError is raised to indicate that an invalid attribute was accessed. To illustrate with a code example we start with a modified Book class: Notice that we‚Äôve explicitly overriden the __getattr__(self, name: str) method of the base object class. This allows us to perform any custom logic that might be necessary when an attribute is not immediately located. To test this our test() method creates a new Book instance, outputs some explicit attributes to the log to prove everything works, and then attempts to directly access an invalid attribute of book.publisher : Executing this code produces the following output: As you can see, everything worked fine until our attempt to acccess the book.publisher attribute, at which point the overridden Book.__getattr__() method was invoked, in which we raised an AttributeError with the custom error message seen above. However, there‚Äôs no reason to override the __getattr()__ method if custom logic isn‚Äôt required. To illustrate this we‚Äôll temporarily comment out our Book.__getattr__() method so the built-in __getattr__() method is invoked instead. Rerunning our code now produces the following output with a slightly different AttributeError message: Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices.", "date": "2017-12-06"},
{"website": "Airbrake", "title": "Python Exception Handling ‚Äì BufferError", "author": "Unknown", "link": "https://airbrake.io/blog/python/buffererror", "abstract": "Making our way through our detailed Python Exception Handling series, next up on the docket is the BufferError . The BufferError occurs when a problem arises while working with any sort of memory buffer within Python. Specifically, classes like memoryview and BytesIO tend to raise these error types when something goes wrong. In today‚Äôs article we‚Äôll explore the BufferError by examining where it resides in the overall Python Exception Class Hierarchy, and then we‚Äôll take a look at some sample code that illustrate how one might work with buffers and memory in Python, and how that might lead to raising BufferErrors under certain circumstances. Let‚Äôs get to it! All Python exceptions inherit from the BaseException class, or extend from an inherited class therein. The full exception hierarchy of this error is: BaseException Exception BufferError Exception BufferError BufferError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. In most cases, Python raises BufferErrors when attempting to make restricted modifications to an existing buffer. For example, if you create a bytes literal using the b prefix (e.g. b'hello' ), that collection of bytes is made up of a memory array (or buffer ). A handful of built-in objects are considered buffers, such as bytes , bytearray , and a few extension types like array.array . This type of data structure is used to house the binary data of an object in memory. Moreover, just as with any form of binary data, even the smallest change will fundamentally alter what the data represents. That is to say, a binary value of 10 could be changed to 11 , but this would alter the numeric value and change it from 2 to 3 . This is normally not a problem to change existing data during an application‚Äôs execution, but you need to be somewhat careful when altering buffers in Python. Since Python buffers are stored in memory, and all references to that buffer point to the same memory address where the binary data is located, you may run into situations where multiple objects are referencing the same buffer, and an attempt to modify the buffer (that is, change the underlying binary data) can result in a BufferError . To illustrate this let‚Äôs take a look at our simple sample code. We‚Äôll start with the log_view helper function, which expects a memoryview object to be passed to it, and it outputs some information about this memoryview object, so we can verify the data: The core of our test takes place in the buffer_test() function, which creates a new io.BytesIO bytearray object with the bytes of string 'Hello' as the value. It then retrieves a read-write copy of the data in the form of a memoryview instance called view , which is then passed to the log_view(view: memoryview) function, to confirm that the original bytes copy was created. Finally, we attempt to modify the original bytearray by calling the write() method and adding the byte string ' world!' to it: Executing the buffer_test() function produces the following output: We can confirm that the memoryview read-write copy of the original b'Hello' string was created and matches, but we can see that trying to write additional bytes to the existing bytearray raises a BufferError , indicating that the object cannot be re-sized. This occurs because we created a memoryview copy. As previously mentioned, Python doesn‚Äôt actually create a new in-memory copy of the binary data, and instead, merely points both the array and view pointers to the same in-memory buffer . Therefore, while array and view are the same at first, attempting to modify the underlying binary of data of array by adding b' world!' onto it would also have to alter the size of the buffer used by view , which is not allowed. Hence, a BufferError must be raised. Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-12-13"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì UnexpectedValueException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/unexpectedvalueexception-2", "abstract": "Traversing the depths of our detailed PHP Exception Handling series, today we‚Äôll dive into the UnexpectedValueException . Not to be confused with the InvalidArgumentException that we covered in a previous article , the UnexpectedValueException is typically thrown when a value is not within an expected set of values. For example, if a function is returning a date value, but the runtime execution of this function produces a malformed date, you may opt to throw an UnexpectedValueException , so further execution using this value isn‚Äôt corrupted by it. In this article we‚Äôll examine the UnexpectedValueException by first looking at where it resides in the overall PHP Exception Hierarchy. We‚Äôll also look through some fully-functional sample code that illustrates how you might use UnexpectedValueExceptions in your own code, along with how this exception subtly differs from the InvalidArgumentException , so let‚Äôs get exploring! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: Throwable Exception RuntimeException UnexpectedValueException Exception RuntimeException UnexpectedValueException RuntimeException UnexpectedValueException UnexpectedValueException Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. As mentioned in the introduction, there is a bit of debate and uncertainty about the difference between the InvalidArgumentException and the UnexpectedValueException . Specifically, in what scenarios should one exception type be used over the other? To attempt to answer this we‚Äôll start with the InvalidArgumentException which we‚Äôve previously explored . The key to knowing when to use this exception type is in the name ‚Äî in particular, the Argument keyword. In most situations, the InvalidArgumentException should be used when an argument is passed that is considered improper for one reason or another. For example, the following Book::setPublisher(Publisher $publisher) method confirms that the passed argument is of the proper class/type, and if not, it throws an InvalidArgumentException indicating as much: Since InvalidArgumentException is a child class of LogicException , another way to think of this exception type is that its validity should be checked by the logic of the code itself. This is why it makes sense to perform the above type check, since we can confidently state that any passed argument that is not a Publisher class instance is invalid and won‚Äôt work with our code. On the other hand, the UnexpectedValueException is a child class of RuntimeException , indicating that it should be used in response to something that can only be known at runtime. This might be checking the actual data of an argument, or often, it is used when the return value of a function is improper or unexpected in some way. To illustrate, consider this modified version of our Book class: Specifically, we‚Äôve added some additional logic to the setPageCount(int $pageCount) method. While we explicitly confirm that the passed argument is an integer (throwing an InvalidArgumentException if not), we also perform a check on the validity of the data itself by confirming it falls without the bounds set by MAX_PAGE_COUNT . If the page count exceeds this maximum, we throw a new UnexpectedValueException , since this is an ‚Äúunexpected value‚Äù that we‚Äôre seeing at runtime. We can test this out and see the difference between these two exceptions at runtime with a few example functions. We‚Äôll start with createValidBook() for a functional baseline: This creates a Book instance, as expected, and outputs it to the log: Now, let‚Äôs try creating another Book with an excessive page count argument: Sure enough, this throws an UnexpectedValueException , indicating that the page count is invalid: Finally, some people argue that UnexpectedValueExceptions should only be thrown within functions that call other functions within their code block, which could result in unexpected values from other called functions. Let‚Äôs see how we might create such a function with getInvalidBook() : Running this function produces the following output: As you can see here, our Book class itself considers this instance valid given all the arguments passed. However, notice that we‚Äôve accidentally passed a negative page count argument of -848 . Since the Book class doesn‚Äôt currently have any checks for a negative value (which it obviously should, but this is just for illustration), our getInvalidBook() function checks the created $book instance for validity, and if it finds that the $book->getPageCount() method returns a negative number, it throws an UnexpectedValueException . Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Try Airbrake with a free 30-day trial.", "date": "2017-10-16"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì ReflectionException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/reflectionexception", "abstract": "Moving along through the encompassing PHP Exception Handling series we‚Äôve been creating, today we‚Äôll be taking a look at the PHP ReflectionException. A ReflectionException occurs when there‚Äôs an error while performing any sort of reflection; specifically when dealing with the Reflector , or with other classes that inherit from it. In this article we‚Äôll explore the ReflectionException by looking at where it sits in the overall PHP Exception Hierarchy. We‚Äôll also examine some functional PHP code samples that illustrate how such errors might be thrown, so you can see how they should be handled. Let‚Äôs get going! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: Throwable Exception ReflectionException Exception ReflectionException ReflectionException Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. In programming, reflection is the means by which existing classes and objects can be ‚Äúreverse-engineered‚Äù, allowing runtime investigations and use of classes, functions, methods, and so forth, without any prior knowledge of how those objects work or are coded. We won‚Äôt go into much more depth on what reflection is or how it works in this article, but have a look here if you‚Äôre interested in learning more. Since PHP 5, most reflection takes place within the ReflectionClass , so that‚Äôs what we‚Äôll be using today. To illustrate how it works, and how we might also run into a ReflectionException , we start with our basic Book class: To test things out, we start by making a direct, explicit call to the Book constructor, and output the resulting instance to the log: Unsurprisingly, this works just as expected: Now, let‚Äôs try creating an instance of ReflectionClass , in which we pass the string name of the class we want to reflect, Book : If we get a result back and don‚Äôt produce an error, we‚Äôre in business. Sure enough, that‚Äôs exactly what our output shows: With the $reflection variable holding our ReflectionClass instance of the Book class, we can now call some of its built-in methods, just to illustrate the basic functionality and power of the ReflectionClass . Here we‚Äôre getting a list of all the constants and methods within the reflected Book class: And here‚Äôs the produced output: Finally, we can even use our ReflectionClass instance to create a new instance of the reflected Book class by calling the newInstance() method: The output should be of a Book instance, just like at the top when we explicitly invoked new Book(...) : That‚Äôs pretty cool, but let‚Äôs now see what happens if we try to use ReflectionClass improperly. For example, here we‚Äôre trying to construct a new instance while passing the name of an invalid class: Lo and behold, ReflectionClass cannot find a class named Invalid , so it throws a ReflectionException our way as a result: This is just a small taste of what the ExceptionReflection class can do, but hopefully it gives you a jumping-off point to use it in your own projects!. Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Try Airbrake with a free 30-day trial.", "date": "2017-09-10"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì UnderflowException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/underflowexception", "abstract": "Making our way through our in-depth PHP Exception Handling series, today we‚Äôll be going over the UnderflowException . If you‚Äôre familiar with computer-based arithmetic rules, you‚Äôll likely be able to deduce that the UnderflowException is intended when performing arithmetic using decimal numbers that result in an inaccurate value, because the PHP engine cannot represent the proper scale of the actual, absolute value. In this article we‚Äôll explore the UnderflowException in more detail, starting with where it sits in the larger PHP Exception Hierarchy. We‚Äôll also examine a fully functional PHP code sample illustrating the basic process of determining how accurate your own PHP installation is when it comes to decimal scale , and how to use that information to throw UnderflowExceptions where appropriate. Let‚Äôs get started! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: Throwable Exception RuntimeException UnderflowException Exception RuntimeException UnderflowException RuntimeException UnderflowException UnderflowException Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. As mentioned in the introduction, arithmetic underflow indicates that the result of a calculation is a smaller absolute value than the system can accurately store. This can be for a variety of reasons, but typically underflow occurs when performing operations with large decimal numbers. The precision of such a number indicates the total number of digits (i.e. length ), while the scale indicates the number of digits following the decimal point. For example, 24.601 has a precision of 5 and a scale of 3 . Most programming languages, operating systems, CPUs, and so forth have a maximum amount of memory that can be devoted to storing a single value. Thus, there must be a limit to the total accuracy ( precision and/or scale ) that can be stored for a decimal. When the calculating engine cannot hold a decimal value that exceeds those limits, that number is typically converted to a floating point value. This conversion is where problems can arise, which may lead to UnderflowExceptions in the case of PHP. As we‚Äôll see in the example code in just a moment, PHP can only represent decimal values with a relatively small scale limit, and once that scale value is exceeded (i.e. the absolute value is too infinitesimal), PHP represents the value with a slightly inaccurate floating point representation. These imprecise numeric values are usually insignificant, but in the case of strict application domains, such as banking or security, it can be critical that there is no chance for data loss or inaccuracy when handling particularly big or small numbers. To illustrate these situations we start with the isScaleAccurate($scale, $debugOutput = false) function: This function creates a string in the form of 0.999...n with a total scale equal to the passed $scale parameter, then converts that value to a float . By subtracting that value from 1 , an accurate $result would be a decimal in the form of 0.000...1 . However, PHP cannot handle decimals with very large scales , so if the $result is converted to a float it will be in the form of 9.999...8E-n . No matter the actual floating point value, such conversion always indicates a slight loss in accuracy compared to the aforementioned decimal form. Therefore, we can check the form of the $result to see if there is accuracy loss or not, given the passed $scale parameter. We make use of the isScaleAccurate($scale, $debugOutput = false) function inside getScaleAccuracy($debugOutput = false) : This function retrieves the highest scale value that remains accurate within the current PHP engine. With this maximum scale value in hand, we can use it to properly throw an UnderflowException throughout our custom code, wherever appropriate. For example, here we have the addNumbers($a, $b) function, that adds two numbers: It‚Äôs critical that our addNumbers($a, $b) function only produces the precisely accurate results. Thus, we use the getScale($number) helper function, along with getScaleAccuracy() , to determine if the two passed $a and $b parameters contain a scale value that exceeds the maximum scale accuracy our current PHP engine can handle. If so, we throw a new UnderflowException indicating as much, otherwise we perform the calculation and output the result to the log. To test this out we start by calling getScaleAccuracy($debugOutput = false) to display the scale accuracy output of the current PHP engine: As we can see from the output, my current PHP maxes out at a scale value of 3 , after which it produces inaccurate floating point values. Thus, we‚Äôll test the addNumbers($a, $b) function by passing in a series of increasingly-precise decimals: Executing the above tests produces the following output: As expected, we‚Äôre able to perform totally accurate calculations up until we exceed a scale maximum of 3 . Trying to use values with scale of 4+ produces an UnderflowException , indicating the issue to the user. Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Try Airbrake free with a 30-day trial.", "date": "2017-10-09"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì RangeException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/rangeexception", "abstract": "Moving along through our detailed PHP Exception Handling series, today we‚Äôll be going over the RangeException . The RangeException is similar to the DomainException , which we covered previously . In essence, the DomainException is used when input values (such as method arguments) are invalid and don‚Äôt fit the context or domain of the current code. On the other hand, RangeExceptions are ideal when output values are invalid, or otherwise don‚Äôt make sense. In this article we‚Äôll examine the RangeException by first looking at where it resides in the overall PHP Exception Hierarchy. We‚Äôll then take a look at some functional code samples that illustrate the difference between DomainExceptions and RangeExceptions , and show how RangeExceptions should be used in your own code, so let‚Äôs get to it! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: Throwable Exception RuntimeException RangeException Exception RuntimeException RangeException RuntimeException RangeException RangeException Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. As we saw in our previous PHP Exception Handling ‚Äì DomainException article, we integrated the DomainException into the input of a value called PublicationType for our Publication class. Specifically, when the setPublicationType(string $publicationType = null) method is called, if the $publicationType parameter isn‚Äôt a valid value, a new DomainException is thrown to indicate to the client that something needs to be changed. To explore the RangeException , we‚Äôve extended this example a bit by continuing with the Publication class, which extends the Book class: In addition to the data checking within setPublicationType(string $publicationType = null) , we now have data validation going on in the getPublicationType() method. Here, we ensure that the current value of the publicationType property is found within the Publication::PublicationTypes array and, if not, a new RangeException is thrown. As discussed in the introduction, this distinction between an input and an output value is what differentiates the use of DomainException from RangeException . In this case, we‚Äôre ensuring that the publicationType property value is valid before outputting it as a result of the getPublicationType() method. To test this and show how RangeExceptions differ from DomainExceptions in practice, we have three test methods, starting with setValidPublicationDate() : Invoking this method works as expected, since the digital publicationType value is valid. The new Publication is created and output to the log: Next we have the setInvalidPublicationType() method, which passes an invalid publicationType of poem to the setPublicationType(string $publicationType = null) method within the Publication class constructor: As we saw earlier, since this invalid publicationType is an input value, we should expect a DomainException to be thrown, which is confirmed by the output we see: Finally, let‚Äôs invoke the assignPublicationType() method, which initially sets a valid publicationType of novel , but then directly modifies the publicationType property to a value of epic , before trying to retrieve this now-invalid value via getPublicationType() : It‚Äôs worth noting that this specific example is somewhat contrived, because normally we‚Äôd have other defenses setup to combat direct modification of the publicationType property. For example, it would be set to private visibility (instead of its current public setting), which would normally force client code to use the setPublicationType(string $publicationType = null) method to make changes. At any rate, directly changing the publicationType property and then trying to retrieve it throws a RangeException , as expected, indicating that that the output value we‚Äôre trying to retrieve is invalid: Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Try Airbrake free with a 30-day trial.", "date": "2017-10-02"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì TypeError", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/php-typeerror", "abstract": "Next up in our in-depth PHP Exception Handling series we‚Äôre taking a closer look at the PHP TypeError. TypeErrors are thrown in a few different scenarios where the PHP engine expects a particular object type , but a different type is provided instead. In this article we‚Äôll explore the TypeError in more detail, looking at where it sits within the PHP Exception Hierarchy, and then examining some functional code samples that illustrate the three different scenarios in which TypeErrors can be thrown. Let‚Äôs get going! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Error implements the Throwable interface. TypeError extends the Error class. As previously mentioned, TypeError can be thrown in three different situations: When a method declares an explicit argument type, but a different (incompatible) argument type is passed instead. When a method declares an explicit return type, but a different typed is returned instead. When an invalid number of arguments are passed to a built-in PHP function, while the declare() function of the executed file sets the strict_type declaration to true . We‚Äôll explore all three of these scenarios in our sample code, so we‚Äôll start with the full working example below, then explore it in more detail to follow: We begin with some simple classes, Book and Publisher , which both include a number of relevant properties like Publisher->name and Book->title . Most importantly, the getter and setter methods for these properties explicitly declare argument and return types, which is important for our use later on (and is generally a smart practice, anyway): Our first function is testing what happens when we pass an invalid argument type to the Book->setPublisher(Publisher $publisher) method. Instead of passing an actual Publisher class instance object as the argument we‚Äôre passing a plain string to attempt to fix the publisher name to the proper one: Since Book->setPublisher(Publisher $publisher) doesn‚Äôt expect a string argument, a TypeError is thrown in the output: The obvious solution is to create a new Publisher instance and then pass it to the Book->setPublisher(Publisher $publisher) method: The next scenario we might experience a TypeError is when a method‚Äôs return type is explicitly declared, but the method attempts to return a different type. In this second incorrectReturnTypeExample() function we‚Äôve created a different book instance, and then make an explicit call to the $book->getPublisher() method. The return value of that call is passed to Logging::Log(string $value) , which attempts to output a string value it receives: Unfortunately, the Book->getPublisher() method has a minor issue ‚Äî rather than returning the local Publisher object ( $this->publisher ), it instead returns a string value by returning the publisher‚Äôs name: As a result of this incompatibility, executing the incorrectReturnTypeExample() function results in another TypeError , indicating the issue: The solution here is to fix the Book->getPublisher() return type to its intended type, which is just $this->publisher : The last scenario we could potentially experience a TypeError can only occur if our script has a declare() function statement that sets the strict_types declaration value to 1 ( true ). This is necessary because, by default, PHP attempts to convert certain value types into other, compatible types wherever applicable. For example, passing an integer value of 123 to a testMethod(string $value) method, which expects a string value as an argument, causes the integer to be automatically converted to a string ( \"123\" ). However, in some situations it may be useful to disallow this behavior in PHP, so attempting to automatically convert differing value types may result in an error. As with any declare() statements, this must occur at the beginning of the file: The incorrectArgumentCountExample() method declares an array with a few values, then passes it (along with two other arguments) to the built-in implode method, which only expects a maximum of two total arguments: Since strict_types is enabled, passing an extra number of arguments to implode() results in a thrown TypeError : Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Try Airbrake free with a 30-day trial.", "date": "2017-07-23"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì ParseError", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/php-parseerror", "abstract": "Next up in our in-depth PHP Exception Handling series we‚Äôre taking a closer look at the PHP ParseError. As you might suspect, a ParseError is thrown when PHP has trouble parsing a line of code. This could either be due to a typo or syntax error, or even while using the terrifying eval() function. We‚Äôll begin by looking at where the ParseError resides in the PHP Exception Hierarchy, then we‚Äôll explore some basic code samples that illustrate how ParseErrors might occur, so let‚Äôs get going! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Error implements the Throwable interface. ParseError extends the Error class. At the most basic level, a ParseError can be thrown anytime code that is not syntactically correct is executed. This can occur in a variety of ways, but the most obvious is a typo. For example, perhaps you have two variables, $a and $b , and you want to assign the value of one to the other, so you‚Äôd write a statement like: Super basic and common, but what happens if we accidentally forget the $ symbol for one of those variables? Boom! Already we‚Äôre getting a ParseError because PHP doesn‚Äôt recognize a without a signifier (like $ ), or some indication that it‚Äôs another type of object (like a function): Minor typos are all well and good, but the biggest potential for ParseError troubles is when using the eval() function. While many developers would suggest eval() be ignored and left by the wayside, the basic purpose of eval() is to evaluate and execute the passed string argument as PHP code. Any string passed into eval() will be executed as if it was normal PHP code. This has the power to be beneficial in some outlier cases, but, for the most part, using eval() is considered extremely dangerous. At the very least, it should never be used in combination with user-provided data, since that would open an avenue of attack similar to an SQL injection attack, except with direct access to your application‚Äôs codebase. Yikes! Heh, of course, now that we‚Äôve said all that, we‚Äôll continue this ParseError examination with a bunch of eval() examples! (Do as I say, not as I do, yadda yadda yadda‚Ä¶) While all the following code is taken from (and found in) the provided code snippet, it‚Äôs always wise to understand any code that‚Äôs acquired elsewhere before executing it on your own system, particularly if it‚Äôs using dangerous capabilities like the eval() function. Therefore, while this code is completely safe, if you don‚Äôt understand something about it then it‚Äôs best to avoid running it. Here‚Äôs the full, working example code we‚Äôll be using for the rest of this article. We‚Äôll break it down a bit more afterward: To do something a little more interesting then just assigning the value of variable $b to variable $a , we‚Äôve included a simple Book class to create book objects: Now, before we get into using the frightening eval() function we‚Äôll start with a normal code example. In this function we‚Äôre creating a new Book object and passing some initial property values as arguments, then outputting the content of the $book object variable to the log. Finally, we modify the properties of our object and output again to confirm the changes have taken place: As expected, we see both outputs for our original and modified property set work just fine: Before we get into the code that makes use of eval() we should briefly discuss the special syntax we‚Äôll be using to define the larger-than-normal strings that we‚Äôll be passing to eval() . This syntax is called heredoc or nowdoc , depending on a slight variation. Both heredoc and nowdoc define strings with three less-than symbols ( &lt;&lt;&lt; ). This operator is then followed by an identifier , then a new line, including however many lines of strings you wish to add, followed, at last, by another new line with a matching identifier symbol and a closing semi-colon ( ; ). For example, the following is a heredoc declaration of a single line of text, using the identifier of IDENT : The identifier can be any set of alphanumeric characters that you desire, though many examples online will use EOF or EOD . It is also required that the closing identifier tag appear without indentation on the final line. Adding indentation beforehand causes the parser to think it‚Äôs a continuation of the actual string content. nowdoc syntax is slightly different than heredoc (seen above), in that nowdoc requires the initial identifier to be surrounded by single-quotations: &lt;&lt;&lt;'IDENT' . The difference between heredoc and nowdoc is that heredoc will parse the string value for potential evaluation points , whereas nowdoc will ignore all potential evaluations. To illustrate, consider this example, where we‚Äôve declared the $name variable and are using it inline with both a heredoc and a nowdoc string declaration: And here‚Äôs the output of both print_r() calls: As we can see, since heredoc evaluates any inner variables and the like before the string is generated, the parser converts $name to John Doe prior to output. On the other hand, nowdoc treats the entire string as a literal, thereby avoiding evaluation of $name . Alright, now that we‚Äôre covered our string declaration method we can get back to the code example. In the evaluationTest() function we‚Äôre executing nearly identical code as we did above, except we‚Äôre using different books. Most importantly, we‚Äôre writing everything out as a string value, which we assign to the local $code variable and pass to the evaluateCode() function. evaluateCode() passes its $code string parameter to the eval() function, while attempting to catch any potential errors that might be thrown. We‚Äôre also using nowdoc instead of heredoc to declare our string, because this forces the PHP parser to ignore any potential statements it might otherwise evaluate, so everything is treated as a literal string, which is a requirement if we want eval() to read our code as expected: Executing the above passes our string to eval() , which then evaluates it as if it were normally written code. The result is a nearly-identical output as before, but with the appropriate book info changes: That‚Äôs all well and good, and in a perfect world, we could use eval() all day without running into any trouble. However, it‚Äôs all too easy to pass a slightly incorrect string to eval() and cause the whole thing to break down (or worse). To illustrate, here we have the invalidEvaluationTest() function: It may be difficult to spot, but there‚Äôs a small (yet, significant) typo in our declared code string that we want to pass to evaluateCode() : The initial quotation mark surrounding \"The Two Towers\" title is missing. As a result, executing this function throws a ParseError at us: Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Try Airbrake free with a 30-day trial.", "date": "2017-07-19"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì PDOException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/pdoexception", "abstract": "Moving along through our in-depth PHP Exception Handling series, today we‚Äôll be going over the PDOException . PHP Data Objects (or PDO ) are a collection of APIs and interfaces that attempt to streamline and consolidate the various ways databases can be accessed and manipulated into a singular package. Thus, the PDOException is thrown anytime something goes wrong while using the PDO class, or related extensions. In this article, we‚Äôll examine the PDOException by first looking at where it resides in the overall PHP Exception Hierarchy, then we‚Äôll take a closer look at some fully functional code that will illustrate the basics of using PDO for database manipulation, and how that might lead to PDOExceptions , so let‚Äôs get to it! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: Throwable Exception RuntimeException PDOException Exception RuntimeException PDOException RuntimeException PDOException PDOException Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. As stated by the official documentation , the PDOException should never be directly thrown by your own code. Instead, it is thrown by the various PDO extensions whenever an error occurs while handling a database connection or query. To understand what this means, let‚Äôs first take a look at how PDO works, and why it might be better than ‚Äútraditional‚Äù database handling in PHP. At the most basic level, PDO is merely an abstraction layer between your PHP code and the underlying database your code is accessing. The beauty of this abstraction is that your code can be written, for the most part, in a database-independent manner. Connecting to a database, performing a query, retrieving the results, and other common tasks are all performed identically ‚Äî using the same objects and methods ‚Äî within PDO . Thus, if your application needs to transition from, say, MySQL to PostgreSQL, only a few minor adjustments will need to be made to keep most data-access code functional. Another big advantage to PDO is its built-in support for data binding techniques. Data binding effectively allows your application code to automatically synchronize local data to its database source objects, and vice versa. When a change is made client-side, such as a user altering a value, a data binding can automatically update that matching value in the database, with (relatively) little effort on the part of the developer to make this happen. There are many other advantages of PDO , but, for now, let‚Äôs jump into the example code to see how it works. For this setup we‚Äôre running MySQL 5.7 with the sakila sample database for testing purposes. Our basic goal is to use the PDO_MYSQL driver to allow us to connect to a MySQL database via PDO , just as we would with any of the other PDO-supported database types. To simplify the process of establishing a PDO connection and execute some queries, we‚Äôve created a basic Connector helper class: The constructor accepts most of the connection-based parameters and creates a new PDO instance, which automatically attempts to connect to the specified data source. executeQuery(string $query) prepares and then executes the passed $query string, while fetchResults(int $returnType = PDO::FETCH_OBJ) attempts to fetch the results of the previously provided statement , if applicable. It‚Äôs worth noting that the fetch($fetch_style, ...) method‚Äôs first parameter determines how the retrieved data is formatted before being returned. There are tons of different options here, but we‚Äôve opted for the FETCH_OBJ mode as default, which returns an anonymous class containing a field for each column and value. However, this is where data binding can be easily implemented. For example, PDO::FETCH_CLASS can be used to automatically create a new instance of a specified PHP class, mapping the retrieved values to their respective properties within the class definition. Pretty handy! Anyway, we don‚Äôt need anything that fancy right now, so let‚Äôs test out our Connector class by trying to fetch a handful of actors from the sakila sample database: Everything looks good, so executing the outputActors() function works as intended, outputting the first alphabetical actors in the table: However, let‚Äôs see what happens if we try a connection with an invalid password: Unsurprisingly, this throws a new PDOException , indicating that database access was denied: Similarly, here we have a small typo in the name of our database, so let‚Äôs see what happens when we try to connect to the askila database to collect some city info: Once again, a PDOException is thrown that indicates the particular problem: Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Try Airbrake with a free 30-day trial.", "date": "2017-09-27"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì PharException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/pharexception", "abstract": "Making our way through our detailed PHP Exception Handling series, today we‚Äôll explore the PharException. Phar is shorthand for PHP Archive . A phar file is a convenient way to compress and store an entire PHP application in a single executable file. This functionality is similar to JAR files found within the Java ecosystem. Throughout this article we‚Äôll examine what a PharException might be used for, starting with a brief look at where it sits in the PHP Exception Hierarchy. We‚Äôll also dig into how phars are created and executed, so we can show how PharExceptions are most commonly thrown. Let‚Äôs get going! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: Throwable Exception PharException Exception PharException PharException Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. Before we can understand what might cause a PharException , we should briefly go over how a phar is created and how it can be executed. To create a phar file we just need to use the Phar class. To start, here we have the createInvalidPhar.php script: As you can deduce by the file name, this configuration isn‚Äôt quite right to create a valid phar file. As it happens, if we execute the above script we get a PharException , indicating we‚Äôve attempted to create an invalid stub for our phar file: As it happens, a phar archive must be made up of at least three components: A manifest describing the archive contents. The file contents. A simple PHP file called the stub . The stub can contain just about any code, but, at minimum , it must at least contain an opening PHP tag and the __HALT_COMPILER(); token: In the createInvalidPhar.php script above, you‚Äôll notice the call to setStub(\"\") attempts to create an empty stub , which is invalid, hence the PharException . Let‚Äôs fix this issue in the createMinimalPhar.php script: Now that we have the minimal stub contents included, executing this script works fine and a new minimal.phar file is created within the project directory. However, what happens if we try to execute it? Nothing. While the minimal.phar file contains all the contents of our project directory, it doesn‚Äôt have any instruction on what file to run when executed. Let‚Äôs add a bit more now in the createBasicPhar.php script: Here we‚Äôve added a couple more lines to allow the produced phar to be executable. Calling createDefaultStub($indexfile = null) allows us to specify the index (or default) file that will be executed when executing this phar . We also need to make sure it can be executed via the php command from the terminal, so we prefix the stub contents with \"#!/usr/bin/env php \\n\" . Everything else is the same as before, so now let‚Äôs try executing the basic.phar file that was just created: The code.php file just creates a few Book objects and outputs them to the log, so that‚Äôs what is expected and exactly what we see above. This confirms that we were able to specify the code.php file should be the default file called when our basic.phar file is executed. Finally, let‚Äôs take a look at the createAdvancedPhar.php script: Here we‚Äôre illustrating that, rather than creating a stub via the createDefaultStub() function, we can manually create our own stub file, which we‚Äôve added to stub.php in our project directory. I won‚Äôt include the full contents of this file here (scroll up to the full source to see it), but here‚Äôs a snippet: This is basically just the default stub code, placed into the stub.php file. However, the ability to manually create your own stubs opens up a lot of avenues for customizing phar creation. As before, running createAdvancedPhar.php creates a new advanced.phar file, which we can execute as before to produce the same Book collection output we saw from the basic.phar file. Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Try Airbrake free with a 30-day trial.", "date": "2017-09-04"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì OverflowException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/overflowexception", "abstract": "Moving along through our in-depth PHP Exception Handling series, today we‚Äôll take a closer look at the OverflowException . Unlike most other languages, in PHP the OverflowException is not explicitly related to attempts to use memory space/addresses that are outside the bounds of the memory assigned to the application. Instead, the OverflowException in PHP is focused around a simple concept: Adding an element to a collection that is already full. Throughout this article we‚Äôll explore the OverflowException by looking at where it resides in the larger PHP Exception Hierarchy. We‚Äôll also look at some fully functional sample code that will illustrate how OverflowExceptions might be used in your own PHP projects, so let‚Äôs get to it! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: Throwable Exception RuntimeException OverflowException Exception RuntimeException OverflowException RuntimeException OverflowException OverflowException Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. As previously discussed, the purpose of the OverflowException ‚Äî at least, as it pertains to PHP ‚Äî is to alert the user or application that an element was added to a collection or container that doesn‚Äôt have space for that extra item. This could result in a memory overflow, which is the traditional meaning of \"overflow\" in most languages, but PHP has much broader limitations on what the OverflowException can indicate. To illustrate, we start with the trusty Book class that we‚Äôve been using in previous code samples. Take particular notice of the const MAX_CHARACTER_COUNT = 5; statement, which indicates a limit on the allowable number of characters that can be added to a Book instance. Obviously, no such limitation can (or should) exist in reality, but for our example, this will serve nicely. Now, the addCharacter(Character $character, $key = null) method does just what the name suggests by adding the passed Character parameter to the characters field. However, we want to limit the total allowed characters to five or fewer, so our code checks if the current maximum is reached or exceeded, in which case it throws a new OverflowException , which is the official purpose of this PHP exception: You can probably guess where this is going. To test this out, we‚Äôve created a new Book instance for The Name of the Wind (one of my personal all time favorites), then created a series of common Characters found throughout the book: Having done that, we output the $book instance value to the log, to confirm all five initial characters were added: Just as intended, all Characters were added to the $book object. However, let‚Äôs see what happens if we try to add Wilem , the sixth Character to the collection: Unsurprisingly, this produces the OverflowException we intended, indicating that the number of characters cannot exceed our maximum setting of 5 : Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Try Airbrake free with a 30 day trial .", "date": "2017-09-20"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì OutOfRangeException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/outofrangeexception", "abstract": "Travelling along through the deep undergrowth, in the PHP Exception Handling forest we‚Äôve created, today we come to the lush meadow that is the OutOfRangeException. In spite of what you might suspect based on the name, the OutOfRangeException is not thrown when attempting to access an index outside the bounds of an array or other collection object. Instead, an OutOfRangeException is meant to be used for compile time issues, such as trying to access an object that doesn‚Äôt make logical sense in the context. In this article we‚Äôll dig into the OutOfRangeException a bit more, including where it resides in the overall PHP Exception Hierarchy. We‚Äôll also look at some sample code that illustrates just one example of illogical ‚Äúcompile time‚Äù code that should cause a OutOfRangeException in the first place, so let‚Äôs get going! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: Throwable Exception LogicException OutOfRangeException Exception LogicException OutOfRangeException LogicException OutOfRangeException OutOfRangeException Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. As briefly discussed in the introduction, the official documentation states that the OutOfRangeException ‚Äúrepresents errors that should be detected at compile time.‚Äù This presents challenges for many PHP developers, because PHP is an interpreted language (as opposed to a traditional compiled language ). That‚Äôs not to say that PHP code doesn‚Äôt get ‚Äúcompiled‚Äù at some point prior to execution ‚Äî the source code is translated from the written form into opcodes that can be interpreted and executed by the PHP program. However, for the sake of debugging and detecting errors ‚Äúat compile time,‚Äù as the official documentation claims, that‚Äôs not something that can be easily accomplished. Therefore, the interpretation of the OutOfRangeException we‚Äôll be using in our code sample is that such errors should be thrown when indicating a logical fallacy in the code. For example, here we have our trusty little Book class we‚Äôve seen in previous articles: For the purpose of this exception tutorial we‚Äôve added two new fields, publicationMonth and publicationYear , both of which are integer values. Normally we‚Äôd probably use a single publicationDate or publishedAt field that was a DateTime object or similar but, again, for the sake of this example, we‚Äôre using numeric values for our date. Anyway, since we know that there are only twelve months in a year, it would be a illogical to allow a publicationMonth value that is outside the bounds of 1 through 12 . Thus, we‚Äôve added a bit of extra code to the setPublicationMonth(int $month) function to check that the passed parameter is within those bounds. If not, an OutOfRangeException is thrown: To test this out we‚Äôve created a few Books from a couple of cool trilogy series by author Robin Hobb, each with their associated publication month and years: As expected, executing this code produces the output we‚Äôre after: Uh oh! Everything was working fine until we got the last Book creation of Ship of Destiny . As the OutOfRangeException message indicates, the value we passed of 18 is outside the allowed bounds. This was probably a typo, since the actual publication month was August (or 8 ), instead. Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Try Airbrake free with a 30 day trial .", "date": "2017-08-30"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì OutOfBoundsException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/outofboundsexception", "abstract": "Making our way through our detailed PHP Exception Handling series, today we come to the OutOfBoundsException . The OutOfBoundsException is not to be confused with the OutOfRangeException , which we covered a few weeks ago in our PHP Exception Handling - OutOfRangeException article. While OutOfRangeException is meant to be used at compile time , the OutOfBoundsException inherits directly from the RuntimeException and, thus, it is used for key-based errors that occur during runtime . We‚Äôll start this article by looking at where the OutOfBoundsException fits into the larger PHP Exception Hierarchy. Then, we‚Äôll explore some functional code samples that illustrate how the OutOfBoundsException is typically thrown, or is simply meant to be used, so let‚Äôs get going! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: Throwable Exception RuntimeException OutOfBoundsException Exception RuntimeException OutOfBoundsException RuntimeException OutOfBoundsException OutOfBoundsException Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. The official documentation states that the OutOfBoundsException ‚Äúrepresents errors that cannot be detected at compile time.‚Äù In effect, this means it is ideal for errors that are not caused by a logical issue, but instead are due to invalid data that appears during runtime. For example, a database that retrieves a value that is used elsewhere in the code could produce an OutOfBoundsException , since that particular value may be invalid or ‚Äúoutside of the bounds‚Äù of what is allowed. To illustrate this principle, we‚Äôre expanding a bit on our trusty Book class by adding a characters property, which holds a series of Character class instances that represent some of the primary characters within the Book . For our example, we‚Äôll be creating and retrieving Characters directly in the code, but this data could just as easily come from a third-party, such as a database or service API. Regardless, we can use this example to illustrate how, in some situations, we need to plan for attempts to access data that doesn‚Äôt exist in a data set, and to respond at runtime with an appropriate OutOfBoundsException . We begin with the new Character class: Nothing fancy going on here. We just need to track the Character's name and (optional) biography . Now we need a way to add Characters to a Book instance. We accomplish this by adding four new methods to the Book class: The addCharacter(Character $character, $key = null) method adds a new Character , either to the end of the array or to the specified $key . getCharacter($key) retrieves the Character element at the specified $key . However, we don‚Äôt know at compile time whether the passed $key will be valid or not, so we need to check if it exists in the characters collection property. If not, we throw a new OutOfBoundsException informing the user of the issue. Finally, getCharacters() and setCharacters(array $characters) are the standard property getter and setter methods. Now, let‚Äôs test this out to make sure everything works as expected. The executeExamples() method contains all our test code, including the try-catch block to handle any expected OutOfBoundsExceptions : We start by creating a new Book representing A Game of Thrones . Next, we create a trio of Characters representing three main characters in the book, then call $book->addCharacter(Character $character, $key = null) to add them all. Just to confirm we can manually specify a $key argument, we passed 'tyrion' as the $key parameter for his entry. After that, we output the $book instance to the log to see that everything has been added as expected: Everything looks just right! Now, let‚Äôs see what happens if we call $book->GetCharacter('tyrone') , which represents an invalid $key within the characters array property: Just as intended, an OutOfBoundsException is thrown, indicating a Character element at the key 'tyrone' doesn‚Äôt exist. Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Try Airbrake free with a 30 day free trial .", "date": "2017-09-16"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì LengthException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/lengthexception", "abstract": "Making our way through our in-depth PHP Exception Handling series, on this fine day we‚Äôll be going over the LengthException in PHP. LengthException is not a complex beast by any stretch of the imagination. Instead, it‚Äôs merely meant to be thrown when a value length should be considered invalid. Throughout this article we‚Äôll explore the LengthException in more detail, by starting with a look at where it sits in the PHP Exception Hierarchy. We‚Äôll also examine some functional sample code that will illustrate how LengthExceptions should be used in your own code, so away we go! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Exception implements the Throwable interface. LogicException extends the Exception class. LengthException extends the LogicException class. Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. Most modern applications these days use some kind of data layer to retain permanent records, whether this be user credentials (not recommended) to cute puppy pictures (highly recommended). If your application accepts user or third-party data in some way, it‚Äôs paramount that the code provides sanity checks and data validations. These can be as complex as your business logic demands, but the most basic data validation, which should be applied before it is sent to the database, is checking the length of data. Hence, this is where the use of the LengthException can come in quite handy when writing PHP applications. For our example code today, we‚Äôll be extending my favorite Book example class, which contains a few simple properties: author , title , and pageCount . For the sake of this tutorial, we‚Äôve decided our database columns only need to handle a maximum of 255 bytes for the author value and 65,535 bytes for the title . Maybe the CTO did some research and looked into the commonality of names and/or book titles exceeding those lengths, and decided those were smart limits. Please play along for the sake of the example, since most modern applications would obviously not impose such strict limitations without extremely good reason. Anyway, to accomplish such restrictions we‚Äôve added some basic length validation logic to our Book->setAuthor(string $author) and Book->setTitle(string $title) methods: We‚Äôve also defined our aforementioned maximum byte lengths as const values, to keep the code a bit cleaner. As you can see, in the event that the strlen(string $string) function returns a value that exceeds the defined maximum length, a new LengthException is thrown with a message indicating the problem. In order to create multiple Book instances with varying title and author lengths, we‚Äôve created a simple createBookTest(string $title, string $author, int $pageCount) function. By creating a separate function with its own locally scoped try-catch block, we can safely catch any thrown exceptions without halting execution of the other Book creation calls. This function simply passes along its parameters to the Book constructor and attempts to output the created book instance to the log: Alright, now everything is setup, so let‚Äôs test it out! We start with a basic book, just to confirm everything works normally, as expected: Sure enough, everything looks good in the log output: Now, let‚Äôs try creating some books using our maximum length values for title and author , then also attempt a book creation that exceeds the maximum length of each of those by one: As you probably guessed, the attempts to create books with title and author values equal to the maximum worked fine, while those calls that exceeded the maximum threw LengthExceptions with our custom error message, as intended: Let‚Äôs try one last thing and throw in a less-common character into our repeated author argument value: Here we‚Äôre using the ‰∫∫ kanji character, which commonly means ‚Äúperson.‚Äù Even though we are creating an author value of Book::AUTHOR_MAX_LENGTH length ‚Äî just as we did before ‚Äî now we‚Äôre seeing another LengthException : So what‚Äôs going on? The important lesson here is that the strlen(string $string) function, which we‚Äôre using to test various lengths, doesn‚Äôt explicitly return the character count . Instead, it returns the number of bytes that make up that string. For the common alphanumeric characters most Westerners use everyday, such as those belonging to the Roman alphabet , the character count and the byte count are one in the same. However, more complex characters require additional bytes to store their data. As it happens, if you are keen with numbers, you may have determined that the number of bytes used by our kanji example ( 765 ) is exactly three times the maximum number of 255 . We can then deduce that each kanji character requires 3 bytes to store. Now we can modify our example by dividing the length of our string by 3 , which will ensure the number of bytes required by our created author string is equal to the Book::AUTHOR_MAX_LENGTH : Sure enough, this works just fine and creates a new Book instance in the output: Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems.", "date": "2017-08-26"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì InvalidArgumentException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/invalidargumentexception-2", "abstract": "Making our way through our in-depth PHP Exception Handling series, today we‚Äôll go over the InvalidArgumentException in PHP. The InvalidArgumentException should be thrown when an inappropriate argument is passed to a method or function. This can be either due to the actual object data type, or because the data itself is invalid in some way. Throughout this article we‚Äôll explore the InvalidArgumentException in more detail, starting with where it sits in the PHP Exception Hierarchy. We‚Äôll also go over a few functional sample code examples that aim to show how InvalidArgumentExceptions might be used, and where they differ from TypeErrors which we saw explored in our PHP Exception Handling - TypeError article last month. Let‚Äôs get to it! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Exception implements the Throwable interface. LogicException extends the Exception class. Lastly, InvalidArgumentException extends the LogicException class. Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. The ability to include type declarations was introduced with the release of PHP 5. This allows code to explicitly define when parameters are expected to be of a certain data type. In PHP 5, the effect of passing an invalid object type is a recoverable fatal error. Nowadays, with PHP 7, the result of an invalid argument is a TypeError . Generally speaking, it‚Äôs considered good practice to explicitly define your type declarations wherever possible, since this tends to produce tighter, less error-prone code. However, the existence of built-in declaration type-checking raises an interesting question in the context of an article about InvalidArgumentExceptions : What is the purpose of explicitly throwing an InvalidArgumentException , when the language itself includes built-in means for detecting improper argument types? There are two scenarios where using InvalidArgumentExceptions might be appropriate. The first is when explicitly changing the strict_types flag, which disables the default coercion from one data type argument to that of the declared type, when possible. That is, if passing a string to an int declared type argument, PHP 7 will attempt to convert the value to an int automatically. With strict_types enabled, this coercion is disabled. The other scenario in which explicitly throwing an InvalidArgumentException can be useful is when the data type is correct, but the data value is considered invalid. Be careful here though, since PHP 7 also includes other Exception types that may be more appropriate depending on the invalidity of the data, such as LengthException and OutOfRangeException . To examine how this all works we have setup a testing ground in our code in which we‚Äôll be creating a few new Book instances, which each have an associated Publisher instance assigned to them: Of particular importance is the setPageCount(int $pageCount) method: As you can see, we have an explicit type declaration of int for the $pageCount parameter, but we also go a step further and directly confirm if the passed value is an integer type. If not, we throw a new InvalidArgumentException . To test this out, here we have a couple functions that create a new Book instance and attempt to change the pageCount property by passing non-integer values of float and string , respectively: Calling both these test functions doesn‚Äôt produce any problems and the output shows our initial Book instances both have their page count updated to the correct value: What we‚Äôre seeing here is the previously discussed automatic coercion from the compatible types of float and string into the declared parameter type of int . PHP knows how to convert the string value \"835\" and the float value of 328.0 to int automatically, so it does so without any trouble. However, now let‚Äôs enable strict_types at the top of the file and run these functions again: As we can see, suddenly we‚Äôre producing unexpected TypeErrors because PHP is detecting that the explicitly declared type of int is not being passed. That‚Äôs all well and good, but let‚Äôs look at what happens when we use a class object instead of a primitive type in our type declaration. Here we have the Book->setPublisher(Publisher $publisher) method: To test this out we‚Äôll try passing a string as the only parameter: Calling this function produces an unsurprising TypeError once again: In fact, since we‚Äôre dealing with object instances here, PHP doesn‚Äôt know how to implicitly coerce a string value into a complex Publisher class instance. Therefore, no matter whether strict_types is enabled or not, the above function always throws a TypeError . Does this mean that InvalidArgumentExceptions are never appropriate or can never be used for methods with explicit type declarations of class object types? No, it just means that an InvalidArgumentException should be used based on the data value itself, rather than the data type . For example, let‚Äôs look at our last test function: Here we‚Äôre trying to pass a new Publisher instance with the correct name of the publisher, except it‚Äôs all lowercase. We only want to accept Pascal Case values as valid publisher names, so the Publisher->setName(string $name) method performs a simple bit of logic to check if the $name parameter is in Pascal Case or not: Note: We could obviously just change the passed value to the result of the ucwords() function, prior to assignment to the name property, but we‚Äôre purposely neglecting to do so in this example. Either way, execution of the passInvalidPublisherToPublisher() function throws the InvalidArgumentException we were expecting: Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems.", "date": "2017-08-22"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì ErrorException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/errorexception", "abstract": "Moving along through our detailed PHP Exception Handling series, today we‚Äôll dive into the PHP ErrorException class. In the most basic sense, the PHP ErrorException is meant to be explicitly thrown when you want to catch and handle errors that would otherwise be ignored, such as Notices or Warnings . In this article we‚Äôll explore the ErrorException in a bit more detail by first looking at where it resides in the PHP Exception Hierarchy. We‚Äôll also take a look at a number of different scenarios that combine various error_handling severity levels with custom error handler functions, to see how ErrorExceptions are typically caught and thrown, so let‚Äôs get going! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Exception implements the Throwable interface. ErrorException extends the Exception class. As mentioned in the introduction, the ErrorException class can be used when an exception should be created (and handled) as if it were a normal Exception -inherited class object. One possible scenario is when PHP issues a Warning . During execution, PHP will effectively ignore Warnings and continue execution as normal, depending on how the code is configured to handle errors. However, this may not always be desirable, as oftentimes a Warning is an indication of a failure that should redirect current script execution, if not halt the script entirely (as a fatal error would normally do). For example, consider trying to access a file via the file_get_contents(string $filename) function. As indicated by the documentation, ‚Äúan E_WARNING level error is generated if filename cannot be found, maxlength is less than zero, or if seeking to the specified offset in the stream fails.‚Äù The function itself also returns a false boolean value if reading the data/file failed for some reason. Here we‚Äôll try to access an invalid file: Which produces the following default output to the console (without halting execution): In this situation, we want to actually produce an Exception , as opposed to just a Warning , when the passed file path cannot be found. Therefore, we need to make use of ErrorException . Below is the full code sample. Following this code we‚Äôll break down the functions and logic to see exactly what‚Äôs going on and how ErrorExceptions can be used in various error handling scenarios: For these examples we‚Äôll stick with the file_get_contents() method. We want to react to the Warnings it produces by throwing and catching an ErrorException , when appropriate. So, we begin with the getFileContents(string $path) function, which is a simple wrapper for file_get_contents() and some basic error handling: We‚Äôre going to make use of the built-in set_error_handler() function, which allows us to set a user-defined error handling function. We‚Äôve specified two different error handler functions to serve this purpose ‚Äî one that checks if the current error_reporting level allows the passed error to be handled, and the other, which ignores the error_reporting configuration entirely. In both cases, we ensure that our error handler throws a new ErrorException and passes the original values to it, so we can use this in the try-catch blocks elsewhere in the code: We then combine these calls within the accessInvalidFile($errorLevel, $handlerFunc = null) method, which configures the error_handling level and sets the error handler function (if applicable), before calling getFileContents(string $path) with an invalid file name passed in: With everything setup we can call accessInvalidFile() with assorted error reporting levels and handler functions passed to it, and see how changes here alter the behavior of our invalid file retrieval attempt: As you can see, we‚Äôre calling accessInvalidFile() for each of the three most common error_reporting levels: E_ERROR , E_WARNING , and E_NOTICE . Within each error reporting level we also make a call with no error handler, a call with a basic error handler, and then a call with the advanced handler that checks against error_reporting severity levels. The goal here is to see how these different configurations affect the output that PHP produces when a Warning occurs. We begin with the output set using an E_ERROR reporting level: The first thing to notice is that, without an error handler function specified, no output is produced. This makes sense, since we‚Äôre not including the E_WARNING reporting level flag, so the Warning that is created is ignored. On the other hand, the basic error handler does grab the Warning and convert it into a thrown ErrorException , which we‚Äôre then able to catch. However, since the advanced error handler checks if error_reporting is configured to handle the E_WARNING severity level of the passed error, no ErrorException is thrown during the final call. Next let‚Äôs look at the E_WARNING outputs: It shouldn‚Äôt come as much surprise that all three of the E_WARNING reporting level calls produce an output. Since the underlying error is itself a Warning , the call without an error handler just passes along that Warning to the console. Meanwhile, the basic error handler works as we saw before, while the advanced handler confirms that the E_WARNING flag passed to error_reporting is equivalent to the error‚Äôs severity level, so it also throws an exception. Finally, we have the E_NOTICE call outputs: These are identical to the outputs from E_ERROR calls, since the logic is the same: The Warning doesn‚Äôt qualify as an E_NOTICE , so there‚Äôs no match for the advanced error handler, nor the non-error handler call. Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems.", "date": "2017-08-07"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì IntlException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/intlexception", "abstract": "As we approach the end of our detailed PHP Exception Handling series, today we‚Äôll take a closer look at the IntlException . The IntlException is thrown by the wide variety of classes, functions, and methods found within the Internationalization Functions API set. These functions are are a PHP-based wrapper for the International Components for Unicode ( ICU ) library set, allowing code to easily work with strings, numbers, and dates across a variety of locales and formats. Throughout this article we‚Äôll examine the IntlException by first looking at where it resides in the overall PHP Exception Hierarchy. We‚Äôll also explore some fully functional code samples that will illustrate how many of the common Intl classes can be used, and how doing so may cause IntlExceptions to be thrown, so let‚Äôs get started! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: Throwable Exception IntlException Exception IntlException IntlException Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. As mentioned, the purpose of the Intl class in PHP is to make it easy to work with values that are typically troublesome to convert to the appropriate locale-based format. As a simple example, the United States uses a period ( . ) as a decimal separator (e.g. 123.456 ), while France uses a comma ( , ) decimal separator (e.g. 123,456 ). It would be a monumental task to code localization handling for every project, so the Intl class, using the ICU library, standardizes localization techniques and makes it relatively easy to format number, date, and string values into the multitude of localized contexts you might need. However, as with most API functions, the Intl class can sometimes run into problems, which can manifest themselves into thrown IntlExceptions . Since the Intl class is a built-in PHP extension , the first thing you‚Äôll need to do is make sure the extension is enabled in your own php.ini file. Typically, this will involve opening your php.ini file, searching for php_intl , and uncommenting the appropriate line, like so: Now, to test these classes out we‚Äôre going to manipulate some common types of values, including currencies, dates, numbers, and strings. To accomplish this we‚Äôre using the built-in formatter classes including IntlDateFormatter , NumberFormatter , and MessageFormatter . Let‚Äôs begin with a date via our formatDate(...) function: As you can see, this function primarily acts as a small wrapper for the IntlDateFormatter class constructor method, accepting a number of arguments and passing those parameters to the IntlDateFormatter constructor. We then call the $formatter->format($value) method with our passed $value parameter as an argument, which actually attempts to perform the format based on all the arguments used during construction. We log the result to the console. Now, you‚Äôll notice a call to the throwFormatterException($exception) function at the end of the try block, which is particularly important. Since the Intl classes are from an extension, if these methods or classes have an issue they default to issuing a basic E_WARNING message, but otherwise try to use the default settings and locale to process the formatted value, so execution can continue. To force these classes to actually throw a catchable IntlException you‚Äôll need to explicitly enable the intl.use_exceptions setting in the php.ini file. If this setting is disabled (which is the default value), only warnings will be generated. However , the Intl class provides a number of helper functions to check if a given formatter instance caused an error, even if it wasn‚Äôt an explicitly thrown/caught IntlException instance. To illustrate, let‚Äôs finally take a look at the aforementioned throwFormatterException($exception) method: The purpose of this function is to determine if the passed $formatter object is actually a proper Formatter class type and, if so, determine if the intl.use_exceptions php.ini setting is disabled (the default setting). If intl.use_exceptions is disabled, we then check if the passed $formatter actually produced an error of some sort, which is determined by passing the $formatter->getErrorCode() method result to the intl_is_failure() function. This function returns a boolean indicating if the passed error code indicates an error or not. If a failure is detected, we output the error code to the log and then manually throw our own IntlException with the appropriate message and error code values passed in. With this knowledge in hand, we can test out our formatDate(...) : Here we‚Äôre first calling formatDate(...) with the current date and time, then calling it a second time with a null date value specified. Here we see the output of these calls: Unsurprisingly, the first call works fine and outputs our date and time. Meanwhile, the second call shows that execution called the format(...) method, but didn‚Äôt throw an error since intl.use_exceptions is disabled by default. However, we passed the formatter to throwFormatterException($formatter) and this determined that the formatter did actually run into trouble, so we output the error code and manually threw an IntlException with the actual error message. In this case, we can see that the Intl library calls the datefmt_format(...) function behind the scenes, which received an invalid data type for the date since we passed null in this second call. Cool! Next up, let‚Äôs look at our formatNumber(...) function: The format and execution of this function is the same as we saw in formatDate(...) , so we won‚Äôt explain anything. Instead, let‚Äôs test it out: Here‚Äôs the output we produce from these four calls: As previously mentioned, by using the ICU library we‚Äôre able to automatically convert our value of 1234.567 to the appropriate formats based on the locale value we pass to each call. France uses the SI format, while Switzerland uses apostrophes as thousands separators and periods for a decimal separator. In our last call we passed an invalid $style argument value to the underlying NumberFormatter constructor, so a legit IntlException is thrown and caught. Now we have the formatCurrency(...) method, which does just what formatNumber(...) did, except ideally for currencies: Let‚Äôs test it out: Here‚Äôs the output: Again, the first call works as expected, while the second produces an uncaught error, so we manually throw an IntlException . Finally, let‚Äôs look at formatting messages via formatMessage(...) : And our test code: Produces this output: Since our $pattern argument was set to null , we again throw an IntlException in the second call. As mentioned, the php.ini setting of intl.use_exceptions is disabled by default, but let‚Äôs try enabling it and executing these tests again to see how things change: Our expectation is, now that intl.use_exceptions is enabled, any problems that a Formatter instance experiences during constructor or when calling format(...) should result in an explicit IntlException being thrown. Therefore, subsequent calls to our backup throwFormatterException($exception) function will be skipped entirely, since these invocations appear after the formatter does its work. Since all the valid calls we made during our tests will still perform as expected, we‚Äôll skip over those and only execute the ‚ÄúINVALID‚Äù tests a second time: Performing these same invalid calls produces the following output now, confirming that each problematic call explicitly created and threw IntlException , as expected: Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems.", "date": "2017-10-23"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì DOMException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/domexception", "abstract": "Next up in our in-depth PHP Exception Handling series, today we‚Äôre digging into the PHP DOMException error. There are a variety of reasons a DOMException can occur, but all of them are related to using the Document Object Model namespace and its powerful functionality. In this article we‚Äôll examine the DOMException in more detail, including where it sits in the PHP Exception Hierarchy, and how DOMExceptions might be commonly thrown using some functional sample code, so let‚Äôs get to it! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Exception implements the Throwable interface. DOMException extends the Exception class. Let‚Äôs jump right into it by looking at the full working code sample we have, which features two kinds of DOMExceptions that might typically occur. Following the sample below, we‚Äôll break the code down in more detail to see exactly what‚Äôs going on: Our first goal is to create a new DOMDocument instance, and append a new DOMElement instance to it. To that end, we have two similar methods, appendElementToDocument(DOMElement, DOMDocument) and appendElementByNameToDocument(string, DOMDocument) : These methods are comparable, except one expects an actual DOMElement instance to be passed as an argument, while the other uses a passed string $name to create said element. Either way, the element is then appended to the passed DOMDocument using the appendChild() method. If successful, we output a message, and if it fails, we throw (and catch) the exception. To test these methods out we have just a few lines of code. We start by creating a new DOMDocument instance, then call appendElementToDocument(DOMElement, DOMDocument) with a new element named books : This works just as expected and the output confirms the result: Now let‚Äôs try the appendElementByNameToDocument(string, DOMDocument) method to create a DOMElement with the name of a dollar sign ( $ ): As it happens, the $ symbol is not a valid character within a DOM element name, so a DOMException is thrown, indicating as much in the message: Our second test involves appending DOMElements to DOMDocuments again, but this time we‚Äôre trying something new: First, we append an element to a document, then we try to append that same element to a different document. This is performed in the crossDocumentAppendTest() method: Everything works just fine until we get to the third appendElementToDocument(DOMElement, DOMDocument) call, which attempts to crossover the append action by appending $elementA to $documentB , even though $elementA is already appended to $documentA . As you can probably guess, this also results in a DOMException being thrown, this time indicating that we are manipulating the wrong document (referring to $documentB , in this case): We solve this issue within the crossDocumentAppendTestSuccess() method: As you may have noticed, the appendElementToDocument(DOMElement, DOMDocument) method returns a DOMNode or null object, which we‚Äôve specified using the : ?DOMNode syntax at the end of the method declaration. This is a new feature introduced in PHP 7.1+, which makes it easy for us to use the result of that method call for further logic. Thus, in crossDocumentAppendTestSuccess() we assign the appendElementToDocument(DOMElement, DOMDocument) result to a $node variable and check if it exists or was null ). In the event that no DOMNode instance was returned, that indicates our original append attempt failed (just as in the previous method), so we can perform one little trick necessary to get this crossover append to work. The solution is to call the importNode(DOMNode) method on the DOMDocument instance that is to receive the new appendage. This imports the node into the document tree, behind the scenes, and returns the resulting DOMNode instance, which we‚Äôve assigned to $importedNode . From there, it‚Äôs just a matter of calling the appendElementToDocument(DOMElement, DOMDocument) method one last time, but now we pass the $importedNode instance to $documentB , instead of the original $elementA version. Our log shows this works just as expected, and the ultimate result is the same, but without throwing an unnecessary DOMException : Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Our first goal is to create a new DOMDocument instance, and append a new DOMElement instance to it. To that end, we have two similar methods, appendElementToDocument(DOMElement, DOMDocument) and appendElementByNameToDocument(string, DOMDocument) : These methods are comparable, except one expects an actual DOMElement instance to be passed as an argument, while the other uses a passed string $name to create said element. Either way, the element is then appended to the passed DOMDocument using the appendChild() method. If successful, we output a message, and if it fails, we throw (and catch) the exception. To test these methods out we have just a few lines of code. We start by creating a new DOMDocument instance, then call appendElementToDocument(DOMElement, DOMDocument) with a new element named books : This works just as expected and the output confirms the result: Now let‚Äôs try the appendElementByNameToDocument(string, DOMDocument) method to create a DOMElement with the name of a dollar sign ( $ ): As it happens, the $ symbol is not a valid character within a DOM element name, so a DOMException is thrown, indicating as much in the message: Our second test involves appending DOMElements to DOMDocuments again, but this time we‚Äôre trying something new: First, we append an element to a document, then we try to append that same element to a different document. This is performed in the crossDocumentAppendTest() method: Everything works just fine until we get to the third appendElementToDocument(DOMElement, DOMDocument) call, which attempts to crossover the append action by appending $elementA to $documentB , even though $elementA is already appended to $documentA . As you can probably guess, this also results in a DOMException being thrown, this time indicating that we are manipulating the wrong document (referring to $documentB , in this case): We solve this issue within the crossDocumentAppendTestSuccess() method: As you may have noticed, the appendElementToDocument(DOMElement, DOMDocument) method returns a DOMNode or null object, which we‚Äôve specified using the : ?DOMNode syntax at the end of the method declaration. This is a new feature introduced in PHP 7.1+, which makes it easy for us to use the result of that method call for further logic. Thus, in crossDocumentAppendTestSuccess() we assign the appendElementToDocument(DOMElement, DOMDocument) result to a $node variable and check if it exists or was null ). In the event that no DOMNode instance was returned, that indicates our original append attempt failed (just as in the previous method), so we can perform one little trick necessary to get this crossover append to work. The solution is to call the importNode(DOMNode) method on the DOMDocument instance that is to receive the new appendage. This imports the node into the document tree, behind the scenes, and returns the resulting DOMNode instance, which we‚Äôve assigned to $importedNode . From there, it‚Äôs just a matter of calling the appendElementToDocument(DOMElement, DOMDocument) method one last time, but now we pass the $importedNode instance to $documentB , instead of the original $elementA version. Our log shows this works just as expected, and the ultimate result is the same, but without throwing an unnecessary DOMException : Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Our first goal is to create a new DOMDocument instance, and append a new DOMElement instance to it. To that end, we have two similar methods, appendElementToDocument(DOMElement, DOMDocument) and appendElementByNameToDocument(string, DOMDocument) : These methods are comparable, except one expects an actual DOMElement instance to be passed as an argument, while the other uses a passed string $name to create said element. Either way, the element is then appended to the passed DOMDocument using the appendChild() method. If successful, we output a message, and if it fails, we throw (and catch) the exception. To test these methods out we have just a few lines of code. We start by creating a new DOMDocument instance, then call appendElementToDocument(DOMElement, DOMDocument) with a new element named books : This works just as expected and the output confirms the result: Now let‚Äôs try the appendElementByNameToDocument(string, DOMDocument) method to create a DOMElement with the name of a dollar sign ( $ ): As it happens, the $ symbol is not a valid character within a DOM element name, so a DOMException is thrown, indicating as much in the message: Our second test involves appending DOMElements to DOMDocuments again, but this time we‚Äôre trying something new: First, we append an element to a document, then we try to append that same element to a different document. This is performed in the crossDocumentAppendTest() method: Everything works just fine until we get to the third appendElementToDocument(DOMElement, DOMDocument) call, which attempts to crossover the append action by appending $elementA to $documentB , even though $elementA is already appended to $documentA . As you can probably guess, this also results in a DOMException being thrown, this time indicating that we are manipulating the wrong document (referring to $documentB , in this case): We solve this issue within the crossDocumentAppendTestSuccess() method: As you may have noticed, the appendElementToDocument(DOMElement, DOMDocument) method returns a DOMNode or null object, which we‚Äôve specified using the : ?DOMNode syntax at the end of the method declaration. This is a new feature introduced in PHP 7.1+, which makes it easy for us to use the result of that method call for further logic. Thus, in crossDocumentAppendTestSuccess() we assign the appendElementToDocument(DOMElement, DOMDocument) result to a $node variable and check if it exists or was null ). In the event that no DOMNode instance was returned, that indicates our original append attempt failed (just as in the previous method), so we can perform one little trick necessary to get this crossover append to work. The solution is to call the importNode(DOMNode) method on the DOMDocument instance that is to receive the new appendage. This imports the node into the document tree, behind the scenes, and returns the resulting DOMNode instance, which we‚Äôve assigned to $importedNode . From there, it‚Äôs just a matter of calling the appendElementToDocument(DOMElement, DOMDocument) method one last time, but now we pass the $importedNode instance to $documentB , instead of the original $elementA version. Our log shows this works just as expected, and the ultimate result is the same, but without throwing an unnecessary DOMException : Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. As it happens, the $ symbol is not a valid character within a DOM element name, so a DOMException is thrown, indicating as much in the message: Our second test involves appending DOMElements to DOMDocuments again, but this time we‚Äôre trying something new: First, we append an element to a document, then we try to append that same element to a different document. This is performed in the crossDocumentAppendTest() method: Everything works just fine until we get to the third appendElementToDocument(DOMElement, DOMDocument) call, which attempts to crossover the append action by appending $elementA to $documentB , even though $elementA is already appended to $documentA . As you can probably guess, this also results in a DOMException being thrown, this time indicating that we are manipulating the wrong document (referring to $documentB , in this case): We solve this issue within the crossDocumentAppendTestSuccess() method: As you may have noticed, the appendElementToDocument(DOMElement, DOMDocument) method returns a DOMNode or null object, which we‚Äôve specified using the : ?DOMNode syntax at the end of the method declaration. This is a new feature introduced in PHP 7.1+, which makes it easy for us to use the result of that method call for further logic. Thus, in crossDocumentAppendTestSuccess() we assign the appendElementToDocument(DOMElement, DOMDocument) result to a $node variable and check if it exists or was null ). In the event that no DOMNode instance was returned, that indicates our original append attempt failed (just as in the previous method), so we can perform one little trick necessary to get this crossover append to work. The solution is to call the importNode(DOMNode) method on the DOMDocument instance that is to receive the new appendage. This imports the node into the document tree, behind the scenes, and returns the resulting DOMNode instance, which we‚Äôve assigned to $importedNode . From there, it‚Äôs just a matter of calling the appendElementToDocument(DOMElement, DOMDocument) method one last time, but now we pass the $importedNode instance to $documentB , instead of the original $elementA version. Our log shows this works just as expected, and the ultimate result is the same, but without throwing an unnecessary DOMException : Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Our first goal is to create a new DOMDocument instance, and append a new DOMElement instance to it. To that end, we have two similar methods, appendElementToDocument(DOMElement, DOMDocument) and appendElementByNameToDocument(string, DOMDocument) : These methods are comparable, except one expects an actual DOMElement instance to be passed as an argument, while the other uses a passed string $name to create said element. Either way, the element is then appended to the passed DOMDocument using the appendChild() method. If successful, we output a message, and if it fails, we throw (and catch) the exception. To test these methods out we have just a few lines of code. We start by creating a new DOMDocument instance, then call appendElementToDocument(DOMElement, DOMDocument) with a new element named books : This works just as expected and the output confirms the result: Now let‚Äôs try the appendElementByNameToDocument(string, DOMDocument) method to create a DOMElement with the name of a dollar sign ( $ ): As it happens, the $ symbol is not a valid character within a DOM element name, so a DOMException is thrown, indicating as much in the message: Our second test involves appending DOMElements to DOMDocuments again, but this time we‚Äôre trying something new: First, we append an element to a document, then we try to append that same element to a different document. This is performed in the crossDocumentAppendTest() method: Everything works just fine until we get to the third appendElementToDocument(DOMElement, DOMDocument) call, which attempts to crossover the append action by appending $elementA to $documentB , even though $elementA is already appended to $documentA . As you can probably guess, this also results in a DOMException being thrown, this time indicating that we are manipulating the wrong document (referring to $documentB , in this case): We solve this issue within the crossDocumentAppendTestSuccess() method: As you may have noticed, the appendElementToDocument(DOMElement, DOMDocument) method returns a DOMNode or null object, which we‚Äôve specified using the : ?DOMNode syntax at the end of the method declaration. This is a new feature introduced in PHP 7.1+, which makes it easy for us to use the result of that method call for further logic. Thus, in crossDocumentAppendTestSuccess() we assign the appendElementToDocument(DOMElement, DOMDocument) result to a $node variable and check if it exists or was null ). In the event that no DOMNode instance was returned, that indicates our original append attempt failed (just as in the previous method), so we can perform one little trick necessary to get this crossover append to work. The solution is to call the importNode(DOMNode) method on the DOMDocument instance that is to receive the new appendage. This imports the node into the document tree, behind the scenes, and returns the resulting DOMNode instance, which we‚Äôve assigned to $importedNode . From there, it‚Äôs just a matter of calling the appendElementToDocument(DOMElement, DOMDocument) method one last time, but now we pass the $importedNode instance to $documentB , instead of the original $elementA version. Our log shows this works just as expected, and the ultimate result is the same, but without throwing an unnecessary DOMException : Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. Our first goal is to create a new DOMDocument instance, and append a new DOMElement instance to it. To that end, we have two similar methods, appendElementToDocument(DOMElement, DOMDocument) and appendElementByNameToDocument(string, DOMDocument) : These methods are comparable, except one expects an actual DOMElement instance to be passed as an argument, while the other uses a passed string $name to create said element. Either way, the element is then appended to the passed DOMDocument using the appendChild() method. If successful, we output a message, and if it fails, we throw (and catch) the exception. To test these methods out we have just a few lines of code. We start by creating a new DOMDocument instance, then call appendElementToDocument(DOMElement, DOMDocument) with a new element named books : This works just as expected and the output confirms the result: Now let‚Äôs try the appendElementByNameToDocument(string, DOMDocument) method to create a DOMElement with the name of a dollar sign ( $ ): As it happens, the $ symbol is not a valid character within a DOM element name, so a DOMException is thrown, indicating as much in the message: Our second test involves appending DOMElements to DOMDocuments again, but this time we‚Äôre trying something new: First, we append an element to a document, then we try to append that same element to a different document. This is performed in the crossDocumentAppendTest() method: Everything works just fine until we get to the third appendElementToDocument(DOMElement, DOMDocument) call, which attempts to crossover the append action by appending $elementA to $documentB , even though $elementA is already appended to $documentA . As you can probably guess, this also results in a DOMException being thrown, this time indicating that we are manipulating the wrong document (referring to $documentB , in this case): We solve this issue within the crossDocumentAppendTestSuccess() method: As you may have noticed, the appendElementToDocument(DOMElement, DOMDocument) method returns a DOMNode or null object, which we‚Äôve specified using the : ?DOMNode syntax at the end of the method declaration. This is a new feature introduced in PHP 7.1+, which makes it easy for us to use the result of that method call for further logic. Thus, in crossDocumentAppendTestSuccess() we assign the appendElementToDocument(DOMElement, DOMDocument) result to a $node variable and check if it exists or was null ). In the event that no DOMNode instance was returned, that indicates our original append attempt failed (just as in the previous method), so we can perform one little trick necessary to get this crossover append to work. The solution is to call the importNode(DOMNode) method on the DOMDocument instance that is to receive the new appendage. This imports the node into the document tree, behind the scenes, and returns the resulting DOMNode instance, which we‚Äôve assigned to $importedNode . From there, it‚Äôs just a matter of calling the appendElementToDocument(DOMElement, DOMDocument) method one last time, but now we pass the $importedNode instance to $documentB , instead of the original $elementA version. Our log shows this works just as expected, and the ultimate result is the same, but without throwing an unnecessary DOMException : Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. , $document); As it happens, the $ symbol is not a valid character within a DOM element name, so a DOMException is thrown, indicating as much in the message: Our second test involves appending DOMElements to DOMDocuments again, but this time we‚Äôre trying something new: First, we append an element to a document, then we try to append that same element to a different document. This is performed in the crossDocumentAppendTest() method: Everything works just fine until we get to the third appendElementToDocument(DOMElement, DOMDocument) call, which attempts to crossover the append action by appending $elementA to $documentB , even though $elementA is already appended to $documentA . As you can probably guess, this also results in a DOMException being thrown, this time indicating that we are manipulating the wrong document (referring to $documentB , in this case): We solve this issue within the crossDocumentAppendTestSuccess() method: As you may have noticed, the appendElementToDocument(DOMElement, DOMDocument) method returns a DOMNode or null object, which we‚Äôve specified using the : ?DOMNode syntax at the end of the method declaration. This is a new feature introduced in PHP 7.1+, which makes it easy for us to use the result of that method call for further logic. Thus, in crossDocumentAppendTestSuccess() we assign the appendElementToDocument(DOMElement, DOMDocument) result to a $node variable and check if it exists or was null ). In the event that no DOMNode instance was returned, that indicates our original append attempt failed (just as in the previous method), so we can perform one little trick necessary to get this crossover append to work. The solution is to call the importNode(DOMNode) method on the DOMDocument instance that is to receive the new appendage. This imports the node into the document tree, behind the scenes, and returns the resulting DOMNode instance, which we‚Äôve assigned to $importedNode . From there, it‚Äôs just a matter of calling the appendElementToDocument(DOMElement, DOMDocument) method one last time, but now we pass the $importedNode instance to $documentB , instead of the original $elementA version. Our log shows this works just as expected, and the ultimate result is the same, but without throwing an unnecessary DOMException : Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. element. appendElementByNameToDocument(‚Äò Our first goal is to create a new DOMDocument instance, and append a new DOMElement instance to it. To that end, we have two similar methods, appendElementToDocument(DOMElement, DOMDocument) and appendElementByNameToDocument(string, DOMDocument) : These methods are comparable, except one expects an actual DOMElement instance to be passed as an argument, while the other uses a passed string $name to create said element. Either way, the element is then appended to the passed DOMDocument using the appendChild() method. If successful, we output a message, and if it fails, we throw (and catch) the exception. To test these methods out we have just a few lines of code. We start by creating a new DOMDocument instance, then call appendElementToDocument(DOMElement, DOMDocument) with a new element named books : This works just as expected and the output confirms the result: Now let‚Äôs try the appendElementByNameToDocument(string, DOMDocument) method to create a DOMElement with the name of a dollar sign ( $ ): As it happens, the $ symbol is not a valid character within a DOM element name, so a DOMException is thrown, indicating as much in the message: Our second test involves appending DOMElements to DOMDocuments again, but this time we‚Äôre trying something new: First, we append an element to a document, then we try to append that same element to a different document. This is performed in the crossDocumentAppendTest() method: Everything works just fine until we get to the third appendElementToDocument(DOMElement, DOMDocument) call, which attempts to crossover the append action by appending $elementA to $documentB , even though $elementA is already appended to $documentA . As you can probably guess, this also results in a DOMException being thrown, this time indicating that we are manipulating the wrong document (referring to $documentB , in this case): We solve this issue within the crossDocumentAppendTestSuccess() method: As you may have noticed, the appendElementToDocument(DOMElement, DOMDocument) method returns a DOMNode or null object, which we‚Äôve specified using the : ?DOMNode syntax at the end of the method declaration. This is a new feature introduced in PHP 7.1+, which makes it easy for us to use the result of that method call for further logic. Thus, in crossDocumentAppendTestSuccess() we assign the appendElementToDocument(DOMElement, DOMDocument) result to a $node variable and check if it exists or was null ). In the event that no DOMNode instance was returned, that indicates our original append attempt failed (just as in the previous method), so we can perform one little trick necessary to get this crossover append to work. The solution is to call the importNode(DOMNode) method on the DOMDocument instance that is to receive the new appendage. This imports the node into the document tree, behind the scenes, and returns the resulting DOMNode instance, which we‚Äôve assigned to $importedNode . From there, it‚Äôs just a matter of calling the appendElementToDocument(DOMElement, DOMDocument) method one last time, but now we pass the $importedNode instance to $documentB , instead of the original $elementA version. Our log shows this works just as expected, and the ultimate result is the same, but without throwing an unnecessary DOMException : Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems. , $document); Logging::LineSeparator(); crossDocumentAppendTest(); Logging::LineSeparator(); crossDocumentAppendTestSuccess(); } /** * Create and append DOMElement, by name, to passed DOMDocument. * * @param string $name * @param DOMDocument $document * @return DomNode|null */ function appendElementByNameToDocument(string $name, DOMDocument $document) : ?DOMNode { try { $node = $document->appendChild(new DOMElement($name)); Logging::Log(‚ÄúSuccessfully appended element (by name) [{$node->localName}] to [document].‚Äù); return $node; } catch (DOMException $exception) { // Output expected DOMException. Logging::Log($exception); return null; } catch (Exception $exception) { // Output unexpected Exceptions. Logging::Log($exception, false); return null; } } /** * Append passed DOMElement to passed DOMDocument. * * @param DOMElement $element * @param DOMDocument $document * @return DOMNode|null */ function appendElementToDocument(DOMElement $element, DOMDocument $document) : ?DOMNode { try { $node = $document->appendChild($element); Logging::Log(‚ÄúSuccessfully appended element [{$node->localName}] to [document].‚Äù); return $node; } catch (DOMException $exception) { // Output expected DOMException. Logging::Log($exception); return null; } catch (Exception $exception) { // Output unexpected Exceptions. Logging::Log($exception, false); return null; } } /** * Append element to unattached document. */ function crossDocumentAppendTest() { try { // Create document and element set A. $documentA = new DOMDocument(‚Äò1.0‚Äô); $elementA = new DOMElement(‚ÄòelementA‚Äô); appendElementToDocument($elementA, $documentA); // Create document and element set B. $documentB = new DOMDocument(‚Äò1.0‚Äô); $elementB = new DOMElement(‚ÄòelementB‚Äô); appendElementToDocument($elementB, $documentB); // Append elementA (appended to documentA) to documentB. appendElementToDocument($elementA, $documentB); Logging::Log(‚ÄúSuccessfully appended element [{$elementA->localName}] to [documentB].‚Äù); } catch (DOMException $exception) { // Output expected DOMException. Logging::Log($exception); } catch (Exception $exception) { // Output unexpected Exceptions. Logging::Log($exception, false); } } /** * Successfully appends element to unattached document. */ function crossDocumentAppendTestSuccess() { try { // Create document and element set A. $documentA = new DOMDocument(‚Äò1.0‚Äô); $elementA = new DOMElement(‚ÄòelementA‚Äô); appendElementToDocument($elementA, $documentA); // Create document and element set B. $documentB = new DOMDocument(‚Äò1.0‚Äô); $elementB = new DOMElement(‚ÄòelementB‚Äô); appendElementToDocument($elementB, $documentB); // Append elementA (appended to documentA) to documentB. $node = appendElementToDocument($elementA, $documentB); // Check if appendElementToDocument returned DOMNode or null. if (!$node) { // If $node not found, import elementA into documentB, then try appending again. $importedNode = $documentB->importNode($elementA, true); $node = appendElementToDocument($importedNode, $documentB); Logging::Log(‚ÄúSuccessfully appended element [{$node->localName}] to [documentB].‚Äù); } } catch (DOMException $exception) { // Output expected DOMException. Logging::Log($exception); } catch (Exception $exception) { // Output unexpected Exceptions. Logging::Log($exception, false); } } executeExamples(); // Logging.php <?php require(‚Äòkint.php‚Äô); /** * Provides basic logging/output functionality. */ class Logging { /** * Logs the passed object, string, or Throwable instance to the console. * * @param object|string $a Message or value to be logged. * @param object|bool $b Secondary value, such as boolean for Throwables indicating if error was expected. */ public static function Log($a, $b = null) { if (is_string($a) || is_numeric($a)) { Logging::LogString($a); } elseif ($a instanceof Throwable) { Logging::LogThrowable($a, is_null($b) ? true : $b); } else { Logging::LogObject($a); } } /** * Logs the passed object. * * @param object $object Object to be logged. * * @see https://github.com/kint-php/kint Kint tool used for structured outputs. */ private static function LogObject(object $object) { Kint_Renderer_Cli::$force_utf8 = true; Kint_Renderer_Text::$decorations = false; Kint::dump($object); } /** * Logs the passed string value. * * @param string $value Value to be logged. */ private static function LogString(string $value) { print_r(‚Äú{$value}\\n‚Äù); } /** * Logs the passed Throwable object. * Includes message, className if error was expected, and stack trace. * * Uses internal Reflection to retrieve protected/private properties. * * @param Throwable $throwable Throwable object to be output. * @param bool $expected Indicates if error was expected or not. */ private static function LogThrowable(Throwable $throwable, bool $expected = true) { $expected = $expected ? ‚ÄúEXPECTED‚Äù : ‚ÄúUNEXPECTED‚Äù; $message = substr($throwable->xdebug_message, 1); // Output whether error was expected or not, the class name, the message, and stack trace. print_r(‚Äú[{$expected}] {$message}\\n‚Äù); // Add line separator to keep it tidy. self::LineSeparator(); } /** * Outputs a separator line to log. * * @param int $length Length of the line separator. * @param string $character Character to use as separator. */ public static function LineSeparator(int $length = 40, string $character = ‚Äò-‚Äò) { $break = str_repeat($character, $length); print_r(‚Äú{$break}\\n‚Äù); } } Our first goal is to create a new DOMDocument instance, and append a new DOMElement instance to it. To that end, we have two similar methods, appendElementToDocument(DOMElement, DOMDocument) and appendElementByNameToDocument(string, DOMDocument) : These methods are comparable, except one expects an actual DOMElement instance to be passed as an argument, while the other uses a passed string $name to create said element. Either way, the element is then appended to the passed DOMDocument using the appendChild() method. If successful, we output a message, and if it fails, we throw (and catch) the exception. To test these methods out we have just a few lines of code. We start by creating a new DOMDocument instance, then call appendElementToDocument(DOMElement, DOMDocument) with a new element named books : This works just as expected and the output confirms the result: Now let‚Äôs try the appendElementByNameToDocument(string, DOMDocument) method to create a DOMElement with the name of a dollar sign ( $ ): As it happens, the $ symbol is not a valid character within a DOM element name, so a DOMException is thrown, indicating as much in the message: Our second test involves appending DOMElements to DOMDocuments again, but this time we‚Äôre trying something new: First, we append an element to a document, then we try to append that same element to a different document. This is performed in the crossDocumentAppendTest() method: Everything works just fine until we get to the third appendElementToDocument(DOMElement, DOMDocument) call, which attempts to crossover the append action by appending $elementA to $documentB , even though $elementA is already appended to $documentA . As you can probably guess, this also results in a DOMException being thrown, this time indicating that we are manipulating the wrong document (referring to $documentB , in this case): We solve this issue within the crossDocumentAppendTestSuccess() method: As you may have noticed, the appendElementToDocument(DOMElement, DOMDocument) method returns a DOMNode or null object, which we‚Äôve specified using the : ?DOMNode syntax at the end of the method declaration. This is a new feature introduced in PHP 7.1+, which makes it easy for us to use the result of that method call for further logic. Thus, in crossDocumentAppendTestSuccess() we assign the appendElementToDocument(DOMElement, DOMDocument) result to a $node variable and check if it exists or was null ). In the event that no DOMNode instance was returned, that indicates our original append attempt failed (just as in the previous method), so we can perform one little trick necessary to get this crossover append to work. The solution is to call the importNode(DOMNode) method on the DOMDocument instance that is to receive the new appendage. This imports the node into the document tree, behind the scenes, and returns the resulting DOMNode instance, which we‚Äôve assigned to $importedNode . From there, it‚Äôs just a matter of calling the appendElementToDocument(DOMElement, DOMDocument) method one last time, but now we pass the $importedNode instance to $documentB , instead of the original $elementA version. Our log shows this works just as expected, and the ultimate result is the same, but without throwing an unnecessary DOMException : Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems.", "date": "2017-08-02"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì DomainException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/domainexception", "abstract": "Next up in our in-depth PHP Exception Handling series we‚Äôll be looking into the domain of the, well, DomainException. The specific scenarios in with a DomainException should be used are varied and somewhat debated, but the current best practice is to throw a DomainException when a value doesn‚Äôt adhere to the valid ‚Äúdata domain‚Äù of the given context. In this article we‚Äôll further explore what that means and how the DomainException is typically used by looking at some simple, functional code samples. We‚Äôll also see where the DomainException sits within the PHP Exception Hierarchy. Without further ado, let the games begin! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Exception implements the Throwable interface. LogicException extends the Exception class. DomainException extends the LogicException class. Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. Although it‚Äôs a bit dated at this point, an interesting discussion took place a few years back in the official PHP bug tracker specifically regarding the vagueness of DomainException's purpose. Even many contributing developers of the PHP codebase at the time weren‚Äôt entirely sure what the DomainException was intended to accomplish. As mentioned in the introduction, the best explanation at the time (and that persists in the documentation today) is that a DomainException should be thrown when a value is passed to a method that is outside the bounds or ‚Äúdomain‚Äù of that data type. Critically, this scenario is subtlety, yet distinctly, different from when an InvalidArgumentException would be used. An InvalidArgumentException should be thrown when an argument is not of the proper type ‚Äî for example, trying to pass a string as an argument that expects an int type instead. Conversely, the DomainException is better suited to handling an argument that is of the proper type , but is otherwise outside of the valid, expected values. In other words, the value is not within the target ‚Äúdomain.‚Äù To see how a DomainException might be used in real world code we have the Publication class, as seen below: This class contains a few properties, but the critical components are the const PublicationTypes array and the setPublicationType(string $publicationType) method. The latter of these performs a basic logic check to determine if the passed $publicationType value is found within the valid list of PublicationTypes . If so, it sets the instance property value. However, if the passed type cannot be found in the list, a new DomainException is thrown indicating the problem. Again, this isn‚Äôt an appropriate scenario for an InvalidArgumentException because the type that was passed is valid ( string ). Instead, we‚Äôre throwing a DomainException because the value itself doesn‚Äôt meet our requirements (in this case, it‚Äôs missing from the valid types list). To test this functionality out and make sure everything is working we have two functions, setValidPublicationType() and setInvalidPublicationType() : In the first function we‚Äôre using a valid PublicationType of digital . On the other hand, the second Publication call passed an invalid PublicationType of poem . The log output shows just what we expected: The first function behaves fine and the second throws a DomainException our way: Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems.", "date": "2017-08-16"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì DivisionByZeroError", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/divisionbyzeroerror", "abstract": "In today‚Äôs article we‚Äôll continue our travels through the PHP Exception Handling series with a closer look at the DivisionByZeroError. As you might suspect, the DivisionByZeroError is (sometimes) thrown when attempting to divide a value by zero. The challenge is the caveat of ‚Äúsometimes‚Äù, because this particular error might not be thrown as often as you think. We‚Äôll start by looking at where the DivisionByZeroError sits in the PHP Exception Hierarchy, before moving on to some functional code samples that illustrate when DivisionByZeroErrors will (and won‚Äôt) be thrown, so let‚Äôs get going! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Error implements the Throwable interface. ArithmeticError extends the Error class. Finally, DivisionByZeroError extends the ArithmeticError . Most of us are familiar with the trouble that comes when trying to divide by zero. From playing with our calculator back in school days to modern programming and development, the fact remains that attempting to divide by zero is always considered undefined . Since it does us no good to dwell any further on why that is the case, let‚Äôs jump right into our code sample and see how DivisionByZeroErrors are commonly thrown in the realm of PHP, and what we can (and cannot) do to handle them: Let‚Äôs begin with our modulo() function, which accepts two parameters and performs a division of the two before spitting out any remainder: To test these out we‚Äôve made two calls to modulo() : The first using 10 and 3 , while the second uses 10 and 0 : The log output shows us that the first invocation works just fine, while the second call throws a DivisionByZeroError , which we were able to successfully catch as intended: Now let‚Äôs try our divide() function, which behaves much the same way, but attempts a straight division instead of a modulo operation: This time we‚Äôll pass in 10 and 2 the first time, along with 10 and 0 again the second call: Again, the first call behaves as expected and outputs our result, but the second call is a little bewildering. Even though we clearly performed a division operation using a divisor of zero, no DivisionByZeroError is thrown. Instead, the $result of the calculation merely returns as INF : Strange, what gives? Keen observers may have noticed we explicitly set the error reporting level at the top of our script to only include the E_ERROR flag, which is described in the documentation as including only ‚ÄúFatal run-time errors.‚Äù As it turns out, PHP doesn‚Äôt consider straight up division by zero, as we saw in our second divide() call above, to be a fatal run-time error. Instead, it considers it a warning, which can be seen if we include the E_WARNING flag in our error_reporting() function call at the top: Now, when we rerun our two divide() calls we still get the same INF $result of the second call, but we also see a PHP Warning indicating that there was an attempt to divide by zero: The last thing we‚Äôll try is calling the built-in intdiv() function by using our performIntDiv() wrapper function: As it happens, intdiv() behaves much the same as a modulo, meaning it will also throw an actual DivisionByZeroError when a value of zero is provided as the second argument, as shown by the output from above: Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems.", "date": "2017-07-10"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì ClosedGeneratorException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/closedgeneratorexception", "abstract": "Moving along in our detailed PHP Exception Handling series, today we‚Äôll take a look at the PHP ClosedGeneratorException. A closed generator exception occurs when attempting to perform a traversal on a generator that has already been closed or terminated. Throughout this article we‚Äôll explore the ClosedGeneratorException in more detail, digging into where it resides in the PHP Exception Hierarchy, along with some functional code samples that will illustrate how these errors are commonly thrown, so let‚Äôs get going! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Exception implements the Throwable interface. ClosedGeneratorException extends the Exception class. To understand what might cause a ClosedGeneratorException we first need to understand the purpose of generators in PHP and how they work. Put simply, a generator is an easy way to implement an iterator, without the need to implement all the normal methods and functionality that the Iterator interface normally requires. To illustrate the differences between iterators and generators, we‚Äôve got three different examples. The full working code sample can be found below, provided for easy copy-and-pasting if you wish to try it out yourself. After this code block we‚Äôll go over the code in more detail and explain what‚Äôs going on: We‚Äôll begin with a typical iterator class that inherits from the Iterator interface. Note: PHP includes a number of built-in iterators, including one for iterating over simple collections like Arrays . However, for our purposes, we‚Äôve created our own iterator to show how they typically work under the hood. Nothing too fancy going on here. The basic purpose of this class is to accept a collection of elements, iterating through each subsequent element every time next() is called. The current element is retrieved via the current() method. To test out this iterator (along with our generators) we have a Book class that we‚Äôll use to create a collection of books: Now, the executeExamples() function creates the baseline $books collection and passed it to each of our example functions: We begin with the iteratorExample() function, which passes the $books collection to a new CollectionIterator instance, then tests that everything works as expected by iterating a couple times and outputting the results before rewinding and checking that the next() iteration retrieves the first element again: Sure enough, the output shows we iterated through the first two elements, rewound, then retrieved the first element once again, as intended: Iterators are all well and good, but their code and usage can become rather complex if we‚Äôre not careful. Hence, the introduction of generators in PHP 5.5, which aim to simplify the code necessary to create iterators. Generators rely on the yield keyword, which you‚Äôre probably familiar with from many other languages. Its purpose is to pause execution at the yield statement location, return the currently yielded value, then resume execution from the previous pause point during the next call/iteration. Creating a generator is as easy as pie: Just create a normal function and add a yield statement where you want execution to pause and an iterable or sequential value to be returned. For example, here‚Äôs our basic generator function that simply iterates over a collection and yields each element, in order: The generatorExample() function uses the generator() function and performs similar logic to our iteratorExample() function. It outputs the first two elements, then performs a rewind to reset the iterator state, then tries to output the first element again. Running this function works fine until we hit the rewind() method call, which throws an Exception because we‚Äôre not allowed to rewind a generator that has already yielded at least one value: Generators were built with this restriction in mind because their purpose is to be one-time sources of iterable data ‚Äî resetting their state and iterating again is contrary to those principles. For our last example we‚Äôve created the generatorSelfClosing() function, which is similar to our previous generator except it intentionally closes (terminates) itself after the first iteration. The return statement triggers a closing and termination of the active generator: This time, in our test function we‚Äôll try iterating over our elements after the generator has already been closed/terminated: The expectation is that the first element is retrieved fine, but the second element retrieval will return null , since we explicitly closed the generator by returning null on the second iteration call. Then, as the output shows, we end up throwing a ClosedGeneratorException exception when we attempt to iterate through our now-closed generator: Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems.", "date": "2017-07-28"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì ArithmeticError", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/arithmeticerror", "abstract": "Today we begin our new PHP Exception Handling series with a deep dive into the ArithmeticError . As you can probably guess, the ArithmeticError is thrown when PHP code attempts to perform an invalid mathematical operation. Throughout this article we‚Äôll dig into the ArithmeticError in more detail, looking at where it sits within the PHP Exception Hierarchy. We‚Äôll also take a look at some functional code aimed to illustrate how ArithmeticErrors might occur in your own adventures, so you can plan accordingly. Let‚Äôs get to it! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Error implements the Throwable interface. ArithmeticError extends the Error class. The ArithmeticError isn‚Äôt too difficult to grasp, but it‚Äôs important to briefly review why it has the Error suffix, as opposed to an Exception suffix. Put simply, PHP has two general categories of exceptions ‚Äî internal errors and user exceptions . Historically, an internal error would‚Äôve caused a total failure (a fatal error), forcing the PHP execution to halt completely. However, modern PHP versions now provide a catchable class known as Error for those more critical internal errors, allowing your application to continue execution after the error is properly handled. This means, of course, that ArithmeticError is considered an internal error, primarily because PHP doesn‚Äôt know how to handle calculations that cannot be completed as requested by the code. To illustrate we have a few simple examples. We‚Äôll start with the full, functional code below, then explore each scenario in a bit more detail afterward: Most of the time PHP tries to handle improper mathematical issues on its own, without the need for user intervention or throwing an error. For example, if integer overflow might occur, such as using an integer value greater than a 32-bit system can handle ( 2,147,483,648 or higher), PHP will often automatically convert that to a floating point number to perform the calculations. However, there are some scenarios where PHP doesn‚Äôt have an escape route, so to speak, so it must throw an ArithmeticError your way. One such scenario that we‚Äôre exploring above is performing an improper bitwise shift operation. Here we have a DoBitwiseShift() function that takes two numbers ( 1 and 3 ), and performs a left bitwise shift. As a reminder, a bitwise shift means to shift the bits of a target object X number of times. Therefore, $a << $b indicates we want to shift the bits of $a $b times to the left. The result is that we‚Äôre effectively multiplying $a by two, multiplied by $b : The output of our operation above shows that 1 << 3 is equal to 8 , because we‚Äôre effectively multiplying 1 by 2 three total times: However, let‚Äôs now try changing $b to a negative number and see what happens: As it happens, we‚Äôre unable to perform a bit shift a negative number of times because it just doesn‚Äôt make any logical sense. Therefore, the above function throws an ArithmeticError that we‚Äôre able to catch: As mentioned before, another potential issue is when trying to force PHP to create objects of a certain class type, yet outside the bounds of what values that type allows. We see this in action in extreme cases using the intdiv function, which accepts two integer arguments and returns the integer quotient of their division operation. For example, here we‚Äôre calling intdiv() with the largest possible 32-bit integer value as the dividend, and a lowly 3 as the divisor: The output result shows that this works as expected: Remember that since intdiv needs to generate and return an integer , we cannot get a float or decimal -type value as a result. Therefore, our result above was slightly rounded so it doesn‚Äôt include the extra third that would‚Äôve been on there with a floating point number. However, let‚Äôs try this again with some extra numbers: PHP doesn‚Äôt handle this well at all, and sure enough, it throws another ArithmeticError our way: This example in particular seems a bit odd at first. Why is it that diving two whole numbers (integers) by one another should produce a result that isn‚Äôt also an integer itself? Particularly when we‚Äôre dividing by one (well, negative one actually), which should give a number that‚Äôs effectively the same size as the original dividend. The answer lies in considering how computers must handle signed integers , which are whole numbers that can be positive or negative. Since everything in most modern computer systems is stored in bits (ones or zeroes), these signed integers always boil down to base 2 values. This means that every increase in the potential size of an integer is always adding AT LEAST two possible values (another bit place, which can be either a zero or a one). Extrapolating from there, let‚Äôs now imagine we‚Äôre creating our own programming language like PHP and we have a new integer data type that we need to set a limit on. We‚Äôve decided on something small and simple for this example, so let‚Äôs go with a maximum of four bits that can represent our number in binary. Since we‚Äôre creating a signed integer here, one of those bits must be reserved and used exclusively for the positive or negative distinction of our numeric value. This leaves us with three bits to hold the absolute value. There are a number of ways to represent signed numbers in binary, but we‚Äôve decided it makes the most sense to only include a single binary value that corresponds to the value of zero. Therefore, we‚Äôre going to use a system called two's complement . It is so named because we simply invert all the bits of the number (and add one) when we want to flip the sign. Let‚Äôs go through all our possible binary values and their corresponding interpreted numeric value: There we have all the possible binary values we can make using four bits. What‚Äôs critical to note is that, as mentioned before, our number must always increase in sets of two since each new bit adds a one and zero. However, and this is the critical point, these values are not evenly distributed beyond the value of zero when dealing with signed numbers. As we can see even from our simple example above, since the value of zero must take one binary value position ( 0000 ), this leaves us with only 15 remaining binary values to distribute. Using the two's complement system that we did, this means our total possible negative values will include one extra than the total possible positive values. We can go all the way down to -8 , but only as high as positive 7 the other way. Now let‚Äôs glance back at our broken intdiv() example before. Notice that the divisor we‚Äôre using is -1 . This is critical and the key to the issue we‚Äôre having that is throwing an ArithmeticError . Take our simple 4-bit number above. Let‚Äôs take the minimum possible value ( 1000 or -8 ) and multiple it by -1 : Since we‚Äôre multiplying two negatives numbers we get a positive value of 8 as a result. This is a big problem! If our new programming language only allows for signed numbers to be represented by four bits, we can‚Äôt handle the value of positive eight! The largest number in our system is actually only positive seven. This is exactly what‚Äôs going on in our intdiv() example, but on a much larger scale. PHP also uses a two's complement number system, with a maximum storage of 64 bits. PHP also provides global variables to quickly access these two extreme positive and negative values, PHP_INT_MIN and PHP_INT_MAX . Outputting those values shows just how big they are: However, just like our 4-bit example above, the same problem applies here in PHP: The smallest negative value is one fewer than the maximum positive value if inversed. The result is that trying to divide -9223372036854775808 by -1 is effectively the same as multiplying 9223372036854775808 by 1 , giving the obvious result of 9223372036854775808 . Since the largest positive integer PHP can handle is one less than that, an ArithmeticError is thrown. Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems.", "date": "2017-07-07"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì BadMethodCallException", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/badmethodcallexception", "abstract": "Moving along through our detailed PHP Exception Handling series, today we‚Äôll take a closer look at the BadMethodCallException in PHP, along with its lesser-used parent BadFunctionCallException. The primary scenario in which a BadMethodCallException is thrown is when calling either an instance or static method that doesn‚Äôt exist, or expects a different argument signature than the one provided. In this article we‚Äôll dig into the BadMethodCallException a bit more, looking at where it resides in the PHP Exception Hierarchy. We‚Äôll also take a look at how BadMethodCallExceptions should be used and handled in your own coding endeavors, so let‚Äôs get movin‚Äô! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Exception implements the Throwable interface. LogicException extends the Exception class. BadFunctionCallException extends the LogicException class. Finally, BadMethodCallException extends the BadFunctionCallException class. Below is the full code sample we‚Äôll be using in this article. Feel free to use any or all of the code if you wish to follow along. We have three examples that aim to illustrate how BadMethodCallExceptions and BadFunctionCallExceptions might come up. We start with the Book class, which contains a few property getters and setters, along with two PHP ‚Äúmagic methods‚Äù: __call() and __callstatic() . The __call() magic method triggers when an invalid instance method is called on a Book class instance. Similarly, the __callstatic() magic method is triggered when attempting to call an invalid static method. In both cases, the common technique is to throw a new BadMethodCallException indicating the problem. This ensures that a typo or incorrect method call is noticed immediately and can be remedied. To see this in action, we start with the callInvalidInstanceMethod() function: All we‚Äôre doing here is creating a new Book instance and then trying to call the checkout() method, which doesn‚Äôt exist. This throws a BadMethodCallException , as expected, which we catch and output: Not too surprisingly, we‚Äôll be using the callInvalidStaticMethod() method to test the Book::__callstatic() magic method: We need very little logical code to properly test this one ‚Äî all we need to do is to try calling the missing static Book::checkout() method. The output shows that our slightly different BadMethodCallException was thrown, as intended: Now we run into a bit of a strange situation. As we saw in the hierarchy section above, BadMethodCallException inherits from the BadFunctionCallException class. However, causing a BadFunctionCallException is quite uncommon and is generally not considered appropriate in userland code. There are a few reasons for this, but the biggest reason is that PHP itself throws a fatal error when an attempt is made to call an invalid function. To illustrate, take a look at the callInvalidFunction() function: Here we attempt to call the invalidFunction() function, which doesn‚Äôt exist in this context. One might expect a BadFunctionCallException to be thrown, but PHP doesn‚Äôt handle undefined functions that way. Instead, notice we‚Äôre also catching any Errors at the end of our catch block series. Sure enough, thanks to the ability to catch such errors in PHP 7+, the output shows that PHP threw an unexpected error because of our invalid function call: While you could explicitly throw BadFunctionCallExceptions in your own code when a function isn‚Äôt properly invoked, with most modern object-oriented design patterns, the BadMethodCallException will likely be more appropriate to your needs. Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems.", "date": "2017-08-11"},
{"website": "Airbrake", "title": "PHP Exception Handling ‚Äì AssertionError", "author": "Unknown", "link": "https://airbrake.io/blog/php-exception-handling/assertionerror", "abstract": "Today we‚Äôll continue with our exploratory PHP Exception Handling series by diving deeper into the PHP AssertionError. As you can probably guess, an AssertionError is (sometimes) thrown when an assert() call fails. However, a number of default settings and configuration differences based on PHP versions means that AssertionErrors may not always behave as you expect them to. Let‚Äôs jump right in by first looking where the AssertionError fits in the overall PHP Exception Hierarchy, then we‚Äôll take a look at some functional code samples to help illustrate how different PHP versions and configurations may alter your own experiences. Let‚Äôs get started! All PHP errors implement the Throwable interface, or are extended from another inherited class therein. Error implements the Throwable interface. AssertionError extends the Error class. Let‚Äôs begin by jumping right into some code to test out some assertions. Normally we‚Äôd begin with the entire code sample at once so it‚Äôs easier to copy for your own experimentation, but in this case we‚Äôll need to check (and change) a number of PHP configuration settings throughout our tests, so we‚Äôll be using the same functions multiple times for that. For those unaware, the assert() function accepts up to two arguments, but the single required argument should be a testable condition, either in the form of a string or a boolean condition, that will be tested by the PHP engine. If the assertion succeeds, nothing happens. However, if the condition fails PHP will perform one of a handful of (possible) actions, depending on settings, PHP version, and the like. For our purposes, our goal is to have a failed assert() call throw an AssertionError at us. Additionally, it‚Äôs worth noting that this example code is running on a default PHP 7 installation. We‚Äôre also using a simple Logging class to help with output, which can be found below: Let‚Äôs start with a basic function called assertEquality() , which asserts that both parameters are equal to each other: We‚Äôll test this out by calling it twice with two sets of arguments: We‚Äôd expect that the first call would succeed, while the second will fail since 1 != 2 , but our log output shows both were successful: What gives? As it turns out, PHP 7 comes with a default php.ini configuration setting for the zend.assertions value of -1 . As you can see from the description taken from the php.ini file itself, this means that assert() function calls are not even compiled: We can resolve this by setting zend.assertions = 1 . In addition, there‚Äôs also the assert.active setting that defaults to On , so we typically don‚Äôt need to change it, but it‚Äôs worth double-checking if your own installation is misbehaving. Now, after running our two assertion tests again we get much different output for the second (failing) assertion call: We‚Äôre starting to get somewhere now that our assert(1 == 2) test failed, but the PHP engine issued a Warning instead of an Error that we expected. This means that our try-catch block wasn‚Äôt able to catch the AssertionError that we were after. This failure to throw an AssertionError is due to another php.ini setting of assert.exception . When this is set to On (or 1 ), it forces the PHP engine to throw an AssertionError when an assertion fails, rather than the default of issuing a warning only. Again, the official documentation description further elaborates: 1: throw when the assertion fails, either by throwing the object provided as the exception or by throwing a new AssertionError object if exception wasn‚Äôt provided 0: use or generate a Throwable as described above, but only generate a warning based on that object rather than throwing it (compatible with PHP 5 behaviour) So we see that, as of PHP 7, the default behavior is to generate a Throwable if one is passed (as the second parameter), but not to actually throw it (unless assert.exception is enabled). In our case, after setting assert.exception = On and rerunning our tests, we get the following output: Now we‚Äôre starting to get somewhere, as we were able to throw and catch the produced AssertionError . Yet assert() has a few more options that can be used to modify its behavior; namely the assert_options() function: Here we‚Äôve configure a few of the assert() behavioral options, most of which are available in the php.ini as well, setting them to their default values. However, we‚Äôre also setting ASSERT_BAIL to true, which will attempt to terminate the executing process if a failed assertion is encountered. Thus, if we reorder our assertEquality() function tests so our failed test comes first (as seen above), our output dramatically changes once again: That‚Äôs quite a mess, but what‚Äôs important to note is that this produces an uncaught error. This is because ASSERT_BAIL = true forces the process to immediately terminate the moment the failed assertion is encountered, rather than completing execution. Thus, surrounding catch blocks and the like are never processed. The last setting we‚Äôll mess with is ASSERT_CALLBACK , which allows us to specify a callback function that will receive a handful of arguments when an assertion fails, which we can use for additional, custom processing. For our purposes we have the onAssertionFailure() function, which just accepts the handful of arguments that are passed and outputs a readable failure message: Executing our failed assertEquality(1, 2) function one last time with an ASSERT_CALLBACK function specified produces our new, modified output: We still generate and throw an AssertionError , but the callback function is a convenient way to handle such failures, regardless of any try/catch or assertion exception settings. Check out the Airbrake-PHP library , designed to quickly and easily integrate into any PHP project, giving you and your team access to real-time error monitoring and reporting throughout your application‚Äôs entire life cycle. With automatic, instantaneous error and exception notifications at your fingertips, you‚Äôll be constantly aware of your application‚Äôs health, including any issues that may arise. Best of all, with Airbrake‚Äôs robust web dashboard cataloging every error that occurs, you and your team can immediately dive into the exact details of what went wrong, making it easy to quickly recognize and resolve problems.", "date": "2017-07-15"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì ReferenceError", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/referenceerror", "abstract": "Moving along through our detailed Node.js Error Handling series, in today‚Äôs article we‚Äôll be checking out the ReferenceError in all its glory. If you‚Äôre familiar with plain JavaScript ReferenceErrors , the ReferenceError class in Node will look quite familiar, since it performs the same role: When a reference is made to an object that hasn‚Äôt been defined in previously executed statements, a ReferenceError is thrown. Within this article we‚Äôll explore the ReferenceError in greater detail, starting with where it sits in the overall Node.js Error Class Hierarchy. We‚Äôll also look at some functional code samples to illustrate a common scenario in which a ReferenceError might be thrown in your own code, so let‚Äôs get to it! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error ReferenceError ReferenceError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As discussed in the introduction, a ReferenceError is a common programming fault that occurs when code references an object that hasn‚Äôt been previously defined or initialized. The most common cause of such an error is simple typos. However, many programming languages (and common integrated development environments) are capable of detecting when a reference error is made due to a typo, and will alert you before you even execute your code. However, Node.js (and JavaScript that it‚Äôs built upon) is not a strongly-typed language, so many IDEs may have trouble determining if a reference is actually incorrect, or if the code is proper and intentional. Consequently, even if your IDE warns you about an invalid reference, you‚Äôre still able to execute your code since there‚Äôs no pre-compiler double-checking the code, which can lead to a higher rate of ReferenceErrors in JavaScript-based applications than in some other stricter languages. To illustrate we have a very simple code sample. For a more realistic example we‚Äôll be using our Book class module, which we can use to define simple book objects with properties like title , author , pageCount , and so forth: We have two test functions that make use of our Book class. We‚Äôll start with the passingTest() function, which instantiates a new Book and then uses the logging.log() method to output the object to the console: Executing this function produces the following output: It‚Äôs worth noting that the publicationType property is making use of the enum module found on NPM , which allows us to implement an enumeration for this property. Consequently, the simple console.log() output of our book instance object shows the full publicationType enum object representation for the default value of PublicationType.Digital . However, if we use a different form of output, such as the Book.getTagline() method, we get the expected string value representation of the publicationType property: Anyway, everything above works just as expected, so let‚Äôs now look at our slightly modified version of this function, failingTest() : The name of the function is a strong indicator that something is wrong here. As it happens, you may notice that we instantiate the same Book instance again, but this time our call to logging.log() passes an invalid reference to boo , rather than book . As mentioned, the most common cause of ReferenceErrors is typos, so this scenario isn‚Äôt too out of the ordinary. Executing this code produces the following output, showing that a ReferenceError was, indeed, thrown: Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-12-15"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì RangeError", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/rangeerror-2", "abstract": "Continuing along through our in-depth Node.js Error Handling series, today we‚Äôll be going over the RangeError . As with many other programming languages, including Ruby with the RangeError article we covered in that language, the Node.js RangeError is thrown to indicate that a passed function argument does not fall within the valid set or range of acceptable values. This might be because the value simply falls outside a given numeric range, or because there is a specific set of allowed values and the passed argument is not one of them. Throughout this article we‚Äôll examine the RangeError in more detail by first looking at where it resides in the larger Node.js Error Class Hierarchy. We‚Äôll also look at some functional sample code illustrating how many of the built-in Node.js modules purposefully throw RangeErrors when invalid a arguments are passed, and how you might deal with them in your own code. Let‚Äôs get this party train rollin‚Äô! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error RangeError RangeError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As outlined in the introduction, a RangeError is intended to indicate when a passed function argument falls outside the bounds of allowed values, whether numeric or not within a set. To illustrate this in our code example we‚Äôre performing a simple client/server connection test using the net module, which provides an API for asynchronous networking functionality. Thus, our app.js begins by requiring the net module, along with our custom gw-logging module seen above, to help us simplify API calls for logging exceptions and other information to the console: The connectToPort(port) function performs most of the logic for us, by attempting to create a connection via the net.createConnection() method. This client instance can then be used to attempt to connect to the passed port parameter, while we catch any unexpected Errors : Our main test function, executeTests() , consists of first establishing a basic server via the net.createServer() method. We then open up a single port ( 24601 ) to listen for incoming client connections: With the server created and listening at port 24601 we can start a series of test client connections at various ports via the connectToPort(port) function. First, let‚Äôs try the expected port of 24601 : Executing this code produces the following output: Everything works as expected. Our server was created, we opened port 24601 on it to listen for incoming connections, then our client attempted and successfully connected to that same port, before the client disconnected and the socket was destroyed. Now, let‚Äôs try connecting to a different port ( 31234 ), which the server isn‚Äôt actively listening on: This produces an uncaught error, indicating that the server refused the connection at that port: Finally, let‚Äôs connect to port number 1,000,000 , which is well above the expected number of maximum ports for TCP/UDP connections ( 65535 ): Executing this code doesn‚Äôt even attempt to connect to port 1000000 and give us a connection refusal message like before, but instead throws a RangeError instead, indicating that the port is well outside the bounds of allowed port range: Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-12-08"},
{"website": "Airbrake", "title": "Create a Serverless Twitter Bot with Airbrake and AWS Lambda ‚Äì Part 1", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/serverless-twitter-bot-airbrake-lambda-part-1", "abstract": "Over the next week we‚Äôll be learning how to create a fully-automated, NodeJS, serverless Twitter bot with real-time error monitoring capabilities via Airbrake. Our Twitter bot will be capable of performing just about any task you can imagine, and it will do so serverlessly, by making use of the power of AWS Lambda functions. Let‚Äôs get right into it! The first thing to do is decide where you want to create your project. I‚Äôll be keeping things simple by naming my project twitter-bot . As is commonly the case, we also want to use source control management, so I‚Äôll be using Git locally and uploading to GitHub as a remote repo: We‚Äôll be using the twitter NPM package to simplify communicating with the Twitter API, so let‚Äôs install that (along with its own dependents): As with most Git repositories, there are some files or filetypes we don‚Äôt want to expose to the public, so we‚Äôll add a .gitignore file to the twitter-bot project directory. Note: I am using VS Code and WebStorm to develop this project, so the code command can be replaced with whatever command you use to open your favorite text editor. We‚Äôll need to get some authentication API keys from Twitter, which provide authorization to perform automated tweets and other functionality, and some of this information should be kept private. We‚Äôll be storing these Twitter API keys in the twitter-api-credentials.js file, so let‚Äôs add that explicit file to the .gitignore immediately, before we accidentally add some secret keys and commit them to the Git repository: Now, let‚Äôs double-check that we‚Äôve setup everything correctly and that our secrets won‚Äôt be unintentionally committed. We‚Äôll start by creating the twitter-api-credentials.js file and adding some irrelevant text to it. Here we‚Äôre using the >> Unix command to append the text 12345 to the twitter-api-credentials.js file, then outputting the contents of the file using the cat command: Our credentials file is created, so now we should double-check that .gitignore is working correctly and won‚Äôt add twitter-api-credentials.js to the repository. A simple git status command should do the trick and show what untracked files are waiting to be added: That looks great, since everything except the ignored twitter-api-credentials.js is listed there. Let‚Äôs get into the smart habit of committing changes to Git by making our initial commit right now: We‚Äôll also be storing this project on a remote, public GitHub repository , so we need to set the origin and use the git push command to ensure our changes are uploaded: Now we need to actually obtain some Twitter API credentials, so we start by logging into our Twitter account and then visiting https://apps.twitter.com/ . Click Create New App then fill out the form as you see fit. For this example we‚Äôll use the following: Name : AirbrakeArticles Description : Tweeting random Airbrake.io articles! Website : https://github.com/GabeStah/twitter-bot Agree to the terms of use, then create your app! Next, we need to create and copy the API keys into the twitter-api-credentials.js file for use in our project. Click on the Keys and Access Tokens tab at the top, then click Create my access token at the bottom. Per the Twitter NPM documentation we need the consumer_key , consumer_secret , access_token_key , and access_token_secret values from Twitter. Open the twitter-api-credentials.js and paste the following template into it: Now, copy and paste each value from the Twitter App page into the appropriate field and save the file, which now has all the secret keys necessary to connect to and use Twitter programmatically. At this point we can actually begin creating our application logic by first testing that our Twitter API connection works. Start by creating the base application file for your Node project. The default is usually index.js : We‚Äôll start by requiring the twitter-api-credentials.js file that exports our credentials, along with the twitter NPM module. We‚Äôll then instantiate a new Twitter object and pass the credentials to it, which will perform authentication and authorization for us while working with the Twitter API: Everything is ready to go, but how do we actually use the twitter module? It primarily provides convenience methods for sending GET and POST HTTP method requests to the Twitter API . For example, if we want to post a tweet we need to send a POST request to the statuses/update API endpoint, as shown in the official documentation . The API accepts a number of required (and optional) parameters to be included with the request. To illustrate, let‚Äôs perform a simple test tweet of \"Am I a robot?\" from our bot account. Add the following to index.js : Now, to test that everything works just run your Node application. If all was setup correctly you‚Äôll see the output in the console log to confirm it works. You can also refresh your Twitter account page to see the new \"Am I a robot?\" tweet : Alright, we‚Äôve got a working bot, but right now it only does exactly what we tell it. Let‚Äôs improve things by customizing it a bit and getting it to do something more interesting. For this example, we‚Äôll use our AirbrakeArticle Twitter bot account to tweet out random Airbrake.io articles that have been published in the past. There are many ways to accomplish this, but we‚Äôll start with the easiest technique. Since https://airbrake.io/blog uses WordPress, we can access the RSS or Atom feed by appending /feed or /feed/atom to the base URL, respectively. For example, opening https://airbrake.io/blog/feed/atom provides the Atom feed of the most recent articles. Unfortunately, this doesn‚Äôt give us programmatic access to historical data, since RSS feeds are limited to only the most recent information, but it‚Äôs a good starting point. There‚Äôs little reason to reinvent the wheel, so we‚Äôll be using the feedparser NPM module to simplify the process of retrieving the latest Airbrake article feed. The use of the --save flag within the npm install command forces the package being installed to be automatically added to the package.json dependencies field, so we don‚Äôt have to manually add it ourselves: We then need to require('feedparser') at the top of index.js , along with the request built-in module for handling our request to the feed URL ( https://airbrake.io/blog/feed/atom ). The top of index.js should look something like this now: We need to respond to a few different events to process the incoming feed request, since it happens asynchronously: We start with feed.on('response') , which fires when the request(...) made to the feed URL receives a response. If we get a 200 error code back, we know it was successful so we pipe the response to the feedparser object. From there, feedparser.on('readable') fires when there‚Äôs a readable stream available, which means we have some feed data to parse. Within this function we‚Äôre outputting each article to the log and then adding them to the articles collection array. Finally, feedparser.on('end') is invoked when feedparser completes the task of reading the stream, so we want to actually produce a tweet of a random Article when that occurs. We‚Äôve also added the tweetArticle(article) and tweetRandomArticle() helper functions as simple wrappers for using the twitter module to POST to the statuses/update API endpoint: Alright, everything is setup, so let‚Äôs try running our application again and see what happens: Awesome! Everything works as intended. We parsed the Atom feed from WordPress to capture the latest articles, then selected a random article and tweeted the title and the URL on our Twitter Bot account, AirbrakeArticle . We now have the basic structure of our application up and running, so next week we‚Äôll refine it and make it better suited to the real-world by implementing real-time error monitoring via Airbrake‚Äôs NodeJS package. We‚Äôll also ensure our Twitter bot application can run automatically and serverlessly by using AWS Lambda. Stay tuned!", "date": "2017-12-29"},
{"website": "Airbrake", "title": "Tracking User Satisfaction with Apdex", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/tracking-user-satisfaction-with-apdex", "abstract": "Airbrake Performance Monitoring zeros-in on performance problems in your applications, helping you to deliver quality user experiences. Airbrake tracks user satisfaction through Apdex , which measures how quickly your application responds to user actions. Apdex is an open standard metric for measuring application performance through application responsiveness. What‚Äôs cool about it is its simplicity. It boils down to a single number: your Apdex score. This can be applied to your whole app or a specific endpoint. This simple score was designed to be easy for everyone on your team to understand and track app performance. Apdex sorts page responses into thee categories: Satisfied: the app is responding optimally from the user‚Äôs perspective. Tolerating: the app is noticeably slow but is not slow enough to cause the user to leave. Frustrated: the app is so slow as to risk users dropping out and leaving the app. The frustrated threshold is 4 times the tolerating threshold . You set your app‚Äôs tolerating threshold in Airbrake. By default it is 0.5 seconds which would make the frustrated threshold 2 seconds (4 * 0.5 seconds) but you can customize this to fit your team‚Äôs use case. The raw data gets formulated into your Apdex score using this formula: The goal being: distill all those individual user experiences into a single score for your app between 0 (bad, where no users are satisfied) to 1 (excellent, where all users are satisfied). You can find your app‚Äôs overall Apdex score in your Performance Dashboard overview along with a trend chart tracking total Satisfied, Tolerating, and Frustrated response counts broken down over time. You can also dive into a specific route you‚Äôre interested in and view its own Apdex score. This can be helpful in understanding the actual performance impact of changes you make over time to critical routes. Get Automatic Apdex tracking for your app by enabling Performance Monitoring in your account settings !", "date": "2019-09-16"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì TypeError", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/node-typeerror", "abstract": "Moving along through our detailed Node.js Error Handling series, today we‚Äôll be exploring the TypeError . Within the Node framework a TypeError indicates that a passed argument is not of the appropriate type. This method is used liberally throughout the built-in Node API modules, and should also be used within your own custom code to perform type checking at the top of of your functions and methods. Throughout this article we‚Äôll explore Node‚Äôs TypeError in more detail, starting with where it sits in the overall Node.js Error Class Hierarchy. We‚Äôll also look over some simple, functional code samples that illustrate how both the built-in API modules, as well as custom modules, make use of the TypeError for type checking purposes. Let‚Äôs get to it! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error TypeError TypeError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As previously mentioned, the TypeError should be used to indicate that an argument is not the proper type for what the function/method expects. For example, if a string value is expected, the top of the function code block will perform some type check to ensure the relevant parameter is a string . If not, a new TypeError(...) instance should be thrown. Many of the built-in Node API modules use TypeErrors . For example, here‚Äôs a snippet of the path.js core module : The assertPath(path) function is called at the top of nearly every API method provided by the path module, as a simple check that the passed path argument is actually a string. In our example code we‚Äôll use the path module‚Äôs parse(path) method to try parsing a string path and outputting the result to the console: To test this out we‚Äôll pass two values, starting with a normal looking unix-style path string of '/Error/TypeError/index.js' , followed by a simple number of 12345 : Executing these test calls produces the following output: The normal string argument works as expected and outputs the parsed path object. Meanwhile, the numeric value of 12345 throws a new TypeError indicating that the passed path parameter must be a string. Moreover, we can see from the detailed call stack that we invoked the parse(path) method in the path module, which itself invoked the assertPath(path) function we looked at above, which is what actually threw the TypeError during execution. Similar practices should be used within your own custom code, as well. Here we‚Äôve modified our Book class to perform some simple type checking for our setXYZ(...) methods. This will help ensure that the user cannot set improper value types for properties such as the title , author , or pageCount . It‚Äôs worth noting that you‚Äôll need to perform the proper type checking, depending on what kind of value you‚Äôre interested in. For example, if we just need to know if an object is a primitive type (like a string , number , or object ) we can use the typeof operator , as seen in Book.prototype.setAuthor and others. However, the Book.publishedAt property is meant to be not only an object , but an explicit type of object ‚Äî a Date , in this case. Therefore, we have to use the instanceof operator to perform more complex instance type checking. As before, we‚Äôll be performing two different invocations to test this, starting with a valid set of arguments passed to the Book constructor: Executing this function creates a valid Book instance and outputs the object to the console: However, for our second Book we‚Äôre slightly modifying the author argument by explicitly calling a new String(...) constructor, which is part of the ECMAScript API: Executing this code throws a TypeError from the Book.prototype.setAuthor(value) method: This is a subtle change, but it illustrates an important consideration that must be made when coding your own type checks. The Book.prototype.setAuthor(value) method only expects that the passed argument be of type string , as checked by the typeof operator. Therefore, the new String object that we passed in the createInvalidBook() function fails this check and throws a TypeError . In reality, we‚Äôd probably want to perform some more robust type checking and maybe conversion, to be able to get the primitive string type from a passed String object. Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2018-01-01"},
{"website": "Airbrake", "title": "Re-introducing Airbrake Performance Monitoring", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/re-introducing-airbrake-performance-monitoring", "abstract": "Today, we are pleased to announce an all-new pricing model for Airbrake Performance Monitoring (APM). We‚Äôve lowered the price of our entry-level Performance Monitoring Plan from $99 per month to only $19 per month! Not only is it now much cheaper to use Airbrake Performance Monitoring, but every event monitored is a tenth of the price of competing solutions. With prices as low as $.09 for 100k events, you can afford to track every event for every user.¬†No more sampling or filtering large swaths of transactions to keep performance monitoring within your budget. Airbrake Performance Monitoring is the most cost-effective solution for Dev Teams because it focuses on the two most important app performance metrics you need: latency and Apdex scores. As with all of Airbrake‚Äôs offerings, Airbrake Performance Monitoring (APM) has three key attributes: Developer Focused ‚Äì Airbrake Performance Monitoring is meant to be completely managed by the developer.¬†No need for a DevOps team or getting into the nitty-gritty of your environment.¬†Since APM metrics are collected in the same notifier as Error Monitoring, all you have to do is turn on APM in your Airbrake dashboard. Lightweight ‚Äì Airbrake Performance Monitoring runs in the same notifier that sends your Errors.¬†No additional code is required. Immediately Impactful ‚Äì Once Airbrake Performance Monitoring is set up, you‚Äôll receive immediate insights into your app. In addition to its simplicity, the Performance Monitoring dashboard includes pre-configured graphs and metrics so you can glean important information at a glance. Nothing could be easier. In addition to new, cheaper Airbrake Performance Monitoring plans , we‚Äôre also rolling out On-Demand Events. Similar to On-Demand Errors , you‚Äôll have the option to continue to send events to Airbrake beyond your plan‚Äôs monthly limit for a small, discounted fee per event. So, when we say, ‚ÄúA cheap, easy way to catch every event,‚Äù we really mean it. Something to keep in mind: Airbrake Performance Monitoring isn‚Äôt directly tied to your Error Monitoring plan. Because these are two separate plans, you choose how many events you would like to receive per month independently from error monitoring. Ready to get started? Log into your Airbrake account and select the ‚ÄúChange Plan‚Äù option on the Account & Billing page. Choose the plan level that‚Äôs right for your app and confirm your payment details. Within minutes you‚Äôll start to see new insights into the health of your app. ü•ÇHere‚Äôs to making 2021 the healthiest year for your app ever.", "date": "2021-01-14"},
{"website": "Airbrake", "title": "What Does HTTP Do?", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/what-does-http-do", "abstract": "Before diving into what HTTP does, it‚Äôs important to understand what it is. HTTP stands for HyperText Transfer Protocol. It is the primary protocol used for communicating and fetching resources across the web. In addition to this, it provides the foundation for most data exchanges across the internet. We mostly associate it with HTML documents, but it also works for many other resources, as well. HTTP It is based on a client-server protocol, meaning that a client, such as a web browser, application, or other user agents, makes a request to a server which then returns information related to that request. Beyond simple browser functions, this can include just about anything, such as search engine robots, API calls, and many other services. To understand how HTTP operates, we need to understand how clients and servers communicate with each other. These are handled through a series of requests and responses sent through intermediary computers and programs, otherwise known as ‚Äúproxies.‚Äù Proxies facilitate access between different nodes on the internet. Image source: https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview Requests are sent from clients to a server, which in turn handles this request and returns an answer or ‚Äúresponse.‚Äù This is, however, a little oversimplified. There are many layers of computers and proxies that exist between the web browser and the server. These layers of connections include TCP/IP (Transmission Control Protocol/Internet Protocol), but for our intents and purposes, these are largely hidden when transmitting data across the web through HTTP. HTTP includes a number of set parameters that transmit information between computers on the internet. These include: HTTP Version (e.g. version 1.0, 1.1, etc.) Date/Time formats, which are always expressed in Greenwich Mean Time (GMT) Uniform Resource Identifier (URI), which is the address of the resource Character Set specifications for which character sets are used do display information (e.g. US-ASCII, ISO-8859-1, etc.) Content Encodings (such as various formats like zipped files) Media Type, which refers to file types (e.g. image/jpg) Language (e.g. ‚Äúen‚Äù) HTTP requests send their content across in the form of messages. These messages always include a header and the message body. Below is an example header. As you can see, the results are in a key-value format. The key is then followed by a colon and then the value.  The headers include metadata about the file, which includes parameters, information pertaining to where it came from, the date it was retrieved, and more. User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0 Host: www.example.com Accept-Language: en Date: Sat, 21 Nov 2020 20:27:42 GMT Server: Apache Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT ETag: ‚Äú34aa387-d-1568eb00‚Äù Accept-Ranges: bytes Content-Length: 51 Vary: Accept-Encoding Content-Type: text/html The body includes whatever content exists in the file. Below is an example of a retrieved ML file. <html> <body> <h1>This is a sample web page</h1> </body> </html> Now that we have a thorough understanding of what HTTP is, we can answer the question, ‚ÄúWhat does HTTP do‚Äù? When your browser, or tool, makes a request to a server, a response is returned. This is, essentially, what HTTP does. There are several types of requests that are common within a standard HTTP request. These include the following: A GET request is for retrieving or ‚Äúgetting‚Äù information from the server based on the URI that has been provided.¬† These will simply retrieve data; nothing else should occur on the server. For example, you may have a bit of text or an HTML page that you want delivered. A GET request will provide that information back to your web browser (or agent). This works much like GET, but only retrieves header information. POST requests send information to a server through items such as forms and upload files. PUT is similar to Post, except it is designed for updating or changing data on the server. Exactly as it sounds, this is an instruction to remove an item from the server given a URI. CONNECT creates a connection or tunnel to the server according to the specified URI. This is a description of any options sent along with a request to the server. This is a loop-back test function. It is used for debugging. Once a request is sent to a server, it will return a 3-digit HTTP response. These codes indicated the success or failure of information retrieved or sent from the server. While there are many different types of response codes, they are always organized into the following groupings: 1xx ‚Äì Any response beginning with a 1 is an informational request. A 1xx identifies whether a request was received and if there is a process continuing. For example, a 100 response refers to ‚Äúcontinue.‚Äù 2xx ‚Äì Responses beginning with 2 mean that the request was successful. The server has received and understood this request. For example, a 200 means the request is good,  201 states that the request was completed, 202 means that the request was accepted. Several others may come up, but if you get a 2xx response code, the process is typically working properly. 3xx ‚Äì Responses beginning with 3 means the request is being redirected. Typically, more action is needed for a response to complete. Common responses of this type include 301, which refers to a page that has permanently moved to a new URL, and 302, which refers to a temporary move. 4xx ‚Äì Responses beginning with 4 refer to errors at the client level (e.g. the browser, or whatever agent or service you are using). Typically, these are syntax errors. A common error in this category is the well-known 404 error which occurs when a URI points to a resource that cannot be found. 5xx ‚Äì Responses beginning with a 5 refer to errors that occur on the server. While the request may have formed validly, the server failed for some reason. The most common of these is 500 ‚Äì ‚Äúinternal server error‚Äù (unexpected condition) or 502- ‚Äúbad gateway‚Äù (the server did not receive a valid response from another server). This article is only a brief overview of what HTTP is and what it does; however, it should give you a good idea of how the process works. Ready to tackle some HTTP errors on your own? Airbrake Error Monitoring is a developer-centric and lightweight piece of software that can quickly find errors in your application. It installs in minutes and, for 30 days, you can try Airbrake Error Monitoring for free ! Track down errors now.", "date": "2020-12-18"},
{"website": "Airbrake", "title": "Controlling Airbrake Error Volumes with Usage Caps & Filters", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/controlling-airbrake-error-volumes-with-usage-caps-filters", "abstract": "We regularly receive requests from Airbrake customers asking how they can more finitely control the number of errors they receive during a given billing cycle. In general, these requests originate from a need to have more flexibility or manage costs. With that in mind, Airbrake recently engineered a new ‚Äúon-demand‚Äù billing engine and introduced On-Demand Errors. You can learn more about that here . The feedback about On-Demand Errors so far has been roundly positive, as it allows our customers who are close to (or over) their monthly error quota to preserve all their errors without having to upgrade a full plan tier. But with that change has also come some good questions ‚Äì most prominently: ‚Äú How can I control the volume of errors received and keep an eye on costs? ‚Äú We‚Äôre glad you asked! Currently, there are two easy ways to adjust the error volume for your Airbrake account with our new Usage Cap feature. With the introduction of On-Demand Errors, we launched a new feature that allows customers to set ‚Äúusage caps‚Äù for errors. In other words, you can now set an upper limit or ‚Äúcap‚Äù on the number of errors you want to receive in a given billing cycle. For the sake of this blog, we are going to take a look at managing Usage Caps predominantly for errors ‚Äì although the same principle applies to performance or APM events, as well. (We‚Äôll dive into that topic in a future blog post) To that end, a Usage Cap can be set at either the account or project level, thereby giving you the ability to prioritize cost (the total number of errors received) vs. comprehensiveness (the number of errors received across your projects and account). Account-level caps let customers determine the value of receiving on-demand errors versus the total cost. This can be implemented in a couple of ways: Set usage cap = to your monthly plan quota. This ensures that no additional monthly cost will be incurred above the cost of your base plan. This option effectively turns off On-Demand Errors. All errors sent from your app to Airbrake above your plan quota will be discarded. You will start seeing errors once again when your billing cycle resets. Alternatively, if you see a sudden spike in errors that causes you to exceed your plan quota and you have set your Usage Cap to stop errors upon reaching your plan quota,  you can adjust your Usage Cap to a value above your plan quota (see option 2, below). Within 15 minutes, errors will begin showing up again in your dashboard. However, any errors that were discarded while your Usage Cap was set to the plan limit cannot be recovered ‚Äì only errors sent from your app after the Usage Cap is adjusted will be seen. Set your Usage Cap to N value, where N is some number greater than the number of errors included in your plan. This option provides more flexibility and balances the ability to manage cost while having a built-in cushion against spikes in errors. Said another way, you can determine how much your business is willing to spend to ensure that you see all your errors if there‚Äôs a major issue impacting your users or a spike for some other reason. With that budget number in mind, you can calculate the right amount for your Usage Cap by dividing the total cost you are willing to spend in a billing cycle by the ‚Äúper on- demand error‚Äù rate attached to your plan level. Remove the Usage Cap entirely and let the errors flow. This option will ensure that you never miss another error from your app. All errors received from your app, including those that exceed your plan quota, will be delivered, and you will be charged a small discounted fee for every error until your billing cycle resets. Along with account-level Usage Caps, you can further fine-tune how many on-demand errors Airbrake delivers by setting the Usage Cap on a project-by-project basis. Setting project-level caps has two key benefits: A runaway error in a single app won‚Äôt consume your full plan quota and use up the errors you need to monitor other areas of your stack. Test/staging environments can be capped at a low level to preserve error volume for your more critical production apps. When you‚Äôve decided on a strategy for managing your Usage Caps, you can head on over to the Account & Billing section of your Airbrake Dashboard and adjust the settings according to your business needs. Usage Caps are great for the big picture and managing the unexpected, but what about those common, high-volume errors you never get around to fixing? Unchecked, they can use lots of error volume and your monthly quota. Airbrake offers a broad set of filter and configuration options specifically designed to let you control which errors you send to Airbrake. With just a couple of lines of code, the Airbrake notifier can: Ignore specific errors you already know about Ignore error types (based on whatever attributes you know you don‚Äôt care about) Send a subset of important errors, but which might spike from time to time Each Airbrake notifier has its own simple instructions on setting up and using filters (example: here‚Äôs the install doc for our Ruby notifier ). If you can‚Äôt find the instructions for your language/platform, shoot us a note at support@airbrake.io . Speaking of our customer success and support team ‚Äì we‚Äôre here to help! While we‚Äôve developed tools designed to give you control, but we know that each customer is unique. If you need help figuring out the right configuration of usage caps and filters, let us know. Or if a rogue error or two blows through your quota and you need a little extra, we can help. Or even if you have a great idea for additional tools and controls Airbrake can provide in the future, we‚Äôd love to hear it! Not to give too much away, but we‚Äôre already hard at work on making On-Demand Error controls even more useful and refined. Keep on the lookout for features that will identify spikes, frivolous errors, and other unwanted error volumes, all of which you‚Äôll be able to filter out ‚Äúautomagically‚Äù ‚Äì¬†ultimately saving you money and, more importantly, reducing clutter in your error feed.", "date": "2020-10-26"},
{"website": "Airbrake", "title": "What is an Apdex Score?", "author": "Unknown", "link": "https://airbrake.io/blog/apm/what-is-an-apdex-score", "abstract": "When attempting to determine whether an application is successful, one of the hardest things to quantify is User Experience or UX. Developers typically rely on qualitative measurements based on surveys or personal experience to evaluate the UX of software. But there‚Äôs a more accurate and straightforward way to see how successful your UX is: Apdex Score. Apdex is a model for measuring UX on a scale that places the response time of an application against a benchmark and assigns a score ranging from ‚Äúexcellent‚Äù to ‚Äúunacceptable.‚Äù While surveys and personal experience can be useful tools in indicating how well an application performs from a user‚Äôs standpoint, they don‚Äôt give you any quantitative indicators. On the other hand, Apdex can tell you whether an app‚Äôs UX is running well or needs to be improved using a set of pre-defined criteria. In the rest of this article, you‚Äôll learn more about what an Apdex is, the advantages of an Apdex, and how this score is calculated. Apdex is an abbreviation for Application Performance Index, which was created as an open standard for measuring the satisfaction with the response time of web applications. It is designed to provide a numerical scale to measure the success of an application as measured by its response time based on a set of samples. By using Apdex, you can set benchmarks for measuring the performance of an application so that changes can be made to improve User Experience. An Apdex Score for a transaction or event is classified based on three basic criteria: Satisfied ‚Äì the action has completed within the acceptable guidelines. Tolerating ‚Äì the action completed, but not within an ideal amount of time. Frustrated ‚Äì the action either did not complete at all or only completed after an unsatisfactory amount of time. The key variables in Apdex consist of the following: T = the amount of time specified for a successful transaction. Satisfied Count = the number of transactions or activities which process equal to or less than T. Tolerating Count = the number of transactions that take within four times the Satisfied Count. Frustrated Count = the number of transactions or actions which do not process within the above guidelines. Total Samples = the total number of transactions or activities within a given timeframe. A satisfied score is any score that is less than or equal to ‚ÄúT.‚Äù A ‚Äútolerating‚Äù score is equal to ‚Äú4T,‚Äù or four times the amount of time that one would expect a process to complete. Any transaction or process that takes between ‚ÄúT‚Äù and ‚Äú4T‚Äù is considered to be ‚ÄúTolerating.‚Äù Any action which takes longer than ‚Äú4T‚Äù is considered ‚Äúfrustrated.‚Äù To calculate an Apdex score, one adds the multiple of satisfied transactions to the multiple of tolerating transactions multiplied by 0.5, plus the number of frustrated transactions multiplied by 0 (you can technically leave out this number, as it will always be 0; however, it is here for clarification of the model), and divide this total by the total number of transactions. Apex can be represented by this formula: Image Source: https://en.wikipedia.org/wiki/Apdex The Apdex formula provides a measurement that falls between the range of 0 and 1. A 0 represents an unacceptable result (wherein a user would be completely unsatisfied in all instances), and 1 represents a perfect excellent response time (where the user receives a satisfactory result in every instance). The closer you are to 1, the better your UX. Let us assume a transaction should take 1.2 seconds to complete. Our ‚ÄúT‚Äù would, therefore, be set at 1.2.¬† Let‚Äôs say 100 transactions have been processed during a specific time period. In this example, 75 of them processed in less than this time, so our satisfied count is equal to 75. Our Tolerating index is ‚Äú4T,‚Äù which calculates to 4.8. In this case, imagine that we have 20 actions that took between 1.21 seconds and 4.8 seconds. Our tolerating count would then be 20 * 0.5, which is 10. The remaining 5 transactions took over 4.8 seconds. We multiply 5 * 0, which is, of course, 0. To get our score, we then enter the numbers into our formula: (75 + (20 * 0.5) + (5 * 0))/100 Our score is therefore calculated as 0.85. If we have a sufficient ‚ÄúN‚Äù (or TotalSamples), we should be able to calculate a clear Apdex score, which will fall between 0 and 1. The criteria for evaluating the results can be seen in the following table: Any score of ‚Äúunacceptable‚Äù assumes that users will simply give up and no longer use the process. This is the last thing you want. In the case of poor or unacceptable scores, you need to implement changes to your UX as soon as possible, so you don‚Äôt lose potential and existing users. So, now you know how to calculate your Apdex score. But imagine if you have hundreds, thousands, or even millions of transactions and events coming through. It would be challenging to calculate your Apdex score manually. Airbrake Performance Monitoring software can help. Airbrake APM is specifically designed for developers and coders interested in monitoring their application‚Äôs total health. We provide several tools that give you the context needed to keep your application‚Äôs health in tip-top shape ‚Äì including calculating your Apdex score. Already have an Error Monitoring account with Airbrake? Perfect! The same notifier you installed for Airbrake Error Monitoring also supports Performance Monitoring, and all Airbrake plans include 50K free performance events each billing cycle. Airbrake currently supports Performance Monitoring for Rails , Node.js (Express.js) , Go , Django , and Flask projects, with more languages and frameworks being added soon. All you need to do to see your Apdex Score is head on over to the Performance tab of your Airbrake dashboard. If you don‚Äôt already have an account, sign-up to try Airbrake for free for 30 days of unlimited errors and unlimited performance events !", "date": "2020-12-01"},
{"website": "Airbrake", "title": "How To Improve Your Apdex Score", "author": "Unknown", "link": "https://airbrake.io/blog/apm/how-to-improve-your-apdex-score", "abstract": "Apdex Score is one of the most important tools you have at your disposal to assess your application‚Äôs health. A low score equal to or below 0.49 signifies that something is seriously wrong with your User Experience (UX) and needs to be remedied quickly before you lose customers. The moment you see your score falling, take every step possible to improve your user experience. Ideally, you want your score to be as close to 1 as possible, but how do you get there? If you notice your score is falling below an acceptable range, try one of these fixes: Raise your T Improve Infrastructure Reduce network communication Verify 3rd-party code Reduce errors Any one of these solutions could prove to be useful in improving your UX when people use your application. Before you can improve your Apdex Score, first you need to understand how a score is created. The Apdex formula is as follows: Image Source: https://en.wikipedia.org/wiki/Apdex Once calculated, your Apdex will fall between 0 and 1; 0 being an ‚Äúunacceptable‚Äù result and 1 being a ‚Äúperfect response time.‚Äù Now that you know how a score is calculated, you can better understand how to improve it. One way you can improve your score is to set a reasonable ‚ÄúT‚Äù time for an acceptable request. It is, of course, possible to raise one‚Äôs score by simply setting a higher ‚ÄúT;‚Äù however,  ‚ÄúT‚Äù needs to be set at a realistic level. The opposite could also be true. Sometimes, the ‚ÄúT‚Äù is set too low. It may be that users might have a higher tolerance level than what was assumed, so in this case, raising it might make some sense. But, in most cases, it‚Äôs better to increase the performance of your application by increasing your ‚ÄúT.‚Äù Once again, be realistic about where you set your ‚ÄúT.‚Äù It won‚Äôt help to set it too low or too high. Find evidence within your application suggesting that the ‚ÄúT‚Äù needs to be changed. The faster the response time of your application, the higher your Apdex score will be. There are several ways you can improve your application‚Äôs speed. Examine the number of requests you receive. Can your current app infrastructure handle the number of resources being called? It could be that your business has grown faster and larger than initially anticipated. If this is the case, it might make sense to provision more resources or to upgrade your servers. This will increase available app resources and better handle a larger workload. Another reason for a slow Apdex score is an overload of communication on your network. Many unnecessary activities could be communicating across the network. Take, for instance, if you are transferring values to your database one at a time. This can increase the processing time for transactions. Instead of sending each piece one at a time, it might make more sense to only have full transactions sent to the database. Minimizing HTTP requests will go a long way towards improving the performance of your applications. A low Apdex Score could be the result of applications contacting a third-party via API. It could be that the API configuration may be incorrect, or there may be problems with this third-party provider. If this is a recurring problem for your application, you should consider other options. Errors can hit your Apdex Score hard, and investing in new infrastructure won‚Äôt help you. Instead of sinking a lot of money into new infrastructure, you may wish to examine the functioning of your applications. With good error monitoring , you can get a much better idea if there are bugs causing crucial processes to not finish. You should consider adding a good error monitoring service to your development toolset to be able to keep track of all of the errors which may be plaguing your software. Apdex may not be a perfect measurement of the User Experience. However, Apdex can go a long way toward helping you quantify whether your transactions or activities occur within acceptable parameters.¬† You may have developed a perfect looking app, which pleases users with its ease of use. You may have excellent navigability.¬†However, users may become irritated if actual activities or transactions take too long to process. Once you have identified a good benchmark for how long a transaction should take, Apdex can help you identify to what extent your application is successful at responding to requests within a reasonable amount of time. How healthy your application is impacts how well your code works. That‚Äôs why Airbrake has created an Application Performance Monitoring software specifically for Developers. Airbrake APM gives you a holistic view of your code, as well as insights that can improve your overall application. Quantify the user experience and try Airbrake free for 30 days ! Already have an Error Monitoring account with Airbrake? Perfect! The same notifier you installed for Airbrake Error Monitoring also supports Application Performance Monitoring, and all Airbrake plans include 50K free performance events each billing cycle. Airbrake currently supports Performance Monitoring for Rails , Node.js (Express.js) , Go , Django , and Flask projects, with more languages and frameworks being added soon. All you need to do to see your Apdex Score is head on over to the Performance tab of your Airbrake dashboard.", "date": "2020-12-03"},
{"website": "Airbrake", "title": "Introducing Airbrake Dark Mode", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/introducing-airbrake-dark-mode", "abstract": "As developers, who create products for developers, it is no exaggeration to say we love ‚ù§Ô∏è dark mode. So, as you can imagine, we‚Äôre thrilled to announce that Airbrake Dark Mode is now available. There‚Äôs a reason big named companies such as Apple and Microsoft offer dark mode options. It doesn‚Äôt just look cool, but dark mode offers several benefits. It saves energy, especially on devices that use OLED or AMOLED screens Dark mode reduces eye strain in low light conditions Dark mode reduces screen glare Unlike light mode, dark mode minimizes flickering and blue light All of which means it‚Äôs a preferred option for developers who stare at screens for hours. Interested in making the switch? The next section gives you step-by-step directions for enabling Airbrake dark mode. All you have to do to activate dark mode is to log into the Airbrake app, click the drop-down menu in the upper right-hand corner under your name, and click ‚ÄúProfile and notifications.‚Äù You‚Äôll then be taken to a page with these options: You‚Äôll see a section called ‚ÄúColor mode.‚Äù Click on either Dark or Light mode to match your preference. You can also set it to ‚Äúsystem default,‚Äù which will automatically mimic the color mode defined by your OS settings. Once you save your profile, Airbrake will make the switch to your preferred color mode. This is only one of the many planned updates and new features that Airbrake has queued up to roll out this year. Don‚Äôt miss a thing by giving us a follow on Twitter .", "date": "2021-01-12"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì SyntaxError", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/node-syntaxerror", "abstract": "Making our way through the twists and turns of our full Node.js Error Handling series, today we‚Äôll be checking out the SyntaxError in Node. As with nearly every other programming language on the market, a Node SyntaxError indicates that a code statement could not be correctly parsed, which means that the executor has no way of determining the intent behind the code. This usually happens as a result of typos, but the actual error messages associated with SyntaxErrors can be fairly vague and not all that useful. In this article we‚Äôll examine the Node SyntaxError by first looking at where it resides in the larger Node.js Error Class Hierarchy. We‚Äôll then examine four different functional code samples, each of which demonstrate the current techniques of code evaluation that can potentially throw Node SyntaxErrors , so let‚Äôs get to it! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error SyntaxError SyntaxError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As mentioned, a SyntaxError will be thrown when evaluating code that doesn‚Äôt make lexical sense to the interpreter. For example, this may occur because an expected token is missing between two values: x + y is a completely valid statement, while neglecting the + between would result in a SyntaxError . In Node (and JavaScript above it), it is only possible to throw a SyntaxError within evaluated code. Code evaluation is the practice of taking a collection of code from another context (such as a String or an outside script file) and evaluating it inline, during execution of another script. For example, the built-in eval() function can be used for exactly this purpose, by evaluating a passed String argument as JavaScript code. In Node.js there are four possible forms of code evaluation that can throw SyntaxErrors : eval(...) , new Function(...) , vm , or require(...) . We‚Äôll examine each of these scenarios one at a time in the small code samples found below. We start with the Function constructor , which is a special keyword that allows functions to be created and evaluated inline using the new Function([arg1[, arg2[, ...argN]],] functionBody) syntax, as if creating a new instance of any other class: The functionTest (x, y, body) function creates a new Function(...) and assigns it to the f local variable, which is then executed within the logging.log(...) call to output the result to the console. Consequently, calling functionTest(x, y, body) evaluates the body argument as the body of the new Function(...) . We‚Äôll test this out with two different calls to this Function test function: Executing these tests produces the following output: Unsurprisingly, the first invocation with a body of 'return x * y' works properly, while a body of 'return x y' is missing a token between the two parameters, so a SyntaxError is thrown. Next up let‚Äôs look at the evalTest(body) function, which tests the eval() built-in function by evaluating the passed body string code: Here‚Äôs the test calls we‚Äôre making: And this is the output that is produced: There‚Äôs a clear (and intentional) pattern forming here: The first of the test pairs works, while the second fails with some kind of SyntaxError . Our third test function is requireTest(x, y, path) , which invokes the require(...) built-in function to require the code file passed via the path parameter. In this case, it expects an exported function called multiply , so it grabs that value and uses it in a function call with the passed x and y parameters to output the multiplication result: Since we‚Äôre requiring outside files here this example requires a bit more code, found within two separate files. The first file is multiply.js : And the second is multiply_broken.js : We now invoke the requireTest(x, y, body) function twice, once for each outside context file: This results in the following output: As we can see, the multiply.js file contains no syntax issues, so it functions as expected, Meanwhile, the multiply_broken.js file contains an invalid token between return x and y; , so it throws a SyntaxError . The final scenario in which Node.js can throw a SyntaxError is using the built-in vm module, which the ability to compile and run code in a V* Virtual Machine context. After requiring the module at the top of the file, our vmTest(body) function handles the testing: Just as we saw with the evalTest(body) function, vmTest(body) merely attempts to execute the passed body parameter String code in the current context and logs the result. Invoking this function occurs below: Once again, the first invocation works properly, while the second contains an invalid token between the numerals, resulting in a thrown SyntaxError : Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-12-22"},
{"website": "Airbrake", "title": "21 Tips for Using Airbrake", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/21-tips-for-using-airbrake", "abstract": "New year, new goals for your app! This year, we compiled a list of top tips from the developers at Airbrake to help you take full advantage of Airbrake and all of its features. Here‚Äôs what our Airbrake developers have said about using Airbrake Error Monitoring and Performance Monitoring: Tip #1: Add custom error parameters in the aggregations ‚Äò tab to take advantage of searching and filtering all errors by that parameter. Custom aggregations can be set from the drop-down menu in the ‚ÄúMore aggregations‚Äù section of the Aggregations tab. Tip #2: Check your Usage Caps and adjust them, if needed, whenever you‚Äôre about to roll out a big deployment. Airbrake‚Äôs On-Demand errors will ensure you don‚Äôt miss out on any errors and your deployment goes smoothly. Tip #3: Automate deployment tracking. It‚Äôs very convenient to be able to click a file in Airbrake and have it open up on GitHub. For instructions on how to do this, check out our Deploy Tracking section under docs. Tip #4: Airbrake has several keyboard shortcuts you can use while in the app. Below is a list of shortcuts. You can also see what they are in the drop-down menu under your name in the upper right corner of the application. Tip #5: Stay updated with notifier changes since we‚Äôre regularly introducing new features and your notifier is key to making sure your app is up-to-date. We‚Äôll make sure you‚Äôre aware of any notifier changes we roll out via email and/or Twitter . Tip #6: Adjust notifications per user to prevent notification overloading. It‚Äôs easy to do. Head on over to your profile settings in the upper right-hand corner of the Airbrake app. Once there, click on the notifications tab to customize your notification settings. Tip #7: Check your APM dashboard first thing each day. In seconds, you can understand the state of your application. Tip #8: APM events don‚Äôt roll over, so take advantage of the free 50k events you have each billing cycle! Tip #9: Only want to see notifications about crucial errors? If that‚Äôs the case, you can easily filter notifications by severity . Set a minimum severity value via your project settings page. Any errors below this threshold will not trigger a notification. Tip #10: Performance monitoring is super useful to confirm if there‚Äôs a widespread issue with a background worker. With performance monitoring, you can link failures back to errors and the worker causing these errors. You can see how well your workers are functioning under the ‚ÄúJobs‚Äù tab on your Performance dashboard. Tip #11: Notice the same errors popping up in your Hotspot files? Use Airbrake‚Äôs Hotspots feature as a teaching tool to educate your team on how to avoid these errors in the future. Tip #12: Keep an eye on your Apdex Score . The closer to 1.00, the better the user experience of your application. Tip #13: Have something to say about an error or fix? Leave comments for your team in the Airbrake App. Tip #14: Errors that show up under the ‚ÄúAlerts‚Äù tab have a severity tag. These tags include: debug, info, notice, warning, error, critical, alert, emergency. Use these severity tags to prioritize which errors you should fix first. Tip #15: Using a new tool that you would like to integrate with Airbrake? Not a problem! Airbrake integrates easily with several popular developer tools. All you need to do is update your integrations under the ‚ÄúIntegrate‚Äù tab. Airbrake also supports webhooks ! Give us a URL so we can send you a JSON object with information about errors. Tip #16: You can see ‚Äúdeploys with the most errors‚Äù right from your dashboard. You can further fine-tune what errors you see by filtering errors by deployment . Tip #17: You can get help with the Airbrake App within the app itself. In the bottom right corner of the screen, you have access to the Airbrake Customer Success messenger. Type into the chat to let us know how we can help. Tip #18: Leave Airbrake up in your browser as another way to see when errors pop up in real-time. Tip #19: If you hover over the Apdex bar graph located on your Performance dashboard, you‚Äôll see a complete breakdown of your Apdex score by satisfied, tolerated, and frustrated users. Tip #20: Tired of receiving notifications about known errors? Airbrake allows you to mute errors . Click on the error to mute it. Don‚Äôt worry: you‚Äôll still be able to see these errors via your dashboard and can unmute them at any time. Tip #21: Airbrake plans to roll out several new upgrades in 2021. For example, dark mode is coming soon! The best way to keep in touch is through email, our blog, or to follow our Twitter account . Looking for additional ways to get more out of your Airbrake app in 2021? Shoot us an email and we‚Äôll be more than happy to provide additional tips! Not an Airbrake user yet? Not a problem. Sign-up for a free 30-day trial where you‚Äôll have access to every single error monitoring feature available, including unlimited errors, unlimited integrations, unlimited users, and so much more. Discover the power of Airbrake today.", "date": "2021-01-08"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì ERR_BUFFER_TOO_LARGE", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/err_buffer_too_large", "abstract": "There are many possible errors in Node.js, so today we‚Äôll continue our detailed Node.js Error Handling series by looking at one of the assorted System Errors Node produces, ERR_BUFFER_TOO_LARGE . Node throws a System Error when an exception occurs within the program‚Äôs runtime environment, and such errors are typically an indication that there was an operational problem within the application. An ERR_BUFFER_TOO_LARGE error indicates that an attempt was made to instantiate or allocate a Buffer object of a size exceeding the current maximum (typically 2,147,483,647 , or the maximum size of a 32-bit signed binary integer). In today‚Äôs article examine the ERR_BUFFER_TOO_LARGE system error by looking at where it resides in the overall Node.js Error Class Hierarchy . We‚Äôll also look at some functional code samples illustrating how direct Buffer object manipulation doesn‚Äôt allow method calls that may directly throw ERR_BUFFER_TOO_LARGE errors. Instead, certain modules (like zlib ) can potentially generate such errors in extreme circumstances. Let‚Äôs dig in! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error SystemError ERR_BUFFER_TOO_LARGE SystemError ERR_BUFFER_TOO_LARGE ERR_BUFFER_TOO_LARGE Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As we discussed in our ERR_BUFFER_OUT_OF_BOUNDS article last week, the Buffer class was added to early versions of Node.js provide simple means of reading and manipulating streams of binary data. More recently, JavaScript ES6 (ECMAScript 2015) introduced the TypedArray object to handle binary data buffers. Therefore, modern Node.js versions have adapted the Buffer class to focus on implementing a more optimized Uint8Array API. In modern Node.js versions the Buffer class constructor has been deprecated , so the process of actually creating buffers would ideally use the Buffer.from() , Buffer.alloc() , and other similar methods. For our example code we‚Äôll use both techniques, starting with a direct instantiation using the deprecated new Buffer(...) constructor, and afterward we‚Äôll also use the Buffer.alloc() method. Our first test method is instantiateBuffer(size) , which uses the deprecated new Buffer(size) constructor to instantiate a new buffer object: We‚Äôll test out creating three different buffer sizes, 1 , kMaxLength , and kMaxLength + 1 : kMaxLength is exported from buffer , which is actually imported from process.binding('buffer') and represents the maximum size of a 32-bit signed integer ( 2,147,483,647 ), which is typically used in Node to limit the sizes of many objects, including buffers. Executing these three different size tests produces the following output: As you can see, even though the direct new Buffer(...) constructor is deprecated it still functions and allows us to create buffer objects of size 1 and kMaxLength . However, a size of kMaxLength + 1 produces an error, but, surprisingly, it‚Äôs an ERR_INVALID_OPT_VALUE rather than an ERR_BUFFER_TOO_LARGE . Let‚Äôs try allocation rather than direct instantiation: Our allocateBuffer(size) method performs really the same process as instantiateBuffer(size) , but through the Buffer.alloc(size) method instead of new Buffer(size) . Once again, we‚Äôll test it using the same trio of size allocations: Executing these tests produces nearly identical output as our direct instantiation test: Hmm, yet another ERR_INVALID_OPT_VALUE . We can actually see why these behave so similarly by digging into the Node buffer.js module code. First, we can see inside the direct new Buffer(...) constructor that, if the first argument is a number , it simply passes execution to the Buffer.alloc(...) method on our behalf: The Buffer.alloc(...) method (along with nearly every other Buffer method in the module) starts by invoking the assertSize(size) method: Inside assertSize(size) we see the final statement that our tests were hitting to throw the ERR_INVALID_OPT_VALUE : As you can see, the Buffer module actually performs checks against the kMaxLength value for all Buffer size allocations before it actually creates any buffers or does any processing. Therefore, as previously mentioned, it is impossible to throw an ERR_BUFFER_TOO_LARGE error directly from using the Buffer module. However, it should be noted that some other Node modules may be capable of producing ERR_BUFFER_TOO_LARGE errors under certain circumstances. At present, the only library that can throw such errors in zlib . Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-02-05"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì ERR_CONSOLE_WRITABLE_STREAM", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/err_console_writable_stream", "abstract": "Making our way through our in-depth Node.js Error Handling series, today we‚Äôll be diving into the ERR_CONSOLE_WRITABLE_STREAM error, which is one of the many System Errors Node produces. Node throws System Errors when an exception occurs within the application‚Äôs runtime environment and such errors typically indicate that there was an operational problem within the program. An ERR_CONSOLE_WRITABLE_STREAM error indicates that an attempt was made to create a new Console API class without passing a valid stdout stream in which to place any generated output. Throughout this article we‚Äôll explore the ERR_CONSOLE_WRITABLE_STREAM error in a bit more detail, starting with where it resides in the overall Node.js Error Class Hierarchy. We‚Äôll also look at some functional code samples illustrating how the Console class can be used to generate stream outputs, and how improper use of this class can potentially lead to ERR_CONSOLE_WRITABLE_STREAM errors in your own applications. Let‚Äôs get going! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error SystemError ERR_CONSOLE_WRITABLE_STREAM SystemError ERR_CONSOLE_WRITABLE_STREAM ERR_CONSOLE_WRITABLE_STREAM Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Let‚Äôs jump right into our sample code to understand what might cause an unexpected ERR_CONSOLE_WRITABLE_STREAM error. Our first helper function, getConsole(strout, stderr) , is used to merely create a new Console class instance by passing along the provided stdout and stderr parameters: With getConsole(...) setup we then have the addValueToStream(value, writeStream, errorStream) function, which does what the name suggests and generates a new Console instance, into which we insert the passed value parameter: To make our sample code a bit more realistic we‚Äôre going to create some Book class instances, convert those to JSON strings, then add those strings to a new file via the fs.createWriteStream(...) method. The outputBookToStream(book, stream) function performs the stringification of the passed book value and passes the JSON string along to the addValueToStream(value, writeStream, errorStream) function: Alright! We‚Äôre all set, so let‚Äôs test this out by creating our first Book instance, which we‚Äôll then add to the newly-created write stream targeting the local books.json file: Executing this test code produces the following output: And, sure enough, the contents of books.json now contains the JSON we generated: We‚Äôll create a second, slightly different Book instance and combine both into an array before converting to JSON , since adding multiple objects one at a time to the books.json file doesn‚Äôt actually create valid JSON : Our new books.json file now contains a collection of both Books : As you can see, we‚Äôre explicitly creating and passing a writeStream value by calling fs.createWriteStream('books.json') . However, let‚Äôs do one more test and see what happens if we neglect to pass a valid Writable stream object: As I‚Äôm sure you guessed might happen, failing to pass a valid stream up the stack (and, therefore, to the Console constructor) throws an ERR_CONSOLE_WRITABLE_STREAM TypeError : Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-02-12"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì ERR_ASYNC_CALLBACK", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/err_async_callback", "abstract": "Next up in our deep Node.js Error Handling series we‚Äôll be tackling the ERR_ASYNC_CALLBACK error type, which falls into the broader System Errors category of Node. Node throws a System Error when an exception occurs within the program‚Äôs runtime environment, and such errors are typically an indication that there was an operational problem within the application. An ERR_ASYNC_CALLBACK error indicates that an attempt was made to register a non-function data type as an async_hooks constructor callback. Throughout this article we‚Äôll explore the ERR_ASYNC_CALLBACK system error by looking at where it sits in the greater Node.js Error Class Hierarchy. We‚Äôll also examine the basics of the async_hooks module, and how improper use could result in ERR_ASYNC_CALLBACKs , so let‚Äôs dig in! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error SystemError ERR_ASYNC_CALLBACK SystemError ERR_ASYNC_CALLBACK ERR_ASYNC_CALLBACK Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. We won‚Äôt go too in-depth on it since it‚Äôs a big topic, but we should briefly review how Node handles asynchronous hooks via the async_hooks module. The async_hooks module provides a way to register callbacks for tracking the lifetime of asynchronous resources within your application. In this context a resource is any object with an associated callback, such as a net connection, and each resource can (and will often be) called multiple times. A resource can also be closed before the callback is called. The basic AsyncHook class constructor accepts a handful of parameters, each of which is expected to be the callback function for different stages in the asynchronous execution process. As seen in the source code, each of these arguments, if defined, is expected to be a function so a callback can be performed. We‚Äôll test async_hooks by defining each of the five basic callback functions: Now we‚Äôll add each of these functions to the appropriate callbacks object attribute, which is passed to the async_hooks constructor: After creating a hook with the passed callbacks we enable() it, then create a basic server and listen on port 8080 for incoming connections. We also wait one second to output a basic message to the log. Meanwhile, all the async_hooks callback functions are outputting info when they are invoked. Executing this test code produces the following output: This output shows the basic execution pattern of these asynchronous callbacks, including the callback function, the asynchronous id , and (in the case of init ), the type . Since our server isn‚Äôt explicitly halted in our code it will sit and wait for connections, so we can explicitly connect via curl in a terminal: And this will immediately trigger additional asynchronous callbacks with new Ids: We‚Äôre missing a good deal of useful information, such as timestamps, so we can execute the testOnAsyncHook.js file, which uses the handy on-async-hook package to output such trace details: All we‚Äôre doing here is creating an onAsyncHook(...) instance and having it log trace data to the console. We then create a basic server that responds to incoming requests with Hello world , before we automatically stop the async hook after two seconds. Executing this test produces the following output: Tracing modules like this can help you perform very explicit tracking and management of the various resources being used and invoked in your Node application. However, this is just to improve the output we see, but let‚Äôs perform one more test where we don‚Äôt pass exactly the right argument types to the async_hooks.createHook(...) constructor: Everything is the same as before, except you may notice that the callbacks.init property is set to false , rather than assigning it to the existing init function. When we execute this code we suddenly get a TypeError with an ERR_ASYNC_CALLBACK code, indicating that the init argument passed to the AsyncHook constructor should be a function: Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-01-15"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì ERR_ARG_NOT_ITERABLE", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/err_arg_not_iterable", "abstract": "Making our way through our in-depth Node.js Error Handling series, today we‚Äôll be going over the first of the various System Errors that can be thrown in Node, ERR_ARG_NOT_ITERABLE . Node throws a System Error when an exception occurs within the program‚Äôs runtime environment and are typically an indication that there was an operational problem within the application. In the case of the ERR_ARG_NOT_ITERABLE error, the its appearance indicates that a Node.js API method or function expected an iterable argument, but the actual value passed was not an iterable. Within this article we‚Äôll examine the ERR_ARG_NOT_ITERABLE system error in greater detail by first looking at where it resides in the overall Node.js Error Class Hierarchy. We‚Äôll also examine some functional code samples that illustrate how a typical Node.js API class ( URLSearchParams ) might throw an ERR_ARG_NOT_ITERABLE if passed arguments are the incorrect type. Let‚Äôs get into it! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error SystemError ERR_ARG_NOT_ITERABLE SystemError ERR_ARG_NOT_ITERABLE ERR_ARG_NOT_ITERABLE Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. The ERR_ARG_NOT_ITERABLE code indicates that an iterable argument was expected within a particular Node.js API method call, but a non-iterable object type was passed instead. At present, there are not many Node.js API methods that throw ERR_ARG_NOT_ITERABLEs , so we‚Äôll just be taking a look at a single example class that does this, the URLSearchParams constructor. The primary purpose of URLSearchParams is to provide read/write access to the query string values of a URL . It can easily parse, append, or otherwise modify parameters, to simplify the process of handling URLs and URIs. To illustrate the use of URLSearchParams we start with a simple test method that wraps the URLSearchParams constructor and passes the provided parameter to it, before logging and returning the result: With this function ready to go we can perform a series of simple tests by passing various types of values to see how the URLSearchParams constructor handles them. We‚Äôll begin with a simple string that most of us are accustomed to seeing in our browsers: Executing this code produces the following output: The --- STRING TEST --- header indicates the type of argument value that was passed, and below that we see the produced URLSearchParams object that resulted. Everything works as expected! We‚Äôll next try passing an object: This works just as before, producing a value instance and output: The URLSearchParams constructor can also accept iterable objects, such as arrays or Map objects: As before, both of these tests work as expected and produce valid outputs: Modern JavaScript includes the ability to create iterators and generators . An iterator is basically a function that knows how to provide access to a sequential set of items. There are a number of ways to create an iterator, but ECMAScript 2015 introduced the Symbol.iterator well-known symbol, which is used to define an object‚Äôs default iterator method. Once an iterator function is defined for an object, that object can then be used in iterable situations, such as the common for...of loop. In the following example we try to pass a set of params to URLSearchParams that uses the Symbol.iterator to define an iterator function as an array: Running this code finally throws a TypeError with the explicit ERR_ARG_NOT_ITERABLE code attribute, indicating that the query pairs of the iterator must be iterable: This particular error might not make much sense, but it becomes much clearer if we look at the internal url.js:111 source code that threw the error in the first place: The URLSearchParams constructor accepts object and function type arguments. It then generates a local method variable to retrieve the @@iterator method of the passed init parameter using inti[Symbol.iterator] . In our example code case, this iterator isn‚Äôt equivalent to this[Symbol.iterator] , but method is also not a function , so it throws an ERR_ARG_NOT_ITERABLE TypeError . To resolve this issue we merely need to actually assign an iterable function to the Symbol.iterator value in the params object: Here we‚Äôre using the function* declaration, which defines a generator function that can use the special yield keyword to iterate through returned values. In this case, we‚Äôre yielding key/value pairs for the query params we want to create. Executing this well-formed iterable function test works as expected and produces the following output: Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2018-01-08"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì ERR_ASYNC_TYPE", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/err_async_type", "abstract": "The number of possible Node.js errors is extensive, so today we continue our detailed Node.js Error Handling series by looking at one of the many System Errors -categorized errors called ERR_ASYNC_TYPE . Node throws a System Error when an exception occurs within the program‚Äôs runtime environment, and such errors are typically an indication that there was an operational problem within the application. An ERR_ASYNC_TYPE error indicates that an attempt was made to pass an invalid data type to the AsyncResource class constructor. Throughout this article we‚Äôll explore the ERR_ASYNC_TYPE system error by looking at where it sits in the overall Node.js Error Class Hierarchy. We‚Äôll also examine the basics of using the AsyncResource class, and how passing invalid arguments might result in ERR_ASYNC_TYPEs , so let‚Äôs get to it! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error SystemError ERR_ASYNC_TYPE SystemError ERR_ASYNC_TYPE ERR_ASYNC_TYPE Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As some readers may recall we explored the Node.js ERR_ASYNC_CALLBACK error in an article last week , which was similar to the ERR_ASYNC_TYPE error, except the ERR_ASYNC_CALLBACK error indicated an invalid data type used as async_hook callback arguments. On the other hand, the ERR_ASYNC_TYPE error is a result of using the AsyncResource class constructor and passing an invalid type parameter. To illustrate this difference we‚Äôll start with a simple code sample that creates a new AsyncResource instance, uses it in conjunction with a basic net module server instance to connect to localhost:8080 and send a message: The typical usage of AsyncResource is to extend it with your own class (e.g. class MyAsyncObject extends AsyncResource { ... } ), but for our simple example we‚Äôre just directly invoking the callback emitters, such as emitBefore() . Each of these emitters invokes all associated callbacks, which means the emitBefore() method invokes all before callbacks. We‚Äôll test out our getAsyncResource(options) function with a handful of tests, each of which passes a different set of values into the AsyncResource(...) constructor: Executing the first of these tests works as expected and produces the following output: Our net server is created and connects, then performs its basic process of sending a SERVER ACCEPTING CONNECTIONS message after a 1-second delay. We also retrieve the asyncId and triggerAsyncId values from the AsyncResource instance, before eventually closing the connection after 2 more seconds and invoking resource.emitDestroy() . The 'MyNetResource' string is the type argument passed into AsyncResource , so what happens if we pass a numeric value like 24601 as seen in our second test? We‚Äôre presented with an error, though not the ERR_ASYNC_TYPE , but an ERR_INVALID_ARG_TYPE instead, indicating that the type argument must be a string: Alright, so our last test passes an empty string as the type argument, which produces the following output: Here we see an ERR_ASYNC_TYPE error, which illustrates an interesting and subtle difference between what type of parameters the AsyncResource constructor expects ‚Äî since anything that isn‚Äôt a string throws an ERR_INVALID_ARG_TYPE , the only scenario in which an ERR_ASYNC_TYPE error is (currently) thrown is when passing an empty string. The reason for this result can be seen by digging into the Node.js source code a bit within the async_hooks.js files: Here we can see that the AsyncResource constructor calls the emitInit(...) method, which is retrieved from internal/async_hooks.js at the top of the file: The internal/async_hooks.js module exports the local emitInitScript function as emitInit : Finally, looking at the emitInitScript function shows where the ERR_ASYNC_TYPE error is coming from. If type != 'string' or the length is less than or equal to zero, a new ERR_ASYNC_TYPE err is thrown. Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today with a free 30-day trial , and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-01-22"},
{"website": "Airbrake", "title": "Ruby Exception Handling: NoMemoryError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/nomemoryerror", "abstract": "Next in our Ruby Exception Handling series we‚Äôll be examining the dreaded NoMemoryError exception. As the name implies, a NoMemoryError can occur within Ruby anytime the system attempts to allocate more memory than Ruby can provide or is allowed. In this post we‚Äôll see examples of what can cause NoMemoryErrors , what it indicates in your code, and how to use or avoid these exceptions in the future! All Ruby exceptions are descendants of the Exception class, or a subclass therein. NoMemoryError is a direct descendant of the Exception class. To catch a potential NoMemoryError , it‚Äôs best to consider the most likely points of execution where the application may utilize too much memory. Typically this occurs when loading a file into memory (such as when downloading or using File.open ), or when attempting to allocate more than the allowed memory for a particular Ruby object. That said, while NoMemoryErrors can be caught using Ruby‚Äôs begin-rescue syntax, doing so should typically be a last resort, as Ruby only raises a NoMemoryError when memory allocation fails. It does not typically fire when the application itself exceeds the actual physical memory, and as you might expect, the application will simply crash, the machine will grind to a halt, or any number of other awful possibilities. As an example of where you might make use of NoMemoryError , it will most commonly occur when dealing with particularly large Ruby objects. For example, let‚Äôs examine some simple code where we‚Äôre creating a String object by repeating a single character a specific number of times: As expected, this would produce a String output that is 10 of the letter ‚Äúa‚Äù in a row: As you may be aware, most programming languages (and Ruby is no exception) define an unsigned long integer as a number with a maximum of 4 bytes, which means the largest number possible for that long is half of 2 ^ 32 - 1 , or 2,147,483,647 . This number is halved, because while a signed number indicates both positive and negative values can be represented, an unsigned long can only be positive. Since we have to account for the possibility of zero, the maximum positive value of an unsigned long is actually one less than 2 ^ 32 / 2 , or 2,147,483,647 . In Ruby, depending on which version and bit-level you‚Äôre using (32-bit vs 64-bit), Ruby does not allow Strings to be allocated in memory that are larger in size than the maximum positive unsigned long size seen above. Therefore, we can raise a NoMemoryError by using this code: This produces the following output: The key line of code here is puts \"a\" * limit , which tells Ruby that we‚Äôre want to output a new String that we‚Äôre creating by concatenating the letter a 2,147,483,647 times (which is defined by 2**31 - 1 ). Ruby responds by producing a NoMemoryError because the allocation size of our new string is too large for what Ruby allows, which we capture using the rescue syntax, in which we output some additional information to make it look like a normal error. To resolve this NoMemoryError issue, we can make one simple fix: We can shrink the size of our string by one more character, by changing limit to 2**31 - 2 : Depending on where you are executing this code, you may or may not see the interpretor attempt to create and actually output a string that is some two billion characters in length. Whether or not the actual output works on your system, the key takeaway here is that NoMemoryErrors can be captured within Ruby code when memory allocation gets too overzealous, but the best practice always remains to try to eliminate potential memory leaks before they ever occur.", "date": "2016-12-02"},
{"website": "Airbrake", "title": "Ruby Exception Handling: ScriptError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/scripterror", "abstract": "Today we continue the Ruby Exception Handling series by taking a look at the ScriptError exception class. ScriptError is actually a superclass, which means it is inherited by other exception classes, and thus when a ScriptError occurs, Ruby determines which of the subclasses is most relevant and raises that error for further examination. Below we‚Äôll see what can cause various types of ScriptErrors and how to configure your application to avoid them wherever possible, so let‚Äôs get started! All Ruby exceptions are descendants of the Exception class, or a subclass therein. ScriptError is a direct descendant of the Exception class. ScriptError is a superclass to the subclasses LoadError , NotImplementedError , and SyntaxError . Unlike its subclass descendants, ScriptError itself is a direct descendant of the Exception class. ScriptError itself will never be directly returned or rescued when executing code, but instead Ruby will generate one of the ScriptError subclasses that was raised by the error in question. This is because ScriptError itself doesn‚Äôt directly represent anything; it‚Äôs best thought of as a template by which all script-related errors are generated from. As an example, we can raise a LoadError , which is a subclass of ScriptError , with the following code: We are covering our bases here and rescuing the explicit ScriptError exception class, but also any generic or unexpected Exception that may occur in the second rescue clause below that. The output of the above execution where we try to require a file path that doesn‚Äôt exist is the raising of a LoadError : Notice that this exception wasn‚Äôt INEXPLICIT , and instead was rescued by explicitly calling the ScriptError superclass. However, the actual exception class itself that was raised (as represented by the e variable) was not ScriptError , but was instead a subclass of ScriptError , the LoadError exception. As discussed earlier, this is because ScriptError is a descendant of Exception , while LoadError (and others) then descend from ScriptError , as can be seen throughout the Ruby source code . To illustrate that explicitly rescuing ScriptError works for other exception types, we can also attempt to raise a SyntaxError by evaluating syntactically invalid code: Once again, our explicit rescue of ScriptError produces a subclass, in this case a SyntaxError : Since ScriptError is a descendant of Exception , if we completely remove the explicit call to ScriptError in the above example, and only leave the rescue for the generic Exception class, we still get the ( INEXPLICIT ) result, in this case again the SyntaxError exception: Output: One particular caveat here, however, is that since ScriptError and its subclasses are not descendants of StandardError , which is the default exception type Ruby creates for rescue clauses without explicit class specification, we cannot use a non-explicit rescue clause and expect any form of ScriptError to trigger that code. Here we‚Äôre using the previous eval() example again, but we‚Äôve removed all explicit class calls in the rescue to either ScriptError or even Exception . Watch what happens with the output: Our print_exception function is not even called , and the reason is because the actual exception class that was raised ( SyntaxError ) is not a descendant of StandardError , so the non-explicit rescue => e clause fails to trigger. To help you along the way in your journey towards JavaScript error handling perfection, be sure to check out Airbrake‚Äôs Ruby Error Handling Software !", "date": "2016-12-07"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì AssertionError", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/assertionerror-nodejs", "abstract": "Starting off into our detailed Node.js Error Handling series, today we‚Äôll be going over the AssertionError . As with many other programming languages, Node.js comes with an assert class as part of its core modules set, allowing simple assertion tests to be performed. When such an assertion fails an AssertionError is thrown to indicate what went wrong. Throughout this article we‚Äôll explore the AssertionError in greater detail, starting with where it sits in the overall Node.js Error Class Hierarchy. We‚Äôll also look at some functional sample code illustrating how these errors are typically thrown and how you can handle them in your own code, so let‚Äôs get crackin‚Äô! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error AssertionError AssertionError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As mentioned, the only time you should experience an AssertionError in a Node.js application is when making use of assert API calls. Thus, it‚Äôs worth briefly going over what assert is used for before we get into the errors it produces. In general terms, a test assertion is an expression or statement that encapsulates a snippet of testable logic, with a clearly defined target to be tested. Each test assertion should be simple and easily executable, without attempting to perform more than a singular task. Thus, most assertion libraries/modules found in programming languages perform only the most rudimentary tests, such as testing for equality of two values. The assert class in Node.js provides a handful of basic methods, such as assert.equal to test equality, assert.notEqual for inequality, and assert.ok to test the ‚Äútruthiness‚Äù of the passed argument. Regardless of what assert method is being called a failure will always throw an AssertionError . To illustrate this in action we‚Äôve got some super simple code: We start by requiring the assert core module, along with assigning the AssertionError constant to the AssertionError found in the assert module. It‚Äôs worth noting that AssertionError directly inherits from the Error class, which gives it a number of built-in functionalities we‚Äôll look at in a moment. Next we define the first of our two test functions, assertStrictEquality (a, b, message = null) : For the most part, this function is just a wrapper to perform an assert.strictEquality(...) call on the two a and b parameters of our function. We‚Äôve included some useful log output showing what our attempted assertion is, and if it succeeded. In the event of a failure, we catch the error and perform a check of the error class type before outputting it to the log. Let‚Äôs make a few calls to assertStrictEquality(...) and see what happens: Running these tests produces the following output: As expected, the first assertion that 1 equals 0 fails and produces our first AssertionError with the default error message of 0 === 1 . As mentioned, since AssertionError derives from the base Error class, the actual AssertionError that is caught is an anonymous object that contains a handful of useful properties. One such property is generatedMessage , which is a boolean indicating if the associated message was automatically generated by Node.js, or whether it was manually provided elsewhere. Our second function call makes use of this custom message capability by passing an argument to the message parameter, which is passed as the third argument to the underlying assert.strictEqual(...) method. Consequently, even though we get another AssertionError since 0 and 1 are not equal, the associated message is now a custom message: 0 and 1 are not equal! . Finally, to make sure everything works as expected we pass two equivalent values of 1 and 1 and the log output confirms the assertion succeeded. Next up, our assertStrictInequality (a, b, message = null) function does much the same as the previous function, but inverses the logic: Just as before, we‚Äôll perform three test calls with various arguments for each invocation: And, also as we saw with the strictEqual assertion tests above, these calls produce the expected console outputs: Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices! Try a free 30-day trial today.", "date": "2017-12-01"},
{"website": "Airbrake", "title": "Ruby Exception Handling: LoadError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/loaderror", "abstract": "Chugging right along through our¬†Ruby Exception Handling¬†series, our next stop takes us to the¬†LoadError¬†exception class. LoadError¬†is a subclass descendant of the¬†ScriptError¬†superclass, and occurs when Ruby attempts to load a file (via¬†require¬†or otherwise) that simply doesn‚Äôt exist. In this post we‚Äôll examine¬†LoadError¬†in a bit more detail, looking at where this exception class sits in Ruby‚Äôs¬†Exception¬†class hierarchy, how to handle¬†LoadErrors, and best practices to avoid this error from popping up in the first place! All Ruby exceptions are descendants of the Exception class, or a subclass therein. ScriptError¬†is a direct descendant of the Exception class. LoadError¬†is a direct descendant of the¬†ScriptError¬†class. Since¬†LoadError¬†is a low-level¬†Exception¬†subclass, when Ruby raises an error that matches the requirement of a loading error, a new instance of¬†LoadError¬†is created to be examined and manipulated. To see¬†LoadError¬†in action, we‚Äôll begin with a simple code snippet where we‚Äôre attempting to load a file by using an invalid file path that doesn‚Äôt exist: The¬†print_exception¬†function simply takes the passed in¬†Exception¬†class argument that was¬†rescued¬†by Ruby, and outputs some useful information about it: class name, error message, stack trace, and whether the incoming exception class was explicitly expected or not. The meat of our example occurs in¬†require ‚Äòinvalid/file/path‚Äô, which as the name implies, is a path to an invalid file. When this executes, we get the following output from the¬†print_exception¬†function: Sure enough, we find that our explicit¬†rescue¬†call for the¬†LoadError¬†class was executed and passed along, so we see that an¬†[EXPLICIT] LoadError¬†has occurred, indicating the file at the path we specified cannot be loaded. A¬†LoadError¬†can also occur as a result of other types of direct file loading besides¬†require, such as¬†load. Here we use the same example as above, but try using¬†load¬†instead: The resulting output is, as expected, another¬†LoadError¬†occurrence due to our invalid file path: If we take out our explicit¬†rescue LoadError¬†clause and run the code again, we can capture the¬†LoadError¬†using the generic¬†Exception¬†class: While we didn‚Äôt explicitly¬†rescue¬†a¬†LoadError¬†class, our output still grabs the¬†LoadError¬†exception that was created: This behavior is because of the inheritance structure of all the classes we‚Äôve discussed.¬†LoadError¬†is a subclass of¬†ScriptError, which is in turn a subclass of¬†Exception. Since we told Ruby to explicitly¬†rescue¬†an¬†Exception¬†in this case, we‚Äôve ensured that Ruby will trigger our¬†rescue¬†clause if any¬†Exception, or descendant thereof, is raised. On the other hand, it‚Äôs also important to note that since¬†LoadError¬†is not a descendant of¬†StandardError, which is the default exception type Ruby creates for¬†rescue¬†clauses without explicit class specification, we¬†cannot¬†expect a non-explicit¬†rescue¬†clause to trigger when a¬†LoadError¬†is raised. This produces a generic error output which doesn‚Äôt utilize our non-explicit¬†rescue¬†clause at all: Check out Airbrake‚Äôs Ruby Exception Handling tool to take your project to the next level!", "date": "2016-12-13"},
{"website": "Airbrake", "title": "Ruby Exception Handling: NotImplementedError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/notimplementederror", "abstract": "Next on the docket for our¬†Ruby Exception Handling¬†series, we‚Äôre taking a look at the¬†NotImplementedError¬†exception class.¬†NotImplementedError¬†is a subclass descendant of the¬†ScriptError¬†superclass, and occurs when Ruby attempts to utilize a feature or method that isn‚Äôt implemented for the current platform or Ruby installation. In this post we‚Äôll explore the¬†NotImplementedError¬†class, examining where it lands within Ruby‚Äôs¬†Exception¬†class hierarchy, how to handle¬†NotImplementedErrors, and best practices to avoid this exception from appearing in the first place! All Ruby exceptions are descendants of the Exception class, or a subclass therein. ScriptError is a direct descendant of the Exception class. NotImplementedError¬†is a direct descendant of the ScriptError class. Ruby will raise a¬†NotImplementedError¬†whenever it encounters a reference to a method or function that cannot be executed within the current system environment. This is particularly common when executing Ruby in a non-Unix environment, such as Windows, due to the inherit limitations that Windows deals with. For example, attempting to utilize the fork method within most Windows development environments will result in a¬†NotImplementedError: We‚Äôve added our basic¬†print_exception()¬†function to cleanup the output from the¬†rescued¬†Exception, but otherwise the code is very simple as we try to utilize the¬†Process.fork()¬†method. As expected, we receive a¬†NotImplementedError¬†output: Depending on the environment you‚Äôre executing Ruby within, a plethora of¬†Process¬†methods will run into similar¬†NotImplementedError¬†issues. Process.groups is just one other example: This produces another¬†EXPLICIT¬†(or expected)¬†NotImplementedError: Additionally, since¬†NotImplementedError¬†is a direct descendant of¬†ScriptError, when explicitly rescuing a particular exception class type, we can go up another level and rescue¬†ScriptError¬†instead, which also catches our¬†NotImplementedError: This produces another¬†EXPLICIT¬†error, and since we specify that we‚Äôre¬†rescuing¬†any¬†ScriptError, our¬†NotImplementedErrorthat is produced is still captured: As we learned from diving into¬†LoadError, it‚Äôs important to remember that Ruby‚Äôs default Exception¬†class expectation when¬†no explicit class¬†is provided, is to only grab¬†StandardErrors¬†and all descendants therein. Here we‚Äôre removing our explicit call to either¬†ScriptError¬†or¬†NotImplementedError¬†within our¬†rescue¬†clause: Since¬†rescue => e¬†is processing only the default¬†StandardErrors, it¬†does not¬†catch our¬†NotImplementedError¬†and thus our¬†print_exception()¬†function never fires. We still get an error and output of course, but rather than¬†rescuing¬†our code to allow further execution, we‚Äôd simply be crashing the application: These built-in exception classes are helpful ruby exception handling tools! Used with Airbrake‚Äôs Ruby Exception Handler your debugging process will be a breeze. Good luck!", "date": "2016-12-22"},
{"website": "Airbrake", "title": "Ruby Exception Handling: SecurityError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/securityerror", "abstract": "As we plow ahead through our adventure with the¬†Ruby Exception Handling¬†series, today we‚Äôre examining the¬†SecurityError¬†exception class, which is raised anytime Ruby attempts a potentially unsafe operation. Throughout this post we‚Äôll examine what can cause a¬†SecurityError¬†and how to configure your application to avoid them wherever possible, so let‚Äôs get started! All Ruby exceptions are descendants of the Exception class, or a subclass therein. SecurityError¬†is a direct descendant of the Exception class. Unlike most other direct descendants of Exception ,¬†SecurityError¬†is not a superclass, and thus has no descendants of its own. To understand what can cause a¬†SecurityError, we must first examine code execution security and the concept of taint within Ruby. The idea behind¬†taint¬†is simple: When executing Ruby code, it is not always possible to determine where every object comes from. Anytime a third-party library or resource is involved, or even any form of user input, Ruby could become insecure. Objects generated or altered from these outside sources present potential security risks, since Ruby has no way of knowing what exactly occurred during those outside processes. Thus, a¬†tainted¬†object is any object in Ruby that has been altered by one of these outside sources. This causes that object to be flagged as¬†tainted, a boolean value that can easily be checked at any time using the tainted? method. For example, here we create a simple string object,¬†name, and assign it to the value¬†Bob. We then output whether or not it is¬†tainted, directly¬†taint¬†it ourselves, then evaluate it a second time: The output shows us that, initially,¬†name¬†is not¬†tainted, but once we explicitly¬†taint¬†it ourselves, it is tainted¬†thereafter: So, why is¬†taint¬†important to understand¬†SecurityErrors? The answer is because of Ruby‚Äôs global¬†$SAFE¬†variable, which is used during execution to determine how Ruby should behave when dealing with potentially unsafe code. There are effectively¬†5¬†possible¬†$SAFE¬†levels: Check out this table for a more in-depth specifics of¬†$SAFE¬†levels. Since¬†$SAFE¬†defaults to the¬†0¬†level, Ruby typically does not care if your code attempts to utilize a¬†tainted¬†object, as we saw in our example above with¬†Bob. However, we can force Ruby to consider security levels and potentially¬†tainted¬†objects by increasing our¬†$SAFE¬†value above the default value of¬†0. However, as outlined above, Ruby won‚Äôt consider our¬†tainted¬†value improper unless we try to utilize a¬†‚Äúpotentially dangerous operation‚Äù. One obvious example of a dangerous operation is the¬†eval()¬†method. In the following code we‚Äôve now raised the¬†$SAFElevel to¬†1¬†and taken our original¬†puts()¬†calls and placed them inside an¬†eval()¬†call, thereby causing Ruby to recognize the potential security risk of this code: If we raise the¬†$SAFE¬†level even further, such as level¬†3¬†or higher, now all newly created objects are inherently¬†tainted. This means that simply by creating our new¬†name¬†object and attempting to access it through¬†eval(), we produce a¬†SecurityError: Sure enough, this generates our expected output: These built-in exception classes are helpful ruby exception handling tools! Used with Airbrake‚Äôs Ruby Exception Handler your debugging process will be a breeze. Good luck!", "date": "2016-12-27"},
{"website": "Airbrake", "title": "Ruby Exception Handling: SyntaxError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/syntaxerror", "abstract": "Today we continue our in-depth¬†Ruby Exception Handling¬†series with a dive into the¬†SyntaxError¬†exception class.¬†SyntaxError¬†is a subclass descendant of the¬†ScriptError¬†superclass, and pops up anytime Ruby attempts to execute invalid code syntax. In this piece we‚Äôll examine the¬†SyntaxError¬†class, looking at exactly where it fits into Ruby‚Äôs¬†Exception¬†class hierarchy, how to deal with¬†SyntaxErrors, and the best practices to avoid this exception altogether. Let‚Äôs get to it! All Ruby exceptions are descendants of the Exception class, or a subclass therein. ScriptError is a direct descendant of the¬†Exception¬†class. SyntaxError¬†is a direct descendant of the¬†ScriptError¬†class. Perhaps the first thing to consider when examining¬†SyntaxErrors¬†is that, by their very nature, a¬†SyntaxError¬†cannot be directly¬†rescued¬†within a single chunk of code. For example, let‚Äôs run the following simple code snippet, whereby the broken line in question is¬†1=2. Since Ruby expects¬†1in this case to be an object to which we‚Äôre assigning the value of¬†2, and not the¬†Fixnum¬†object type that it actually is, our code fails and we produce a¬†SyntaxError: This produces the following output: As you may notice, the issue here is that even though we‚Äôve added our¬†rescue¬†clause and explicitly grab any¬†SyntaxErrors¬†‚Äî and the output shows a¬†SyntaxError¬†is actually produced ‚Äî our¬†rescue¬†clause never actually fires. The reason for this behavior is that Ruby encounters our¬†SyntaxError during the initial parsing , which is where Ruby converts the code into a¬†parse tree¬†used to perform actual execution. To dive into more detail on how Ruby converts your code into a parse tree, a gem like ParseTree can be very handy. Ultimately, this means that you can almost never expect to be able to actually trigger a¬†rescue¬†block for a¬†SyntaxError. That said, there are a handful of exceptions to this rule. The most likely scenario where a¬†SyntaxError¬†can actually be¬†rescued¬†is when the code that produces the¬†SyntaxError¬†is in an outside file that is then¬†required¬†by an inner file where the¬†rescue¬†clause can then capture it during execution. For example, here we‚Äôve taken our above¬†1=2¬†code and moved it into a separate file called¬†invalid.rb: Now, instead of directly executing our invalid code within our¬†begin¬†block as before, we offset that execution one layer by using the require_relative() method to include our invalid code into the execution chain: Now we effectively delay Ruby‚Äôs processing of our invalid code, thus allowing our¬†rescue¬†clause to properly detect the¬†SyntaxError¬†and the block to execute our¬†print_exception()¬†function as desired. While the actual error is the same, the output is quite different since our¬†rescue¬†block actually fires: It is also possible to¬†rescue¬†generated¬†SyntaxErrors¬†from within an eval() method, since this effectively offsets execution ordering the same way¬†require¬†does: This produces an expected, captured error: As with other subclass¬†Exceptions¬†that are not direct descendants of¬†StandardError, it is important that you do not rely on an inexplicit class within your¬†rescue¬†clause to capture¬†SyntaxErrors: While our¬†SyntaxError¬†is still produced, of course, the error is not captured by our¬†rescue¬†clause and thus the¬†rescue¬†block and¬†print_exception¬†function do not fire:", "date": "2016-12-16"},
{"website": "Airbrake", "title": "Ruby Exception Handling: StandardError ‚Äî default for rescue", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/standarderror", "abstract": "This is an exciting day in the life of our Ruby Exception Handling series, as we tackle the big daddy of all Ruby exceptions, the¬†StandardError.¬†StandardError¬†is a superclass with many exception subclasses of its own, but like all errors, it descends from the¬†Exception¬†superclass.¬†StandardErrors¬†occur anytime a¬†rescue¬†clause catches an exception without an explicit¬†Exception¬†class specified. In this post we‚Äôll take a closer look at the¬†StandardError¬†class, examining where it lands within Ruby‚Äôs¬†Exception¬†class hierarchy and how to handle¬†StandardErrors. Let‚Äôs get this party started! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError¬†is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. Since¬†StandardError¬†is the parent to just about every fundamental, typical exception that is likely to be raised in normal Ruby execution, it‚Äôs critical to understand that the¬†StandardError¬†class itself is never actually passed along within a¬†rescue¬†code block. Instead, it simply behaves as the default exception class when no explicit class is provided for any given¬†rescue¬†clause. This behavior is particularly beneficial when your code attempts to account for (and¬†rescue) a wide range of expected, explicit exception classes, but you must also include a¬†rescue¬†clause for anything unexpected. For example, here we have a simple example snippet that attempts to¬†rescue¬†a number of explicit exception classes, such as¬†IndexError¬†and¬†NameError, that we might expect to pop up. However, as a final resort, we‚Äôre also specifying a¬†rescue¬†clause at the end with no explicit exception class specified. This final¬†rescue¬†clause defaults to using¬†StandardError, which means it will catch any and all exception classes that are descendants of¬†StandardError¬†that were not already¬†rescued¬†in a previous clause. In this case, because we‚Äôre simply raising a made up exception (‚ÄúUh oh!‚Äù), we expect none of our explicit exception classes to match, and instead for our backup¬†StandardError¬†exception to catch it, as the default. Once it does, it will then identify which of its own descendants apply to this particular exception, which in the case of an explicit¬†raise¬†call, defaults to¬†RuntimeError. Sure enough, this is the resulting output we get: While this baseline behavior of using¬†StandardError¬†as a catchall for unknown exceptions is a very powerful, it‚Äôs also handy for being the baseline class to extend when creating your own exception classes within your application. In this example, we‚Äôve defined a custom¬†MissingName¬†exception class, which descends from¬†StandardError. It also initializes with its own¬†msg¬†output in case one isn‚Äôt provided when the exception is raised. Now within our¬†begin-rescue¬†block we once again have a¬†rescue¬†clause without an explicit exception class specified, so it will default to¬†StandardError¬†and any subsequent descendant class that matches: In our case, this means our¬†MissingName¬†exception class is raised and¬†rescued¬†as expected: The fundamental takeaway when examining¬†StandardError¬†is that, unlike¬†Exception¬†from which it inherits,¬†StandardErrorsimply encompasses all normal, expected exceptions that a typical Ruby application may encounter during execution. These can all be properly¬†rescued¬†and dealt with from within the Ruby application, without any need for a user interference or without any detrimental effects to the underlying system. Conversely, exceptions outside of the scope of¬†StandardErrors, which simply fall elsewhere under the superclass of¬†Exceptions, are inherently system-level errors, and thus will typically indicate a non-functional application. To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-01-04"},
{"website": "Airbrake", "title": "Ruby Exception Handling: ArgumentError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/argumenterror", "abstract": "As our journey through the Ruby Exception Handling series continues, today we‚Äôll be taking a closer look at the¬†ArgumentError.¬†ArgumentError¬†is a descendant class of the¬†StandardError¬†superclass, and is typically raised when arguments passed to a method are incorrect, unexpected, or invalid in some way. In this article we‚Äôll dive deeper into our examination of the¬†ArgumentError¬†class, peering at where it sits within Ruby‚Äôs¬†Exception¬†class hierarchy and how to handle any¬†ArgumentErrors¬†you may encounter in your own coding adventures. Let the exploration begin! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. ArgumentError¬†is a direct descendant of the StandardError class, and is also a small superclass of its own. While¬†ArgumentError¬†is intended to appear in the limited circumstance for when passed arguments to a method are incorrect in some fashion, the sheer number of specific instances in which this can occur is quite massive. Whether it be passing too many arguments to a method that expects fewer total, passing an incorrect argument data type, or even passing the correct data type but with an invalid value,¬†ArgumentError¬†covers the vast majority of these situations. Therefore, to use it properly, it‚Äôs simplest to just take a look at a few basic examples so you can extrapolate on this knowledge for your own exception handling needs. In this example below, we‚Äôre creating a new array called¬†data¬†and giving it the series of values from¬†1¬†to¬†10. Next, we want to grab a random sample of these array values and output them, so we‚Äôre using the .sample() method on our array, but we‚Äôve accidentally added two arguments specifying how many elements from the array we want to select: Ruby doesn‚Äôt care for this, since the .sample() method only expects one numeric argument, and thus we produce our expected¬†ArgumentError¬†informing us of this blunder: Along the same vein, we can also raise an¬†ArgumentError¬†by passing an invalid argument to¬†.sample(), such as a negative number in this case. Since collecting a negative number of elements makes no sense, Ruby throws another¬†ArgumentError¬†and informs us of our faux pas: As with any exception class that extends from¬†StandardError, it‚Äôs important to note that we can also catch this error even if we neglect to explicitly¬†rescue¬†the¬†ArgumentError¬†class, and instead fall back to the default¬†rescuing¬†of¬†StandardError: Sure enough, while we didn‚Äôt explicitly¬†rescue¬†our¬†ArgumentError¬†class, the default¬†StandardError¬†did the rescuing for us, and then drilled down to the matching¬†ArgumentError¬†that applied, just as before: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2016-12-29"},
{"website": "Airbrake", "title": "Ruby Exception Handling: Interrupt", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/interrupt", "abstract": "Today as we continue our journey through the wide world of Ruby Exception Handling , we‚Äôre going to examine the¬†Interrupt¬†exception class.¬†Interrupt¬†is a subclass descendant of the¬†Exception¬†superclass, and occurs when a specific interrupt signal is received by the active Ruby process, such as when the user manually halts via¬†Ctrl-C. In this article we‚Äôll examine the¬†Interrupt¬†class in a bit more detail, looking at where it sits within Ruby‚Äôs¬†Exception¬†class hierarchy, how to handle¬†Interrupt¬†errors, and a few tips for avoid¬†Interrupts¬†exceptions entirely. Let‚Äôs get to work! All Ruby exceptions are descendants of the Exception class, or a subclass therein. SignalException¬†is a direct descendant of the Exception class. Interrupt¬†is a direct descendant of the¬†SignalException¬†class. Since¬†Interrupt¬†is a descendant of the¬†SignalException¬†class, it should come as no surprise that¬†Interrupt¬†is just a response to a specific signal being sent to the active process, and caught by Ruby. Let‚Äôs briefly discuss signals to get a refresher on what they are and how they work. A¬†signal¬†is a command that can be sent directly to a running process within many operating systems. Typically, a specific signal will be a short string identifier, each with a unique purpose or intended behavior. For example, the¬†TERM¬†signal is short for¬†termination¬†and is intended to terminate the running process it is sent to:¬†Process.kill(‚ÄòTERM‚Äô, Process.pid). If you‚Äôre unsure of what signals are available to your system, simply call the¬†Signal.list¬†method in Ruby for a complete list. Now in most cases, the¬†Interrupt¬†exception will be raised via a manual interruption command, when the user presses¬†Ctrl-C¬†to halt the active process. This can be seen in practice with the simple example below: We‚Äôve created an indefinite loop which pauses every second and outputs the current iteration of our¬†count¬†value. Obviously this would eventually cause a crash if execution was never halted, but for our purposes it works well enough to give us an active process we can manually kill. After executing and seeing the output number climb for a few seconds, press¬†Ctrl-C¬†and we see our expected¬†Interruptexception was raised and rescued: Additionally, since¬†Interrupt¬†descends from the¬†SignalException¬†class, we can remove our explicit¬†rescue¬†clause for¬†Interrupt¬†and just rescue any¬†SignalException, which will also catch our manual interrupt in the same way: The output: While manual interruption is useful, it‚Äôs important to recognize that the common¬†Ctrl-C¬†command to manually interrupt the active process is really just a shortcut way of sending the¬†INT¬†signal to that process, telling it to interrupt. Therefore, just as with the¬†TERM¬†signal or many others, we can programmatically send the¬†INT¬†signal to our active process through Ruby code itself and raise an¬†Interrupt¬†exception in much the same way as before. Here we‚Äôre using the same loop, but once the¬†count¬†reaches¬†5, we send our¬†INT¬†signal: This produces similar output to the other manual interrupt methods, since from the perspective of both Ruby and the operating system, these¬†INT¬†signal methods are identical: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-01-10"},
{"website": "Airbrake", "title": "Ruby Exception Handling: ConverterNotFoundError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/converternotfounderror", "abstract": "As our exploration through the¬†Ruby Exception Handling¬†series continues, today we‚Äôll be examining the¬†ConverterNotFoundError.¬†ConverterNotFoundErrors¬†appear in Ruby when attempting to use any of the variety of transcoding methods provided by Ruby, but in doing so, passing an invalid converter that Ruby isn‚Äôt aware of. In the meat of this article we‚Äôll explore the details of the¬†ConverterNotFoundError¬†class, see where it sits in Ruby‚Äôs¬†Exceptionclass hierarchy, and also learn how you might deal with any¬†ConverterNotFoundErrors¬†that you may encounter in your own coding. Let‚Äôs get this party started! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. EncodingError is a direct descendant of the¬†StandardError¬†class, and is also a superclass with a handful of descendants of its own. ConverterNotFoundError¬†is a direct descendant of the¬†EncodingError¬†class. To fully understand why a¬†ConverterNotFoundError¬†might be raised, we need to explore a bit more about Ruby‚Äôs handling of encoding practices. Put simply, Ruby provides the Encoding namespace, which is parent to all¬†encoding types¬†or¬†converters, as well as the home of all the¬†Encoding¬†errors, including¬†ConverterNotFoundError. This means, we can view all the constants which are part of the¬†Encoding¬†namespace by making a simple call to the¬†.constants¬†method: The output is a list of all constants that are children within the¬†Encoding¬†namespace, including all error classes and all¬†converters: This presents an easy way to see every¬†converter¬†that Ruby knows about and can utilize. These can then be called as part of all the transcoding/encoding methods provided within Ruby, such as the¬†.encode()¬†method used on a string. We can pass either the direct constant (Encoding::UTF_8), or use one of the named aliases (such as¬†‚ÄòUTF-8‚Äô). Both of these lines are executed identically: Now that we understand how to find what possible¬†converters¬†Ruby is aware of, as well as how to properly pass them to encoding methods, we can produce an¬†ConverterNotFoundError¬†by trying to pass an invalid¬†converter¬†to the encoding method. For example, here we‚Äôre trying to¬†.encode()¬†using the¬†‚ÄòUTF-89‚Äô¬†converter, which doesn‚Äôt exist (arguably a simple typo to make): As expected, Ruby cannot locate a¬†converter¬†with an alias of¬†‚ÄòUTF-89‚Äô, so it produces a¬†ConverterNotFoundError¬†which we¬†rescue: To prevent¬†ConverterNotFoundErrors¬†from occurring, the best practice is to always reference specific¬†converters¬†by the actual constant, not by a string alias. This is because Ruby will attempt to access a constant which doesn‚Äôt exist as part of the¬†Encoding¬†namespace, and throw a¬†NameError¬†in response: Here we‚Äôre calling the¬†.encode()¬†method, but passing a direct reference to a constant of¬†Encoding::UTF_89, which again is a probable typo but doesn‚Äôt exist in the constant set. As expected, this throws a¬†NameError¬†due to the uninitialized constant we specified: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-02-09"},
{"website": "Airbrake", "title": "Ruby Exception Handling: SignalException", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/signalexception", "abstract": "Next on the docket for our Ruby Exception Handling series, we‚Äôre taking a look at the¬†SignalException¬†class.¬†SignalException¬†is a subclass descendant of the¬†Exception¬†superclass, and occurs when a process monitored by Ruby receives a signal via the operating system. In this post we‚Äôll explore the¬†SignalException¬†class, examining where it lands within Ruby‚Äôs¬†Exception¬†class hierarchy, how to handle¬†SignalException¬†errors, and a few best practices to avoid this exception from appearing in the first place. Let‚Äôs begin our adventure! All Ruby exceptions are descendants of the Exception class, or a subclass therein. SignalException¬†is a direct descendant of the Exception class. As discussed earlier, the¬†SignalException¬†class is raised anytime Ruby encounters a received signal during code execution. Thus, to properly understand how¬†SignalExceptions¬†work, we must first explore a bit about signals, including what they are and what can cause them. A¬†signal¬†is simply a command that can be sent directly to a running process within many operating systems. Typically, a specific signal will be a short string identifier, each with a unique purpose or intended behavior. For example, the¬†TERM¬†signal is short for¬†termination, and as you might expect, is intended to terminate the running process it is sent to:¬†Process.kill(‚ÄòTERM‚Äô, Process.pid). The specific signals available to you will depend on your particular operating system, but we can easily gather a list of potential candidates using a simple¬†Signal.list¬†method within Ruby: On Windows 7, this outputs a handful of available signals, including the¬†TERM¬†signal mentioned above: Now to send a signal to a particular process, we must identify the correct process using the unique identifier, known as the process ID or¬†pid. Virtually all operating systems use a¬†pid¬†system to identify running processes, so even the¬†Interactive Ruby Shell¬†(irb) that you might be testing simple code with will have its own¬†pid. This can be identified using the¬†Process.pid¬†method call: The output shows what the actual¬†pid¬†number is: Now with that out of the way, we can tackle the raising of¬†SignalExceptions¬†when executing Ruby code. In this simple example below we‚Äôre using a standard¬†begin-rescue¬†block to catch any potential exceptions. The crux of the code is the one line where we‚Äôre calling the¬†Process.kill¬†method, passing the¬†TERM¬†signal and the currently active process¬†pid¬†as the arguments, and attempting to¬†rescue¬†the produced¬†SignalException, before outputting the resulting exception message using the¬†print_exception¬†function: Sure enough, this raises the expected¬†SignalException¬†and informs us of the type in question (SIGTERM): It‚Äôs important to understand that¬†SignalException¬†is still a Ruby class, and thus is bound by all the rules that Ruby must abide by during execution, whereas signals and their respective processes, are at a higher level of abstraction since they only abide by the rules of the operating system. This means that, in some cases,¬†SignalExceptions will not be raised because some particular signal types are designed not to be caught or ignored. For example, the signal¬†KILL¬†is similar to¬†TERM, except it specifically terminates the process immediately without allowing the process to perform any further actions or cleanup procedures, such as raising errors: As expected, executing the code this time with the¬†KILL¬†signal sent simply terminates our process immediately, without any further processing or without raising a¬†SignalException. To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-01-24"},
{"website": "Airbrake", "title": "Ruby Exception Handling: IndexError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/indexerror", "abstract": "Today we‚Äôll be continuing our journey through our Ruby Exception Handling series by exploring the wonderful world of the Ruby IndexError . The IndexError is raised when there‚Äôs an attempted call to an element within an array, where the given index is out of bounds or invalid in some way. Throughout today‚Äôs article we‚Äôll examine exactly what the IndexError means, see where it fits within the Ruby Exception class hierarchy, and detail how to properly handle any IndexErrors you might experience in your own coding endeavors. Let‚Äôs get going! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. IndexError is a direct descendant of the StandardError class, and is a superclass to a few descendants of its own. The IndexError is directly linked to the use of Arrays in Ruby, so let‚Äôs briefly cover arrays and how they work. We can create an array by calling the Array.new method: Array.new(3) would create an array with three ( nil ) elements. We can also create an array inline by specifying the values as part of the array assignment: names = [\"Alice\", \"Bob\", \"Christine\", \"Dan\"] Once an array is created, there are numerous methods to manipulate it. If we want to fetch a value from the array, we can use the square bracket syntax and include the index we are trying to get: We can also use something like the Array.fetch method, which expects the first argument provided to be the index of the element to fetch: As with most programming languages, arrays use zero-based numbering, so the first element is at index 0 , the second element at index 1 , and so forth. Therefore, in both examples above, when we pass the index value of 3 , it returns the fourth element in our array. With only four elements total, let‚Äôs see what happens if we try to retrieve the fifth index with the direct square bracket syntax: Ruby recognizes that no value exists, and thus returns nil . However, what if we pass the same syntax with the Array.fetch method: Perhaps unsurprisingly, this raises an explicit IndexError , indicating that the index of 5 is outside the bounds of our array: There are a couple ways to solve this and prevent IndexError from occurring. The first, and most obvious, is to improve our code logic so that we don‚Äôt try to retrieve any indices that don‚Äôt exist with the Array.fetch method. The second option is to pass a second argument to the Array.fetch method, which acts as a default value if the provided index is out of bounds: Now when we execute our code, rather than producing an IndexError , the Array.fetch method recognizes the second argument of \"No name found.\" and returns that value as our output instead: A third use for Array.fetch , which is somewhat interesting if not directly related to the IndexError , is that we can attach a code block after the Array.fetch call, if we want the block to execute only when the index value is invalid: Here‚Äôs our output: This functionality can be rather useful as a predetermined escape sequence for when we aren‚Äôt sure of a provided index will be valid, so we can perform other actions if necessary. To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-03-24"},
{"website": "Airbrake", "title": "Ruby Exception Handling: FiberError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/fibererror", "abstract": "Our journey through our Ruby Exception Handling series continues, as today we‚Äôre taking a look at the FiberError . A FiberError occurs when attempting to make a call to Fiber class methods, after the fiber has been terminated . In this article, we‚Äôll examine the FiberError class in more detail, explore where it sits within Ruby‚Äôs Exception class hierarchy, and also investigate how to handle FiberErrors in your own code. Let‚Äôs get to it! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. FiberError is a direct descendant of the EncodingError class. As is often the case, to understand what a FiberError means and how it functions, we must first understand another aspect of Ruby coding; in this case, the Fiber class. Fundamentally, fibers (known as continuations in older Ruby versions) are light-weight threads, used for implementing concurrency logic that is manually managed by the code (rather than the OS or virtual machine). While not commonly used, the basic purpose of fibers in Ruby is that a Fiber code block ‚Äúremembers‚Äù its code state, and allows you to resume execution within that code block at any time. Most commonly, this functionality is best used for creating Enumerators , which are just classes that allow for iteration over a series of objects. For example, imagine we want to create a Counter class, that allows us to enumerate a series of increasing integers. We can create it using the enum_for method within our own Counter class iterator method, by then specifying our series of iterations using the yield call: Calling Counter.new.iterator generates our new Enumerator object (which we can see by outputting the counter variable). Then, as expected, we can use our Enumerator behavior by calling the automatic .next method on it. For all Enumerators in Ruby, this calls the next yield to be iterated, so we output the next number in our list each time. Here‚Äôs the output we generated: The obvious problem here is that we hard-coded each of our yield statements in our original Counter class iterator . This is a very poor practice, so we can clean it up by using a Fiber instead: While this is a few more lines of code, this is far cleaner and, most importantly, we are no longer forced to manually indicate every single yield iteration that we expect. Instead, we‚Äôve setup a Fiber.new block. Within that block, we‚Äôve created an infinite loop that uses Fiber.yield to yield the next iteration of our count variable, before incrementing the value by +1 . The magic of using fibers is that we can then call the .resume method of our fiber from anywhere in code , and Ruby will find the Fiber.yield statement then resume processing from there, before continuing execution where that .resume was called. In other words, fiber allows us to execute code blocks ‚Äúout of order‚Äù, as Ruby will remember where the fiber yield statement is waiting for our next .resume method call. The result is that we can call the .next method for our counter as many times as we want, from anywhere, and it will execute @fiber.resume , which then yields the current count value within our class, iterates the count by one, then exits that loop block again until the next time we call .next . The output is as expected: Whew! Now that we understand the basic purpose of Fiber , we can see how a FiberError might occur. Simply put, FiberErrors occur when using Fiber methods as above, but when the fiber can no longer call the .yield method because it has been terminated . Termination occurs when the final Fiber.yield call has been made within the fiber code block. This causes any future attempts to call the fiber's .resume method to produce a FiberError , because that fiber is now dead or terminated . In this example, we‚Äôve modified the code above by removing the infinite loop . This forces our Fiber.yield calls to be finite (in fact, we only have one now): There‚Äôs a bit of extra code that we‚Äôll cover in a second, but let‚Äôs execute this without the infinite loop surrounding our Fiber.yield call and see what happens: Sure enough, a FiberError is produced, but let‚Äôs examine the code a bit more to figure out what‚Äôs going on. One thing we did is add a call to the Fiber.alive? method within our Counter.next method. This simply checks if the specified fiber is still active/can be yielded, and returns a boolean indicating its status. With that in mind, let‚Äôs see what‚Äôs happening here. As before, we call the .next method three times in total, so let‚Äôs iterate over each to see why the FiberError is thrown. counter.next Call #1 The first time we call .next , the output shows that Yes , @fiber is alive . It then calls .resume , which jumps to the Fiber.yield statement inside our fiber code block, which outputs the initial count value of zero: counter.next Call #2 The second time we call .next , prior to calling @fiber.resume , our fiber is still alive . However, once Fiber.resume is called, the fiber cannot find the next Fiber.yield statement within its block (because there isn‚Äôt one), so it terminates itself. NOTE: Upon termination, a fiber will return the value of the last executed expression within the Fiber code block. This is why we added the ‚ÄúFiber Terminated‚Äù line, so that the output from our second counter.next call indicates that our fiber has, in fact, been terminated : counter.next Call #3 For our third and final counter.next call, even prior to calling .resume on our fiber , we have confirmed that it is no longer alive . As expected, the subsequent call to .resume is attempted on a fiber that has been terminated (is dead), so we get the expected FiberError in our output: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-03-01"},
{"website": "Airbrake", "title": "Ruby Exception Handling: NoMethodError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/nomethoderror", "abstract": "Continuing through our Ruby Exception Handling series, today we‚Äôll be taking a look at the NoMethodError in Ruby. As clearly indicated by the name, the NoMethodError is raised when a call is made to a receiver (an object) using a method name that doesn‚Äôt exist. Throughout this article we‚Äôll dig a bit more into the NoMethodError , including where it sits within the Ruby Exception class hierarchy, as well as reviewing a few simple code examples that illustrate how NoMethodErrors can occur. Let‚Äôs get to it! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. NameError is a direct descendant of the StandardError class, and is also a superclass with one descendant. NoMethodError is a direct descendant of the NameError class. Let‚Äôs take a look at a common class configuration in Ruby and how we might accidentally produce a NoMethodError with an invalid call. Below is our full code example, including the Book class that has an initializer and holds one attribute (as defined by using attr_accessor ), which is the title : Our first function that makes use of the Book class is create_book : Here we just create a new instance of the Book class and assign it to our book variable, then we output both the book object itself and the book.title attribute. The resulting output is as expected: In our second function, invalid_book_method , we‚Äôre also creating a new instance of the Book class named book and outputting some information, but we also append a call to the book.author method: As expected, this raises a NoMethodError because book.author is an invalid method (we never defined the author method within our Book class): Clearly we should probably have a way to keep track of the author of our books, so we should add the author method to our Book class. There are two simple ways to accomplish this. One option is to continue using the attr_accessor method. This method provides a bit of fun Ruby magic to our code, by allowing us to tell Ruby that the argument list of :symbols we provided should be added to our class as instance variables. In addition, Ruby will automatically add two new methods to our class, which act as getter and setter methods with the name of the attribute we provided. For example, here we‚Äôre using attr_accessor to define the :author attribute for our Book class (in addition to the previous :title attribute we had): We removed the unrelated code, but by using attr_accessor in this way to define the :author attribute, it turns out this is functionally identical to defining the methods ourselves, like so: Obviously, the attr_accessor shortcut is much simpler so that‚Äôs considered the standard way to approach this problem, but both options are completely viable. In our case, we‚Äôll stick with adding :title to our attr_accessor argument list, then call the book_with_author function: Sure enough, this works just fine without raising any errors, and our output includes the previous information, along with the expected book.author value: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-04-27"},
{"website": "Airbrake", "title": "Ruby Exception Handling: StopIteration", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/stopiteration", "abstract": "Moving right along through our Ruby Exception Handling series, today we‚Äôll be examining the StopIteration error. StopIteration is unique in the realm of Ruby exceptions, since it isn‚Äôt generated at run-time by something going haywire, but is instead manually raised by the developer when there‚Äôs a need to halt an active iteration. In this article we‚Äôll take a closer look at what a StopIteration ‚Äúerror‚Äù is, seeing where it fits in the Ruby Exception class hierarchy, and diving into how to properly raise StopIteration errors yourself. Let‚Äôs get this party started! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. IndexError is a direct descendant of the StandardError class, and is a superclass to a few descendants of its own. StopIteration is a direct descendant of the IndexError . What is most interesting about StopIteration is that it isn‚Äôt a traditional error, in that it won‚Äôt be raised automatically by the Ruby runtime running when something goes wrong. In fact, the name hints at this difference to other errors. As you may recall, every other error we‚Äôve covered in this series has contained the Error suffix as part of the name (with the exception of SignalException , pun intended). Yet, even though StopIteration is a descendant of the Exception class in Ruby, it is only raised when you explicitly raise it in your code. To see why we‚Äôd might want to explicitly raise a StopIteration error intentionally, let‚Äôs consider an example scenario. Imagine we need to perform a loop that enumerates through a series of values. This is a very common scenario in all languages, but here‚Äôs what it might look like in Ruby: As expected, this prints out all values from zero through nine: Now, what if we want to halt our loop execution before reaching the end of our enumeration, based on a particular value? We have a few options, but the most common technique is to use the break keyword, which terminates the current loop . Here we‚Äôre halting our loop when index reaches a value of 5 : Now we only print out values from zero to five: However, we can alternatively raise a StopIteration error, instead of using break . Since we‚Äôre raising an error, we‚Äôve also surrounded our code with some helpers, and the standard begin-rescue block: This performs the same as the break example, but since we also raise an error, we spit that out as well: That‚Äôs all well and good, but the question remains: Why would you ever want to use StopIteration instead of break ? Answer: When you also want to control the flow of execution for code outside of your loop. For example, let‚Äôs take the same simple loop as above, but immediately after our loop we‚Äôre going to output a simple message of \"Loop complete.\" . First let‚Äôs try it with break : As expected, we output zero through five, then our completion message: But notice what happens when we add the same post-loop puts statement in our StopIteration example: Outputs: We entirely skip over the puts \"Loop complete.\" line. This is the fundamental benefit (or detriment, depending on the situation) of raising a StopIteration error. It allows your code to completely halt all further execution from within an internal loop, until after the StopIteration error has been rescued in some way. This practice is largely contested in the Ruby development community, as some developers are strongly against handling control flow (i.e. how execution traverses through your code) using exceptions. Yet, all projects and needs are different, so experiment with the different styles of exiting out of loops to see which best fits with your own requirements. To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-04-19"},
{"website": "Airbrake", "title": "Ruby Exception Handling: LocalJumpError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/localjumperror", "abstract": "Continuing along through our Ruby Exception Handling series, today we‚Äôre going to take a closer look at the LocalJumpError . Put simply, a LocalJumpError is raised when a yield call is made inside a method that has code block associated with it. Throughout this article we‚Äôll explore the LocalJumpError in more detail, looking at where it sits within the Ruby Exception class hierarchy, briefly going over Ruby code blocks and the yield statement, and then looking at actual code to see how a LocalJumpError is raised. Let‚Äôs get crackin‚Äô! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. LocalJumpError is a direct descendant of the StandardError class. As mentioned in the introduction, a LocalJumpError can only be raised in a very specific scenario: When a yield call is made within a method that doesn‚Äôt have an associated code block . To understand just what that means, let‚Äôs take a moment to refresh ourselves on what blocks are in Ruby, and then we can take a look at how yield is used in conjunction with them. In Ruby, a block (also known as a closure in some other languages) is a group of statements that can be associated with a method call. A code block is associated with a method when the block immediately follows the method call. A block can be written using one of two possible syntaxes: Generally speaking, most developers use the braces syntax if the block is a single statement and can, therefore, easily fit on one line. On the other hand, the do...end syntax is commonly used for multiline blocks . To further illustrate, let‚Äôs give a real working example of defining a method and then associated a block with our method call: As you can see, we created a book hash with a handful of values. We then defined the get_title method, which simply returns the title value of our hash. Finally, we make a call to get_title(book) , but we‚Äôve also associated a single line block with our method call: { puts 'Block has been executed!' } Let‚Äôs try running this code and see what happens in the output: As it happens, we only get the Retrieving title... indicator, and then output the title that we retrieved with our method call. Our code block is not executed. Why? Because we didn‚Äôt include the yield statement anywhere inside our get_title method. In Ruby, the yield statement allows you to temporarily halt or step out of the execution of the inner method code, alternatively stepping into the currently associated code block attached to that method. This has many potential benefits across Ruby, but the most common use is with Enumerators , which all use block and yield to retrieve the current iterative value, no matter how many items or iterations are involved. To see yield in action, let‚Äôs modify our initial example above by adding a few more lines: We added two new lines inside our get_title method. The first is an output to indicate that we‚Äôre calling yield , and the second is the yield statement itself. Now our output looks different from before: We can now see that calling yield did its job. During execution of get_title , in between the Yielding... and Retrieving title... lines, our execution stepped out due to the yield statement, and executed the code block that we associated with our method call, which produced the Block has been executed! output. Keen observers may have also noticed that we passed an argument to our yield call, in this case book[:author] . We can pass arguments to yield calls, which are then passed along to the associated code block when it is executed. We need to define some parameters within our block to make use of this, so let‚Äôs change our method call to the following code: Now, when we make this call to our get_title method, the associated block has an author parameter that we can call inside the block code. The result of our output shows that this passing of values via yield works just fine: Whew! Now that we‚Äôve refreshed ourselves on how Ruby blocks and yield statements work, we can quickly see what causes a LocalJump Error in this context. Simply put, it‚Äôs when we issue a yield statement inside a method, but that method call doesn‚Äôt have a code block associated with it. For example, here we have the same code as before, but we‚Äôve removed the block from our get_title method call: Sure enough, we raise a LocalJumpError as expected, with the error message explaining problem: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-05-17"},
{"website": "Airbrake", "title": "Ruby Exception Handling: RangeError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/rangeerror", "abstract": "Making our way along through the Ruby Exception Handling series, today we‚Äôll explore the RangeError within Ruby. Simply put, the RangeError is raised when a numerical value is provided to a Ruby method that falls outside the allowed range of values. We‚Äôll take some time in this article to fully explore the RangeError including where it resides within the Ruby Exception class hierarchy, along with a few code examples to illustrate some possible ways to raise RangeErrors yourself, so let‚Äôs get going! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. RangeError is a direct descendant of the StandardError class. To further explore the RangeError let‚Äôs start right out with some example code: This produces the expected result of the first two values: However, like many built-in Ruby methods, the first method we‚Äôre using on our Array expects the passed value to fall within a certain range. Like most programming languages, Ruby‚Äôs Integer value is four bytes in length, allowing the maximum value of an Integer to be 2,147,483,647 . Many methods in Ruby, including Array.first that we used above, expect any passed numeric argument to be a valid Integer (or long ), meaning the value cannot exceed that 2.14 million maximum. So, what happens if we pass a number that‚Äôs just a bit larger than the maximum allowed for the Integer to the Array.first method? Ruby isn‚Äôt happy about this and it raises a RangeError , indicating the value we‚Äôve provided is larger than an Integer ( long ), and is therefore a bignum : That‚Äôs all well and good, and we can see how built-in Ruby methods might raise a RangeError , but what about raising a RangeError in our own code? When is it appropriate to use that type of error? To illustrate, we‚Äôve created a Book class with three attributes : author , page_count , and title : Simple enough. Now we can create an instance of our Book class within the create_book function: This works just as expected, creating our book object and outputting the attribute data for it: Our Book class places no restrictions or limitations on the attribute fields we‚Äôve provided. Specifically, what if we need to create an abridged book class, which would only be valid for books with a limited number of pages? For that, we‚Äôve inherited our Book class with the AbridgedBook class seen below: We‚Äôve also slightly changed the behavior of the page_count attribute from the original Book class it inherits from. We‚Äôre using attr_reader instead of attr_accessor , so we only automatically generate the getter method. For the setter of page_count= , we define the method ourselves so we can specify a valid range (1 to 1000) that the page_count attribute can fall within. If it‚Äôs outside these bounds, we raise a RangeError . Lastly, we‚Äôre using the super method call, which calls the superclass matching method (in this case initialize ), so we don‚Äôt need to redefine the assignment of repeated fields like author and title . To make use of AbridgedBook we have two functions, create_abridged_book and create_invalid_abridged_book . For create_abridged_book we are creating a book record for The Stand by Stephen King, which is 823 pages, falling within the valid range of page_count : As expected, this works just fine and our AbridgedBook instance is created and we spit out some info about it: However, within the create_invalid_abridged_book we can confirm that our range limitations for page_count are working by creating an book instance for War and Peace , which is a whopping 1225 pages: As we hoped, our AbridgedBook.page_count= setter method catches this value and raises a RangeError as we asked it to, informing us that 1225 is outside the bounds we specified: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-05-20"},
{"website": "Airbrake", "title": "Ruby Exception Handling: NameError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/nameerror", "abstract": "Making our way through the Ruby Exception Handling series, today we‚Äôll take a dive into Ruby‚Äôs NameError . Simply put, the NameError is raised when a provided variable name or symbol is invalid or undefined. We‚Äôll take some time throughout this article to examine the NameError in more detail, exploring where it resides within the Ruby Exception class hierarchy, as well as checking out some sample code to see how NameErrors might occur in your own Ruby coding endeavors, so let‚Äôs get to it! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. NameError is a direct descendant of the StandardError class. There are only a couple situations where a NameError might occur when running your own Ruby code. The first is simply when trying to call an undefined variable or symbol name which hasn‚Äôt been previously declared. As an example, below we have an invalid_name_example method that attempts to output the value of title , which has not been declared: This is not allowed, and thus Ruby raises a NameError for our troubles: If we alter the code slightly, as we‚Äôve done for valid_name_example , we can initially declare the title variable prior to calling it: This outputs the expected title value of: The Stand It‚Äôs also possible to raise a NameError when attempting to assign a constant value that does not begin with a capital letter. This is because Ruby requires all constants to at least begin with a capital letter . It is common practice to name most constants entirely in uppercase using underscore word separators. In our invalid_constant_example method below we‚Äôre calling the const_set method, which sets the name of a constant to the given value: In this case, we‚Äôre trying to declare and assign the constant String::title to a value of The Shining . However, Ruby doesn‚Äôt care for this and raises another NameError , since our constant must begin with an uppercase letter: The easy fix, of course, is to change our constant name to either Title or TITLE . Since the latter is the common convention, we‚Äôll use TITLE : Sure enough, this works just fine and outputs our new String::TITLE constant value of The Shining to the console: Lastly, while related naming issues will not directly produce a NameError that we can rescue, in the wonderful world of Ruby, it happens that all class names are also constants as well. This means that, when declaring a class, the class name must also begin with an uppercase letter. Unlike value-constants, it is common practice for Ruby class name constants to be CamelCase. For example, here we‚Äôve declared a new class named author which doesn‚Äôt begin with the required uppercase letter: The Ruby parser will catch this issue immediately upon execution, rather than stepping through any other code, since this is basically a syntax error. Therefore, while not directly raising a NameError , Ruby reports the issue to the console during execution: The simple fix is to change the class name from author to Author , and all is well: As expected, this class definition is just fine, so our puts statement outputs the name of our Author : Stephen King To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-05-14"},
{"website": "Airbrake", "title": "Ruby Exception Handling: FloatDomainError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/floatdomainerror", "abstract": "Today our journey through the Ruby Exception Handling series takes us to our next stop, the FloatDomainError . A FloatDomainError is most commonly raised when trying to convert special kinds of Float values to other numeric classes which don‚Äôt support those particular special values. In this article we‚Äôll explore the FloatDomainError in more detail, including where it sits inside the Ruby Exception class hierarchy, as well as giving a few simple code examples to illustrate how FloatDomainErrors might pop up. Let‚Äôs get started! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. RangeError is a direct descendant of the StandardError class, and is a superclass with one descendant of its own. FloatDomainError is the direct descendant of RangeError . As briefly mentioned in the introduction, a FloatDomainError is raised when an attempt is made to convert certain Float values to other numeric classes which don‚Äôt have a way to represent those values. To understand what this means, let‚Äôs briefly look at how Ruby handles Floats and general numeric conversions. We‚Äôll start with a simple #to_integer method that we‚Äôve created: This little method accepts a single value parameter and then attempts to convert it to an integer using the #to_i method. If successful it outputs the conversion that took place, otherwise it raises an error. It‚Äôs worth noting that we could obviously use the built-in #to_i method for most value types we‚Äôre working with ( Float , Fixnum , etc), but here we want a bit of extra fluff around the conversion, such as some output and the exception handling block. To use #to_integer we just pass in some arguments, like so: The output shows that the first two examples work just fine: These basic instances of the Float class can be easily converted to Integers by dropping the fractional part of the number. However, our third example, which attempts to convert the special value Infinity to an Integer , fails and raises a FloatDomainError : As it happens, this is because the special value of Infinity in Ruby is considered a Float class type. To see this in action, we can launch an irb console and test it out: Here we‚Äôve shown that we can generate an instance of Infinity by dividing a Float value by zero, so we assign that to the infinity variable, then check it‚Äôs #class to show it‚Äôs still considered a Float . Ruby also provides access to Infinity through the Float::INFINITY constant, which we also show is equivalent to our instance example. Since we see that Infinity is considered a Float , we can then understand why attempting to convert that to an Integer in our #to_integer method fails. Ruby tries to execute our request, but since Infinity is a special value ‚Äî one that is represented by a Float type behind the scenes ‚Äî it cannot be made into an Integer as requested. We can see something similar with other values and numeric class types also, such as Rationals . Here we have the #to_rational method that performs a similar role to def to_rational ( value ) begin # Convert value to rational number. r = value.to_r puts ‚Äú #{ value } converted to #{ r } ‚Äú rescue FloatDomainError => e print_exception(e, true ) rescue => e print_exception(e, false ) end end Let‚Äôs pass some values to #to_rational and see what we get: As expected, the first two numbers are converted without much trouble. However, this time we try to convert the special value NaN (not a number) to a Rational , which also raises a FloatDomainError : Our issue stems from the same problem as before. Just like Infinity , the special value of NaN is considered a Float class type behind the scenes. Again, we can see this in action with a few statements in an irb console: Here we see that we cannot divide by zero using Integer representations, but if we use Floats we can create an instance of NaN , indicating that the resulting value is not actually a number. Furthermore, we see that nan#class is a Float type, and that Ruby provides another constant that represents the NaN value: Float::NAN . To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-05-23"},
{"website": "Airbrake", "title": "Ruby Exception Handling: RegexpError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/regexperror", "abstract": "The next stop along our trek through the Ruby Exception Handling series brings us to the realm of regular expressions and the RegexpError . Quite logically, the RegexpError occurs when trying to define a new regular expression that contains some form of an invalid pattern. We‚Äôll spend some time in this article exploring the RegexpError in greater detail, seeing where it resides in the Ruby Exception class hierarchy, along with some sample code snippets to illustrate how RegexpErrors might be thrown, so let‚Äôs get crackin‚Äô! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. RegexpError is the direct descendant of StandardError . Since the RegexpError deals directly with regular expressions, this is a good time to remind ourselves what those are and how they are used in Ruby. A regular expression (often called a regex or regexp for short) is simply a series of characters that define a search pattern. This pattern is then used to parse a target string, performing searches for matching characters within the target string. Most programming languages provide a means of using regular expressions, and Ruby is no different. A great deal of information about Ruby‚Äôs particular implementation of regular expressions can be found in the official documentation , so we‚Äôll just go over some basic concepts here. In most cases the syntax for creating a new regular expression is to bound the expression in forward slashes: /.../ . Alternatively, a regular expression can be defined by using the %r{...} literal syntax instead or by creating a new instance with the Regexp#new method call. The two main purposes of a regular expression are: To determine if a target string contains characters which match a given pattern. To extract portions of the target string which match a given pattern. While regular expression patterns can be very complex, the simplest form of a pattern is just to search for literal characters. Here we‚Äôre searching for the word fox somewhere in our sentence: As we can see by checking the #class of our returned result, the #match method of the Regexp class returns an instance of the MatchData type. This class provides a number of methods itself that may come in handy. A few more important concepts of regular expressions are escape sequences and metacharacters . Most of the time, characters appearing in a regex pattern are literal representations of themselves. For example, our regexp of /fox/ has no escape sequences or special characters, so we‚Äôre literally searching for the characters f , o , and x , one after the other ‚Äî that is, we‚Äôre searching for the word fox . However, regular expressions in Ruby allow for a number of special metacharacters, which often begin with a single backslash ( \\ ) escape sequence to indicate what follows is special and should therefore not be taken as a literal character. For example, the metacharacter of \\w is a simple way to indicate that we want to search for a ‚Äúword character.‚Äù This means any lowercase letter, uppercase letter, or number. Let‚Äôs test this out on our quick brown fox sentence from before: As we can see, the result is just a single capital letter T . Why? Because the \\w metacharacter merely seeks for the first instance of a character that matches the pattern which, in this case, is the very first letter in the sentence. However, what if we want to find whole words rather than just single characters. This is accomplished with quantifiers . There are a number of quantifiers that can be used in a regex pattern and each represents a search for a particular ‚Äúquantitative range‚Äù of the preceeding character class in the pattern: * ‚Äì Zero or more times + ‚Äì One or more times ? ‚Äì Zero or one times (optional) {n} ‚Äì Exactly n times {n,} ‚Äì n or more times {,m} ‚Äì m or less times {n,m} ‚Äì At least n and at most m times Thus, if we append any metacharacter in our pattern with one of these quantifiers , we‚Äôre able to tell the parser that we‚Äôre seeking a particular number (or range of possible numbers) of that character type in sequence. For example, let‚Äôs append the + quantifier to the end of our \\w metacharacter, like so: /\\w+/ . This tells the regex parser that we‚Äôre looking for all matches in the target string that contain at least one ‚Äî or possibly more than one ‚Äî word character in sequential order. In other words, it will look for sequences of letters and/or numbers that are not separated by other characters (such as spaces). Plugging that into our search reveals an easy way to find whole words : The last common technique we‚Äôll discuss for general regular expression usage is capturing . As discussed earlier, regular expressions are either used to search for patterns in a string, or to search for and extract matches from said string. This is what capturing can accomplish. For Ruby‚Äôs regex implementation, capturing is accomplished by surrounding the pattern to be captured in parentheses, like so: (...) . Thus, extending our example above we can try capturing whole words from our sentence: Here we can see that our captured text is the same as before, but can be accessed using the #captured method of the MatchData result. There‚Äôs plenty more to learn about regular expressions, applicable to Ruby and for other languages as well, but with a bit more understanding of how regular expressions work we can take a look at what might cause a RegexpError to occur. As mentioned in the introduction, the basic cause of a RegexpError is when trying to define a new regular expression that Ruby cannot parse (and thus considers invalid). For example, here we‚Äôre creating a new regular expression using the Regexp#new method call. In this case, the full expression is merely a single + symbol: Sure enough, this raises a RegexpError , telling us that our repeat operator ( + ) doesn‚Äôt have a valid target on which to apply itself: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-05-27"},
{"website": "Airbrake", "title": "Ruby Exception Handling: SystemCallError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/systemcallerror", "abstract": "Moving along through our Ruby Exception Handling series, today we‚Äôll be checking out the SystemCallError and it‚Äôs closely associated Errno subclasses. SystemCallErrors are raised during any low-level, platform-dependent exceptions like invalid IO calls and the like. In this article we‚Äôll explore the SystemCallError in more detail, including where it resides in the Ruby Exception class hierarchy. We‚Äôll also take a look at a few simple code examples to illustrate how SystemCallErrors and their corresponding Errnos show up in the first place, so let‚Äôs get to it! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. SystemCallError is the direct descendant of StandardError . Errno is a module with dozens of subclasses contained within it, all of which are direct descendants of SystemCallError . SystemCallError is somewhat unique in the realm of Ruby exception classes because it isn‚Äôt raised directly. Instead, SystemCallError is the base class for dozens of Errno module subclasses. To view the list of possible Errno classes simply output Errno.constants through an interactive Ruby console ( irb ) or similar tool. According to the official documentation, the list of possible Errno module classes is dependant on the operating system that Ruby is running on, but as it happens, the list is identical in Ruby 2.3 on both Windows 7 and Ubuntu 16.04 (Unix): Unix Errno constants: Windows Errno constants: Since all low-level errors produce an appropriate Errno subclass from the constant list above, there are clearly many possible ways to raise SystemCallErrors in the first place. We don‚Äôt have time to cover them all here so we‚Äôll just give a brief example and see how we can best rescue the specific errors we‚Äôre after. First, it‚Äôs important to remember that since SystemCallError is the base class of which all Errno classes inherit, we can actually capture all possible Errno errors by rescuing SystemCallError . For example, here we are trying to open a File object with an invalid file path provided as the argument. This raises a Errno::ENOENT error, but since all Errno subclasses inherit from SystemCallError , we can rescue them all using that base class: As expected, our explicit rescue of SystemCallError works just fine and outputs the EXPLICIT result we expected: While we can rescue the Errno::ENOENT class directly, it‚Äôs important to remember that Ruby will systematically check each rescue clause in order until it finds one that matches the error that was raised. This means that even if we explicitly rescue Errno::ENOENT , if such a rescue comes after SystemCallError , the base class of SystemCallError still qualifies as a match and occurs first: To illustrate this ordering we‚Äôve added some simple output messages inside each rescue block above to indicate which particular rescue statement was responsible for catching our error. This helps us show that, sure enough, that first rescue catches our Errno::ENOENT exception, even though we explicitly rescue that class later on in the same begin-rescue-end block: This shows the importance of ordering your rescue classes properly, usually beginning with the lowest-level classes and working up toward the basest classes. Thus, for our example, starting with Errno:ENOENT that ensures that the Errno::ENOENT errorr is caught by that statement and processed in that block. Any other Errno classes can then be caught by the second SystemCallError rescue , while all other errors are caught by the plain rescue block at the last: As expected, this shows an EXPLICIT error output from rescue Errno:ENOENT : It may also be useful to combine multiple classes into a single rescue statement. For example, we could combine Errno::ENOENT with SystemCallError in a single rescue statement like so: The produced output: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-06-04"},
{"website": "Airbrake", "title": "Ruby Exception Handling: RuntimeError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/runtimeerror", "abstract": "Making our way through our Ruby Exception Handling series our next stop brings us to the default raised exception class in Ruby, the RuntimeError . A RuntimeError is raised when attempting to perform an invalid operation of some kind, which doesn‚Äôt meet the criteria of a more specific error classification. In this article we‚Äôll bust through the cracks of the RuntimeError , exploring where it sits within the Ruby Exception class hierarchy, as well as go over a few simple code examples that help to illustrate how RuntimeErrors are raised in the first place. Let‚Äôs dig in! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. RuntimeError is the direct descendant of StandardError . Most programming languages loosely define a runtime error as an exception that occurs during the runtime (execution) of the application. While that‚Äôs not all that useful of a definition, it can easily be distinguished from other categories of exceptions such as compilation errors, which are caught by the compiler of the language in question before execution even occurs. For example, an error from incorrect syntax would not be considered a runtime error since it will be caught by the compiler before execution. We saw this in our article exploring Ruby‚Äôs SyntaxError using the following example code: That said, even in the realm of runtime errors things tend to be a little confusing since most languages provide dozens if not hundreds, as is the case with .NET, of built-in classes to handle specific runtime exceptions. Ruby is no different, with specific errors that we‚Äôve seen before like the RegexpError and the LocalJumpError . However, since Ruby cannot inherently provide a specific class for every possible type of runtime error that might occur there must be a fallback and that‚Äôs where the RuntimeError class comes in. Perhaps the most important property of RuntimeError ‚Äî something that makes it unique among the dozens of other error classes in Ruby ‚Äî is that RuntimeError is the default error class that is used when calling the standard Kernel#raise method that we all use to handle exceptions. While Kernel#raise allows us to provide a specific error class which to raise, opting not to specify a class means Ruby will create an instance of RuntimeError . For example, here we have a somewhat real-world example of a Book class with a custom setter for the Book#page_count property within which the value is checked and if it‚Äôs less than 1000 pages everything is OK. But, if it‚Äôs greater than 1000 pages it is outside the allowed bounds and we raise a RangeError : Now when we create a new instance of Book we check the page_count value provided and either raise a RangeError or can continue execution as normal if no error occurs. This gives us a few illustrating examples: In the first example our book is too long so we raise a RangeError . In the second example we don‚Äôt raise an error during creation of our book, so we get to explicitly raise a RuntimeError . Finally, in the third example our book remains short enough so there‚Äôs no RangeError , however we‚Äôre not specifying what type of error to raise so it still defaults to RuntimeError . The output for all three of these functions shows the expected error list: Outside of raising a RuntimeError , either explicitly or indirectly, it‚Äôs also possible for them to occur during normal execution when an invalid operation occurs. One such instance where a RuntimeError may be raised is when trying to modify an immutable object like a frozen string. For those who may unfamiliar, Ruby provides the Object#freeze method that allows us to explicitly convert a normally mutable object to an immutable. For example, in this snippet we declare a name string variable, add something to it, then output the full string. We then try that same pattern again, but the second time we explicitly freeze our string variable before trying to modify it: As you might expect the first round works fine but the second round raises a RuntimeError because we‚Äôre trying to modify an immutable string: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-06-02"},
{"website": "Airbrake", "title": "Ruby Exception Handling: TypeError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/typeerror", "abstract": "Next on the docket of our Ruby Exception Handling series is the lovable TypeError class. TypeErrors are fairly simple and are raised when an object that was passed as an argument is not of the expected type. In this article we‚Äôll look at TypeErrors a bit closer and see where it resides in the Ruby Exception class hierarchy.  We‚Äôll also dig into a few simple, functional code examples to see how TypeErrors are commonly raised in the hopes of helping you during your own coding endeavors, so let‚Äôs get crackin‚Äô! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. TypeError is the direct descendant of StandardError . Raising a TypeError is a rather simple affair ‚Äî it commonly occurs when trying to pass an incorrect data type to a method.  Many API functions and methods expect a specific type of object to be passed as arguments, so any attempts to pass invalid types usually results in a failure, and sometimes even the raising of a TypeError depending how that module was written. To see TypeErrors in action let‚Äôs start with some example code.  Below we have the full working code example, after which we‚Äôll break it down into easier chunks to see what‚Äôs going on: To start we have our array_example method where we‚Äôve listed a few book titles in an array and we want to #sort that array alphabetically and then grab the first four elements using the #first method: As expected this works just fine and outputs the first four alphabetized titles: However, now in our invalid_array_example method we‚Äôre going to try something much the same, but we‚Äôre accidentally passing the String value of '4' instead of the Integer value of 4 to the #first method of our array: As it turns, if we look directly at the source code of Ruby‚Äôs #first method we see that it requires an integer ( int ) parameter for the first value ( argc ): Therefore, our above Ruby code raises a TypeError for our troubles, informing us that we cannot implicitly convert our String value to an Integer that is required: As it happens there are near-countless methods in Ruby that will raise TypeErrors if given improper argument data types.  Rather than an array let‚Äôs try a String using the #insert method, which expects an Integer as the first argument to indicate the index of where the second argument should be inserted into the targetted string.  Here we‚Äôre adding the missing word 'The' to our title then outputting the result: That works just fine, but once again if we pass a non-integer value the #insert method doesn‚Äôt know what to do.  The invalid_string_example method throws another TypeError just as we saw before: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-06-11"},
{"website": "Airbrake", "title": "Ruby Exception Handling: ZeroDivisionError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/zerodivisionerror", "abstract": "Today in our continued journey through our Ruby Exception Handling series we‚Äôll be taking a closer look at the ZeroDivionError .  As you may suspect the ZeroDivisionError occurs when attempting to divide a number by zero. In this article we‚Äôll briefly explore the ZeroDivisionError in more detail, including where it sits within the Ruby Exception class hierarchy and showing a few simple code examples to illustrate how ZeroDivisionErrors occur in the first place.  Let‚Äôs get started! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. ZeroDivisionError is the direct descendant of StandardError . Producing a ZeroDivisionError is quite simple, but there are a few small quirks that you‚Äôll want to be aware of before assuming your rescue ZeroDivisionError => e statement will always catch attempts to divide by zero-ish values.  To illustrate we have a few example methods showing normal division, division by exactly zero, division by floating zero, and division by negative floating zero.  As usual we‚Äôll start with the full code snippet and then we‚Äôll briefly go through it to see what‚Äôs going on: We start with a normal and functional #division_example method: This works as expected and outputs a result of 3 .  However, if we change our denominator to 0 we‚Äôll produce a ZeroDivisionError , as seen in #zero_division_example : That should make sense to most of us I think: Just like when you were bored in school and were messing around with your calculator and tried dividing by zero you‚Äôd get an error, the same applies in Ruby (and probably all other programming languages for that matter).  However, dividing by zero in all cases may not work exactly as you‚Äôd think.  Watch what happens when we change our denominator from 0 to a floating point representation of 0.0 : Suddenly we no longer produce a ZeroDivisionError but, instead, we get an output of Infinity .  This is because Ruby handles various numeric data object types differently: whole numbers or Integers like 0 are calculated differently than Floats like 0.0 . We can see this strangeness continue if we change the denominator from 0.0 to the negative version of -0.0 , which produces an output of negative Infinity : To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-06-15"},
{"website": "Airbrake", "title": "Ruby Exception Handling: ThreadError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/threaderror", "abstract": "Making our way through the Ruby Exception Handling series we have now arrived at the ThreadError class. ThreadErrors are raised anytime an invalid operation is attempted on a thread, plain and (somewhat) simple! Throughout this article we‚Äôll examine the ThreadError in a bit more detail, looking at where it sits in the Ruby Exception class hierarchy and examining some simple example code that illustrates how ThreadErrors are raised so you can (hopefully) avoid them in your own coding adventures.  Let‚Äôs get this party started! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. ThreadError is the direct descendant of StandardError . As previously mentioned a ThreadError is the result of trying to perform an invalid operation on a thread in Ruby.  Yet working with threads can be rather confusing so let‚Äôs start with a brief overview of how we can use threading to handle simultaneous processing in our Ruby code. The Thread class provides a number of helper API methods, but since the purpose of using multiple threads is to perform concurrent actions we‚Äôll typically just start by instantiating a new thread with Thread::new : Our new thread has a code block that tells it to execute a single statement of puts for our string message.  However, merely instantiating a new thread doesn‚Äôt cause it to execute.  As is normal, when executing any Ruby script we always start (and finish) with the main thread.  To get our new sub-thread to execute we need to join it to an active thread.  This can be accomplished with the #join method of the sub-thread we want to start.  This suspends the current thread execution (our main thread in this case) and starts execution of the sub-thread: Since our code block for what the new thread should accomplish is so short we immediately get our message output and then the sub-thread is killed and the main thread resumes. To expand on this a bit and see how ThreadErrors are produced we‚Äôll take a look at some slightly more complex code that uses threading.  Here we have a few helper functions and modules, but the main functions we care about are #get_threads and #thread_example : #get_threads creates a couple new sub-threads places them into an array that is returned.  We also output a few log messages so we know when sub-thread 1 begins and ends its two-second sleep cycle. #thread_example is triggered by the main thread and takes our collection of sub-threads and #joins them with the main thread.  The expected result is that we should see the main thread start, then both our sub-threads terminate, and finally our main thread should terminate at the end.  Sure enough, running this code shows us that expected output: We didn‚Äôt really try to do anything fancy with our threads in this example, so everything ran as expected, but what happens if we try to mix things up a bit and perform some actions on our threads that may be invalid or out of order?  For example, the overall setup is the same where we can get a few sub-threads via #get_threads , but this time let‚Äôs try calling the Thread::stop method while we‚Äôre looping through our sub-threads to #join them up: Suddenly we run into trouble and a ThreadError is thrown, indicating that we‚Äôve attempted to stop the only active thread (our main thread): Notice that we actually get all the output messages indicating our sub-threads have executed as expected before we get the ThreadError .  This is because of the ordering that we‚Äôre executing everything in.  The #join call suspends the main thread temporarily and processes the sub-thread that is being called, so only after both of those terminate does the Thread::stop call actually run into trouble, which is indicated by the error message ‚Äî we cannot stop a thread when it‚Äôs the only active thread at the time. To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-06-10"},
{"website": "Airbrake", "title": "Ruby Exception Handling: SystemStackError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/systemstackerror", "abstract": "Today our journey through the Ruby Exception Handling series continues with one of the last remaining Ruby errors left to discuss: SystemStackError . This little baby pops up when code gets a little recursion-happy and ends up causing a stack overflow. In this article we‚Äôll examine the SystemStackError in more detail including where it sits within the Ruby Exception class hierarchy and how it might be raised in day-to-day coding. Let‚Äôs get crackin‚Äô! All Ruby exceptions are descendants of the Exception class, or a subclass therein. SystemStackError is the direct descendant of the Exception class. Understanding what might cause a SystemStackError is just a matter of understanding what stack overflow means in the realm of development. Thus, we‚Äôd be well served to spend a few minutes refreshing ourselves of what stack overflow is and how it typically occurs. Most applications are allocated a specific range of memory addresses during execution. These addresses are pointers to bytes of data (memory) that the application is allowed to use. By extension, this memory assignment creates what is known as an address space , which is a specific quantity and range of memory addresses that can be safely used by the application in order to store and manipulate memory. Since available memory is finite (for now, anyway) the address space assigned to an application is restricted within certain bounds. The actual size of this address space depends on many factors, but the result is that an application is allocated ‚Äî and can, therefore, only use ‚Äî a certain amount of memory before it runs out. In many cases the built-in garbage collector process within the programming language or framework will frequently gather up previously-used-but-no-longer-required address spaces and empty their contents (taking out the garbage, so to speak), which frees up more memory space to be used by future processing. However, in some cases, the application‚Äôs code may attempt to perform tasks that require additional memory beyond what was allocated by the address space assigned to the process in the first place. 9 times out of 10, when this happens the application generates a stack overflow error which, in the case of Ruby, means raising a SystemStackError . Now that we‚Äôre refreshed on stack overflows we can dive into a bit of simple code and see how they typically occur in Ruby. Probably the most common anti-pattern that often leads to stack overflows is the use of recursion . Recursion is the practice of calling a method within the code of said method . This practice is typically used when there exists an end goal (something the recursive method is aiming to eventually accomplish), combined with the ability to reduce the workload (and code overhead) of accomplishing that end goal. For our examples here we have a MathClass that includes a couple simple methods called recursion and double : The problem with recursion is if you‚Äôre not careful your code may have formed an infinite loop , which is what we have in the example method above. There‚Äôs no checks or balances to ensure that the recursive loop breaks at some reasonable point. Therefore, the Ruby engine has no choice but to eventually halt execution itself by raising a SystemStackError , as we see in the output: Our other example method is dubbed the doubler (sorry for the terrible pun): Here we have another recursive method call in which doubler invokes itself, but we‚Äôve also added some extra functionality to experiment with trying to run out of memory via means other than stack overflow. In this case we‚Äôre just doubling the value class attribute every iteration and then storing each entry in the data attribute array. Since our value attribute will be ever-increasing in size that‚Äôs one angle of attack to try to see if Ruby runs out of memory. The other technique is to maintain an ever-growing array in the form of the data attribute. As it turns out, Ruby doesn‚Äôt much care about our pitiful attempts to use up all the memory via (relatively small) numeric calculations and array storages, and thus execution of the double method results in the exact same number of recursive iterations as the recursion method before Ruby gives up and raises a SystemStackError : To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-06-23"},
{"website": "Airbrake", "title": "Ruby Exception Handling: Fatal Error", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/fatal-error", "abstract": "Today we finally come to the end of the journey through our Ruby Exception Handling series. The last, and perhaps most critical, error left to discuss is the Fatal Error , which indicates a severe crash in a Ruby application ‚Äî something so dramatic that the process couldn‚Äôt recover from it through normal means. There‚Äôs no time to waste, so let‚Äôs get on with our last article detailing the plethora of possible Ruby exceptions. In this piece we‚Äôll explore the Fatal Error in more detail, looking at where it fits within the Ruby Exception class hierarchy, as well as showing a few code examples illustrating how these painful errors might occur. Let‚Äôs get to it! All Ruby exceptions are descendants of the Exception class, or a subclass therein. Fatal Error is the direct descendant of the Exception class. Fatal Errors are a beast. Generally speaking, when a Fatal Error occurs it means the application has failed so horrendously that Ruby is unable to recover from the problem. This can occur for a variety of reasons but some typical cases might be process issues, memory problems, IO failures, and so forth. However, Ruby already has built-in errors specifically designed for such failures, so when one of those existing error types isn‚Äôt raised it‚Äôs usually because the application broke unexpectedly and the a Fatal Error occurs. Consequently, it should come as no surprise that Fatal Errors effectively cannot be rescued or recovered from . When a Fatal Error occurs the Ruby application is generally going to be shutting down/killing the process. That said, we can still play with Fatal Errors a bit, since the underlying object that Ruby uses is still just that: an object. First we‚Äôll start with the full code sample below, after which we‚Äôll go over it in more detail. We begin with a couple normal methods with begin-rescue blocks. In these two examples we‚Äôre trying to raise a fatal exception through invalid permission access to a directory: In this case we have the accessible and inaccessible sub-directories. The accessible directory has normal read/write permissions for the executing user account, so there‚Äôs no problem opening the path to ...\\accessible\\data.csv and creating a new file with our data. That data.csv file looks as expected: However, trying to perform the same creation and write operation to ...\\inaccessible\\data.csv produces an error because our executing user doesn‚Äôt have permission: Unsurprisingly, this isn‚Äôt a Fatal Error at all. As it happens, it is very difficult to purposefully cause a Fatal Error in Ruby code (and for good reason). However, to see just what the Fatal Error exception object is like and to play with it yourself, we can perform a small trick to raise such an error. Here in the #raise_fatal_error method we‚Äôre looping through all the objects stored within the ObjectSpace module. Specifically, we want to use the ObjectSpace::each_object method, which calls a code block that iterates over every living object known to the current Ruby process. In other words, we can use ObjectSpace::each_object to loop through every built-in Ruby object and try to pull out the one we want. In this case, we want the fatal exception object, so we return that object and assign it to our new fatal variable. From there we can issue a standard raise call and pass in our own error message. Just to make sure our bases are covered we try to rescue our actual fatal object, but also all Exception objects as well, as a backup. As it turns out, since fatal is itself an Exception type, we‚Äôre able to rescue it directly, as confirmed by the log output: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-07-01"},
{"website": "Airbrake", "title": "Ruby Exception Handling: SystemExit", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/systemexit", "abstract": "As we approach the end of our all-encompassing Ruby Exception Handling series, today we‚Äôll be taking a look at the SystemExit error, which is raised whenever the Kernel#exit method is invoked to terminate the current process. In this article we‚Äôll explore the SystemExit exception in more detail by looking at where it resides in the Ruby Exception class hierarchy, as well as showing a few code examples to illustrate how SystemExist exceptions are typically raised, so let‚Äôs get started! All Ruby exceptions are descendants of the Exception class, or a subclass therein. SystemExit is the direct descendant of the Exception class. Since SystemExit exceptions are only raised by calling the Kernel#exit method it might benefit us to take a closer look at how this method works and how Ruby handles closing the current process in general.  We‚Äôll start with the full code example below (well, one of them anyway) and then we‚Äôll explore it in more detail afterward: Calling the Kernel#exit method in Ruby initiates a termination of the current Ruby script.  It also raises a SystemExit exception at the same time, which we can catch and use for our own purposes during the final process termination events. To that end we start with a simple #exit_process method that calls Kernel#exit , tries to log a message within the same block as exit and immediately afterward, then also rescues the SystemExit exception and outputs a few more messages for us: As you can see the output of \"Exit stopped.\" never executes because of the invocation of Kernal#exit , which immediately begins the termination process and only allows for the raising of our SystemExit exception, along with any final garbage collection-style cleanup methods. One example of handling process exiting in Ruby is to use the Kernel#at_exit method. Kernel#at_exit expects a block to be passed that is converted into a Proc and registers it for execution when the current process is exiting.  This allows us to easily perform any sort of cleanup procedures we need to before our application shuts down. For example, the #at_exit_example method starts by specifying a Kernel#at_exit block that just outputs a message for testing purposes, then continues on to call Kernel#exit just as we did before, along with the associated output messages: To see what‚Äôs going on here we‚Äôll show the full output log: As you can see we begin the exit process then rescue our SystemExit exception, before finalizing the termination procedure by calling the Proc we created with Kernel#at_exit .  Cool! Our last example shows how to use the ObjectSpace::define_finalizer method.  Unlike Kernel#at_exit ,  which behaves as a global Proc that is called when the current process executes no matter what, the ObjectSpace::define_finalizer method accepts an Object as the first argument.  When that object is destroyed the Proc that is passed as the second argument is executed.  This is particularly handy for invoking special finalization logic when a class instance is destroyed. For example, here we‚Äôre using a tried-and-true Book class model with a few simple fields.  Within the #initialize method we also define a finalizer that applies to self (the instance of Book that is being destroyed).  We‚Äôve opted to use our own #finalize method to accomplish this and return a Proc to be invoked, but we could just as easily created an inline Proc instead: Within the #finalizer_example method we create a new Book instance and then exit the process using the Kernel#exit method again.  The result is that we still raise a SystemExit exception since we called Kernel#exit , but afterward the Ruby garbage collector destroys our book instance that was created, generating the Destroying... text output we were after: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-06-19"},
{"website": "Airbrake", "title": "JavaScript Async/Await Exception Handling with Airbrake!", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/javascript-asyncawait-exception-handling-with-airbrake", "abstract": "Introduced in ES6, promises are the big leap forward into asynchronous operations that JavaScript has needed for some time. However, in ES7 (or ESNext , as the upcoming release is sometimes referred to), promises were dramatically improved with the introduction of async functions and the await operator. In short, an async function simply defines and returns an asynchronous function, while the await operator is used to wait for a Promise object. The secret sauce when using async and await together is that they effectively allow code to be written synchronously , while their behavior is still carried out behind the scenes as an asynchronous fashion. This is an extremely powerful feature, but the most noticeable effect when implementing async/await into your code is just how simple and easy to maintain the new syntax becomes. In this article, we‚Äôll explore how to manage JavaScript async/await exception handling, including easy integration of the Airbrake-JS library, so let‚Äôs get to it! Below is the full code sample we‚Äôll be using in this example. Feel free to copy and paste it into your own project to try it out or follow along: For our example code we‚Äôll be using the basic Book class: It has a handful of properties with explicit getters and setters (using the get and set keywords), but otherwise, the only special logic is the specific set(property, value) and get(property) methods. These are generalized methods which make it easier to create Promises for our example. In particular, notice that the set(property, value) method returns a new Promise(...) object. To simulate an asynchronous action we‚Äôre explicitly calling setTimeout() and delaying by one second. Since we‚Äôre returning a Promise , we call the resolve(...) method to indicate a successful call, while we invoke reject(...) when the call has failed. In this case, reject(...) is called only when attempting to update the author property while an author value already exists . This behavior could simulate business logic that requires rejecting a data record update when a value already exists, but, since it‚Äôs an IO action, it must be performed asynchronously. We‚Äôll begin with the most basic implementation of asynchronous operations, which is a plain old Promise object. As we saw above, the Book.set(property, value) method returns a Promise object, so our testPromise() function below creates a new Book instance, sets the title using the set(property, value) method, then invokes the .then method of the returned Promise object, which is called once the Promise comes back with a result: Since setting the title property always succeeds, that will work and output the Promise result to the log. However, the attempt to set a new author value will fail, since an author already exists. This is confirmed by the log output, which occurs after the artificial one second delay: Let‚Äôs integrate our Promise asynchronous methodology with the Airbrake-JS module. We won‚Äôt go over the setup process of Airbrake-JS here, but be sure to check out the official documentation for information on installing the library. Once Airbrake-JS is installed and we‚Äôve created a new project on the Airbrake dashboard, we can include the library in whatever manner is easiest. For this example, we‚Äôre using requirejs , so we start by defining the location of our app within the app.js file, along with the location of the Airbrake-JS module: Now, within our main application code we require Airbrake-JS , and then we can use the Airbrake client object to set our projectId and projectKey , both of which are found on the Airbrake dashboard: As you can see, we‚Äôve opted to pass the Airbrake client object as a parameter to the testPromiseWithAirbrake(airbrake) function, but we could just as easily instantiate it inside the function if we wish. Here we see the code of the aforementioned function: In may look a bit complicated, but very little is different from our previous testPromise() function. All we‚Äôve added is the call to airbrake.notify(err) . Since the notify(...) method returns a Promise object itself, we next call the then(...) method on that object to perform various actions, depending if the Promise succeeded or failed. Executing the function above produces the following output, indicating that the attempt to set a new author failed again, but this time we caught the error and processed it via Airbrake, which generated a new notification on the Airbrake dashboard: Sure enough, opening the Airbrake dashboard and looking at the Errors panel shows a new error report, with an Error Message of \"Cannot update Author from Stephen King to Await w/ Airbrake Author.\" . Neat! Now, let‚Äôs see what happens if we update our original testPromise() function to use async/await functionality. Here‚Äôs the testAsyncAwait() function to do just that: What should immediately jump out at you is just how little code is required. This function performs the same logic as the testPromise() function, but requires nearly half the number of characters and lines of code. Moreover, there‚Äôs no more need to mess with the complication of then(...) method callbacks. Instead, await handles that for us, by waiting for the result of the awaited Promise to (‚Äúpseudo-synchronously‚Äù) move onto the next line within the same async function. The result of executing this function is just as we saw before, where the attempt to overwrite the author property fails: Finally, let‚Äôs pull it all together and see how to combine the advanced async/await methodology with the simplicity of handling errors and exceptions via Airbrake. This is accomplished within the testAsyncAwaitWithAirbrake(airbrake) method: Again, we‚Äôve managed to cut down the lines/characters by half from the previous Promise-based example that integrated with Airbrake. Best of all, since the Airbrake client‚Äôs notify(...) method returns a Promise , we can simply prefix that call with the await operator to halt execution at that point while waiting for the result. While we‚Äôve then chosen to immediately invoke the then(...) method of the returned Promise object in this case, we could continue integrating async/await all the way down the chain, to completely get rid of Promise.then(...) method calls. For this case, however, then(...) doesn‚Äôt do anything that requires delayed processing/IO, so we can execute it immediately, once await comes back. The result of executing this code is just as we saw before: And, just as before, a new error corresponding with this generated notification appears on the Airbrake dashboard, with the Error Message of \"Cannot update Author from Stephen King to Await w/ Airbrake Author.\" That‚Äôs just a small taste of the power of the Airbrake-JS module and the newest async/await methodology introduced in the upcoming JavaScript release!", "date": "2017-09-22"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì Error: Permission Denied To Access Property \"x\"", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/permission-denied", "abstract": "As we continue through our in-depth JavaScript Error Handling series, we‚Äôll take a closer look at one of the most basic errors in JavaScript, the Permission Denied error. Below we‚Äôll examine what exactly causes a Permission Denied error in JavaScript, and how to both handle and avoid this error in your own projects, so let‚Äôs get started! All JavaScript error objects are descendants of the Error object, or an inherited object therein. While the Permission Denied error we‚Äôre examining here is a base Error object, the Error object itself can be used and extended for custom error constructors. Since the Permission Denied error does not have an explicit inherited constructor associated with it below the baseline Error object itself, it can be difficult to accurately determine when this particular error has reared its ugly head purely within the standard try-catch syntax of JavaScript. That said, we‚Äôll begin examining the Permission Denied error with a simple example. This error most commonly appears when JavaScript attempts to access an object for which it has no permission, such as an <iframe> element that is attempting to load content from another domain. For this simple example, our HTML contains a simple <iframe> with src property that violates the same-origin policy : Our JavaScript contains a simple printError() function which assists with formatting the output of a passed in error, telling us the error type, the error message, and allowing us to specify if the error was explicitly provided. Additionally, we have a simple try-catch clause after attempting to access and output the first (and only) frame in our document, the above <iframe> : The expected output is an EXPLICIT Permission Denied error, and sure enough that‚Äôs what we see: Since we are explicitly checking for our e error object to be an instanceof the Error object, it is expected that this is caught and sent to our printError() function as an EXPLICIT object reference. If we change this so that our catch clause doesn‚Äôt check for any explicit instanceof Error , the same error would be produced, but it would be INEXPLICIT by our own measurement: The real problem with trying to capture the Permission Denied error comes about when we recognize that simply catching an instanceof the base Error object isn‚Äôt enough, as this will catch all sorts of other errors that are unrelated. For example, let‚Äôs change our code a little bit to execute a recursion loop and trigger an InternalError: Too much recursion : Upon execution of our new code where we call the repeat() function, which recursively calls itself ad infinitum, we get the following output: JavaScript has assumed that our explicit check for our error to be an instanceof Error is what we wanted, even though the actual error object that was caught was InternalError . As you might imagine, the problem here is that InternalError (along with virtually all other error objects), is a descendant of the Error object, so capturing Error captures everything. Therefore, in order to properly capture only the Permission Denied error, we need additional logic within our catch clause. Since using the name property for our error does us no good, the only other standard property to the Error prototype that‚Äôs available is message , so we‚Äôll need to parse that to verify we‚Äôre getting the Permission Denied error and not something else: While this is perhaps not the most efficient method, above we‚Äôre simply checking whether our Error object message property text contains the phrase permission denied at the beginning, and if so, we can consider that the EXPLICIT error we‚Äôre looking for. The output is as expected:", "date": "2016-12-06"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì RangeError: argument is not a valid code point", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/rangeerror-argument-is-not-a-valid-code-point", "abstract": "Plowing straight ahead through our JavaScript Error Handling series, today we‚Äôll be exploring the fun world of the¬†Invalid Code Point¬†error. Below we‚Äôll examine what causes an¬†Invalid Code Point¬†error, followed by how to capture and handle this error. Off we go! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The RangeError object is inherited from the Error object. The¬†Invalid Code Point¬†error is a specific type of RangeError object. Generally speaking, the core¬†RangeError¬†object manifests anytime a designated value does not fall within the range or set of allowed values. The type of value and circumstance this can appear in varies, hence why¬†RangeError¬†has a number of unique objects under its umbrella, intended to report on whichever error is most appropriate. For this post, we‚Äôre examining the¬†Invalid Code Point¬†error, so first we must discuss what a¬†code point¬†actually is. Typically, a¬†code point¬†refers to the number and position of characters within a character encoding scheme, such as¬†ASCII¬†or¬†Unicode. In the case of JavaScript and the¬†Invalid Code Point¬†error, the¬†code point¬†always refers to an integer value that represents the¬†Unicode¬†character scheme, within the range of¬†1,114,112¬†characters that¬†Unicode¬†is comprised of. One method of utilizing¬†code points¬†in JavaScript is through the String.fromCodePoint() method, which returns a¬†Unicodestring from the specified sequence of¬†code point¬†parameters. For example, we can output the Black Chess Queen character, which is¬†Unicode¬†number¬†U+265B, with the following code: Which outputs a nice little Queen character:¬†‚ôõ While we accessed this character above using hexadecimal, we can also do so via the numeric¬†integer¬†value instead, which in this case is¬†9819: Now, to actually produce an¬†Invalid Code Point¬†error, we simply provide an invalid¬†code point¬†value to the¬†String.fromCodePoint()¬†method. For example, we‚Äôll try giving it a negative number: We‚Äôve thrown in a basic¬†printError()¬†function to format and output our error message, but sure enough, we see that trying to return the¬†code point¬†Unicode¬†character of the number¬†-10¬†fails and gives us an¬†Invalid Code Point¬†error: With a basic understanding of what causes¬†Invalid Code Point¬†errors to occur, it‚Äôs also worth considering that our above example of simply grabbing the first¬†instanceof¬†a¬†RangeError¬†object won‚Äôt always be our¬†Invalid Code Point¬†error. The¬†RangeError¬†object represents some half-dozen different errors which inherit from the¬†RangeError¬†type. In order to verify that we‚Äôre only responding to the specific¬†Invalid Code Point¬†error, we need to add additional logic by parsing the¬†.messageproperty of the error object: We‚Äôve now thrown in a simple check within the error¬†.message¬†property to ensure it contains the phrase¬†‚Äòcode point‚Äô somewhere in the message text. If so, that is our expected¬†Invalid Code Point¬†error. This means that when a different RangeError¬†is produced, such as Invalid Array Length , we don‚Äôt need to worry. To help you along the way in your journey towards JavaScript error handling perfection, be sure to check out Airbrake‚Äôs JavaScript Error Handling Software !", "date": "2016-12-09"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì RangeError: invalid array length", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/rangeerror-invalid-array-length", "abstract": "Moving right along with our¬†JavaScript Error Handling¬†series, we next come to the¬†Invalid Array Length¬†error. The¬†Invalid Array Length¬†error pops up anytime, as the name implies, an¬†Array¬†object is created with a length value that is negative or larger than the allowed maximum. Below we‚Äôll examine what causes an¬†Invalid Array Length¬†error, as well as explore how to capture and handle this error. Let‚Äôs get started! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The RangeError object is inherited from the¬†Error¬†object. The¬†Invalid Array Length¬†error is a specific type of RangeError object. As mentioned above,¬†Invalid Array Length¬†errors will occur when JavaScript code attempts to generate an¬†Array¬†or¬†ArrayBuffer¬†object where the first and only parameter,¬†arrayLength, is a number but is also is invalid. The validity of an¬†arrayLength¬†is fairly straight-forward. It must obey the following rule set: Be an integer. Be between zero and 232-1 (inclusive). Any other value provided to the first and only parameter of¬†Array¬†or¬†ArrayBuffer, that is also a number, is considered invalid and will throw an¬†Invalid Array Length¬†error. Let‚Äôs see this in action by generating an¬†Invalid Array Length¬†error for ourselves. Here we‚Äôre creating a new¬†Array¬†with the¬†arrayLength¬†set to an invalid number,¬†-1. We‚Äôre also using a basic¬†try-catch¬†to grab any produced errors and then a simple¬†printError¬†function to output our error messages based on whether they were expected or not (explicit or inexplicit). Sure enough, our¬†arrayLength¬†is invalid and the output indicates an¬†Invalid Array Length¬†error was thrown: We can also try an excessively large number, greater than the 232-1 limit, with the same result: No matter what, if the output doesn‚Äôt fall within the limitations, an¬†Invalid Array Length¬†error is thrown: While it‚Äôs now simple enough to see what causes an¬†Invalid Array Length¬†error, we need to be careful about capturing it properly. Since its base object type is simply a¬†RangeError, if we stick to catching¬†instance of¬†a¬†RangeError¬†only, we‚Äôll obviously also catch any other types of¬†RangeErrors¬†that might occur. For this reason, to explicitly capture only the¬†Invalid Array Length¬†error in this case, we‚Äôll need a bit of extra code to determine whether the¬†RangeError¬†we‚Äôre catching is¬†Invalid Array Length¬†after all. We‚Äôve now thrown in a simple check within the error¬†.message¬†property to ensure it contains the phrase¬†‚Äòinvalid array‚Äô somewhere in the message text. If so, that is our expected¬†Invalid Array Length¬†error. This means that when a different RangeError¬†is produced, there‚Äôs no need to worry that we‚Äôre responding to the wrong type. Check out Airbrake‚Äôs JavaScript Error Handling tool to take your project to the next level!", "date": "2016-12-14"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì RangeError: Precision is out of range", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/java", "abstract": "Today, as we continue along through our in-depth¬†JavaScript Error Handling¬†series, we‚Äôre going to take a look at the ‚ÄòPrecision is out of range‚Äô error. The¬†Invalid Precision¬†error will occur anytime a¬†number¬†object is provided an invalid numeric value for one of the precision-based JavaScript methods, which we‚Äôll explore more below. In this post, we‚Äôll take a look at what causes an¬†Invalid Precision¬†error, and also examine how to capture and handle this error. Off we go! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The RangeError object is inherited from the Error object. The¬†Invalid Precision¬†error is a specific type of RangeError object. To understand what explicitly causes an¬†Invalid Precision¬†error, we must first understand the basic methods JavaScript includes and attached to the¬†Number¬†object prototype, which allow us to affect the precision representation of a number. These include: toExponential() : Returns a¬†String¬†representing the¬†Number¬†in exponential notation. toFixed() : Returns a¬†Number¬†using fixed-point notation. toPrecision() : Returns a¬†String¬†representing the¬†Number, out to the specified level of precision. Now, anytime one of these methods is called, the first (and only) parameter each accepts is essentially the number of digits (i.e. level of precision) with which to convert the associated¬†Number¬†object before returning the new value. In the event that the provided parameter is invalid (outside the bounds of what each method allows), a¬†Invalid Precision error is produced. For example, let‚Äôs start with the¬†toExponential()¬†method. Depending on the browser, this allows a value from about¬†0¬†to¬†100¬†at most. Thus, providing a value of¬†101¬†to this method should produce an¬†Invalid Precision¬†error: Sure enough, we get an¬†Invalid Precision¬†error output, though the specific text varies between the browser engines, a seen below: One important note is that, as mentioned, the allowed range of numeric values for each of these three methods varies based on the browser, as shown in the table below: Therefore, changing our above example to use a precision value of¬†100¬†would be valid in Firefox, but considered invalid in¬†Chrome¬†or¬†Opera. We can also try the¬†toFixed()¬†method with the same precision value of¬†101¬†and expect an¬†Invalid Precision¬†error as well: Sure enough, while Chrome acknowledges specifically which method we‚Äôre utilizing to produce the error, either way both browsers don‚Äôt like this: This difference in error¬†message¬†formatting between browsers presents a small challenge when trying to correctly catch and identify an¬†Invalid Precision¬†error by properly differentiating it from other errors with the same parent RangeError object type. While we won‚Äôt go into the specifics of how to identify a user‚Äôs browser in JavaScript in this little guide, the best method will likely be to verify the browser via feature detection , then proceed to parse the appropriate error¬†message¬†based on the formatting for that browser engine. These built-in exception classes are helpful JavaScript error¬†handling tools! Used with Airbrake‚Äôs JavaScript Error Handler your debugging process will be¬†a breeze. Good luck!", "date": "2016-12-20"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì RangeError: radix must be an integer", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/radix-must-be-an-integer", "abstract": "Next on the docket for our continued dive into the¬†JavaScript Error Handling¬†series is the¬†Invalid Radix¬†error. The¬†Invalid Radix¬†error occurs in a specific instance, when the toString() method of a¬†Number¬†object in JavaScript is called, and it includes an invalid passed parameter representing the¬†radix¬†(or base) with which to convert the number to a string. Below we‚Äôll examine a few of these specific instances which can raise an¬†Invalid Radix¬†error, and also explore how to deal with this error when it pops up. Let‚Äôs get to it! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The RangeError object is inherited from the Error object. The¬†Invalid Radix¬†error is a specific type of RangeError object. As mentioned in the introduction, the¬†Invalid Radix¬†error occurs only when JavaScript code calls the specific¬†toString()method of a¬†Number¬†object, and does so by including an invalid value for the only parameter¬†toString()¬†accepts. This (optional) parameter is the¬†radix, which should be an integer between¬†2¬†and¬†36, that specifies the numeric base to use when representing the¬†String¬†version of this numeric value. For example, within the decimal system that is most commonly used today, the radix is¬†ten, since it uses the ten digits from¬†0¬†to¬†9. Binary has a radix of¬†2, because it only uses the digits of¬†0¬†or¬†1, while hexadecimal has a radix of¬†16, since it uses the digits¬†0¬†through¬†9, plus the alphabetic characters¬†a¬†through¬†f¬†as well. At any rate, the JavaScript¬†toString()¬†method limits the radix value passed to it to a range of¬†2¬†(binary) through¬†36because JavaScript is written using the Latin alphabet, which contains¬†26¬†additional alphabetic characters that the base can use to represent digits beyond the initial ten of¬†0¬†through¬†9, giving a total character count with which to represent digits of¬†36¬†at most. Whew! With that out of the way, we can explore a bit of code to see just how JavaScript deals with these valid or invalid radix values passed to the¬†toString()¬†method. In this example we‚Äôve just taken our number of¬†10¬†and passed in a few different radices to the¬†toString()¬†method to see the results: As expected, using a base of¬†10¬†the output is the expected value of¬†10. With a base¬†16¬†our value is¬†a, and within binary using a base of¬†2,¬†10¬†is converted to¬†1010. If we throw in a value that is outside the bounds of¬†2¬†to¬†36, however, we expect an¬†Invalid Radix¬†error to occur: The output is roughly as expected, with a few minor differences in formatting depending on the browser engine that is in use: As small but interesting note is that while the Firefox engine‚Äôs¬†Invalid Radix¬†error message states that the radix value passed to¬†toString()¬†must be an integer, the JavaScript engine will actually automatically convert the passed value to an integer before processing it, if possible. This means that string representations of valid integers will be converted to integers, and decimals will be rounded as appropriate: No errors are produced and the results are as expected: These built-in exception classes are helpful JavaScript error handling tools! Used with Airbrake‚Äôs JavaScript Error Handler your debugging process will be a breeze. Good luck!", "date": "2016-12-23"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì ReferenceError: assignment to undeclared variable ‚Äúx‚Äù", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/referenceerror-assignment-to-undeclared-variable-x", "abstract": "Today as we progress through our JavaScript Error Handling series we‚Äôre going to take a closer look at the¬†Assignment to Undeclared Variable¬†error in all its magnificent glory. The¬†Assignment to Undeclared Variable¬†error crops up anytime code attempts to assign a value to a variable that has yet to be declared (via the¬†var¬†keyword). Below we‚Äôll go over a few code examples that will illustrate reproduction of a typical¬†Assignment to Undeclared Variableerror, as well as outline how to handle this error when it comes about. Let‚Äôs get to it! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The ReferenceError object is inherited from the Error object. The¬†Assignment to Undeclared Variable¬†error is a specific type of ReferenceError object. As mentioned in the introduction, an¬†Assignment to Undeclared Variable¬†error will occur when attempting to assign a value to a variable which has not previously been declared using the¬†var¬†keyword. However, beyond this cause, there is also one strict limitation within JavaScript itself, which can cause¬†Assignment to Undeclared Variable¬†errors to be suppressed in many circumstances: An¬†Assignment to Undeclared Variable¬†error will only fire when Strict Mode is active within the executing JavaScript. When Strict Mode is activated, it is a way to programmatically opt in to a restricted variant of JavaScript that has intentionally different semantics and behaviors in a number of cases. While the entirety of¬†Strict Mode¬†is out of the scope of this article, for the purposes of analyzing errors like the¬†Assignment to Undeclared Variable¬†error, it‚Äôs critical to understand that¬†Strict Mode¬†causes JavaScript to disallow the creation of accidental global variables. For example, in normal JavaScript, the following code would be allowed, as the JavaScript engine assumes the intention is to create a new global variable,¬†names, and assign it to the value of splitting the full name string of ‚ÄúBob Smith‚Äù that was provided: Sure enough, in normal JavaScript, this executes properly without any thrown errors and gives us the expected output: Therefore, in order for JavaScript to assume it is not the intention of the developer and the code to automatically generate a new global variable anytime an assignment is made to a previously undeclared variable,¬†Strict Mode¬†must be enabled. This is done by including the line¬†‚Äòuse strict‚Äô;¬†somewhere in the code, preferably at the same scope as the checks for undeclared assignments. In this example, we are expanding a bit on the concept above, by creating a simple¬†getFirstName()¬†function, which takes a single¬†full_name¬†parameter, enters into¬†Strict Mode, splits the¬†full_name, and returns the first value (i.e. the first name). By assigning¬†Strict Mode¬†within the function only, we ensure our strict behavior is only within the scope we want, rather than globally across our entire script: Now that¬†Strict Mode¬†is enabled, the line that worked previously and created a new¬†names¬†global variable now, instead, produces an¬†Assignment to Undeclared Variable¬†error as expected. The specific error message produced will differ slightly depending on the JavaScript engine, but the idea is the same: The obvious solution to our issue is to ensure that anytime a variable assignment is made, it must already be declared with proper scope, or we must always specify this new variable declaration with the¬†var¬†keyword preceding it: With no¬†Assignment to Undeclared Variable¬†error produced, as expected, we get our first name output: These built-in exception classes are helpful JavaScript error handling tools! Used with Airbrake‚Äôs JavaScript Error Handler your debugging process will be a breeze. Good luck!", "date": "2016-12-28"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì ReferenceError: \"x\" is not defined", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/referenceerror-x-is-not-defined", "abstract": "Next up on the list of articles in our JavaScript Error Handling series we take a closer look at the¬†Undefined Variable¬†error. The¬†Undefined Variable¬†error is thrown when a reference to a variable or object is made in code that either doesn‚Äôt exist, or is outside the scope of the executing code. Below we‚Äôll take a look at a couple of specific examples that will commonly produce a¬†Undefined Variable¬†error, as well as how to catch and deal with this error when it appears. Let‚Äôs get started! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The ReferenceError object is inherited from the Error object. The¬†Undefined Variable¬†error is a specific type of ReferenceError object. When deep in the process of coding with JavaScript, it isn‚Äôt all that unheard of to make a typo or simply forget to initialize a variable or object before calling said variable later down the line. When this occurs, JavaScript will show its displeasure by throwing a¬†Undefined Variable¬†error, indicating that the referenced object was not previously defined. For example, here we‚Äôre making a simple statement of attempting to grab the¬†.length¬†property of our undefined¬†itemvariable. We‚Äôre also using a simple¬†try-catch¬†block and grabbing any¬†ReferenceErrors¬†that might occur, then passing them along to a simple¬†printError¬†function to beautify the output of our error messages: Sure enough, as expected, JavaScript notices that the¬†item¬†variable is undefined, and produces the explicit¬†Undefined Variable¬†error: It‚Äôs worth noting that unlike many other JavaScript errors we‚Äôve covered in this series, the¬†Undefined Variable¬†error message text does not differ between the two engines powering Firefox or Chrome. The obvious and simple fix to this particular¬†Undefined Variable¬†error is to simply declare our¬†item¬†variable prior to calling it: Now we get past the¬†item.length¬†call without throwing any errors and thus produce our¬†console.log¬†output of the length of our¬†item¬†string: Technically, while the¬†Undefined Variable¬†error is intended to identify references to undefined variables, it also plays a role when attempting to reference variables that are defined, but are outside of the current scope context where the code is being executed. For example, here we have a simple¬†getFullName¬†function, which defines two variables inside itself,¬†firstName¬†and¬†lastName. Outside of that function‚Äôs scope, we attempt to get the¬†length¬†property of the¬†firstName¬†variable: While the¬†firstName¬†variable is technically defined already, it is inaccessible to us at this level of execution, and thus a¬†Undefined Variable¬†error is thrown: In this case, resolution is a matter of pulling the¬†firstName¬†and¬†lastName¬†variable outside the scope of the¬†getFullNamefunction, so they are within the same context of execution as our¬†try-catch¬†block: As expected, no errors are produced and we get the length of the¬†firstName¬†variable as output: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-01-03"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì RangeError: repeat count must be less than infinity", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/rangeerror-repeat-count-less-than-infinity", "abstract": "Today as we plow ahead through our JavaScript Error Handling series we‚Äôre going to be tackling the¬†Infinite Repeat Counterror. The¬†Infinite Repeat Count¬†error occurs during the use of the repeat() method of a¬†String¬†object in JavaScript, and specifically when the¬†count¬†parameter passed to that method is too large. Below we‚Äôll take a look at a few specific examples seen in the wild which can raise an¬†Infinite Repeat Count¬†error, and also explore how to deal with this error when it pops up. Let‚Äôs get to it! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The RangeError object is inherited from the Error object. The¬†Infinite Repeat Count¬†error is a specific type of RangeError object. As mentioned in the introduction, the¬†Infinite Repeat Count¬†error is quite a rather specific error that only rears its ugly head in a handful of situations. The real clue is in the second word in the name, repeat , which hints that the¬†Infinite Repeat Counterror will occur only when the¬†repeat()¬†method is used on a¬†String¬†object. Furthermore, the¬†Infinite Repeat Count¬†error will then only pop up when the first (and only) parameter,¬†count, is provided and is given a value of either¬†Infinity or a value which would otherwise cause the resulting¬†String¬†to exceed the maximum size limitation within the executing JavaScript engine (depending on the browser). Let‚Äôs try it out with a simple example and see if we can‚Äôt produce our very own¬†Infinite Repeat Count¬†error. Here we‚Äôre creating a few variables:¬†count¬†to represent the number of repetitions of our¬†String, and¬†name¬†to hold the actual string value. Then we call the¬†repeat()¬†method and attempt to catch our expected¬†RangeErrors¬†using a simple¬†printErrorfunction to format the error output: As mentioned above, the¬†Infinite Repeat Count¬†error can behave slightly differently depending on the JavaScript engine in use. In this case we‚Äôre testing with both Chrome and Firefox, and both produced an¬†Infinite Repeat Count¬†error but the message of the error itself differs significantly: Now, setting our¬†count¬†value to¬†Infinity¬†seems like a cheap trick to trigger an¬†Infinite Repeat Count¬†error, so let‚Äôs try just a very large value to see where we can exceed the¬†String¬†size limits of the JavaScript engine. Here we‚Äôve change¬†name¬†to be only a single character long so the math is simplified, so we know that every repeat from our¬†count¬†variable is just adding one single character to our string. Unfortunately, a¬†String¬†of length 2 28 is too large for both Firefox and Chrome: Notice that Chrome‚Äôs engine recognized that the issue wasn‚Äôt actually an invalid¬†count¬†value passed to the¬†repeat()method, but that the resulting string length was too large. In this case, the max size for our¬†count¬†value for Firefox would be 2 28 -1 and 2 27 for Chrome, although this is likely to dramatically increase in future browser versions as the usage of the latest JavaScript, ECMA 6.0 , becomes more prevalent. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-01-06"},
{"website": "Airbrake", "title": "JavaScript ‚Äì ReferenceError: deprecated caller or arguments usage", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/referenceerror-deprecated-caller-or-arguments-usage", "abstract": "Today as we progress through our¬†JavaScript Error Handling¬†series we‚Äôre going to take a dive into the¬†Deprecated Caller/Deprecated Arguments¬†error in all its magnificent glory. The¬†Deprecated Caller/Deprecated Arguments¬†error appears when code attempts to call one of two specific properties of a function while¬†strict mode¬†is enabled: Function.caller or Function.arguments . Below we‚Äôll go over a few code examples that will illustrate normal reproduction of a¬†Deprecated Caller/Deprecated Arguments¬†error, as well as outline how to deal with this error when it comes about. Let‚Äôs get to it! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The TypeError object is inherited from the Error object. The¬†Deprecated Caller/Deprecated Arguments¬†error is a specific type of¬†TypeError¬†object. As mentioned in the introduction, an¬†Deprecated Caller/Deprecated Arguments¬†error will occur only when¬†strict mode¬†is enabled, which is a method to programmatically opt into a restricted variation of JavaScript that uses a number of different behaviors and semantics from the baseline JavaScript environment. For our purposes of analyzing the behavior of the¬†Deprecated Caller/Deprecated Arguments¬†error, we simply need to know that one behavior in particular of¬†strict mode¬†is to prevent the dangerous calling of deprecated properties, such as the aforementioned¬†Function.caller¬†or¬†Function.arguments. In normal,¬†non-strict¬†JavaScript, the¬†Function.caller¬†property returns the function that¬†invoked¬†the specified function on which the property is being called. For example, here we‚Äôve created two simple functions,¬†add¬†and¬†increment. Our¬†add function simply adds the two arguments together and returns the result. To make use of this, within¬†increment, we pass the¬†x¬†parameter and the value¬†1: Ignoring the inefficiency of this method for our purposes, we can see that by calling the¬†add.caller¬†property within the¬†add function, our console log produces the expected output: This tells us that the call made to our¬†add¬†function actually took place within another function, in this case the¬†increment function. If we had simply called¬†add¬†directly from our main loop,¬†add.caller¬†would be¬†null. With that out of the way, let‚Äôs take a look at how a¬†Deprecated Caller/Deprecated Arguments¬†error might show up once we enable¬†strict mode. This is done by simply including the line¬†‚Äòuse strict;‚Äô¬†somewhere in the code, ideally within the same scope as the code we expect to cause problems. In this case, we‚Äôre enabled¬†strict mode¬†within the¬†add¬†function, the same scope in which we attempt to access the¬†add.caller¬†property: Now, instead of getting the¬†.caller¬†property information in our output, an ugly¬†Deprecated Caller/Deprecated Arguments error pops up, telling us we‚Äôve attempted to access a restricted property: Now that¬†Strict Mode¬†is enabled, we can no longer safely call to the¬†.caller¬†property, as it has been deprecated due to the security risks it presents. The same issue occurs if a call is made to the¬†.arguments¬†property as well while in¬†strict mode. While the¬†.caller¬†property is completely off limits in this context, it‚Äôs still possible to safely call the¬†.arguments¬†property, by alternatively calling a specific local variable within the function called¬†arguments: Notice that¬†arguments¬†is not an explicitly created argument within the¬†add¬†function, but is instead automatically created by JavaScript within every function. For this reason, we are able to call¬†arguments[0]¬†and¬†arguments[1]¬†to get the expected values of¬†5¬†and¬†1¬†in return: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-01-18"},
{"website": "Airbrake", "title": "JavaScript ‚Äì ReferenceError: reference to undefined property \"x\"", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/referenceerror-reference-to-undefined-property-x", "abstract": "Today, as we continue through the next thrilling segment in our¬†JavaScript Error Handling¬†series, we‚Äôre examining the¬†Reference to Undefined Property¬†error with a fine-toothed comb. The¬†Reference to Undefined Property¬†error can only appear when strict mode is enabled, and will occur when the code attempts to access an object property that simply doesn‚Äôt exist. Below we‚Äôll take a look at a few examples to show where¬†Reference to Undefined Property¬†errors might appear, then take a closer look at how to deal with these little errors when they pop up. Let‚Äôs get started! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The ReferenceError object is inherited from the¬†Error¬†object. The¬†Reference to Undefined Property¬†error is a specific type of¬†ReferenceError¬†object. To properly examine¬†Reference to Undefined Property¬†errors we first need to understand what¬†strict mode¬†means in the context of JavaScript. Put simply,¬†strict mode¬†is a toggle which forces JavaScript to behave in a slightly altered manner, typically by opting into less secure limitations placed on upon the code, opening up execution to more dangers and exploits. However, in some cases it may be necessary to enable¬†strict mode, and in such cases, it‚Äôs entirely possible to produce a¬†Reference to Undefined Property¬†error. The¬†Reference to Undefined Property¬†error itself is rather straightforward: It will be thrown anytime a call is made on a property that hasn‚Äôt been defined for the referenced object. A call to a property is always in the form of¬†object.property, such as¬†foo.bar. As an example, we‚Äôll enable¬†strict mode¬†below, then create the¬†greeting¬†object and attempt to call an undefined¬†languageproperty of it: As expected, the¬†greeting.text¬†property is displayed properly in the console, but the call to the undefined¬†greeting.language¬†property causes an expected¬†Reference to Undefined Property¬†error: It‚Äôs important to note that as JavaScript evolves and modern browsers adopt the latest versions, not all errors that once existed continue to be necessary or relevant, and thus they may be deprecated. The¬†Reference to Undefined Property¬†error is one such example; while older browsers will still produce the above error output by catching the¬†Reference to Undefined Property¬†error, most modern browsers simply ignore it, as if¬†strict mode¬†wasn‚Äôt enabled. Unfortunately, there‚Äôs no programmatic work around for this, other than ensuring there are no references to undefined properties within your code. Executing the exact same code as above on¬†Chrome 55¬†or¬†Firefox 50, for example, outputs the¬†greeting.text¬†value, but then also outputs¬†Language is undefined: This behavior is identical to simply not using¬†strict mode¬†at all in an older browser where the¬†Reference to Undefined Property¬†error can still be thrown. JavaScript is effectively silently ignoring the improper reference to the undefined property. Another safe practice to ensure no¬†Reference to Undefined Property¬†errors appear when your code is executed in older browsers is to use the Object.prototype.hasOwnProperty() method on the instance of the object in question. This method accepts one parameter, which is the name or symbol of the property to test and ensure it exists as part of the referenced object. As a simple example, we can modify our above code by including an¬†if¬†statement that checks if the¬†.language¬†property is actually defined on the¬†greeting¬†object: Since¬†greeting¬†has no¬†.language¬†property, the second output is not produced, nor is a¬†Reference to Undefined Propertyerror thrown. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-02-08"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì SyntaxError: JSON.parse: bad parsing", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/syntaxerror-json-parse-bad-parsing", "abstract": "Travelling deftly through to the next item in our JavaScript Error Handling series, today we‚Äôre taking a hard look at the JSON Parse error. The JSON Parse error, as the name implies, surfaces when using the JSON.parse() method, but also failing to pass valid JSON as an argument. In this article, we‚Äôll dig deeper into where JSON Parse errors sit in the JavaScript error hierarchy, as well as when it might appear and how to handle it when it does. Let‚Äôs get started! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The JSON Parse error is a specific type of SyntaxError object. While most developers are probably intimately familiar with JSON and the proper formatting syntax it requires, it doesn‚Äôt hurt to briefly review it ourselves, to better understand some common causes of the JSON Parse error in JavaScript. JavaScript Object Notation , better known as JSON , is a human-readable text format, commonly used to transfer data across the web. The basic structure of JSON consists of objects , which are sets of string: value pairs surrounded by curly braces: An array is a set of values , surrounded by brackets: A value can be a string , number , object , array , boolean , or null . That‚Äôs really all there is to the JSON syntax. Since values can be other objects or arrays , JSON can be infinitely nested (theoretically). In JavaScript, when passing JSON to the JSON.parse() method, the method expects properly formatted JSON as the first argument. When it detects invalid JSON, it throws a JSON Parse error. For example, one of the most common typos or syntax errors in JSON is adding an extra comma separator at the end of an array or object value set. Notice in the first few examples above, we only use a comma to literally separate values from one another. Here we‚Äôll try adding an extra, or ‚Äúhanging‚Äù, comma after our final value : Note: We‚Äôre using the backtick ( ` ) string syntax to initialize our JSON, which just allows us to present it in a more readable form. Functionally, this is identical to a string that is contained on a single line. As expected, our extraneous comma at the end throws a JSON Parse error: In this case, it‚Äôs telling us the } token is unexpected, because the comma at the end informs JSON that there should be a third value to follow. Another common syntax issue is neglecting to surround string values within string: value pairs with quotations ( \" ). Many other language syntaxes use similar key: value pairings to indicate named arguments and the like, so developers may find it easy to forget that JSON requires the string to be explicitly indicated using quotation marks: Here we forgot quotations around the \"last\" key string , so we get another JSON Parse error: A few examples is probably sufficient to see how the JSON Parse error comes about, but as it so happens, there are dozens of possible versions of this error, depending on how JSON was improperly formatted. Here‚Äôs the full list: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-02-27"},
{"website": "Airbrake", "title": "JavaScript Error Handling: Unexpected Token", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/unexpected-token", "abstract": "Today, as we slice through the choppy seas of our mighty JavaScript Error Handling series, we‚Äôre going to smash ourselves against the rocks of the Unexpected Token error. Unexpected Token errors are a subset of SyntaxErrors and, thus, will only appear when attempting to execute code that has an extra (or missing) character in the syntax, different from what JavaScript expects. Throughout this adventurous article we‚Äôll explore the Unexpected Token error, down to its briny depths, including where it sits within the JavaScript error hierarchy. We‚Äôll also look at how to deal with the many different types of Unexpected Token errors that may occur, depending on the scenario you find yourself in, so let‚Äôs get a bit of that wind in our hair and get to it! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The Unexpected Token error is a specific type of SyntaxError object. Like most programming languages, JavaScript tends to be fairly particular about its syntax and the way it is written. While we don‚Äôt have time to cover everything that JavaScript expects (far more information can be found in the official documentation ), it‚Äôs important to understand the basic premise of how JavaScript parsers work, and therefore what syntax is expected. Statements in JavaScript are instructions that are concluded with a semicolon ( ; ), while all spaces/tabs/newlines are considered whitespace, just as with most languages. JavaScript code is parsed from left to right, a process in which the parser converts the statements and whitespace into unique elements: Tokens : These are words or symbols used by code to specify the logic of the application. These include things like + , - , ? , if , else , and var . These are reserved by the JavaScript engine, and thus cannot be used incorrectly, or as part of variable names and the like. Control characters : A subset of tokens which are used to direct the ‚Äúflow‚Äù of the code into code blocks. These are typically used to maintain scope , with braces ( { ... } ) and the like. Line terminators : As the name implies, a new line termination character. Comments : Comments are typically indicated using (2) forward-slash characters ( // ), and are not parsed by the JavaScript engine. Whitespace : Any space or tab characters that do not appear within a string definition. Effectively, if it can be removed without changing the functionality of the code, it is whitespace. Therefore, when JavaScript parses our code, behind the scenes it‚Äôs converting everything into these appropriate characters, then the engine attempts to execute our statements in order. However, in situations where the syntax is wrong (often) due to a typo, we might come across an Unexpected Token error, indicating that the parser thinks there should be another element in a particular place, rather than the token that it found there. For example, here we have a very simple call to the Math.max() method, which accepts a list of numeric arguments and returns the largest number from that list. However, keen eyes will notice that we‚Äôve accidentally included an additional comma ( , ) after our second argument ( 2, ), which will be trouble for our parser: As expected, JavaScript didn‚Äôt appreciate this and wasn‚Äôt sure how to properly parse it, so we get an Unexpected Token error as a result: Now, the problem is either one of two things: We wanted to list three arguments but forgot one: Math.max(1, 2, 3) . Or, we only wanted to list two arguments, and accidentally included the additional comma: Math.max(1, 2) . By including that extra comma in our method call, JavaScript expects a third argument to be included between that final comma and the closing parenthesis. The lack of that third argument is what causes the Unexpected Token error, and is why JavaScript is none too pleased. As mentioned earlier, there are many different types of Unexpected Token errors, but rather than cover all the possibilities, we‚Äôll just take a look at one more. The important takeaway is that JavaScript‚Äôs parser expects tokens and symbols in a particular order, with relevant values or variables in between. Often, Unexpected Token errors are just due to an accidental typo, but to help avoid these, it is quite beneficial to use a code editor that provides some form of auto-completion. This is particularly useful when forming basic logical blocks or writing out method argument lists, since the editor will often automatically provide the necessary syntax surrounding your code snippet. For example, to create the following snippet, my code editor tried to fix it for me, so I had to manually remove a brace ( } ) to get the desired result. Here we just have a simple if-else block, but we‚Äôre forgotten the closing brace ( } ) prior to the else : When JavaScript parses this, it expects that brace character, but instead it gets the else : It‚Äôs also worth noting, as some keen observers may have noticed, that even though we‚Äôre using the standard trappings of error capturing via a try-catch block to grab an instance of our SyntaxError , this code is never executed. The reason for this is that the parser finds our SyntaxError and reports on it before our catch block is even evaluated . Such Unexpected Token errors can be caught, but doing so typically requires execution of the two sections (problematic code versus try-catch block) to take place in separate locations. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-03-10"},
{"website": "Airbrake", "title": "JavaScript Error Handling: SyntaxError: missing ) after argument list", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/syntaxerror-missing-after-argument-list", "abstract": "Continuing through our JavaScript Error Handling series, today we‚Äôll be looking closely at the Missing Parenthesis After Argument List JavaScript error. The Missing Parenthesis After Argument List error can occur for a variety of reasons, but like most SyntaxErrors , it commonly pops up when there‚Äôs a typo, an operator is missing, or a string is not escaped properly. In this article we‚Äôll examine the Missing Parenthesis After Argument List error in a bit more detail, including where it fits in the JavaScript Exception hierarchy, and what causes such errors to occur. Away we go! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The Missing Parenthesis After Argument List error is a specific type of SyntaxError object. As mentioned in the introduction, the Missing Parenthesis After Argument List error can occur for a variety of reasons. Most of the time, the issue relates to a typo or a forgotten operator of some kind. To better illustrate this, we can just explore a few simple examples. A very typical action in JavaScript is to concatenate multiple strings together to form one larger string. This can be performed using a simple + operator between two strings: console.log(\"Hello \" + \"world\"); Or, you can also concatenate strings inline, using backtick ( ` ) and bracket ( {} ) syntax: console.log(`Hello ${worldVar}`); Regardless of how it‚Äôs done, many JavaScript methods accept an indefinite number of arguments (such as strings), including the console.log() method. In the example below, notice what happens if we forget to include any form of concatenation for our two strings: The result is that we immediately produce a Missing Parenthesis After Argument List error: As you may notice, we passed two arguments to console.log() , but we did not separate them by a typical comma ( , ), nor did we concatenate our two string values together with one of the above methods. This causes JavaScript to parse our code just fine, until it reaches the end of the first string ( is:\" ) and moves onto the next argument ( name ). Since we didn‚Äôt tell it to concatenate, nor to expect another argument through the use of a comma separator, JavaScript expects that to be the end of our argument list to the console.log() method, and finds that our closing parenthesis is missing ( ) ), thus throwing a Missing Parenthesis After Argument List error. The solution depends on how we want our code to behave, but in this case because we‚Äôre passing arguments to console.log() , we can achieve concatenation directly, or by simply adding a comma separator. The comma separator is generally more readable for our purposes, so let‚Äôs go with that option: This gives us our name output as expected: A rather simple fix, to be sure, but that‚Äôs the issue with the Missing Parenthesis After Argument List error, and with SyntaxErrors in general. They‚Äôre all so obvious once discovered, but unless your code editor parses and evaluates your code for syntax errors on the fly, it‚Äôs often easy to miss them until your test out the code yourself. It‚Äôs also worth noting that, like other SyntaxErrors , the Missing Parenthesis After Argument List error cannot be easily captured by the typical try-catch block. Since the problem is syntax, the JavaScript engine‚Äôs attempt to execute the problematic code fails out at that exact moment. This usually means that it doesn‚Äôt reach the point in execution where it can continue to the catch portion of the block, since it doesn‚Äôt know how to parse that correctly. This can be worked around by displacing execution through different files and layers, but for all basic intents and purposes, catching SyntaxErrors is a major challenge. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-03-15"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì SyntaxError: \"x\" is not a legal ECMA-262 octal constant", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/x-not-legal-ecma-262-octal-constant", "abstract": "Continuing right along through our¬†JavaScript Error Handling¬†series, today we‚Äôll be taking a closer look at the¬†Invalid Octal Constant¬†warning. The¬†Invalid Octal Constant¬†warning is quite unique in the realm of all the JavaScript errors we‚Äôve explored thus far, because it only appears in two very specific instances: when defining an¬†octal literal¬†value of¬†08¬†or¬†09. Below we‚Äôll explore just what¬†octal literals¬†are, how an¬†Invalid Octal Constant¬†warning might then appear, and what to do to avoid these errors yourself. Let‚Äôs get going! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the¬†Error¬†object. The¬†Invalid Octal Constant¬†warning is a specific type of¬†SyntaxError¬†object. Since the appearance of an¬†Invalid Octal Constant¬†warning deals with¬†octal literals, we should first take a closer look at what¬†octal literals¬†are and why they‚Äôre used. Time for a tiny bit of math (apologies all around)! In short, the octal numeral system is a base-8 number system. This differs from the¬†decimal¬†system that we all use daily, which is base-10, meaning that every place represented by a¬†decimal¬†number is a power of ten. On the other hand, the¬†octal¬†system is base-8, so every place represents a power of eight. To see this in action, first let‚Äôs pick any¬†decimal¬†number, in this case we‚Äôll go with¬†99. Now, to convert from¬†decimal¬†to¬†octal, we must take the¬†binary¬†representation of our¬†decimal¬†number (99), and group it into groups of¬†three¬†binary digits, beginning at the right side. So, to begin, we start with the¬†99: Since we need groups of¬†three¬†binary digits to convert to¬†octal, and our binary representation only contains eight digits in this case, we must add extra zeroes to the left side until we have a quantity of binary digits divisible by three. So here, we‚Äôre adding one zero to the left side: Next, we convert each of those binary triplets into their¬†octal¬†equivalent. The trick here is that since the maximum value that a trio of binary digits can represent is¬†7¬†(111¬†in binary), we are now using¬†octal¬†representations within binary. So in this case, our binary triplets are converted to:¬†1 4 3 If we squish it together, we get the¬†octal numeral¬†of¬†143, which is the¬†octal¬†equivalent to¬†99¬†in¬†decimal! To prove this, we can simply take our separated¬†octal numerals¬†(1 4 3) and go through each one at a time, multiplying the numeral by the¬†octal power¬†represented by that place in the number. So the right-most place would multiplied by¬†8¬†raised to the power of¬†0, the next place would be multiplied by¬†8¬†raised to the power of¬†1, and so on down the line. The resulting calculation looks like this: Whew! Now that we know what an¬†octal¬†is, how does this apply to JavaScript at the appearance of the¬†Invalid Octal Constant¬†warning? JavaScript allows for the expression of numeric literals to be defined in a variety of ways: The problem, and where we can see an¬†Invalid Octal Constant¬†warning appear, is when attempting to create a¬†literal with a leading zero that falls within that gap between¬†octal¬†and¬†decimal:¬†08¬†or¬†09. JavaScript initially tries to convert a leading-zero¬†literal¬†to¬†octal, but since we know that¬†08¬†and¬†09¬†are too large to be represented in¬†octal¬†(which is maximum of zero through seven), but too small to be¬†decimal¬†(which starts at ten), JavaScript throws the¬†Invalid Octal Constant¬†warning. Here‚Äôs a simple example illustrating this: What‚Äôs important to note here is that this isn‚Äôt technically an¬†error, but instead it‚Äôs a¬†warning. Therefore, in spite of our best efforts, we cannot¬†catch¬†this¬†Invalid Octal Constant¬†warning, and the engine spits out both a decimal number to the log, as well as the warning message: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-02-16"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì SyntaxError: missing ; before statement", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/syntaxerror-missing-before-statement", "abstract": "As we march along through our JavaScript Error Handling series, today we‚Äôll be parading our way through the Missing Semicolon Before Statement JavaScript error. As the name implies, the Missing Semicolon Before Statement error is typically thrown when a semicolon ( ; ) was forgotten somewhere in the code. In this article we‚Äôll go over the Missing Semicolon Before Statement error in more detail, including where it resides within the JavaScript Exception hierarchy, and what possible causes could produce a Missing Semicolon Before Statement error in the first place. Let‚Äôs get this band a‚Äôsteppin! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The Missing Semicolon Before Statement error is a specific type of SyntaxError object. A Missing Semicolon Before Statement error, on the face of it, means that the JavaScript engine expected a semicolon ( ; ), yet none was provided. There are many cases where this might occur, ranging from actually forgetting to add a semicolon where needed, to other errors or syntax issues that would accidentally cause a Missing Semicolon Before Statement error instead. As a general rule, JavaScript statements must (almost) always be terminated by a semicolon. The final semicolon is a simple way for the parsing JavaScript engine to determine when a statement both starts and finishes, so it can easily evaluate what should be executed and what should be separate from other code statements. However, like all rules, the \"JavaScript statements must be terminated with a semicolon\" rule has some exceptions. This is a behavior in JavaScript known as automatic semicolon insertion . This forces the parsing JavaScript engine to automatically insert (or assume insertion of) semicolons when none are present, following specific types of code statements. In most cases, statements that qualify for automatic semicolon insertion are those statements that require a semicolon to follow, lest they be invalid code entirely. In practice, this manifests itself when JavaScript interprets a typical line break as including a semicolon, even where one doesn‚Äôt exist. For example, here we‚Äôre using the var keyword to initialize a variable without a closing semicolon: This is no problem, because the automatic semicolon insertion ( ASI ) notices our var keyword as the beginning of a statement, and thus it automatically inserts a closing semicolon when it reaches the end of the line. From the perspective of the JavaScript engine, the above code looks like this: In fact, we can rewrite our original example to be even more abstract, with a line break after every element: Once again, JavaScript inteprets that, using ASI , to mean the following (intended) code: With a basic understanding of how JavaScript understands semicolons, we can tackle the Missing Semicolon Before Statement error. As a simple example, what happens if don‚Äôt abide by the ASI rules and try to assign a function to our getFullName variable, without remembering the function keyword, like so: JavaScript is not too happy with this, and throws a Missing Semicolon Before Statement error (in Firefox at least, Chrome parses it slightly differently): The issue here is that, after initializing our getFullName variable, we wanted to create a function and assign it to that getFullName variable, but we forgot the = function() syntax, writing this line instead: getFullName(first, last) { . The problem here is that JavaScript interprets this to mean that getFullName is a function to be called, in which we‚Äôre passing in two argument values of first and last . Since it then recognizes that a new statement is occurring due to the opening curly brace ( { ) that follows, JavaScript expects a closing semicolon after last) , which is missing. The solution is to cleanup our syntax using getFullName = function(first, last) { . We can also skip the extra line for initializing, and assign our function on the same line that we initialize via var : We should also note that, similar to other SyntaxErrors , the Missing Semicolon Before Statement error cannot be captured by most try-catch blocks. Since the syntax issue breaks further execution of code, JavaScript doesn‚Äôt know what to do after that failure point, so it rarely reaches any surrounding catch block. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-04-06"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì SyntaxError: missing } after property list", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/syntaxerror-missing-after-property-list", "abstract": "Today, as we move along through our JavaScript Error Handling series, we‚Äôll be examining the Missing Brace After Property List JavaScript error. As the name implies, the Missing Brace After Property List error is another in the line of SyntaxErrors , which occurs specifically when initializing properties of an Object where the parser expects a closing brace ( } ) to appear. Throughout this article we‚Äôll take a closer look at the Missing Brace After Property List error, including where it resides within the JavaScript Exception hierarchy, along with some potential causes of a Missing Brace After Property List error, so let‚Äôs get going! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The Missing Brace After Property List error is a specific type of SyntaxError object. As with a handful of other SyntaxErrors we‚Äôve explored in previous articles, the Missing Brace After Property List error is directly related to incorrect syntax when initializing Objects . Therefore, to explore this error in more detail, we should first take a moment to see how Object initialization syntax works in JavaScript. First, it‚Äôs important to understand that JavaScript itself has only two types of entities: Primitives and Objects . An Object is simply a collection of properties , used to programmatically represent a real world object. On the other hand, a Primitive represents a fundamental data type and is immutable , meaning its value cannot be changed. Primitive types include: string , number , boolean , null , undefined , and symbol . To work with Objects and their underlying properties , your code will use the dot syntax : As for initialization, just as with Arrays and other collection types in JavaScript, there are a few different syntaxes that can be used to create an Object : This produces the following output: The double-braces syntax is the most common when generating a new Object . In the first example above, we begin by initializing our Object , and only then do we assign a few properties to it. In the second example, we assign properties inline, using the property: value syntax. In the third example, we use the new Object() constructor, which accepts any value as its argument, and attempts to create an Object of the same Type of the passed argument. In this case, we passed in bookB to the new Object() constructor, so the call creates a new Object type of Object (as opposed to a String , Array , or what not), with the same properties as bookB . The final line illustrates one last important point, which is that equivalence is not measured based on the property values of Objects , but instead upon their in-memory reference. Therefore, even if all properties of two Objects are the same, if they don‚Äôt literally point to the same Object reference, they won‚Äôt be considered equivalent. Now, with that basic understanding and syntax out of the way, we can take a look at how the Missing Brace After Property List error might come about. The most common cause is when initializing an Object using the inline syntax, with comma-separated property: value pairs, and forgetting to include a comma somewhere in the list: Interestingly, just as we saw with the Missing Bracket After Element List error, unique JavaScript engines evaluate the Missing Brace After Property List error in different ways. And, just as before, Chrome‚Äôs engine more accurately evaluates the problem and provides a better error message. In this case, the parser recognizes that we‚Äôre defining an Object due to the opening brace ( { ). It then looks for an appropriate symbol to follow the opening brace: An identifier , such as: property_name . A number such as: 5 . A string , such as: 'property_name' . Or, a closing brace: } . If the engine finds one of those following the opening brace, all is well and it continues. If it wasn‚Äôt a closing brace, it next looks for a colon delimiter ( : ). After the colon, it then expects any type of value, which will complete a single property: value pair. Following a property: value pair, it expects one of two symbols: A comma delimiter: , . Or, a closing brace: } . The comma indicates another property is about to be listed, and the process repeats. Meanwhile, a closing brace indicates the list is complete. With that in mind, we can see how Chrome behaves and reports the issue more accurately than Firefox in the example above. When the Chrome parser reaches the end of the first property: value pair of author: 'Patrick Rothfuss' it expects a comma or a closing brace. When it finds that the next symbol is a new identifier ( title ) instead, it produces an accurate error, informing us there was an Unexpected identifier . Meanwhile, Firefox reaches that same point in parsing, but even though our syntax includes a closing brace, Firefox still reports the issue as a Missing Brace After Property List error. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-04-20"},
{"website": "Airbrake", "title": "JavaScript Errors ‚Äì SyntaxError: missing ] after element list", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/syntaxerror-missing-after-element-list", "abstract": "Next up in our adventure through the JavaScript Error Handling series we‚Äôll be going over the Missing Bracket After Element List JavaScript error. As directly implied by the name itself, the Missing Bracket After Element List error is thrown when an array is initialized with incorrect syntax, such as a missing closing bracket ( ] ) or comma ( , ). In this article we‚Äôll explore the Missing Bracket After Element List error in more detail, including where it sits within the JavaScript Exception hierarchy, along with a few examples of what might cause Missing Bracket After Element List errors in your own code. Let‚Äôs get crackin‚Äô! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The Missing Bracket After Element List error is a specific type of SyntaxError object. To understand what could cause a Missing Bracket After Element List error, we first need to understand how Array objects in JavaScript work. Specifically, we need to know how Arrays are properly formatted, syntactically, so we can then see how improper syntax would lead to a Missing Bracket After Element List error. JavaScript Arrays are simple lists of data, and can be initialized in a few different ways. Here we use three slightly different methods to create the same five-value Array : As expected, the output is three different, yet identical, Arrays with the same values: By far, the inline method of creating a new Array using surrounding brackets ( [ ... ] ) is the most popular, and thus, that is where the name of our Missing Bracket After Element List error comes from. Let‚Äôs take that same initial example above, and see what happens if we neglect the final closing bracket ( ] ): As it happens, the resulting error is slightly different depending on the browser engine: This difference in how the browser‚Äôs JavaScript engines parse, and thus report, the Missing Bracket After Element List error is rather interesting. Chrome notices that the names Array is being initialized and defined, and it reaches the end of 'Elizabeth' and expects one of a handful of possible characters: A comma ( , ) to indicate another item in the Array . A closing bracket ( ] ) to indicate the Array initialization is complete. Or, an operator of some kind to indicate that additional values (beyond our first 'Elizabeth' string) should be considered as part of this particular Array item value, such as a plus sign ( + ) to concatenate it with another value ( 'Elizabeth' + ' Frost' ). In this particular case, Chrome sees that the next character is a semicolon ( ; ), which is not a valid way to complete the initialization of this Array , and thus it throws an error indicating as such. Meanwhile, Firefox‚Äôs JavaScript engine is less subtle. Even though the underlying parser recognizes that any of the above types of characters are completely valid to follow our 'Elizabeth' value, Firefox explicitly tells us that a closing bracket ( ] ) is what is missing. While the specific Missing Bracket After Element List error that Firefox reports does inform us that there‚Äôs a syntax issue when defining our Array , it isn‚Äôt technically accurate, since another character, besides a closing bracket ( ] ), could go there and be perfectly valid. In the long run it doesn‚Äôt much matter, but these differences are somewhat interesting. Another potential cause for a Missing Bracket After Element List error when creating a new Array is when we‚Äôre missing a comma delimiter between multiple values: Just as before, there‚Äôs a distinct difference between the various browsers when reporting the Missing Bracket After Element List error: Again, Chrome recognizes the subtlety of the syntax a bit more, noticing that there are two strings within the ‚Äúelement‚Äù that should represent a single value of our Array , but there is no operator to indicate what action to take on both string values (such as concatenating them). Thus, Chrome reports that the second string of 'Bob' is unexpected . Meanwhile, Firefox once again just throws the Missing Bracket After Element List error, even though there is a closing bracket ( ] ) at the end of our Array definition. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-05-03"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì SyntaxError: redeclaration of formal parameter \"x\"", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/redeclaration-formal-parameter-x", "abstract": "Continuing our journey through the JavaScript Error Handling series, today we‚Äôll be tackling the Redeclaration of Formal Parameter JavaScript error. The Redeclaration of Formal Parameter error occurs when attempting to redeclare a function parameter, within the function body itself, by using the let assignment. In this article we‚Äôll further explore the Redeclaration of Formal Parameter error, looking at where it sits within the JavaScript Exception hierarchy, and examining a brief code snippet that illustrates what might cause a Redeclaration of Formal Parameter error in your own code, so let‚Äôs get to it! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The Redeclaration of Formal Parameter error is a specific type of SyntaxError object. Since the cause of a Redeclaration of Formal Parameter error is directly related to attempting to redeclare a variable, let‚Äôs take a moment to examine how JavaScript variable declarations work. In most cases, JavaScript developers are accustomed to using the var statement, which declares the variable that follows, optionally doing so with an initial value: Alternatively, ECMAScript 2015 introduced the let statement, which also declares variables (along with optional initialization). However, the difference between var and let is that let locks a variable declaration to the current scope context. That is, a let variable is contained within the code block in which it is declared. For example, in the varExample function below we declare the title variable using var , then inside an if block scope we redeclare it to a different value: The output shows us that, by using var , the referenced title variable is the same in both cases, regardless of the block scope context, so the title value is changed to The Shining prior to the inner console.log output, and then it retains that value for the outer output as well: However, if we use let instead of var , the JavaScript engine understands that we intend to declare a new, unique instance of title variable within the if block, which is self-contained inside that block scope and retains a different value that we‚Äôve assigned from the outer version of title : The result is that we get unique values for title in both console.log() calls: With that refresher of var versus let under our belts, let‚Äôs tackle the Redeclaration of Formal Parameter error now. Since the error occurs when attempting to redeclare a parameter variable within a function scope, we can start with a normal, working example, using a simple fullName() function, which concatenates the first and last parameter values and returns the result: As expected, this outputs the name: Jane Doe . Now, let‚Äôs try redeclaring our first parameter variable within the function scope using the var statement: As we learned above, a second declaration to an existing variable using var simply redeclares (and potentially reassigns) that variable. Therefore, we‚Äôve just hard-coded a new value of John to the first value before concatenating and returning it. This produces an output of the name: John Doe . However, let‚Äôs see what happens if we try that redeclaration with the let statement instead of var : As it happens, this throws a Redeclaration of Formal Parameter error at us, indicating that our first variable has already been declared: As with other SyntaxErrors in JavaScript, it‚Äôs also worth noting that we cannot directly catch the Redeclaration of Formal Parameter error with a typical try-catch block. Since the issue is improper syntax, our JavaScript parser recognizes the issue once it reaches the problematic snippet within the code, which inadvertently affects the surrounding code syntax, so the engine cannot properly recognize how the surrounding try-catch statement should function. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-05-13"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì SyntaxError: return not in function", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/syntaxerror-return-not-function", "abstract": "Today we‚Äôll be continuing our expedition through our JavaScript Error Handling series by looking at another SyntaxError , the Missing Return in Function error. As the name implies, the Missing Return in Function error pops up when the JavaScript engine detects that a return or yield statement is being called outside of a function. We‚Äôll take some time in this article to dive into the Missing Return in Function error in more detail, examining where it resides in the JavaScript Exception hierarchy, while also looking at a few simple code examples to illustrate how Missing Return in Function errors might be thrown. Let‚Äôs get going! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The Missing Return in Function error is a specific type of SyntaxError object. As with all SyntaxErrors , the Missing Return in Function error doesn‚Äôt appear due to any sort of logical failing within the code, but instead is due to the JavaScript parsing engine coming across a section of code that it doesn‚Äôt know how to handle. In most cases, this is due to a simple typo on the part of the developer, but as with other errors we‚Äôve explored, it‚Äôs easiest to explore some example code and see just how a Missing Return in Function error might come up. For starters, the most obvious way to throw a Missing Return in Function ‚Äî and the method which is intended by the error message itself ‚Äî is to simply have a return or yield statement hanging outside of a function: Executing the above code produces a Missing Return in Function error, just as we expected. Moreover, as we‚Äôve learned is commonly the case, different browsers (and thus different JavaScript engines) produce slightly different error messages: We get similarly bad results for a loose yield statement as well: However, because of the syntax that JavaScript expects to be present and surrounding a yield statement, the errors are not the same, thus we don‚Äôt technically produce a Missing Return in Function error: A much more common scenario is when trying to create a typical function, but with a minor typo somewhere that alters the way the engine parses the function, thus making it think there is no return or yield statement where one should exist. Here we have defined a simple fullName function that takes two parameters, first and last , and combines the two into a full name string value to return. However, if the first name value is John , we want to change it to Jonathan (for some reason, just go with me here), and combine that with the last name instead: However, running this code throws a Missing Return in Function error at us: Keen observers will have noticed the problem, which is that we forgot the opening brace ( { ) after declaring our if statement. This causes the JavaScript engine to parse the intended function incorrectly, and indicating we are missing the return statement. To fix this, we just need to correct that small typo, like so: Also notice that even though we‚Äôve surrounded our example code with a typical try-catch block, as with other SyntaxErrors , we cannot catch the Missing Return in Function error within the same scope of code in which the issue occurs. This is because our parser cannot properly parse the surrounding code once it reaches the line containing our Missing Return in Function error snippet, since everything else is ‚Äúoffset‚Äù by the snippet of improper syntax, and therefore it no longer functions correctly. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-05-15"},
{"website": "Airbrake", "title": "JavaScript Errors ‚Äì SyntaxError: unterminated string literal", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/syntaxerror-unterminated-string-literal", "abstract": "Moving along through our JavaScript Error Handling series, today we‚Äôll take a closer look at the Unterminated String Literal SyntaxError . JavaScript requires that string literals be enclosed in quotations, whether that be single ( ' ) or double ( \" ) quotes. The Unterminated String Literal error is thrown when when a string is detected that doesn‚Äôt properly terminate, like when it is missing closing quotations. In this article we‚Äôll explore the Unterminated String Literal error in more detail, looking at where it fits within the JavaScript Exception hierarchy and examining a few simple code examples to see how Unterminated String Literal errors might occur in your own coding adventures, so let‚Äôs get started! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The Unterminated String Literal error is a specific type of SyntaxError object. To understand how an Unterminated String Literal error might occur we should first explore how JavaScript deals with strings and, in particular, string literals . As we discussed in the introduction, a string literal must be enclosed by quotations. JavaScript doesn‚Äôt care if we use single or double quotes, so it is common practice to use single quotes for all string literals except if that string must contain an apostrophe (thus requiring an escape sequence to prevent the string from being terminated earlier than intended). For example, our first variable is assigned to the value Conan using the single quote literal notation, while the last name is double-quoted because of the apostrophe: Outside of requiring quotations to enclose the string, we can do anything we want, including place the string literal on multiple lines (typically used to better format the code by keeping line lengths shorter): Notice that we‚Äôre terminating the string literal contained on each individual line, then concatenating them together using the plus ( + ) operator. Let‚Äôs try not enclosing our strings in quotations for each line and removing the + operator: Lo and behold, this produces our first Unterminated String Literal error in Firefox: This shouldn‚Äôt be all that surprising. JavaScript evaluates each line and, in fact, each character per line is evaluated to identify the appropriate tokens to be built and placed in the execution tree. Thus, when the parser reaches the end of our first line it expects one of a handful of appropriate characters ( tokens ), like a closing single quotation in this case, but since it fails to find any of those it throws an error instead. However, we aren‚Äôt restricted to only using + operators for multi-line string literals. A second option is using the backslash character ( \\ ) as our separator: Unfortunately we‚Äôve made a simple yet understandable mistake: We left our indentations in the code to make it more readable. The problem is that JavaScript doesn‚Äôt know that we don‚Äôt want that extra spacing in front of the second, third, and fourth lines, so the resulting string output is rather screwy: Therefore, when using backslash separators for string literals it‚Äôs important to ensure there is no unwanted trailing space after each backslash. Thus, our code should look something like this instead: It‚Äôs not very readable, but it gets the job done and our output is properly formatted as we intended: Lastly, ECMAScript 2015 ‚Äî which we have been writing about in another series of articles ‚Äî introduced a new syntactic feature called template literals . A template literal is created by surrounding a string literal with backtick ( ` ) characters, like so: Unfortunately, in this particular case the template literal syntax tells JavaScript that we want every single character between the backticks to be included in the string. This is useful in some situations, of course, but for our purposes it once again adds some strange formatting to the output: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-05-25"},
{"website": "Airbrake", "title": "JavaScript Errors ‚Äì SyntaxError: test for equality mistyped as assignment?", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/test-for-equality-mistyped-assignment", "abstract": "Making our way through the wonders of the JavaScript Error Handling series, today we‚Äôll explore the Equality Mistyped as Assignment SyntaxError . The Equality Mistyped as Assignment error is thrown when an attempt is made to declare an assignment of a variable, where the parsing engine believes the intention was an equality test instead. In this article we‚Äôll look closely at the Equality Mistyped as Assignment error, seeing where it fits within the JavaScript Exception hierarchy, and we‚Äôll also go over a simple code example to illustrate how Equality Mistyped as Assignment errors might be typically thrown in real code. Let‚Äôs get to it! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The Equality Mistyped as Assignment error is a specific type of SyntaxError object. Since the Equality Mistyped as Assignment error deals with the concepts of equality and assignments , we should briefly cover both before diving into the error itself. As with many other programming languages, JavaScript‚Äôs equality operator is simply a pair of equals signs ( == ) separating the two objects to be compared. If the two objects are not the same type , the engine will first attempt to convert them to matching types (such as converting a string to a number ), before comparing their equivalence. In the case where both items to be compared are objects , the comparison doesn‚Äôt check the objects‚Äô values (since it‚Äôs unaware of what those are), and instead simply checks the in-memory reference ( memory address ) of both objects, to see if they‚Äôre equivalent. As discussed in the official documentation , these differences in equality operators can be seen below: The assignment operator found in JavaScript is even more common across other languages and is typically a single equals sign ( = ) separating the variable and the value. JavaScript also allows assignment operators to be chained onto one another, which forces the engine to execute (and assign) via ‚Äúoutside-in‚Äù order, starting with the outermost assignment and working inward: Armed with the basics of assignment and equality operators, we can now take a closer look at the Equality Mistyped as Assignment error. As mentioned in the introduction, the basic problem when an Equality Mistyped as Assignment error is thrown is that the JavaScript parser notices an assignment operator in a location it expects that an equality operator might have been intended. Before we see an example of this it‚Äôs critical to note that, as with a few other errors we‚Äôve explored in this series, the Equality Mistyped as Assignment error can only be thrown when strict mode is enabled in JavaScript. In short, strict mode is a toggled directive that forces JavaScript to behave in a slightly altered manner, usually by opting into more secure limitations placed upon the code, and thereby reducing the possibility of executing unintended code or performing unintended functionality. Since strict mode can heighten overall security, it is considered a requirement in certain coding situations, and in such cases, it‚Äôs entirely possible to throw an Equality Mistyped as Assignment error. In most cases, strict mode is enabled by including the 'use strict'; directive at the start (and within the same scope ) of the code you wish to execute via strict limitations: Since strict mode remembers its own local scope of execution, most uses of strict mode are performed inside an immediately invoked function expression ( IIFE ), which is a syntactic method of defining a function, by surrounding it with parentheses , which effectively tells the JavaScript engine that this function should be treated as a grouped entity and executed ( invoked ) immediately. Thus, our example code is contained within an IIFE , and includes an assignment operator inside the if statement clause: While very basic, this code performs an assignment within the if statement on line 7, which is interpreted as an intended equality operator instead. This causes an Equality Mistyped as Assignment error to be thrown in Firefox: As we‚Äôve discussed many times before, different JavaScript engines (from different browsers) handle parsing and exceptions differently. In this case, the latest version of Chrome does not recognize this as an issue, and thus ignores the ‚Äúerror‚Äù entirely, simply performing the name = 'Jane' assignment , as our code told it to, and outputting the new result. I leave it up to you to decide if this is an issue or not, but it‚Äôs just something to be aware of when developing and testing on different platforms. It‚Äôs also worth noting that, just as with other SyntaxErrors , the Equality Mistyped as Assignment error is difficult to catch in a typical try-catch code block. Here we try surrounding our IIFE example snippet in a try-catch block, but the JavaScript parser recognizes (and reacts to) the SyntaxError before it has a chance to notice (and thus execute) the surrounding try-catch code: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-05-21"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì X Is (Not) Y TypeError", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/x-not-y-typeerror", "abstract": "Next up in our JavaScript Error Handling series we‚Äôll be going over the X Is (Not) Y TypeError . The X Is (Not) Y TypeError is just one of the many TypeErrors we‚Äôll take a look at in this error handling series, which typically deal with accessing values that are not the appropriate data types. In this case, the X Is (Not) Y TypeError is a rather general-purpose error that is thrown most often when methods expect a certain data type as an argument, but are passed a different data type instead. In this article we‚Äôll explore the X Is (Not) Y TypeError in more detail, seeing where it sits within the JavaScript Exception hierarchy and also looking at a few simple code examples that show how X Is (Not) Y TypeErrors are commonly thrown. Let‚Äôs get to it! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The TypeError object is inherited from the Error object. The X Is (Not) Y TypeError is a descendant of TypeError object. The X Is (Not) Y TypeError can occur when dealing with most any data type in JavaScript, though it‚Äôs most common when using undefined or null types. We won‚Äôt go into the full details of these special types in this article, but if you‚Äôd like more information check out the details in our Null or Undefined Has No Properties article earlier in this series. The X Is (Not) Y TypeError comes in many forms, hence the relaxed naming convention found in the Mozilla Developer Network documentation. Simply put, this error occurs during a few different situations: The target object is null when it shouldn‚Äôt be. The target object is undefined when it shouldn‚Äôt be. The target object is not of a specific expected type ( Object , Symbol , null , etc). Let‚Äôs start with the first two causes, when the target object is null or undefined yet it‚Äôs expected to be something else. To see this in action we have little example snippet with a title variable that we‚Äôve declared as undefined . We then try to extract a substring of title using the String.prototype.substring() method and output the result to the console: The problem here is that title is undefined , which doesn‚Äôt have a property or method named substring . Our Chrome output indicates as much in the error message, while Firefox behaves differently and gives us the X Is (Not) Y TypeError format: Let‚Äôs try null instead of undefined in the same scenario: Unsurprisingly, this also throws a X Is (Not) Y TypeError that looks very similar: We also saw that, outside of manipulating null and undefined objects that should be other types, we can also get a X Is (Not) Y TypeError when trying to directly manipulate certain object prototypes by passing in incompatible argument types. For example, here we‚Äôve created a simple String title variable and assigned it a value. We then want to create an Object type from our title variable: The problem arises because the Object.create() method expects a prototype Object to be passed in as the first argument, instead of something like a String , as in this case. This results in another X Is (Not) Y TypeError being thrown our way: As is often the case, Chrome tends to report more accurate and human-readable error messages, so it‚Äôs explicitly telling us that the passed argument equal to The Hobbit should actually be an Object or a null , whereas Firefox sticks with the X Is (Not) Y TypeError format. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-06-01"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì X Is Not a Constructor TypeError", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/x-not-constructor-typeerror", "abstract": "Today, as we continue along through our JavaScript Error Handling series, we‚Äôll be taking a closer look at the \"x\" Is Not a Constructor TypeError . As the name suggests a \"x\" Is Not a Constructor TypeError is thrown when incorrectly trying to invoke the constructor of a variable or object that doesn‚Äôt actually have a constructor itself. In this article we‚Äôll examine the \"x\" Is Not a Constructor TypeError in more detail by looking at where it resides within the JavaScript Exception hierarchy. We‚Äôll also use a few simple code examples to illustrate how \"x\" Is Not a Constructor TypeErrors are commonly thrown, which will hopefully help you in avoiding them in your own coding adventures. Let‚Äôs get started! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The TypeError object is inherited from the Error object. The \"x\" Is Not a Constructor TypeError is a descendant of TypeError object. To dig into the \"x\" Is Not a Constructor TypeError we should first refresh ourselves on how constructors work in JavaScript. A constructor is merely a special method that is automatically added to every Object (or derived type therein) that, when called, actually performs the instantiation and overall creation of the object in question. In most cases the constructor is not called explicitly, but is instead implicitly invoked by using the new keyword (e.g. var house = new House() ). Moreover, constructors can be explicitly set when creating a class , or they can be implicitly added by JavaScript when defining a basic function . For example, here we‚Äôve defined a simple Book class that contains the special constructor() method in which we expect two parameters used to set the author and title properties. For illustration purposes we also output a message after construction to indicate how this Book instance was created: Now let‚Äôs try creating some instances of our Book class. First we‚Äôll call it using the standard constructor method (via the new keyword): As expected, this behaves normally and outputs our constructor message plus the Book instance object: Now let‚Äôs drop the new keyword and try calling the Book class directly: Here we actually get a TypeError because new is required to invoke our constructor : What many people don‚Äôt consider is that functions also have constructors . Here we recreated our Book class as a function: Let‚Äôs try the same thing as before. First we‚Äôll call the constructor using the new keyword: The output looks very similar to before, but our console message confirms that we‚Äôve called the constructor of our function version of Book : Since this is a function we can also call it without the new keyword, so let‚Äôs try that and see what happens: There are no errors thrown here because, as with all functions, our Book function can be invoked without calling its constructor . In this case the output shows what‚Äôs going on ‚Äî since our Book function doesn‚Äôt return anything our book variable remains undefined : Now that we‚Äôre a bit clearer on how JavaScript handles constructors we can dive back into the \"x\" Is Not a Constructor TypeError to see what might cause it to be thrown. In the simplest sense, a \"x\" Is Not a Constructor TypeError is thrown when attempting to call a constructor on an object type that doesn‚Äôt possess a constructor in the first place. For example, here we‚Äôve declared a String type named title and tried to invoke the constructor of our String type variable via the new keyword: Sure enough a \"x\" Is Not a Constructor TypeError is thrown because title() isn‚Äôt a constructor : To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-06-03"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì TypeError: null or undefined has no properties", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/null-undefined-properties", "abstract": "Moving along through our JavaScript Error Handling series, today we‚Äôll take a look at the Null or Undefined Has No Properties error. Null or Undefined Has No Properties is the first TypeError we‚Äôve explored thus far in this series, which generally encompasses issues where values are accessed that are not of the expected type . The Null or Undefined Has No Properties error occurs specifically when attempting to call a property of the null object or undefined type. Throughout this article we‚Äôll explore the Null or Undefined Has No Properties error in more detail, looking at where it sits in the JavaScript Exception hierarchy as well as providing some simple code examples to see how Null or Undefined Has No Properties errors are thrown, so let‚Äôs get started! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The TypeError object is inherited from the Error object. The Null or Undefined Has No Properties error is a specific type of TypeError object. The Null or Undefined Has No Properties error deals directly with null and undefined types in JavaScript, of course, so it‚Äôs important to understand how these work before understanding why this error occurs in the first place. The null type is one of JavaScript‚Äôs primitive values along with stuff like string , number , boolean , undefined , and symbol . A null reference represents a complete lack of identification. Simply put, if a variable is assigned to the value of null , that indicates that the variable points to no object at all. While they may seem similar, it‚Äôs important to understand the difference between null and undefined . In basic terms, undefined means that a variable has been declared but has not yet been assigned a value. Moreover, null and undefined are different types : null is actually an object whereas undefined is a type unto itself: We can also compare the similarity and differences of undefined and null by checking them using equality ( == ) and identity ( === ) operators: At the end we see that even though null and undefined are considered equal , they are not the same identity (equal without type conversion). As discussed, this is because they are of different types behind the scenes: null being an object and undefined being an undefined type. With that out of the way we can start to understand why trying to access a property of null or undefined may fail. For example, here we‚Äôre trying to access the name property of undefined : As expected, this throws a Null or Undefined Has No Properties error at us (although, as is commonly the case, Chrome reports the error slightly differently): This particular error is probably easiest to understand from the perspective of undefined , since undefined is not considered an object type at all (but its own undefined type instead), and properties can only belong to objects within JavaScript. Let‚Äôs try accessing the same name property of a null object and see what happens: Sure enough, we get another Null or Undefined Has No Properties error: As we saw above, null is considered an object type, which can inherently have properties, so why is it that null has no properties? The reason is because, unlike all other objects, null represents nothing ‚Äî a nonexistent entity. Unlike every other object which might be defined, the JavaScript engine sees a null value and immediately treats it as a pointer to nothing. Since null references nothing, it therefore cannot have any properties of its own. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-05-30"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì X Is Not a Function TypeError", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/x-is-not-a-function-typeerror", "abstract": "Making our way through our JavaScript Error Handling series, today we‚Äôll tackle the fun little error known as the X Is Not a Function TypeError . As indicated by the name itself, the X Is Not a Function TypeError is most often thrown when attempting to invoke a function() call on a value or object that doesn‚Äôt actually represent a function itself. In this article we‚Äôll explore the X Is Not a Function TypeError in greater detail, including where it sits in the JavaScript Exception hierarchy, as well as a few simple code examples that illustrate how X Is Not a Function TypeErrors may occur. Let‚Äôs get crackin‚Äô! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The TypeError object is inherited from the Error object. The X Is Not a Function TypeError is a descendant of TypeError object. An X Is Not a Function TypeError typically occurs in one of the following three scenarios: When a function call is made on a property of that simply isn‚Äôt a function. When a function call is made on an object type that doesn‚Äôt contain that function or method. When a function call is made on a built-in method that expects a callback function argument to be provided, but no such function exists. Let‚Äôs go down the list and take a look at some code that illustrate each of these scenarios. To begin we have a sparse HTML page with a title property. The proper way to retrieve that property is typically by calling the document.title property. Thus, in our JavaScript <script> tag we call document.title and output the result to confirm it works: As expected, the output shows us what we‚Äôre after: However, since document.title is a property, what happens if we try to call it like a function (with parentheses)? Now we‚Äôve accidentally caused a X Is Not a Function TypeError to be thrown because we‚Äôre trying to call document.title() like a function instead of a property: Another common cause of X Is Not a Function TypeErrors is when trying to call a particular method on an object that doesn‚Äôt contain that method/function call. For example, here we have a pair of Arrays that contain information about our book ( Robinson Crusoe ) that we want to combine into one single array. Thankfully, we can simply use the Array.prototype.concat() method to take our book array and combine it with the passed in publisher array: The resulting combined output shows our concatenation works as expected: Let‚Äôs try the same thing but for a pair of Objects with the same sort of data about our book. Here we try to combine the book and publisher objects using the concat() method call on book just as before: Unfortunately, Object.prototype.concat() isn‚Äôt a valid method, so a X Is Not a Function TypeError is thrown: In this case we can concatenate our Objects together by calling the Object.assign() method: Sure enough this accomplished what we were after and outputs the expected result, which is similar to the Array concatenation functionality above: Our final scenario where X Is Not a Function TypeErrors can commonly occur is when using any of the built-in methods that expect a provided callback function as an argument, but no function is given. For example, here we want to use the Array.prototype.every() method to loop through every element of our array and check if it passes some logic. However, in this case we‚Äôve forgotten to provide the required callback function as the first argument (instead we just have a string): As you might imagine this results in a X Is Not a Function TypeError output: The correct way to use built-in methods like Array.prototype.every() is to provide a callback function as the first argument, which will execute once for every element in the array. In this case, we‚Äôre testing whether all elements are less than or equal to 10 ‚Äî if so, we return true : This outputs our expected result: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-06-05"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì X Is Read-Only TypeError", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/x-is-read-only-typeerror", "abstract": "Moving along through our JavaScript Error Handling series today we‚Äôll explore the X Is Read-Only TypeError in more detail.  An X Is Read-Only TypeError is limited to strict mode and occurs when attempting to alter a read-only property. In today‚Äôs article we‚Äôll explore the X Is Read-Only TypeError in greater detail, looking at where it resides in the JavaScript Exception hierarchy and examining a few simple code snippets that should help to illustrate how X Is Read-Only TypeErrors are thrown in the first place, so let‚Äôs get to it! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The TypeError object is inherited from the Error object. The X Is Read-Only TypeError is a descendant of TypeError object. As mentioned in the introduction, X Is Read-Only TypeErrors can only be thrown while in strict mode .  Strict mode is an optional variant of JavaScript that can be opted into by the executing script that will use slightly different (and typically more restrictive) semantics when compared to normal JavaScript.  For our purposes one of the biggest differences is that with strict mode enabled JavaScript will throw some types of errors that it would normally just silently ignore.  One such error that is normally ignored, but is raised if strict mode is enabled, is our friend the X Is Read-Only TypeError . At the most basic level strict mode can be enabled by placing the 'use strict'; statement at the top of our script.  We won‚Äôt go into any more details of strict mode‚Äôs particular behaviors here, but feel free to check out the MDN documentation for more info. To examine how X Is Read-Only TypeErrors might occur we‚Äôll start with a simple working example.  Here we declare a book object and output the object to our console.  We‚Äôve accidentally misspelled ‚ÄúJurassic‚Äù during creation so we then update the title property and output the fixed result.  Nothing too fancy and everything works as expected, even with strict mode enabled: Now let‚Äôs try a slightly different setup.  Here we want to prevent our book object from being altered (i.e. make it immutable), so we‚Äôll pass it to the Object.freeze() method which does just that: It prevents properties from being added, removed, or changed.  After we have frozen our object we try to update the correct title then output the result: Since we have strict mode enabled our attempt to make changes to an existing property of our frozen book object fail and an X Is Read-Only TypeError is thrown: This is one of those instances where strict mode can be very beneficial and serves to make your code more stringent on what modifications it attempts or allows.  By freezing our object we‚Äôre telling JavaScript that this object should now be completely immutable.  However, it‚Äôs important to understand that creating an immutable object only means that that specific object cannot be changed ‚Äî even though that single object cannot be changed, we can change the reference of the variable that previously pointed to our old immutable object to a different , mutable object without throwing an error. To illustrate we‚Äôll start with the same example from before: We already know that the final line throws an X Is Read-Only TypeError , but we can get around this by simply assigning a new object value to our book variable, thereby changing the memory reference from a previously immutable object to a new, mutable one: While this feels a bit like cheating (and it arguably is depending on your viewpoint and the purpose of your code), it‚Äôs one particular quirk to remember when using immutable objects, as well as references to said immutable objects.  If your goal is to write code that never allows frozen/immutable objects to be modified once instantiated then make sure you never make any assignment statement ( x = y ) after the initial declaration.  While that solution might not work for all projects or meet all business requirements, it‚Äôs a solid safety practice. To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-06-09"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì More Arguments Needed", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/more-arguments-needed", "abstract": "Next up in our JavaScript Error Handling series is the More Arguments Needed TypeError .  The More Arguments Needed TypeError is typically thrown when calling a method or function that requires a minimum number of arguments that simply weren‚Äôt provided by the calling code. In today‚Äôs article we‚Äôll examine the More Arguments Needed TypeError in a bit more detail by looking at where it sits within the JavaScript Exception hierarchy.  We‚Äôll also use a few code examples to illustrate how More Arguments Needed TypeErrors most commonly occur, so let‚Äôs get started! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The TypeError object is inherited from the Error object. The More Arguments Needed TypeError is a descendant of TypeError object. In this first example we have an array containing some basic info of one of my all-time favorite books.  However, we want to split the data up a bit into more manageable sub-arrays: One array with just the title and author and the other with just the publication date. To accomplish this we‚Äôll use the Array.prototype.filter() method which expects the first argument to be a function that will be executed for every entry in the array.  If that function returns a true boolean value the element is added/kept in the array and if it returns false that element is tossed out.  Therefore, we‚Äôre using the new ES6 arrow function syntax to create an anonymous inline function that will assign our element to the v parameter.  We then check that the typeof v is a string to get the author and title, while we verify the instanceof value to be Date to grab our publication date: Sure enough this works as expected and we get two filtered arrays.  However, like many methods in JavaScript the Array.prototype.filter() method expects at least one argument to be passed to it.  This makes sense since there‚Äôd be no point in looping through every array element and performing a filter that does nothing at all, which is what would happen if we passed zero arguments.  Therefore, let‚Äôs see what happens if we try this same example but without providing an argument to Array.prototype.filter : Perhaps unsurprisingly this throws a More Arguments Needed TypeError , although the formatting of the message differs depending on the JavaScript engine (i.e. browser) in use: There seems to be little rhyme or reason to determine which built-in methods and functions in JavaScript will throw a More Arguments Needed TypeError when not enough arguments are provided, so it‚Äôll require a bit of experimentation to figure out which abide by these requirements and which do not.  Obviously the best practice is to try to just write code that doesn‚Äôt make improper argument quantity calls in the first place (ESLint and other IDE parsers help a lot in this regard). Another related and fun consideration when working with JavaScript is to recall that JavaScript doesn‚Äôt enforce any sort of maximum number of arguments that can be passed to a method.  Instead, JavaScript automatically creates a metaparameter called arguments within the scope of every function/method block. arguments is an Array-like object that contains all the argument values passed to that particular function/method call.  This knowledge means that even though many methods have a minimum number of arguments that must be passed there is never a maximum number, which can be used to your advantage in some cool ways. For example, here we have a little Book class that lets us create book objects more easily.  We also have the Book.toArray() method that returns an array of the instance properties, with or without the .publicationDate property, depending on the boolean value of the single withPublicationDate parameter: As you can see from the output below our calls to the Book.toArray() method work as expected, generating an array we can output with and without publicationDate depending on that first argument.  However, let‚Äôs try modifying our Book.toArray() method a bit to make use of the hidden arguments parameter: Now when we call Book.toArray() any and all parameters we provide ‚Äî even beyond the first withPublicationDate boolean ‚Äî will be combined into the output of our full array.  Sure enough, if we test this out by passing a few extra parameters to our second book.toArray() call we get the extra elements in the returned and output array: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-06-14"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì Invalid Array Sort Argument TypeError", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/invalid-array-sort-argument-typeerror", "abstract": "Today in the continued journey through our JavaScript Error Handling series we‚Äôll be exploring the Invalid Array Sort Argument TypeError .  The Invalid Array Sort Argument TypeError is thrown by the Firefox JavaScript engine in a very specific situation: When the argument passed to the Array.prototype.sort() method isn‚Äôt a valid function. In this article we‚Äôll look into the Invalid Array Sort Argument TypeError a bit more to see where it resides within the JavaScript Exception hierarchy, and we‚Äôll also take a look at a few simple code examples that should show you how Invalid Array Sort Argument TypeErrors might occur and what changes in behavior you may see depending on your browser/JavaScript engine.  Let‚Äôs get goin‚Äô! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The TypeError object is inherited from the Error object. The Invalid Array Sort Argument TypeError is a descendant of TypeError object. The Array.prototype.sort() is a fairly simple method ‚Äî it attempts to sort the instanced array in place (meaning it doesn‚Äôt need to return a value to be used).  By default the sort logic is based on string Unicode code point comparisons, which is commonly realized in the form of alphanumeric sorting. Optionally, Array.prototype.sort() accepts a single argument that should be a function that will be executed to compare each element in the array and sort it.  The inner sort function that is provided as the argument has two parameters that represent the two array elements to be compared. Internally JavaScript only knows (or cares about) the indices of the two current elements being compared.  Not all sorting algorithms are the same, and certainly not all JavaScript engine implementations of sort are the same either, but it‚Äôs somewhat interesting to dig deeper into how one particular implementation works to see what‚Äôs going on behind the scenes. For example, the Chrome JavaScript engine uses the MergeSort algorithm to perform its internal sorting comparisons.  To see this in action we have a simple sorting example.  Here we‚Äôve declared a numeric array called data and a function within sort() . sort() starts by outputting the whole array in its current form, then outputs the values of the comparison that is being made, and then finally makes the comparison of the two parameters a and b .  Checking if a is greater than or equal to b , as seen here, will cause the resulting array to be in ascending order, while inversing the check to a <= b will result in descending order: The result is a reasonably formatted output that shows the transition that our array goes through and the various elements that are being compared with each iteration: I‚Äôve trimmed out a number of lines to keep things a bit more concise, but as it happens to sort this particular array requires 19 iterations of our sort() function.  What you might notice is that each output of our array from within the sort() function only changes one value at most.  In fact, since this uses a merge sort we can see just how that algorithm performs sorting. The basic functionality of a merge sort relies on the concepts of divide and conquer .  We start by (effectively) dividing our initial array in half, then each of those halves are split again down into quarters, then all four are split into eighths, and so on until each sub-array contains a maximum of one element.  This halving/splitting is called the divide phase. To illustrate we‚Äôll take our data array from before: To begin the divide process we take the first index ( 0 ) and the last index ( 7 ), add them together, divide by 2 , then round that down to the nearest whole number.  This would give us: Math.floor((0 + 7) / 2) or 3 as the answer.  This value is the middle index and tells us where we create our divide inflection point within the array for the first split into multiple sub-arrays.  The left side sub-array goes from 0 to middle index and the right sub-array is from middle index + 1 to last index .  This gives us: Now this divide process keeps repeating until we have sub-arrays that contain only a single element.  What may feel strange about this first divide phase is that there is no sorting going on at all during this phase.  It‚Äôs just a recursive process of splitting the array into halves over and over until we‚Äôre left with single elements. Once elements are all within single-size sub-arrays they can be merged .  This process simply takes the sub-arrays that were generated and now merges them together, recursively and back up the chain of size.  For example our first sub-array pair would be: [5] [7] The process of merging two sub-arrays together is fairly simple: Take each pair of the smallest (single-element) sub-arrays ( left and right ) and add both elements to a new merged sub-array that holds both elements, ensuring that the smaller of the two elements is first. For example, if we take our single-element sub-arrays and merge the pairs we get: Now that we‚Äôre dealing with multi-element arrays things get a bit trickier but still follow simple rules. Take the first unused element of the left array (known as a ) and the first unused element of the right array (known as b ) and compare the two. Push whichever of a or b is the lesser value onto our new merged array and consider that particular index of that sub-array to be used this iteration. For example, we‚Äôd compare and merge our pair sub-arrays like so: (Note: The same process happens with the right side sub-array pairs, but we won‚Äôt go through those here.) Repeat this process for each iteration by doubling the size of the merged sub-arrays. Eventually you‚Äôll reach the final iteration where you have two sub-arrays that are both the halved sizes of the original split data array.  Repeat comparisons of the first element of each sub-array and added to a new merged array and you‚Äôll end up with the final, sorted result! For example, merging our final two sub-arrays would look something like this: Whew!  Now that we understand how merge sort works in most JavaScript implementations we‚Äôll have a better grasp of what Array.prototype.sort() expects for its arguments and return value.  The (optional) argument provided to Array.prototype.sort() is expected to be a function that itself contains up to two parameters.  This inner sort function begins processing by grabbing the first two elements (indices 0 and 1 ) of the array and then executes the sort function.  The return value of the sort function determines if JavaScript performs any change to array elements.  If the sort function returns a value of true (or anything that is \"truthy\" ) then the first parameter element (which we‚Äôll call a ) is assumed to be ‚Äògreater than‚Äô the second parameter element ( b ).  The result is that JavaScript will process the swapping of a and b as normal. While we can implement our own sort function quite easily, what happens if we forgo a custom sort function entirely?  As mentioned, since the function argument is optional leaving it out simply performs the standard alphanumeric ascending sort that we saw above. Now let‚Äôs take this a step further and see what happens if we pass a non-function object type argument to the Array.prototype.sort() method: Here we once again see the fundamental differences between JavaScript engines on Chrome versus Firefox.  Chrome has no problem with the syntax above: Even though we didn‚Äôt provide a valid function as the argument to the Array.prototype.sort() call, Chrome doesn‚Äôt care and just ignores that argument entirely, thereby assuming a normal alphanumeric ascending sort was intended.  Meanwhile, Firefox doesn‚Äôt like this at all and spits out an Invalid Array Sort Argument TypeError at us: That about does it for the Invalid Array Sort Argument TypeError and exploring a little bit about how JavaScript sorting works.  Check out this great Khan Academy tutorial on merge sorting to learn more! To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-06-17"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì Property X Cannot Be Deleted TypeError", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/property-x-cannot-be-deleted-typeerror", "abstract": "Next up in our JavaScript Error Handling series we‚Äôre looking at the Property X Cannot Be Deleted TypeError in greater detail. The Property X Cannot Be Deleted TypeError is typically thrown when trying to delete an object property that is non-configurable . In this article we‚Äôll explore the Property X Cannot Be Deleted TypeError to see where it sits within the JavaScript Exception hierarchy along with a few sample code snippets to illustrate how Property X Cannot Be Deleted TypeErrors are thrown. We‚Äôll also briefly take a gander at JavaScript‚Äôs built-in data properties (like configurable ), so let‚Äôs get started! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The TypeError object is inherited from the Error object. The Property X Cannot Be Deleted TypeError is a descendant of TypeError object. As we‚Äôve seen many times before the Property X Cannot Be Deleted TypeError is a strict mode only exception. Strict mode is an optional variant of JavaScript that uses slightly different (and typically more restrictive) semantics when compared to normal JavaScript. One specific change is that strict mode contains a set of error types that are not thrown when strict mode is disabled and Property X Cannot Be Deleted TypeError is one such example. Strict mode can be enabled by placing the 'use strict'; statement at the top of our script. We won‚Äôt go into any more details of strict mode‚Äôs particular behaviors here, but feel free to check out the MDN documentation for more info. As previously mentioned the Property X Cannot Be Deleted TypeError occurs when trying to delete a property value that is marked as non-configurable . The configurable state of a property is actually an attribute in JavaScript. Such an attribute is essentially a built-in configuration setting that can be altered throughout code and will effect how that property behaves. Some methods allow for direct modification of property attributes , while other methods modify certain attributes behind the scenes. We can use the Object.defineProperties() method to directly add or modify object properties , including the name , value , and attributes . Here we have a simple example where we‚Äôve defined a book object and then called Object.defineProperties() which expects the first argument to be the object we‚Äôre modifying, while the second argument is an object defining the list of properties to add/modify and their respective values: In the above case we specified the name of our properties , the value , and also set the configurable attribute to true for the author property only. The configurable attribute defaults to false , which specifies that the proeprty cannot be deleted or have most other attributes changed. We can see from the commented output next to the console.log() calls above that our first output shows both properties ( title and author ). We then delete the book.author property and then output again, while shows the modified object only contains title . Since configurable defaults to false our title property is currently considered non-configurable . Therefore, let‚Äôs try deleting the title property this time instead of author and see what happens: Unsurprisingly, the attempt to delete the non-configurable title property results in a Property X Cannot Be Deleted TypeError , which appears as slightly different messages depending on the browser in use: We‚Äôre seeing another Property X Cannot Be Deleted TypeError because, just as before when we explicitly set our configurable property to false , calling Object.freeze() on our object also sets configurable to false behind the scenes.  This can be verified by calling the Object.getOwnPropertyDescriptor() method and passing the object and name of the property in question.  In this case it doesn‚Äôt matter which property we check since the entire object is frozen, but here we are outputting the author property object which shows the direct property descriptor (as opposed to the indirect descriptor attached to the prototype chain of our object instance): To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-06-21"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì Variable X Redeclares Argument TypeError", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/variable-x-redeclares-argument-typeerror", "abstract": "Today, as we approach the end of our JavaScript Error Handling series, we‚Äôll be looking at the Variable X Redeclares Argument TypeError a bit closer. Variable X Redeclares Argument TypeError is a strict mode only error that occurs when attempting to redeclare an argument (althought it‚Äôs technically a parameter in this context) within a function definition. Throughout this article we‚Äôll explore the Variable X Redeclares Argument TypeError in more detail, looking at where it sits within the JavaScript Exception hierarchy as well as going over a few simple code examples that try to show how Variable X Redeclares Argument TypeErrors might pop up.  Let‚Äôs get to it! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The TypeError object is inherited from the Error object. The Variable X Redeclares Argument TypeError is a descendant of TypeError object. As with numerous JavaScript errors we‚Äôve already explored in this article series the Variable X Redeclares Argument TypeError is an error that only occurs within strict mode .  Strict mode is an optional variant of JavaScript that uses slightly different (and typically more restrictive) semantics when compared to normal JavaScript.  One specific change is that strict mode contains a set of error types that are not thrown when strict mode is disabled. Variable X Redeclares Argument TypeError is one example of an exception that only occurs while strict mode is enabled. Typically, strict mode is enabled by adding the 'use strict'; line at the beginning of the code.  Strict mode is usually applied to entire scripts , so once it‚Äôs enabled it is active for the entirety of that execution chain.  While we won‚Äôt go into any more details of strict mode‚Äôs particular behaviors here, there is far more information that can be found in the MDN documentation and elsewhere. Now that we know how to use strict mode let‚Äôs go through a few simple code snippets to see how Variable X Redeclares Argument TypeErrors might crop up in day-to-day coding.  Here we have defined a Book class with a constructor() method, a few attributes to give our book some info, and finally a basic getBookData() instance method that returns a nicely formatted string with book data in it: We‚Äôve allowed our Book.getBookData() method to accept an optional argument to define the includePublicationDate boolean, which we use to indicate whether the output should include the date of publication or not.  Our two output tests above show that this argument is working as intended. However, let‚Äôs see what happens if we try redeclaring the includePublicationDate parameter within the getBookData() method definition: Most of our code is the same here except we‚Äôve added one line inside our getBookData() method: var includePublicationDate = 'false'; As a result, in older versions of JavaScript (prior to ES6 essentially) calling this code produces a Variable X Redeclares Argument TypeError : This is because the declaration already exists since includePublicationDate was defined in the parameter list of the method.  The obvious solution is to forgo redeclaration in most cases and just set the variable to a new value, if necessary: That said, this issue error is largely eliminated in modern JavaScript engines and with ES6.  Instead of throwing a Variable X Redeclares Argument TypeError while in strict mode most JavaScript parsers now recognize that the intent of redeclaring a parameter is to just set it to the new value (if applicable), so modern browsers will effectively ignore the var keyword in that statement, as if it read merely includePublicationDate = false; instead. In this case, running our above code where we attempt redeclare our parameter with the statement var includePublicationDate = false; results in the following output for both Chrome and Firefox browsers: Notice that, even though we pass a true value to the first argument of getBookData() our ‚Äúredeclaration‚Äù takes over, recognizes the intent is just to set the parameter value to false no matter what argument was passed, and so our output shows that result. Another related consideration with ES6 is the introduction and use of the let keyword, which should typically be used in scenarios like this anyway.  For example, let‚Äôs take the same redeclaration snippet above but only change the var keyword to let : This is the best practice technique for handling localized variables such as the includePublicationDate parameter with ES6.  Running the above code produces two interesting results. First and foremost is we get an error message upon execution but it‚Äôs actually a SyntaxError , informing us that the includePublicationDate identifier has already been declared: Moreover, most modern code editors will actually parse and detect this issue well before the code is actually executed.  For example, Visual Studio Code (the editor this article is being written in) shows a warning at the two lines in question and indicates there‚Äôs an issue via the following message: \"Duplicate identifier 'includePublicationDate'.\" To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-06-25"},
{"website": "Airbrake", "title": "JavaScript Errors ‚Äì Malformed Formal Parameter SyntaxError", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/syntaxerror-malformed-formal-parameter", "abstract": "Moving along through our JavaScript Error Handling series, today we‚Äôre going to closely examine the Malformed Formal Parameter error. Malformed Formal Parameter errors appear when attempting to use the Function() constructor to create your own function object, but then specifying invalid parameters when doing so. In this article, we‚Äôll dive a bit deeper into the Malformed Formal Parameter , see where it sits within the JavaScript error hierarchy, and look at just how to deal with any Malformed Formal Parameter errors you may encounter in your own swims into the murky waters of coding.  Let‚Äôs get this boat sailing! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The Malformed Formal Parameter error is a specific type of SyntaxError object. To understand just what an Malformed Formal Parameter error means, we must first briefly look at the Function() constructor.  Simply put, Function() is used to programmatically create a new function.  Rather than creating your function inline, as is normally the case, you can use Function() and pass in however many arguments you wish your function to have, along with the final argument you pass, which is the functionBody (the code between the brackets { ... } that will be executed when calling the function). For example, here we have a normal inline function called fullName(first, last) , that we use to combine the first and last parameters into the returned, full name value: Calling our function combines the two parameters of Jane and Doe and returns that string, which we can then output to the console: However, if we wish, we can programmatically create this same function using the Function() constructor, by passing the arguments as strings, along with the functionBody as our final argument.  Here‚Äôs the same example as above, but using Function() : As expected, this functions the same as before, outputting our full name value to the console: With a basic understanding of how Function() is used, we can now take a look at Malformed Formal Parameter errors.  Simply put, a Malformed Formal Parameter error occurs when calling the Function() constructor, but when the formatting of the argument string(s) passed to it are malformed.  This might include extra or missing comma separators, or invalid argument names. For example, here we‚Äôre using the same Function() constructor call as above, but we‚Äôve accidentally added an extra comma after the initial parameter ( first ): The difference is subtle, but notice that extra comma after the word first ( \"first,\" ).  Sure enough, this is a malformed parameter, and JavaScript produces an Malformed Formal Parameter error (in Firefox, at least), to tell us as much: Since the use of Function() allows for programmatic function definition, it can be dangerous and also sometimes difficult to avoid errors in your definition strings.  Another common issue that might cause a Malformed Formal Parameter error is accidentally including keywords as part of your argument list; stuff that JavaScript uses internally as part of the syntactical structure of its code.  For example, here we‚Äôve accidentally used the var keyword ahead of our first argument, which JavaScript is none too pleased with: Sure enough, another Malformed Formal Parameter error from Firefox, while Chrome gives a more specific error message: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-06-26"},
{"website": "Airbrake", "title": "The Java Exception Class Hierarchy", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/the-java-exception-class-hierarchy", "abstract": "All objects within the Java exception class hierarchy extend from the Throwable superclass. Only instances of Throwable (or an inherited subclass) are indirectly thrown by the Java Virtual Machine (JVM), or can be directly thrown via a throw statement. Additionally, only Throwables (or an inherited subclass) can be caught via a catch statement. A Throwable instance contains the current execution stack, captured when the error exception occurred. It can also contain a message (obtained via the getMessage() method), indicating the relevant error message. Lastly, for exception chains where one error causes another error to be thrown, a Throwable can obtain a potential cause (collected via the getCause() method) as well. In this article we‚Äôll dig deeper into the Java exception class hierarchy and see how Java extends beyond the Throwable superclass to provide the dozens of built-in error and exception classes that may be thrown by the JVM during execution. We‚Äôll also update this article in the future as new, detailed exception-specific posts are published, so the full hierarchy list will provide easy navigation between the detailed error-focused entries. As mentioned, every possible built-in exception class extends directly (or subclasses) from the Throwable superclass. The full Java exception class hierarchy can be found below: Throwable Error AssertionError LinkageError BootstrapMethodError ClassCircularityError ClassFormatError UnsupportedClassVersionError ExceptionInInitializerError IncompatibleClassChangeError AbstractMethodError IllegalAccessError InstantiationError NoSuchFieldError NoSuchMethodError NoClassDefFoundError UnsatisfiedLinkError VerifyError ThreadDeath VirtualMachineError InternalError OutOfMemoryError StackOverflowError UnknownError Exception CloneNotSupportedException InterruptedException IOException FileNotFoundException SocketException ConnectException UnknownHostException ReflectiveOperationException ClassNotFoundException IllegalAccessException InstantiationException InvocationTargetException NoSuchFieldException NoSuchMethodException RuntimeException ArithmeticException ArrayStoreException ClassCastException ConcurrentModificationException EnumConstantNotPresentException IllegalArgumentException IllegalThreadStateException NumberFormatException IllegalMonitorStateException IllegalStateException IndexOutOfBoundsException ArrayIndexOutOfBoundsException StringIndexOutOfBoundsException NegativeArraySizeException NullPointerException SecurityException TypeNotPresentException UnsupportedOperationException Error AssertionError LinkageError BootstrapMethodError ClassCircularityError ClassFormatError UnsupportedClassVersionError ExceptionInInitializerError IncompatibleClassChangeError AbstractMethodError IllegalAccessError InstantiationError NoSuchFieldError NoSuchMethodError NoClassDefFoundError UnsatisfiedLinkError VerifyError ThreadDeath VirtualMachineError InternalError OutOfMemoryError StackOverflowError UnknownError AssertionError LinkageError BootstrapMethodError ClassCircularityError ClassFormatError UnsupportedClassVersionError ExceptionInInitializerError IncompatibleClassChangeError AbstractMethodError IllegalAccessError InstantiationError NoSuchFieldError NoSuchMethodError NoClassDefFoundError UnsatisfiedLinkError VerifyError BootstrapMethodError ClassCircularityError ClassFormatError UnsupportedClassVersionError UnsupportedClassVersionError ExceptionInInitializerError IncompatibleClassChangeError AbstractMethodError IllegalAccessError InstantiationError NoSuchFieldError NoSuchMethodError AbstractMethodError IllegalAccessError InstantiationError NoSuchFieldError NoSuchMethodError NoClassDefFoundError UnsatisfiedLinkError VerifyError ThreadDeath VirtualMachineError InternalError OutOfMemoryError StackOverflowError UnknownError InternalError OutOfMemoryError StackOverflowError UnknownError Exception CloneNotSupportedException InterruptedException IOException FileNotFoundException SocketException ConnectException UnknownHostException ReflectiveOperationException ClassNotFoundException IllegalAccessException InstantiationException InvocationTargetException NoSuchFieldException NoSuchMethodException RuntimeException ArithmeticException ArrayStoreException ClassCastException ConcurrentModificationException EnumConstantNotPresentException IllegalArgumentException IllegalThreadStateException NumberFormatException IllegalMonitorStateException IllegalStateException IndexOutOfBoundsException ArrayIndexOutOfBoundsException StringIndexOutOfBoundsException NegativeArraySizeException NullPointerException SecurityException TypeNotPresentException UnsupportedOperationException CloneNotSupportedException InterruptedException IOException FileNotFoundException SocketException ConnectException UnknownHostException FileNotFoundException SocketException ConnectException ConnectException UnknownHostException ReflectiveOperationException ClassNotFoundException IllegalAccessException InstantiationException InvocationTargetException NoSuchFieldException NoSuchMethodException ClassNotFoundException IllegalAccessException InstantiationException InvocationTargetException NoSuchFieldException NoSuchMethodException RuntimeException ArithmeticException ArrayStoreException ClassCastException ConcurrentModificationException EnumConstantNotPresentException IllegalArgumentException IllegalThreadStateException NumberFormatException IllegalMonitorStateException IllegalStateException IndexOutOfBoundsException ArrayIndexOutOfBoundsException StringIndexOutOfBoundsException NegativeArraySizeException NullPointerException SecurityException TypeNotPresentException UnsupportedOperationException ArithmeticException ArrayStoreException ClassCastException ConcurrentModificationException EnumConstantNotPresentException IllegalArgumentException IllegalThreadStateException NumberFormatException IllegalThreadStateException NumberFormatException IllegalMonitorStateException IllegalStateException IndexOutOfBoundsException ArrayIndexOutOfBoundsException StringIndexOutOfBoundsException ArrayIndexOutOfBoundsException StringIndexOutOfBoundsException NegativeArraySizeException NullPointerException SecurityException TypeNotPresentException UnsupportedOperationException As with PHP and other prominent languages, the Java exception class hierarchy was built around two distinct categories: Errors and Exceptions . According to the official documentation, an Error ‚Äúindicates serious problems that a reasonable application should not try to catch.‚Äù This category includes things like AssertionErrors and ThreadDeath , which should give an idea of the severity of these types of errors. It is generally considered good practice not to explicitly catch Error classes in code, since they should be dealt with through a change in the application architecture or refactoring, rather than catching (and likely ignoring) them. On the other hand, Exceptions indicate ‚Äúconditions that a reasonable application might want to catch.‚Äù These are more typical errors that occur from time to time in most applications, particularly during development. Stuff like ArithmeticExceptions and IllegalArgumentException are found in the Exceptions subclass category. Below we‚Äôll briefly discuss each high-level subclass that extends (or inherits from) Error and Exception . The goal here is just to give a quick overview of these categories, as much more detailed looks into specific exceptions will come in future articles. AssertionError ‚Äì Thrown when an assertion has failed. LinkageError ‚Äì Thrown when a class dependency has some form of incompatibility, due to changes made after compilation. ThreadDeath ‚Äì Thrown when the (now deprecated) Thread.stop() method is invoked. VirtualMachineError ‚Äì Thrown when something goes wrong with the Java Virtual Machine, such as running out of resources. CloneNotSupportedException ‚Äì Thrown when attempting to clone an object of a class that doesn‚Äôt implement the Cloneable interface. InterruptedException ‚Äì Thrown when a thread is active, but is somehow interrupted in the process. ReflectiveOperationException ‚Äì Thrown when attempting to perform an invalid reflection operation, such as loading a class that doesn‚Äôt exist or calling a method that cannot be found. RuntimeException ‚Äì Thrown during normal execution of the application and operation of the Java Virtual Machine. This category includes the most common exceptions such as ArithmeticException and IndexOutOfBoundsException . That‚Äôs just a brief overview of the built-in Java exception class hierarchy, but stay tuned for more in-depth articles looking at each of these exceptions in finer detail. Also, be sure to check out Airbrake‚Äôs powerful Java Error Monitoring software, designed to help you and your team quickly and easily handle all Java exceptions! Try Airbrake free for 30 days .", "date": "2017-07-08"},
{"website": "Airbrake", "title": "JavaScript Error Handling ‚Äì Using //@ to Indicate SourceURL Pragmas is Deprecated SyntaxError", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/invalid-source-map-url", "abstract": "Moving right along through our JavaScript Error Handling series, today we‚Äôll be tackling the Invalid Source Map Format JavaScript error.  Although the Invalid Source Map Format error is technically a descendant of the base SyntaxError object, it applies to a very specific case; when using a deprecated symbol to indicate the URL for a source map , which allows for easier debugging of obfuscated code. In this article we‚Äôll explore a bit more about the Invalid Source Map Format error, including where it fits in the JavaScript Exception hierarchy, and what causes Invalid Source Map Format errors.  We‚Äôll also examine the concept of source mapping that is so tightly tied to Invalid Source Map Format errors, so let‚Äôs get going! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the Error object. The Invalid Source Map Format error is a specific type of SyntaxError object. While the error message itself from an Invalid Source Map Format error pretty much says everything you need to know about solving it (replace //@ with //# ), it doesn‚Äôt explain anything beyond that quick fix.  To understand just what Invalid Source Map Format errors mean, we‚Äôll need to spend a bit of time examining source maps in the context of JavaScript. As many front-end web developers can attest, the name of the game for delivering solid web application experiences is often speed, speed, speed.  The longer it takes for a page to finish loading, the more likely it is the user will move onto something else.  Consequently, modern web development relies heavily on tools that help reduce load times, including a process known as minification . Most commonly applied to JavaScript code, minification takes the full, origin source code and shrinks it down to the minimal number of characters necessary for the JavaScript engine to still execute the code identically to the original intention.  There are numerous tricks involved with minification that are well beyond the scope of this article, but in the simplest terms, minifying a JavaScript file typically performs two main tasks: Replaces long object names with single-character names and removes all unnecessary whitespace. Since each character in a file represents a byte of data that must be sent from the server to the client, this minification process can dramatically reduce the overall file size of JavaScript files, prior to sending them to the client for execution and display of the web site. Now, one common problem with minification is that, since the intent is to produce the smallest footprint of code as possible, minified code is generally unreadable to humans.  As an example, here‚Äôs the full, original source code of the code.js file: So we have a few simple functions and then we call those functions to increment a number.  That‚Äôs all easy to read for a human developer, but it could be shrunk down significantly by being minified .  After minification , our new code-min.js file has dropped from 560 bytes to 272 bytes in size; more than a 50% reduction! Unfortunately, the code of our minified version is not very human-friendly: Since this isn‚Äôt a very complicated example, one could still probably spend the time to parse this and figure out what is going on, but it‚Äôs not efficient by any means. This presents a problem for developers who don‚Äôt have direct access to the source code when debugging inside their Chrome or Firefox browser: Viewing the source of most web pages (ours included) would simply show the minified code above, which is very difficult to debug with, especially compared to the original source code. The solution is source mapping . Source mapping provides a way of mapping the (often obfuscated) production code to the original source code that was authored by the developer. Keen observers may have noticed that our original code.js source file included a commented line at the bottom: //# sourceMappingURL=code-min.js.map .  This line tells our browser that we‚Äôve created a source map file, along with the URL it can be found at.  If this statement is present, when a developer attempts to view the source code in their browser‚Äôs debugger, the source map file provides a translation between the minified code and the original source code . For example, here is the source map file ( code-min.js.map ) that we produced for this example: It is actually in the common JSON format.  The basic fields indicate the minified file along with the original source files, then mappings which are automatically generated.  The result is when source mapping is enabled in the browser, a developer can view the original source code rather than the minified version, so debugging can take place ‚Äúwithin‚Äù the original code. Whew!  Now that we have a basic understanding of what source mapping is, we can look back at our Invalid Source Map Format error and see where it comes from.  As mentioned above, the text of the error pretty much says it all.  Originally, the source mapping directive pragma was to be a comment followed by an at sign ( //@ ).  However, due to some compatibility issues with Internet Explorer (isn‚Äôt it always IE?), this was later changed to a comment followed by a pound sign ( //# ). Therefore, if we were to change our original source code in code.js to include the deprecated pragma of //@ , we‚Äôd get an Invalid Source Map Format error: Sure enough, Firefox issues a warning (Chrome does not): To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-06-28"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì NoClassDefFoundError", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/noclassdeffounderror", "abstract": "Today we continue our adventure through the Java Exception Handling series with a close look at the java.lang.NoClassDefFoundError. In most cases, a java.lang.NoClassDefFoundError is thrown when a class reference was available during compile time, but has since disappeared (for whatever reason) during execution. In this article we‚Äôll explore the java.lang.NoClassDefFoundError in more detail, looking at where it resides in the Java Exception Hierarchy, along with some simple example code and module distribution practices that might lead to java.lang.NoClassDefFoundErrors being thrown in day-to-day development. Let‚Äôs get on with the show! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. java.lang.Error inherits from java.lang.Throwable . java.lange.LinkageError inherits from java.lang.Error . Lastly, java.lang.NoClassDefFoundError inherits from the java.lange.LinkageError class. Understanding what might cause a java.lang.NoClassDefFoundError requires an understanding that running a Java application typically hinges on two major steps: The application must be compiled, which forces Java to grab all relevant and referenced packages/modules from the specified classpath , before it can generate executable code. The application or target script is then executed, utilizing all previously-compiled packages to properly gain access to the required classes. That‚Äôs a extremely simplified explanation, but the critical aspect is that Java cannot execute an application without first compiling all the relevant code. To illustrate, here we‚Äôve setup a basic project called ClassLoader that contains two independent classes that we‚Äôll be using: io.airbrake.Main and io.airbrake.Book , which we‚Äôre going to include in our compilation and make use of in the code. Because Java is so dependant on how directory and file structures are built (at least, without using a helper framework like Maven or Gradle ), for this example it‚Äôll be important to show how our project is configured. Here‚Äôs our basic file structure, where coded entries are files and plain entries are directories: ClassLoader Book io airbrake Book.java ClassLoader io airbrake utility Logging.java Main.java Normally we‚Äôd place classes with identical parent namespacing (e.g io.airbrake.Book and io.airbrake.Main ) into the same directory, but it‚Äôs important for this example that we separate them. Once we‚Äôve compiled these classes we‚Äôve created an out/production directory in our main ClassLoader project directory that contains our converted .class files (this won‚Äôt always be true, as it depends on how you configure/build your own Java applications, but the overall concept is the same for most scenarios). Thus, our compiled output directory structure looks like this: ClassLoader out production Book io airbrake Book.class ClassLoader io airbrake utility Logging.class Main.class Many developers will probably use an IDE like IntelliJ IDEA or Eclipse when working with Java, which will (attempt) to automatically handle the classpath on your behalf, based on how you configure your project within the editor. For example, IntelliJ IDEA allows a developer to easily mark any directory as a \"Source Root\" , which informs the editor that it should add that directory to the classpath list for the current project during compilation and execution. For this reason, in most cases your development environment will do everything in its power to prevent you from accidentally getting in a situation where a java.lang.NoClassDefFoundError could be thrown. However, in some rare scenarios, particularly if you‚Äôre manually altering the classpath value, sometimes a java.lang.NoClassDefFoundError will pop up. To illustrate this possibility, we‚Äôll finally take a look at the basic code we‚Äôre using in this example: In essence, all we‚Äôre doing in Main.main() is creating a new Book instance then attempting to output a basic info string to the console. Remember that, in this particular example, the compiled Main.class and Book.class files are located in slightly different output directories, so we‚Äôll need to include both locations in our classpath value so things will run smoothly. Here we‚Äôre issuing the java console command and passing the -classpath parameter with both our ClassLoader and Book subdirectory locations as the two parent directories to be loaded. We‚Äôre then calling the io.airbrake.Main class, which will automatically run the Main.main() method for us: As we can see, the result is what we expected: a new Book was created and we output some basic information about it. Now, watch what happens if we remove the reference to where our compiled Book class is located ( ClassLoader/out/production/Book ) in the -classpath parameter value: Lo and behold, we‚Äôve caused a java.lang.NoClassDefFoundError to be thrown, which we were also able to successfully catch and output using the Logging.log() method. Essentially, what‚Äôs happening here is that our source code is configured correctly, and therefore we were able to compile everything just fine, since the JVM was able to locate the necessary io.airbrake.Book.java class file that was referenced. However, because we neglected to reference the compiled version of that Book.java class (in this case, in the form of Book.class , but often in .jar form or otherwise), the JVM couldn‚Äôt locate Book during runtime, so a java.lang.NoClassDefFoundError is thrown. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-07-16"},
{"website": "Airbrake", "title": "Node.js Error Handling ‚Äì ERR_BUFFER_OUT_OF_BOUNDS", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs-error-handling/err_buffer_out_of_bounds", "abstract": "Node.js contains a plethora of possible errors it can throw during execution, so today we‚Äôll continue our in-depth Node.js Error Handling series by looking at one of the many System Errors Node produces: the ERR_BUFFER_OUT_OF_BOUNDS . Node throws a System Error when an exception occurs within the program‚Äôs runtime environment, and such errors are typically an indication that there was an operational problem within the application. An ERR_BUFFER_OUT_OF_BOUNDS error indicates that an operation was made outside the bounds of a Buffer object. Throughout this article, we‚Äôll explore the ERR_BUFFER_OUT_OF_BOUNDS system error by looking at where it sits in the overall Node.js Error Class Hierarchy. We‚Äôll also explore the basic process of using Buffers in Node.js, which will illustrate how passing invalid bounds arguments (offsets or lengths, in particular) to some Buffer class methods can throw ERR_BUFFER_OUT_OF_BOUNDS errors. Let‚Äôs get into it! Most Node.js errors inherit from the Error base class, or extend from an inherited class therein. The full error hierarchy of this error is: Error SystemError ERR_BUFFER_OUT_OF_BOUNDS SystemError ERR_BUFFER_OUT_OF_BOUNDS ERR_BUFFER_OUT_OF_BOUNDS Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. The Buffer class was introduced into early versions of Node.js to give developers a means of reading and manipulating streams of binary data. Since then, however, JavaScript ES6 (ECMAScript 2015) introduced the TypedArray object to handle binary data buffers. Therefore, modern Node.js versions have adapted the Buffer class to focus on implementing a more optimized Uint8Array API. It‚Äôs also worth briefly noting that the Buffer class constructor has been deprecated , so the process of actually creating buffers should use the Buffer.from() , buffer.allocUnsafe() , and buffer.alloc() methods. For our example code we‚Äôll be using the simplest of these, Buffer.from(value, encodingOrOffset, length) , which retrieves a binary buffer representation of the first value argument passed to it. We can also specify additional arguments to alter the offset or length of the returned buffer. To test this stuff out we have a simple bufferFromValue (value, encodingOrOffset, length) helper method: As you can see, this method is merely a wrapper for the aforementioned Buffer.from(...) method, but it allows us to perform some simple, self-contained tests by passing different arguments. As such, we begin our tests by creating a simple data Uint8Array that is populated with the first five numeric values as keys (i.e. 0 , 1 , 2 , 3 , and 4 ): We then pass the data.buffer value to bufferFromValue(...) to ensure everything works. Sure enough, the output we get is our Buffer object with the five expected values: Next, let‚Äôs try passing an offset value of 3 : This also works just fine and outputs the same Buffer object as before, except we‚Äôve offset the result by three values: Cool! However, what happens if we pass an offset value that exceeds the bounds of the original array-like object? As you can certainly guess, this throws a RangeError with a code property of ERR_BUFFER_OUT_OF_BOUNDS : Since our buffer bounds only go up to 5 , an offset of 6 or higher is invalid. Similarly, let‚Äôs try passing an in-bounds offset with an invalid length argument: Once again, this throws an ERR_BUFFER_OUT_OF_BOUNDS RangeError , this time with the indication that length is outside the buffer bounds: If we dig into the Node.js Buffer class source code we can quickly find exactly where these errors originate from. In this case, they are both thrown within the fromArrayBuffer(obj, byteOffset, length) internal function : Airbrake‚Äôs robust error monitoring software provides real-time error monitoring and automatic error reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize error parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and try Airbrake free for 30 days . See for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-01-29"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì InvocationTargetException", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/invocationtargetexception", "abstract": "Moving along through our in-depth Java Exception Handling series, today we‚Äôll take a closer look at the java.lang.reflect.InvocationTargetException. The java.lang.reflect.InvocationTargetException is thrown when working with the reflection API while attempting to invoke a method that throws an underlying exception itself. In this article we‚Äôll explore the InvocationTargetException in more detail by looking at where it resides in the Java Exception Hierarchy. We‚Äôll also dig into a few functional reflection code samples that will illustrate how java.lang.reflect.InvocationTargetExceptions are typically thrown, showing how you might handle them in your own code, so let‚Äôs get crackin‚Äô! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. java.lang.Exception inherits from java.lang.Throwable . java.lang.ReflectiveOperationException inherits from java.lang.Exception . Finally, java.lang.reflect.InvocationTargetException inherits from java.lang.ReflectiveOperationException . Since the InvocationTargetException deals with reflection, let‚Äôs briefly talk a bit about that practice and why explicitly invoking a method via reflection might be useful. In the most basic sense, reflection allows the JVM and your underlying code to inspect classes, methods, interfaces, and the like during runtime, without having directly called or identified those objects during compilation. This powerful capability means that your code can find classes and invoke methods that it wasn‚Äôt originally designed to handle out of the box. To illustrate how invocation in Java works we have a few basic examples. To keep things simple, we‚Äôll start with the full working code sample below, after which we‚Äôll break it down in more detail to see what‚Äôs really going on: As briefly mentioned in the introduction, an InvocationTargetException is automatically generated by reflection-related objects, and wraps (or attaches) itself to the underlying, actual exception type that caused the problem. This occurs when calling the java.lang.reflect.Method.invoke() method, where that invocation target method throws an exception. To illustrate the issue we‚Äôve got a basic Book class with a few property getter/setter methods, along with a some extraneous methods ( getTagline() and throwException() ) that we‚Äôll explicitly call in the rest of our code: The invokeGetTaglineMethod() method shows a basic, working example of using Java reflection to invoke() a class instance method ( Book.getTagline() , in this case). The comments explain most everything that we‚Äôre doing, but the basic idea is that we starting by creating a Book instance object of book . We then need to instantiate a Class<?> object, so we get a reflection of io.airbrake.Book , from which we can retrieve the declared getTagline() method. Using that Method instance of getTagline() we‚Äôre able to invoke() the method. Since this is an instance method, we need to pass an instance of the object as the first argument, so this is where we use the book object that was created at the beginning. Executing this code results in the book object output, followed by the output from calling getTagline.invoke(book) , as expected: Now that we‚Äôve seen how invocation works, let‚Äôs try invoking a different Book instance method, specifically the Book.throwException() method. As its name suggests, Book.throwException() merely throws an Exception , using the passed String argument for the message: To test this we‚Äôll execute the invokeThrowExceptionMethod() method, which performs almost exactly the same code as our previous example, except the calls to getDeclaredMethod() and invoke() differ slightly since we‚Äôre also passing arguments to the invoked method: Since the Book.throwException() method we‚Äôre invoking explicitly throws an error, our expectation is that executing the above code will result in a java.lang.reflect.InvocationTargetException being thrown. Sure enough, that‚Äôs exactly what happens: Normally we‚Äôd only catch the parent InvocationTargetException in this scenario, which indicates the it was \"Caused by: java.lang.Exception ...\" . However, a Throwable object implements the getCause() method, which returns the causal exception (if applicable). In the case of a InvocationTargetException instance, the cause is always the underlying exception object that occurred inside the invoked method, so checking for a cause when catching such exceptions is a good idea. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-07-24"},
{"website": "Airbrake", "title": "CakePHP 2.0 Airbrake Plugin", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/cakephp2-0", "abstract": "Craig Morris has just completed a new notifier for CakePHP 2.0. CakePHP is a rapid development framework for PHP.¬†Configuration is as simple as dropping in the files and including them in the Bootstrap. app/Config/bootstrap.php Then tell Cake to use those classes as the error and exception handler in app/Config/core.php. Download the notifier from GitHub. https://github.com/morrislaptop/AirbrakeCake", "date": "2011-12-27"},
{"website": "Airbrake", "title": "Airbrake frontend migration to Heroku", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-migration-to-heroku", "abstract": "Airbrakers‚Äìthank you for your patience with our major May migration. You‚Äôve asked us to share details of our new infrastructure and this will be the first of many posts where we peel off one aspect of our deployment and share our approach. Today we‚Äôre going to talk about our Frontend. From 2008 through 2011, the entire Airbrake codebase consisted of a monolithic Ruby on Rails application. Over time this application became optimized to handle an ever-increasing volume of customers. [ Graph showing increased numbers of exception processed by Airbrake. ] At the end of 2011 we began a major backend rewrite that allowed the separation of the user-facing code (the ‚Äúfrontend‚Äù) and the mainly-api focusing code (the ‚Äúbackend‚Äù) that our 13 exception reporters use. Ruby , iOS , Coldfusion , Sinatra , .net , PHP , Android , Rack , Django , AppEngine , Redis , Merb , log4j , Chef , Erlang , Javascript , Java , and Drupal Earlier this year we began testing our new backend with a subset of our users. At the same time, we looked for opportunities to allow us to make faster progress on our frontend. Giving us the ability to do things like WebHooks (in beta), GitHub Integration , Commenting , Better Debugging (Simulate Error) and more‚Ä¶ (these all came to Airbrake in today‚Äôs release!) Originally, we intended to host our new frontend (still Ruby on Rails) on Amazon EC2. We made this decision as our previous hosting facility was unable to keep up with our high-throughput needs‚Äìand our experience on Amazon in our other businesses ( Exceptional and RightSignature) was positive in their ability to provision reliable service. During our migration planning, we also brought up a staging server on Heroku (a PaaS that operates on Amazon). Amazingly‚Äìwe had thought Airbrake to be sluggish when on our dedicated hosting provider‚Äôs servers; however, the Heroku app was significantly faster . It turns out that much of our performance was being wasted on calls within high-latency network calls to our support services (REDIS, Memcache, Legacy Mongo and our MySQL database). On Heroku (and therefore Amazon), these became low-latency, high-speed calls. We spoke to the Heroku team and heard their commitment to making Heroku a platform that could handle Airbrake (at least our frontend) and we decided to use Heroku as one component of a robust deployment environment. We have a commitment to demonstrating Heroku‚Äôs world class hosting environment by rocking Airbrake for their team and their most excellent users. Oren Teich, Heroku COO. With this support, we continued to focus on the components of our migration. We‚Äôve added a pair of NGINX + HAProxy gateways on Amazon AWS XL instances (XL for network throughput). These serve Airbrake.io‚Äôs root domain. Requests to /notifier_api/v2/notices are routed to our new backend and the rest of the requests head onward to our frontend servers. We launched two weeks ago with our own EC2 application pool as well as Heroku serving our application tier for our frontend. Unfortunately, our HAProxy configuration did not correctly account for session handling‚Äìand our ad-hoc attempts to remedy were causing more pain than relief‚Äìand during a fix attempt, we sent all frontend traffic to our Heroku application servers. We started to bump our Heroku dynos to match our usage and met demand at just over 75 dynos. We have identified a large number of our users have scripted access to /errors.xml and other popular endpoints. Having lots of these frequent requests necessitates a high dyno count. But, besides the dyno count, Heroku showed itself to be stably handling our application load (besides a few of these ¬†that occurred as our initial 20 dynos were saturated). We let this architecture settle in with our usage patterns and for the past two weeks we saw steadily faster-than-before access times for our users. We‚Äôve been monitoring our support‚Äìand we have a few issues‚Äìwhich are mainly due to our new backend (next week!)‚Äìbut our frontend has been blissfully consistent. ‚Äì Jonathan. One Million is a Lot of Downloads: A History of Airbrake :: Airbrake says: February 22, 2013 at 1:25 pm [‚Ä¶] 18 2012: The merger brings lots of new changes‚Äìgood changes‚Äì including a frontend migration to Heroku to accommodate a rapidly growing user [‚Ä¶] One Million is a Lot of Downloads: A History of Airbrake says: February 14, 2015 at 2:06 am [‚Ä¶] 18 2012: The merger brings lots of new changes‚Äìgood changes‚Äì including a frontend migration to Heroku to accommodate a rapidly growing user [‚Ä¶]", "date": "2012-05-18"},
{"website": "Airbrake", "title": "Airbrake Add-on available on AppHarbor.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-appharbor-addon", "abstract": "We‚Äôre happy to announce that Airbrake is now¬†available¬†in the AppHarbor add-on catalog . ¬†AppHarbor is a fully hosted .NET Platform as a service; letting you scale and deploy any standard .NET applications. The first instance is free, with Additional instances costing $0.05/hr . Create an account at https://appharbor.com/user/new .", "date": "2011-12-14"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì IndexOutOfBoundsException", "author": "Unknown", "link": "https://airbrake.io/blog/java/indexoutofboundsexception", "abstract": "Moving along through the detailed Java Exception Handling series we‚Äôve been working on, today we‚Äôll be going over the IndexOutOfBoundsException . The IndexOutOfBoundsException is thrown when attempting to access an invalid index within a collection, such as an array , vector , string , and so forth. It can also be implemented within custom classes to indicate invalid access was attempted for a collection. In this article we‚Äôll explore the IndexOutOfBoundsException by starting with where it resides in the overall Java Exception Hierarchy. We‚Äôll also examine some fully functional Java code samples that will illustrate both the default API invocation of IndexOutOfBoundsExceptions , along with a custom class example of how you might throw them in your own code. Let‚Äôs get crackin‚Äô! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Exception java.lang.RuntimeException IndexOutOfBoundsException java.lang.Throwable java.lang.Exception java.lang.RuntimeException IndexOutOfBoundsException java.lang.Exception java.lang.RuntimeException IndexOutOfBoundsException java.lang.RuntimeException IndexOutOfBoundsException IndexOutOfBoundsException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Coming across an IndexOutOfBoundsException in standard API code simply means an invalid index was accessed for a collection. To illustrate we have two methods, createArrayOfSize(int size) and getElementByIndex(int[] array, int index) : As you can see, createArrayOfSize(int size) just creates and returns a new int[] array of the specified size, populating elements with random integers. We then use getElementByIndex(int[] array, int index) to attempt to retrieve specific elements of the passed int[] array parameter that correspond with the specified int index parameter. To test this out we‚Äôll start by creating a 10-length array, output it to the log, then attempt to retrieve a specific element at index 5 : Here‚Äôs the output we get after executing the above code: Everything seems to be working as expected. Our initial array contains 10 random integers and the element at index 5 is 85 , as confirmed by the call to getElementByIndex(int[] array, int index) . Now, let‚Äôs try getting an element at an index outside the bounds of our array ( 10 , in this case): The output shows we‚Äôve thrown a specific ArrayIndexOutOfBoundsException , which is an exception class that inherits from IndexOutOfBoundsException : That‚Äôs all well and good, but what happens if we want a more descriptive exception message? We can implement IndexOutOfBoundsExceptions directly into our own custom classes, to be thrown when attempts to access an invalid index would cause problems. For example, we‚Äôve created a simple Page class that contains a single content field to store the content of the Page : We then have a modified Book class that contains a Page[] pages field array, allowing us to specify a series of Page elements associated with the Book . We have methods to both get and set Pages within the Book instance, but the most important method is setPage(Page page, int index) , which allows us to explicitly change the Page element at the specified int index . However, if the passed index is invalid or exceeds the current bounds of our pages field length, we explicitly throw a new IndexOutOfBoundsException indicating the problem: To test this out we start by instantiating a new Book and adding some content to the first few three pages: This produces the initial Book output without any Pages content, then once we add them via the setPages(Page[] pages) method, the output shows our Pages have been added successfully: Cool! Now let‚Äôs try this setPageAtIndex(Book, book, Page page, int index) helper method, which is just a wrapper for the Book.setPage(Page page, int index) method: Here we‚Äôre passing our previous book instance, a new fourth Page , and an index of 3 (to indicate the fourth page): Since we explicitly check the validity of the passed int index parameter in Book.setPage(Page page, int index) , this attempt to set a Page for an invalid index throws our custom IndexOutOfBoundsException : The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Discover the power of Airbrake Error Monitoring and try it free for 30 days .", "date": "2017-10-26"},
{"website": "Airbrake", "title": "Planned Airbrake migration ‚Äì ‚ô• Go & ‚ô• Riak.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/planned-airbrake-migration-love-go-love-riak", "abstract": "Earlier this month Airbrake processed its 8th billionth unique error, we‚Äôve had peak days of 100 millon errors a day from our first wave of processing. Our rapidly expanding growth hit the limits of what Ruby could handle. After reviewing a few options node.js , Erlang , clojure we settled on Go as it provides the right mix of message queuing, systems programming and exceptional concurrency. To deal with our ever expanding volume of data and to provide search and graphing we have migrated our datastore from Mongo to Riak. Expect to see graphs, search and smarter notifications in the coming months. The site should will keep working the same as normal, but if you have a restricted firewall you will need to add 75.101.128.85 to the list of outgoing IPs. We will soon update our gem to send all traffic to http://api.airbrake.io , we will redirecting all old traffic to this new endpoint but we recommend all third parties update their libraries. We‚Äôre currently importing old exceptions into our fresh new database and riak datastore. All errors should be present but expect all backtraces and ‚Äúoccurrence data‚Äù to be imported steadily over the next few days. Photo from http://www.luckham.org/", "date": "2012-04-25"},
{"website": "Airbrake", "title": "Seattle Airbrake Cribs. Substantial", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/substantial", "abstract": "I was lucky enough to get to meet the Substantial team while in Seattle. It was one of the best designed spaces I‚Äôve been to, with a strong imprint from the Substantial staff. The DJ booth isn‚Äôt just for show, 6 of the¬†substantial¬†staff are DJs. There acoustic knowledge helped build an acoustically perfect meeting room; I‚Äôm jealous. Donte. Do you have a cool office? Let ben@airbrake.io know, I can visit offices in SF anytime and I‚Äôm always happy to travel to check out interesting spaces. Win a ticket to Eurucamp! - Airbrake :: Airbrake says: August 9, 2012 at 12:56 am [‚Ä¶] the trend of great technology offices we are asking people to take a photo of them in there own habitat and tweet or [‚Ä¶] Quora says: December 21, 2012 at 6:56 pm What are some innovative startup office designs?‚Ä¶ I‚Äôve been fortunate to vist over 50 startup offices in 2012, from small startup offices in Poland to Facebooks old and new campus. It‚Äôs common to see the same sorts of innovation in offices. Idea Paint, Call rooms, ‚Äòhang out / nap‚Äô areas and someti‚Ä¶", "date": "2012-08-01"},
{"website": "Airbrake", "title": "Swag, Giveaways and Prizes.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/swag-giveaways-and-prizes", "abstract": "It‚Äôs been a busy year at Airbrake HQ, the team has been busy working on scaling out the service. ¬†We‚Äôve been doing a ton of work and have been super busy [expect end of year report soon]. We‚Äôve had a busy year of swag, stickers, frisbees and prizes. We‚Äôve not¬†successfully¬†delivered on all promises of free t-shirts.. but we can promise that they‚Äôll be out in 2013. In this post I wanted to feature Chris Lehmann, the lucky winner of a $500 gift certificate for helping fill in our DevOps survey. The group I work for (PICA) sells medical malpractice insurance. ¬†We use Airbrake for error logging in our customer portals (along with other internal applications). ¬†Being proactive in handling problems in important to us, since often it‚Äôs a policyholder on the other end that has had a less than desirable¬†experience¬†with one of our sites. ¬†Airbrake lets us contact our customers as soon as something goes wrong (our site is primarily used by policyholders that we have contact information on) rather than waiting for them to call our support team. ‚Äì Chris Lehmann", "date": "2012-12-16"},
{"website": "Airbrake", "title": "Airbrake & Exceptional Customers Infographic", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-exceptional-customers-infographic", "abstract": "Today we made the front page of GigOm . We‚Äôve seen great growth in a last few months and completed major backend work on both products. We‚Äôve been building a stable platform that will let us rebuild our notifications, ¬†provide awesome search and a super blazing fast UI. Today I‚Äôm happy to share these stats from the Airbrake and Exceptional user base. ¬†A big thank you to all Airbrake + Exceptional users for making this possible. ¬†Lot of amazing stuff is in the works. @benarent and the @airbrake team. One Million is a Lot of Downloads: A History of Airbrake :: Airbrake says: February 22, 2013 at 9:32 pm [‚Ä¶] 21, 2012:¬†Airbrake makes the front page of GigaOm, both a marker of our dramatic progress, and a great piece of [‚Ä¶]", "date": "2012-09-21"},
{"website": "Airbrake", "title": "The ROI of SWAG: Frisbee Edition.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/swag-roi-frisbee-edition", "abstract": "For the past month, we ran a swag experiment where we offered a free frisbee to anyone who upgraded or signed up during the month of August. We were soon to take a delivery of 200 frisbees, but we we didn‚Äôt know who to send them to. This is the story of what¬†happened. TL:DR. ¬†We made developers happy with ribbons and frisbees. One user upgraded! For the past 10 months, we‚Äôve been using Intercom as a CRM for SaaS and this has given us a much greater insight into our user base as well as being a key tool for meeting our customers. We‚Äôve been to offices in Krakow, London, San Francisco and we even ran a last minute event in Beijing. Intercom can be used to find highly active users, and along with the awesome automated messages, we use it as a 21st century BI tool. Sometimes we just load the map view and hatch plans for world domination! Intercom locates users using their IP address, making location-based messages simple and using this feature we know there are over 800 Airbrake users in San Francisco. We quickly knew that we could very quickly surprise and delight many of our customers who are only used to getting bad news from us (Reporting that they have a broken app) . After identifying our top 30 users in San Francisco (100 plus logins), our next step was to get a pinpoint on their offices. We could have gotten this data from our billing information, but we know that many companies have different billing addresses from their physical offices. Our hack to get physical location data was to cross reference domains / account names on FourSquare. FourSquare has an impressive search interface and accurate address information. Armed with a spreadsheet full of addresses, our next step was to prepare the frisbees. We opted for handwritten notes (yeah.. when was the last time you got of those) and orange ribbon.. because devs like ribbon to. It took around 2 hours to prepare all the frisbees, so we knew it would take a while to deliver all the frisbees to the mainly SOMA, Mission and Downtown addresses. We posted the job on TaskRabbit, and before long, we had several bids. A frisbee enthusiast opted for the task and undercut the competition. Colin S. came armed with a scooter and a logistics map. After sending out the frisbees we had some immediate tweets , and one or two e-mails of thanks. I sent an e-mail out to all 30 recipients with the short questions below. I got replies from AirBnB, memolane, TaskRabbit, threadup.com, Goodreads. The results were interesting. Everyone was surprised to get a frisbee but not shocked that we found their address. The mean level of excitement was a mean excitement level of 7.8, which is well on the way to loving it. Customer love is a worthwhile activity‚Ä¶ and something that we think is important. Having a closer connection and personal connection is always going to decrease churn.. but the real ROI proof of the pudding is did anyone upgrade? The resounding answer to Was a resounding No . I consider the reasons was that there is little direct relationship between SWAG and paying more for a SaaS service. It did create an icebreaker to the new Airbrake Team; making local teams more likely to give us valuable product feedback. As a result of the frisbee exercise, I met with the TaskRabbit Dev team. TaskRabbit had been using Airbrake for a while but weren‚Äôt aware of some recent feature updates. As a result TaskRabbit did successfully upgrade to one of our Pro plans. 60 frisbees from Custom Frisbee cost $533.34 Letters and ribbon came in at $60 Delivery $79 Total: $672.34 So what‚Äôs the ROI of the frisbee? Over a 6 month period, this was a worthwhile activity. Along with providing a different and fun outdoor swag item, feedback was very positive. I‚Äôm now planning on a doing a larger swag deployment with our long awaited Airbrake Tees. To anyone waiting for one; we have about 200 to send out. They will arrive, I promise. Thank you for reading. We hope this is useful for any startup thinking of sending swag out. If you would like a frisbee, send me an email‚Äì we still have 20 left.¬†A big thanks to AirBnB, memolane, TaskRabbit, threadup.com, Goodreads for their feedback and for the other 25 Airbrake users for not being freaked out by personalised frisbee delivery. Careers at Airbrake | Airbrake says: March 18, 2014 at 11:28 pm [‚Ä¶] You get excited by creativity engaging with customers. [‚Ä¶]", "date": "2012-10-02"},
{"website": "Airbrake", "title": "Win a ticket to eurucamp!", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/win-a-ticket-to-eurucamp", "abstract": "Airbrake is proud to be sponsoring eurucamp 2012. Eurucamp2012 is a community-organised not-for-profit ruby conf with Sessions, Hacking, Siestas and grilling, all on the largest lake in Berlin and we have a FREE ticket! EuruCamp starts on 17 ‚Äì 19 August 2012. Following the trend of great technology offices we are asking people to take a photo of them in there own habitat and tweet or instagram the photo with the #wineurucamp2012 if you post on twitter please @airbrakeapp. We‚Äôll be picking the winner on the 14th of August, next Tuesday. Happy Snapping! The first entry from our very own Morgan. We‚Äôre happy to have Hrvoje ≈†imiƒá representing the Airbrake team. If you‚Äôre intressted in meeting him or talking about Airbrake. Hit him up on Twitter .", "date": "2012-08-09"},
{"website": "Airbrake", "title": "1.8 Million Airbrake Gem Downloads", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/one-million-downloads", "abstract": "Airbrake hit one million gem downloads this week! Cheers and streamers! Fireworks! Champagne for everyone! Our diligent frisbee packing, our international meet-ups, our long hours of coding into the night weren‚Äôt just for fun. You like us! You really like us! Or you just like being told when your site‚Äôs been bad. In any case, we‚Äôre excited that our family has grown so large, and excited to keep getting better and better. To commemorate the Great Event, let‚Äôs take a retrospective walk down memory lane, shall we? 2008: Airbrake gets its humble beginning as Hoptoad, one of three (sort of) answers to the wide gaping gap in the market left by ExceptionNotifier for Ruby on Rails. July 15, 2011: Hoptoad becomes Airbrake . February 7, 2012: It‚Äôs publicly announced that¬†Exceptional is acquiring Airbrake. The two combine their powers for good. Together, we strive for better, smarter exception-tracking, better developerment, better user experience, and a more valuable process for capturing and managing errors. Simultaneously, our first international meetup as partners occurs in Berlin, Germany. May 18 2012: The merger brings lots of new changes‚Äìgood changes‚Äì including a frontend migration to Heroku to accommodate a rapidly growing user base. September 7, 2012: We hit 500,000 downloads. It was a thrill at the time; little did we know we were to double that number in just five months‚Äô time. September 21, 2012: Airbrake makes the front page of GigaOm , both a marker of our dramatic progress, and a great piece of publicity. February 15, 2013: We hit 1 million downloads! And that‚Äôs one million just as the newer incarnation, Airbrake. Over 800,000 Hoptoad downloads have slowly, step by step, leapfrogged us to this point. Take a look at the commit history: Additions and deletions per week: All of which to say, THANK YOU! Thank you¬†to everyone who‚Äôs spent time and effort maintaining or contributing to our gem , and all of our customers and users who have helped us improve the product. We have a lot of updates (JSON, Asynchronous) on the way and can‚Äôt wait to push forward!¬†It‚Äôs been a wild ride, and we‚Äôre just getting started!", "date": "2013-02-22"},
{"website": "Airbrake", "title": "Airbrake now supports Swift bug tracking", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/airbrake-supports-swift-bug-tracking", "abstract": "We‚Äôre excited to annouce that you Airbrake-IOS notifier now supports swift projects. ¬†One installed this means you can capture all swift exceptions and enjoy the same Airbrake notifications. When you add Airbrake iOS to your Swift project, Xcode will automatically add the bridging header for ‚ÄòABNotifier‚Äô class. First, set up the ABNotifer in your app delegate at the beginning of your ‚Äòfunc application(application: UIApplication!, didFinishLaunchingWithOptions launchOptions: NSDictionary!) -> Bool {‚Äò Download the Source from https://github.com/airbrake/airbrake-ios or you download from CocoaPods . Know more about Swift bug tracking using Airbrake.", "date": "2014-09-05"},
{"website": "Airbrake", "title": "Guest Post: Lager-Airbrake Notifier", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-news/lager-airbrake-notifier", "abstract": "Airbrake Notifiers send exceptions from your applications to Airbrake. The Notifiers are created by the developer community. Having a wide variety of notifiers for different programming languages and frameworks enables users to keep track of exceptions from all kinds of applications. This time¬†we are featuringRoberto¬†Ostinelli, who has written Lager-Airbrake notifier, a backend for Lager a logging framework for Erlang. Roberto: I have a¬†great pleasure to announce that today I‚Äôve released Lager-Airbrake notifier. If you are already using the popular logging framework [Lager]( https://github.com/basho/lager ) by Basho in your application, you might consider having an easy drop in component that will report the errors with the desired level of severity to AirBrake. Lager-Airbrake works as a Lager backend, it is therefore fully integrated with it, and easy to setup. In your project‚Äôs rebar.config file, add lager_airbrake as a dependency: Then include lager_airbrake_backend in your lager configuration: You‚Äôre done. Lager-Airbrake will try to use some heuristics to optimize the notification sent to Airbrake, so that errors can be easily differentiated. As you may know, in Erlang it is sometimes difficult to separate the errors based on their Type so some attempts have been done to address this reporting issue. You can check Lager-Aibrake here: https://github.com/ostinelli/lager_airbrake", "date": "2015-04-25"},
{"website": "Airbrake", "title": "Pivotal Tracker Integration", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/pivotal-tracker-integration", "abstract": "Today we rolled out Pivotal Tracker integration. You can now view Airbrake errors from within Pivotal Tracker [PT], and link activity back into Airbrake as a PT comment on the error it‚Äôs self. This has been a long requested integration, and as PT users ourself we‚Äôre excited about it. Setting up. There is a two stage setup, A Pivotal Tracker¬†integration and a webhook setup within Pivotal Tracker. The Airbrake¬†knowledge¬†base has a comprehensive how-to on integrating the two services. Please leave a comment with any feedback or send a mail to support@airbrake.io. Sign up for a Pivotal Tracker account and Airbrake account to get started with this integration.", "date": "2012-08-22"},
{"website": "Airbrake", "title": "Announcing the ‚ÄúOfficial‚Äù Airbrake Chrome Extension.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-chrome-extension", "abstract": "For the past few weeks we‚Äôve been building Airbrake Chrome Extension . ¬† While there are a few third party tools¬†available, ¬†we didn‚Äôt find anything that fitted our needs. ¬†The extension provides realtime¬†web-socket¬†notifications, a list view of exceptions and a button to replay errors. For all exceptions with a URL, we‚Äôve added a button that will allow you to replay that error. V2 will allow you to re-create that error in your staging and development¬†environment. ¬†This feature is experimental, we welcome your feedback. If you find the extension useful please be kind in your review. If you find a bug or have a feature request please send them to support@airbrake.io . We built our browser extension with Forge from Trigger . ¬†In the coming weeks we‚Äôll be launching a Firefox and Safari Extension. We‚Äôre ¬†working on a mobile app, better mobile support and more browser¬†extensions.", "date": "2012-01-17"},
{"website": "Airbrake", "title": "SMS Beta.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/sms-beta", "abstract": "Airbrake is excited to announce our SMS Beta. The SMS Beta is open to all US accounts on a Pro or higher account. Being able to quickly reply to errors has become increasingly important for airbrakers.¬†We‚Äôve been playing with the ‚ÄòSMS beta‚Äô for a month and we‚Äôll be overhauling the notification system to better¬†prioritise¬†and¬†escalate¬†errors. If you‚Äôre on a Pro, you‚Äôll see an option to receive SMS updates. This can be configured on a Per App basis by tweaking the project settings. The SMS feature is free during the beta, price will be¬†announced¬†after we make it GA. As always, we welcome your feedback. Please send comments to ben@airbrake.io", "date": "2012-12-16"},
{"website": "Airbrake", "title": "Airbrake + NewRelic Extension for Chrome.", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-newrelic-extension-chrome", "abstract": "John Manoogian @jm3 has built Airbrake + NewRelic Extension for Chrome, that provides Airbrake and NewRelic notification within the browser. You can download it from the Chrome Web Store , ¬†or repack it from his github Repo . We would like to thank John for using our API into this Extension. Have you done anything fun with our API ? Let us know and we‚Äôll share it on our blog.", "date": "2012-01-03"},
{"website": "Airbrake", "title": "How to Use Airbrake with your WordPress Site", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/how-to-use-airbrake-to-track-errors-on-your-wordpress-site", "abstract": "Using Airbrake on your WordPress site just got a whole lot easier. Where once you had to download third-party zip files from Github and manually upload them to your server root, now it‚Äôs as simple as installing a new plugin. You don‚Äôt need to know any code or even what an API key is to use it. Step #1: Mosey on over to Airbrake and click on the friendly orange ‚ÄúStart Your Free Trial‚Äù button to get going. Choose the plan that fits your needs, and fill out a simple form to create your account. Step #2: When you log in for the first time, Airbrake will prompt you to create your first project. You can put in all your Github information if you want, but it‚Äôs not necessary for now. Step #3: Go to your WordPress Dashboard and go to Plugins and Add New. Search for Airbrake‚Äì the one and only! Or just check out the page here . Install it, activate it, and you should see a friendly, simple control panel that looks like this: Step #4: Now we need your API key. Go back to your Airbrake account and make sure you‚Äôve clicked on the project you‚Äôre currently working with. Your API key will be easy to find, in the upper left-hand corner. Fill in the API key in the WordPress plugin, and make sure you‚Äôve changed the Status from ‚ÄúDisabled‚Äù to ‚ÄúEnabled‚Äù ( this is crucial ). Save Changes. Step #5: Now go back to your Airbrake account again, and click on Simulate Exception‚Äìit‚Äôs right underneath your API key in the sidebar. Not Even a Step: You‚Äôre done. Sit back and wait for your first exception notification to pop up in your inbox. Don‚Äôt get too comfy, though! It‚Äôs gonna show up in a matter of nanoseconds. If you want to get into the nitty gritty about using Resque, ignoring certain exceptions, etc., all the code is up on Github .", "date": "2013-03-15"},
{"website": "Airbrake", "title": "New feature: See trends with Airbrake error charts", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/error-charts", "abstract": "Deep in the Airbrake labs we‚Äôve been experimenting. We‚Äôve destroyed expensive equipment, set fire to our lab coats and singed our eyebrows in the heat and fire of many failed experiments. Finally, we emerge, wide-eyed and excited¬†to announce¬†our most requested and anticipated new feature:¬†error charts! In the project overview, these new error charts¬†provide an instant overview of the number of errors occurring in your application. They show when your application was deployed, and identify any rate-limiting that may have occurred. You can quickly¬†spot¬†trends and answer important questions like ‚Äúare we reducing our errors‚Äù, ‚Äúhow many times were we rate-limited, and when?‚Äù or ‚Äúdid that deploy reduce our errors?‚Äù. We‚Äôve also added inline charts to the error lists allowing you to see if specific errors are improving, or getting worse, at a glance. You can also¬†see a more detailed chart of occurrences for any specific error on the error overview page. We‚Äôve¬†been testing out these features internally at Airbrake for a few months, and we‚Äôve learned lots about our applications, leading us to some valuable bug fixes. It brings the Airbrake team great pleasure to have released this much-anticipated¬†feature. We hope that these new charts assist you on your quests to ship better software!", "date": "2015-10-28"},
{"website": "Airbrake", "title": "New: error chart resolutions", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/new-error-trend-chart-resolutions", "abstract": "Recently, we released error charts , allowing you to spot trends in your application errors. We‚Äôve received excellent feedback for this feature, and we find it incredibly useful internally at Airbrake. Today, we made charts even better, by introducing 3 resolutions: view 90 days, 90 hours, or 90 minutes of error data. We‚Äôve already found the 90 minute resolution great for monitoring recent deploys for any anomalies. These resolutions also provide greater visibility into when you hit your rate limits. We know you‚Äôll find this is another useful tool in your debugging toolbox!", "date": "2016-02-17"},
{"website": "Airbrake", "title": "Airbrake Android App, Say What?", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-android-app", "abstract": "Today we‚Äôre excited to launch Airbrake dashboard for Android Phone . It‚Äôs the only app in the Play Store that can track your errors right now.¬†From detailed¬†reports to¬†new designs of our beloved¬†mascot Arthur. The Airbrake android app displays¬†your exceptions, so you can¬†resolve them immediately. Simple. On the fly. 24/7¬†bug hunting. First few¬†features! We display every error in the universe . You just have to let us do the work for you by installing airbrake. It‚Äôs easy as 1-2-3 We provide comprehensive¬†reports of bugs: error class, error message, when they happened, and full backtraces. There‚Äôs a new search feature to find¬†the errors you want. Finally, you can resolve your airbrake errors on-the-go, anywhere and anytime About the Developer Jonathan Wu has been an intern on the Airbrake team for 3 months. Starting September, he will return to University of California, Berkeley for his last year of school. During his two-year career as a software developer,¬†he did¬†research at top universities, including Carnegie Mellon University and won in total 8 hackathons. His¬†passion to grow is contagious. Read more about his experience making Airbrake dashboard for Android Phone on the Rackspace blog.", "date": "2014-08-14"},
{"website": "Airbrake", "title": "Airbrake + ProjectManager.com, a Zapier Integration", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-projectmanager-com-a-zapier-integration", "abstract": "ProjectManager.com is an online project management platform for all levels of users. The software allows for users to create project and track progress down to the tiniest details. PM allows for multiuser collaboration and file hosting natively within the software. ProjectManager.com gives everyone from business managers to hardcore project managers the tools they need. Airbrake and ProjectManager.com have integrated through Zapier to make the life on you and your developers easier. Airbrake gives your team robust exception tracking in your software projects, allowing you to quickly react to errors. ¬†By targeting the exact piece of code, Airbrake helps your team find causes, efficiently getting you from bug to solution. You can generate tasks directly in ProjectManager.com whenever an error is found by Airbrake. This allows for users to not only track the bug in Airbrake, but address it as a team in ProjectManager.com. If you‚Äôd like to give this integration a try, follow the steps below. What you‚Äôll need: A Zapier account (If you don‚Äôt have a Zapier account don‚Äôt worry, there is a free version) An Airbrake account (you‚Äôll also need your API key, if you don‚Äôt know how to find it, this step by step will explain how to) A ProjectManager.com account (you‚Äôll also need your API key) Steps: Log into Zapier Click ‚ÄúMake a Zap‚Äù in the navigation bar of your Zapier account. Match your trigger settings to the ones seen below: Select your Airbrake account. If you haven‚Äôt connected your account, then click the orange connect button and follow the instruction in the dialog box seen below: Select your ProjectManager.com account. If you haven‚Äôt connected your account, click the orange connect button and follow the instructions in the dialog box seen below: Create custom filter. This makes only desired error notifications create tasks in ProjectManager. For this step by step, the below settings were used but you may customize yours to however like. ( Note: You can make more sophisticated filters by using ‚ÄúAND‚Äù or ‚ÄúOR‚Äù conditional filtering to include or exclude more errors.) Match up the platforms! Select the settings that best suit your needs. Test your Zap! Label and turn on your Zap. (If you do not turn on the Zap it will not work) This article was written by Brent Schiffman, Marketing Specialist at ProjectManager.com", "date": "2015-12-21"},
{"website": "Airbrake", "title": "Gmail Action for Airbrake Errors", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/gmail-action-for-airbrake-errors", "abstract": "Some of users have requested this feature and today it went live. You‚Äôll now see a quick action from within Gmail to quickly jump to specific error in the list view. If you would like to add this to your own email it‚Äôs technically¬†simple, but requires a few extra steps of verification. I would like to thank Frank from Google, Vladimir from Airbrake and Andrew from RapGenius for making the feature request. Enjoy tracking errors üôÇ Please leave feedback in the comments.", "date": "2015-02-13"},
{"website": "Airbrake", "title": "New: Trello integration", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/new-trello-integration", "abstract": "Today we are happy to announce the¬†new Trello integration for Airbrake. Just like our JIRA, Assembla and Pivotal Tracker integrations, you can quickly create new Trello cards directly for any¬†error summary. Or, save yourself time by enabling auto-creation. This will create a card automatically whenever new errors are found. Trello cards will contain critical details like¬†error name &¬†type, environment, number of occurrences, backtrace, URL, and more. And of course we‚Äôll include a link back to specific Airbrake error group, so you can quickly get all the info you need to fix¬†the issue. The complete¬†Trello integration set-up only¬†takes about 30¬†seconds. For full details, check out our knowledge base: https://airbrake.io/docs/integrations/trello/ . What¬†other integrations are you craving?¬† Email us at support@airbrake.io .", "date": "2016-05-18"},
{"website": "Airbrake", "title": "New: GitHub Enterprise integration", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/new-github-enterprise-integration-2", "abstract": "GitHub has long been one of our most popular integrations for Airbrake. Today, we‚Äôre happy to announce that GitHub Enterprise users can now take advantage of this invaluable integration as well. GitHub Enterprise integration effectively works the same as our regular GitHub integration . The biggest benefit is the ability to create new issues directly from your dashboard. Or even better, enable auto-creation so that issues are created automatically when new errors are found. These GitHub issues will contain critical details like error type, error name, Airbrake project name, environment, backtrace and more. Plus, we‚Äôll include a link directly back to the specific Airbrake error so you can dig deeper and quickly identify the root cause of the error. And when you setup the GitHub Enterprise integration, Airbrake will automatically create error backtrace links which will point to your GitHub Enterprise repository. Set-up takes about 60 seconds. Details on how to do that can be found¬†on the right side of the screen when you visit GitHub integration page on your Airbrake account. Or you can get the full scoop¬†here: https://help.airbrake.io/kb/integrations/github . What other Airbrake integrations are you dying to have? Email us at support@airbrake.io and we‚Äôll do whatever we can to make all your wildest dreams come true.", "date": "2016-03-18"},
{"website": "Airbrake", "title": "New: nested exceptions", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/new-nested-exceptions", "abstract": "The long-awaited feature has finally arrived. Airbrake now supports nested exceptions! What are nested exceptions? Sometimes exception handling code can fail and raise an exception itself. In some languages such as Ruby, the original exception the code was trying to handle is stored in a new exception object and exposed by the Exception#cause method. Example of a nested exception: Previously, Airbrake would only report the StandardError error. Beginning today our dashboard officially supports nested exceptions: Want to start capturing nested exceptions today? Start your 30-day free trial today and you‚Äôll be organising and tracking all your application‚Äôs errors in just a few minutes.", "date": "2016-02-23"},
{"website": "Airbrake", "title": "Airbrake gets serious (and a little silly) about comments", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrake-gets-serious-and-a-little-silly-about-comments", "abstract": "Until now the commenting functionality in Airbrake has been a bit, uh, limited. Users could add a comment for an exception, but only in plain-text. And email notifications can be pretty easy to miss ‚Äì especially when you‚Äôve set up filters in your inbox. That all ends now. We‚Äôve made two big improvements to comments that‚Äôll make it easier to coordinate with your team to get errors resolved Markdown: Sometimes your comment can be as simple as ‚ÄúHey John, fix this already!‚Äù. But often a bit more detail is needed. We‚Äôve now added support for markdown to enable rich commenting. Need to insert a code block to flag the problem area? ¬†Check! Want to use bold to¬†call attention to something important? Check! Need to create a to do list of: 1. Dependencies 2. Necessary Changes 3. Deployment steps Check! Want to include a screenshot of the user impact? ¬†Check! Want to show just how much you‚Äôre freaking out about this error? ¬†Check! Chat Integrations: If you‚Äôre like us, you get lots of email. Like, a whole lot of email . Things get lost, things get missed. And your filters are probably designed to make sure you miss them. Chat tools like Slack and HipChat make it much easier to scan through notifications (learn more about that here ). And now, any comments you make can¬†post to Slack or Hipchat automatically. So your teammates might actually see them Let‚Äôs see them ignore you now! Have suggestions or feedback on how to make commenting even better? Other features requests? Lonely? Email us at support@airbrake.io anytime.", "date": "2016-03-15"},
{"website": "Airbrake", "title": "Just launched: Airbrake's new & improved activity feed", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/airbrakes-new-activity-feed", "abstract": "We see it in our data, change happens really fast in software projects. Our projects are alive with code changes, deploys, and let‚Äôs not pretend‚Ä¶errors! Some of our eagle-eyed users will have noticed we already had an activity feed, but we knew we could do better. Today we have launched an overhaul of our project activity feed feature. With a fresh look, a promotion to the error dashboard, and new functionality to help you keep delivering quality, production software! If you are not tracking deploys with Airbrake , I encourage you to set this up. This is a really powerful feature which gives great insight into the relationship between your deploys and your errors. The new activity feed takes this a step further, showing teams what changes were deployed, and when. Including errors each deploy was responsible for resolving. Projects that use a code management integration such as GitHub , Bitbucket or GitLab get links to code diffs, showing exactly what changes were deployed. We‚Äôve found this feature particularly useful while trialling it internally, at Airbrake. We hope you find this to be another useful tool in your quests to deliver quality software! We welcome any feedback and suggestions you may have. Without giving too much away, we have more exciting improvements for Airbrake in the pipeline. New to Airbrake? Start your 30-day free trial today and you‚Äôll be organising and tracking all your application‚Äôs errors in just a few minutes.", "date": "2016-08-24"},
{"website": "Airbrake", "title": "New: GitLab integration", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/new-gitlab-integration", "abstract": "By popular demand, you can now integrate your Airbrake directly with GitLab. You can manually create GitLab issues from the error dashboard, or enable auto-creation to automatically create a¬†GitLab issue whenever new errors occur. Every GitLab issue created from Airbrake will contain critical error details such as error type & message, URL, file, short backtrace, number of occurrences and more. We will also include link back to the specific error in Airbrake for further investigation. When you set up GitLab integration, we will automatically create links in the Airbrake backtraces that¬†will point to GitLab repository files. Are you using GitLab Customer Edition or Enterprise Edition?¬†No worries, we‚Äôve got you covered! Just¬†choose ‚ÄúGitLab CE/EE‚Äù integration type on the GitLab integration page. Full details on how to set up GitLab integration can be found here: https://help.airbrake.io/kb/integrations/gitlab . Do you have idea for new integration?¬†Email us at support@airbrake.io and we‚Äôll do our best to bring it live.", "date": "2016-06-14"},
{"website": "Airbrake", "title": "Two-factor authentication and other security improvements", "author": "Unknown", "link": "https://airbrake.io/blog/airbrake-feature/security-features", "abstract": "Two-factor authentication (2FA) adds an extra layer of security to ensure no one outside your organization can gain access to your Airbrake account and the error data you‚Äôve sent. Airbrake already supported 2FA as part of our GitHub single sign-on feature, and now we‚Äôve added standalone 2FA so non-GitHub users can enable this extra layer of security on your account. Simply enable it from your profile page by clicking the ‚ÄúEnable‚Äù button next to the ‚ÄúTwo-factor authentication‚Äù setting title: After that, you will be asked to scan the QR code with a 2FA app (e.g., Google Authenticator , Authy , 1Password or other similar apps) and provide the 6-digit authentication code to verify that you enabled the 2FA successfully. You can also manually enter the key if there are issues scanning the QR code. Once you‚Äôve successfully entered the 6-digit auth code, 2FA will be enabled ‚Äì but there‚Äôs one more critical step! In the event you lose access to your device and can‚Äôt receive 2FA codes, ‚Äúrecovery codes‚Äù can be used to regain login access to your Airbrake account. So it‚Äôs important to keep these codes protected and accessible in a safe place, like in your password manager (we use 1Password for ours). With the setup done, on the next login, you will be asked to input the two-factor authentication code from your 2FA app. Along with standalone 2FA, we‚Äôve also added some additional security features to your GitHub SSO. These new settings can be found in the ‚ÄúSecurity‚Äù area of your Account Settings page here: Once you enabled ‚ÄúRequire all users to use GitHub for login‚Äù you can also specify a GitHub organization name and only members of that organization will be able to log into your account. In case they lose access to that GitHub organization, they will lose access to your Airbrake account as well. These new settings are designed to make it easier to give access to members across your organization, as well as to remove access to people who leave your organization. Instead of having to remember to delete a former employee‚Äôs Airbrake account, they now lose access immediately as soon as you remove them from your Github org. We strongly encourage you to set up 2FA on your Airbrake account if you haven‚Äôt already. If you have any questions or need help, just shoot us a note at support@airbrake.io.", "date": "2018-04-23"},
{"website": "Airbrake", "title": "ES6 JavaScript: Whats New? ‚Äì Part 1", "author": "Unknown", "link": "https://airbrake.io/blog/javascript/es6-javascript-whats-new-1", "abstract": "The latest and greatest active version of JavaScript is ES6 (aka ECMAScript 6 , aka ECMAScript 2015 ). Most modern browsers now support the majority of the new features and capabilities offered with ES6 , so we thought we‚Äôd try to show you just what cool new stuff you can do with the latest version of JavaScript. There are many new features added to ES6 , so we‚Äôll just cover a handful in this article, and try to touch on the remainders in future pieces, so let‚Äôs get to it! For better or worse (most developers would argue for worse), JavaScript version naming has been a somewhat confusing mess lately. JavaScript is generally standardized using the ECMAScript language specification , which has been through roughly seven major versions since its creation in 1997. However, version naming have been rather complicated by mixing between numeric iterations (e.g. ECMAScript 6 / ES6 ) and year-based iterations (e.g. ECMAScript 2015 ). ES6 , which was standardized in 2015, is often referred to by either the numeric or year-based version, which can often cause confusion. However, the real issue with a year-based system is that the upcoming version, ES7 or ECMAScript 2016 , has not been standardized yet, well into 2017. The consensus is likely to land on sticking with numeric naming moving forward, so hopefully ES6 will move to ES7 , and so forth down the line. ES6 introduces a much-beloved feature of many other languages: the ability to define the default values for parameters within your functions or methods. Making use of this feature is rather simple; just include an equals sign after the parameter name, followed by the default value. For example, here our last parameter for the getFullName function includes a default value of \"the Unknown\" : This makes it simple to provide values only for the parameters that are required, allowing the default to be inserted where necessary: This produces the output of \"Alice the Unknown\" when no last argument is given: ES6 also introduces the class ability to create traditional classes , similar to many other object-oriented languages. While behind-the-scenes JavaScript is effectively treating classes in ES6 as prototypes , classes provide a clean new syntax and something that will be familiar to many people coming to ES6 from other object-oriented languages. The introduction of classes brings a lot of new syntax and possibilities, so we‚Äôll just start with a simple example, then discuss what‚Äôs new: The obvious new addition is defining our Book class with: class Book {} . We‚Äôre also using a constructor() method, which defines how we initialize our class when the time comes, providing a number of properties for our constructor() parameters. We‚Äôve also included a prototype method (often known as a class method in other languages) which is a method attached to an instance of that class (as opposed to a static method , which cannot be accessed by an instance of that class object). In this case, we‚Äôre creating the wordsPerPage() prototype method . Since we‚Äôre also using the get keyword, which informs JavaScript that this is a getter , wordsPerPage isn‚Äôt technically a method, but, instead, is a property . This means we call it without closing parentheses or passed in arguments: book.wordsPerPage . We‚Äôve next created a second class called PaperbackBook , which inherits from our Book class using the extends keyword: Notice in our constructor() we‚Äôre also using ...args as our list of arguments, which are known as rest parameters . Rest parameters simply represent an indefinite number of arguments, in the form of an array. Therefore, when we create a new instance of PaperbackBook , since it extends Book , the ...args argument will contain an array of all four actual arguments passed into it, which is what Book expects. From there, we then make use of the super keyword, which allows us to reference the parent of our PaperbackBook object. Thus, combining super with ...args , we can simply call super(...args) in our constructor , which will effectively call the constructor of the parent Book class, and pass all provided arguments along with it. This makes it easy for us to extend the functionality of PaperbackBook's constructor , in this case simply by adding the coverType property. With our classes defined, we create a new instance of each class, passing in values that represent two different books, then output the information to our console to ensure everything works as expected: The output: Sure enough, we‚Äôre able to output the particular class objects we created, along with the wordsPerPage property value that is a getter , and then also confirm that coverType is only defined for our PaperbackBook class instance, but not the Book class. Lastly, we‚Äôre also using the new static keyword to define a static method inside our Book class. In fact, you may notice we‚Äôre using the same name of wordsPerPage , so that we can use our Book class to make calls to static methods , without the need for a reference to a particular instance of the class. In this case, if we want to calculate the words per page from two numbers, without using a Book class instance, we can do so: Using our static method of wordsPerPage here works just as expected: Properly scoping localized variables has always been a bit frustrating, or at least abnormal, in JavaScript. In most languages, including JavaScript, it is often necessary to create a block scope , which is basically a section of code that is separated and retains privacy from code outside of that block. In ES5 the common technique to create a block scope is to use an immediately invoked function expression ( IIFE ). This is effectively a syntactic method of defining a function, which is itself surrounded by parentheses , which effectively tells the JavaScript engine that this function should be treated as a grouped entity. For example, here‚Äôs how we‚Äôd use an IIFE in ES5 as a way to create a block scope , allowing us to privatize the different value assignments of our name variable: The result is that our first console.log() output is Bob , while our second, which is outside of the block scope of our IIFE , is Alice : Without the IIFE here, we could try creating a block scope with a pair of braces ( {} ), like so: The problem is, our braces don‚Äôt properly retain the private scope of our name assignment to Bob since we‚Äôre using the var keyword. Therefore, our output is Bob both times: The proper way to do this in ES6 is to continue using the braces to define a block scope , but to use the let keyword instead of var inside our block scope : The let keyword is an easy way to create a block scope local variable in ES6 . Thus, our name is properly retained inside our block, as well as outside: To help you and your team with JavaScript development, particularly when dealing with unexpected errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-04-03"},
{"website": "Airbrake", "title": "ES6 JavaScript: What‚Äôs New? ‚Äì Part 2", "author": "Unknown", "link": "https://airbrake.io/blog/javascript/es6-javascript-whats-new-part-two", "abstract": "In Part 1 of our ES6 JavaScript series we tackled the strange naming conventions that ECMAScript is finally settling on, then took a look at new features within JavaScript like default parameters , classes , and block-scoping with the let keyword. In Part 2 of this series, we‚Äôll check out a handful of other new features introduced in ES6 including: constants , destructuring , and constant literals syntax . Let‚Äôs get to it! Many other programming languages have the concept of a, which is simply an immutable (unchangeable) variable. Now, with ES6 , JavaScript also has access to constants through the use of the const keyword. In this first snippet, we‚Äôre defining a new constant to represent Euler's number , which we‚Äôve rounded to 2.71828 for our purposes: Defining a new const as e with the specified value works fine and we output the value to the log, but once we attempt to reassign the value JavaScript throws a TypeError , informing us that we‚Äôre attempting to make an assignment to a constant variable: What‚Äôs important to note here is that constants can only be assigned a value at declaration, but once declared, the value they reference can never be altered. This doesn‚Äôt mean the value itself cannot be changed, only the assignment to that referenced variable . While the value and the reference to that value are one and the same for simple values like 2.71828 above, we can also declare more complex objects to a constant, such as an Array : Here we‚Äôre declaring our names constant as a simple array and outputting the values to the log. We then alter the first value by changing it from Alice to Andrew then, once again, output the values and we see that the change was made without incident. However, when we try to reassign the reference of our names constant to another array,this throws another TypeError just as before: Since JavaScript is only concerned that the reference of our constant remains the same (to the originally declared array in this case), we can freely make internal changes to the data of that array without issue. But once we try to reassign the constant‚Äôs reference to something else, we have a problem. ES6 also introduces a new syntax feature called destructuring . To understand what this means, let‚Äôs first look at how a previous form of structured assignment would have been accomplished. Here we have two simple functions, getBookArray and getBookObject , which both return a value type indicated by their name, representing the book The Hobbit by J.R.R. Tolkien: Prior to ES6 , if we wanted to assign variables to the underlying values returned by the array/object of those functions, we‚Äôd have to create a temporary variable, assign that variable to the result of the function in question, then declare our individual variables to grab the values from the new temporary object. It might look something like this: That‚Äôs a lot of code just to pull out the structured assignments that we want from our objects. Thankfully, ES6 introduces destructuring , which is simply syntactic sugar to perform the above steps with much less code: Even though our functions are identical to before, the structured assignment to variables (of title , author , and page_count ) is performed with the new destructured syntax. The syntax is even smart enough, in the case of the object, to assume that the underlying properties are the same name as the new value assignments we‚Äôre creating, which is quite handy. The result is the assignment and output we expect, with far less code: Arrays are one thing, but what if we want to assign our object values to variables with names Here we want our newly declared outer scope variables to be prefixed with book_ , so we use the : separator syntax to accomplish this. The result still works as intended: We can also combine the default value syntax we explored in Part 1 of this series with the new destructuring syntax. Here we‚Äôre using the same getBookObject function with three returned properties ( title , author , and page_count ), but for our destructured assignment we want to include the language variable as well. If it doesn‚Äôt exist in our object, we‚Äôve specified the default value of English : The result is that we still get the values that existed from our object while filling in any gaps with the default value: ES6 also introduces some shorthand syntax for simplifying the declaration of object literals. For example, here is the traditional method of assigning our title and author variables to the book.title and book.author object properties: This works just fine and outputs our book object: However, now with ES6 , there‚Äôs no need to replicate the : separator syntax within the object declaration when the property name and variable name match (which they so often do). Thus, the same book object declaration above can be written like so: This same simplification of syntax applies to object method declarations as well. Here‚Äôs the old way: And here‚Äôs the new ES6 shorthand syntax (essentially removing the : function part): To help you and your team with JavaScript development, particularly when dealing with unexpected errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-04-26"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì IllegalStateException", "author": "Unknown", "link": "https://airbrake.io/blog/java/illegalstateexception", "abstract": "Today we make our way to the IllegalStateException in Java, as we continue our journey through Java Exception Handling series. The ‚Äúproper‚Äù use of the IllegalStateException class is somewhat subjective, since the official documentation simply states that such an exception ‚Äúsignals that a method has been invoked at an illegal or inappropriate time. In other words, the Java environment or Java application is not in an appropriate state for the requested operation.‚Äù Throughout the rest of this article we‚Äôll explore the IllegalStateException in greater detail, starting with where it resides in the overall Java Exception Hierarchy. We‚Äôll also look at a couple functional code samples that illustrate how IllegalStateExceptions are used in built-in Java APIs, as well as how you might throw IllegalStateExceptions in your own code, so let‚Äôs get started! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Exception java.lang.RuntimeException IllegalStateException java.lang.Throwable java.lang.Exception java.lang.RuntimeException IllegalStateException java.lang.Exception java.lang.RuntimeException IllegalStateException java.lang.RuntimeException IllegalStateException IllegalStateException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. As mentioned, the properly using the IllegalStateException class is really a matter of personal taste and opinion. For me, I feel it‚Äôs best used when attempting to manipulate an object instance in such a way that doesn‚Äôt make sense. For example, an application that implements the state design pattern would contain objects that track some internal state of being, such as a field value. When this object is in a particular state , it may be illogical to allow calling/execution of certain methods. In such cases, an IllegalStateException is, in my opinion, the ideal exception to throw. To illustrate in code we have two unique examples. The first example we‚Äôll go over uses our own Book class and explicitly throwing an IllegalStateException : The first critical method for this code example is the Book(String title, String author, Integer pageCount, Date publishedAt) constructor, which allows calling code to pass in a publication date: The other important method is publish() , which checks if a publication date already exists, in which case it throws a new IllegalStateException indicating that the book cannot be published a second time: This is simple logic, but it illustrates how you might go about using the IllegalStateException in your own code. Here, we‚Äôve made the decision to disallow calling publish() for a Book that has already been published. Arguably, we could opt to ignore this issue and only perform publish() logic when getPublishedAt() returns null. In this case, however, our business logic requires throwing an exception instead. The code to test this out consists of creating two unique Book instances, one with a publication date and one without, and then attempting to publish() them through the publishBook(Book book) method: Executing this code produces the following output: As desired, attempting to publish the previously-published A Game of Thrones Book results in an IllegalStateException , while the instance representing this very article doesn‚Äôt have a publication date, so publishing it works just fine. In addition to using IllegalStateException in your own custom code, these exceptions are also used throughout the codebase of other modules and libraries, including the JDK API. For example, we can reuse a bit of the code from our previous Java Exception Handling - ConnectException article, which attempts to connect to a provided URL and outputs the results: The critical addition is within the connectionTest() method, where we attempt to invoke the setIfModifiedSince(long ifmodifiedsince) method after we‚Äôve already established a connection. The source code of the java.net.URLConnection class shows that this throws an IllegalStateException , since we‚Äôve already established a connection (and, therefore, setting this field makes no sense): Sure enough, executing the connectionTest() method successfully connects, but then throws an IllegalStateException when invoking setIfModifiedSince(long ifmodifiedsince) : The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-09-03"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì IllegalArgumentException", "author": "Unknown", "link": "https://airbrake.io/blog/java/illegalargumentexception", "abstract": "Moving right along through our in-depth Java Exception Handling series, today we‚Äôll be digging into java.lang.IllegalArgumentException. The IllegalArgumentException is intended to be used anytime a method is called with any argument(s) that is improper, for whatever reason. We‚Äôll spend the few minutes of this article exploring the IllegalArgumentException in greater detail by examining where it resides in the Java Exception Hierarchy. We‚Äôll also show some simple example code that will illustrate how you might use IllegalArgumentExceptions in your own Java projects, so let‚Äôs get going! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. java.lang.Exception inherits from java.lang.Throwable . java.lang.RuntimeException inherits from java.lang.Exception . Finally, java.lang.IllegalArgumentException inherits from java.lang.RuntimeException . As previously mentioned, the IllegalArgumentException should be thrown when a value is provided to an argument that just doesn‚Äôt quite work within the business logic of the application, but isn‚Äôt strictly illegal from the perspective of the JVM. For example, here we have a method that accepts an String parameter called title : If we attempt to call this method while passing a non-String value (such as an int ), as seen above, the compiler will catch the issue and prevent us from even executing the application. In this case, the compiler issues an error indicating that int cannot be converted to a String : Therefore, the only time an IllegalArgumentException is raised is if the method in question was explicitly designed to throw such an error under certain circumstances ‚Äî situations that the compiler cannot detect are problems, but the author of the code deems improper. To illustrate how to properly use an IllegalArgumentException , we have a bit of code. The full sample is provided below for easy copy/pasting, after which we‚Äôll dig into the important bits and explore what‚Äôs going on: Outside of our Book and Logging helper classes, all our logic takes place in two methods, Main.generateLibrary() and Main.generateLibraryInvalid() . We start with the working method of the pair: Nothing too crazy going on here. We create a little library list of Books and output the count, along with the final book we‚Äôve added at the end ( \"Les Mis√©rables\" ). Pay special attention to the final page count argument that is passed for the final Book added to the list in these examples ( 1463 in the case of \"Les Mis√©rables\" ). The output should be just as expected with no thrown exceptions: The generateLibraryInvalid() method is similar in that we add two books, output the count, then output a third book. However, in this case the third addition is \"In Search of Lost Time\" by Marcel Proust , a notoriously lengthy book by any measure at around 4215 pages all told: While that‚Äôs very little difference between the logic of these two methods, running this second one results in a thrown IllegalArgumentException , indicating that the page count of our last book exceeds the maximum allowed limit of 4000 : Why is this exception thrown? The stack trace gives some indication, but the real reason is we made a small modification to the Book.setPageCount(Integer) method definition: Maybe our publisher has a hard limit on the maximum page length we can produce, but for whatever reason, we‚Äôve decided that the most pages a Book can contain is 4000 . To confirm this is the case, we ensure that setPageCount(Integer) throws an IllegalArgumentException anytime the passed pageCount argument exceeds that limit. While this is a simple example, it should illustrate the kind of scenarios in which an IllegalArgumentException should be used and explicitly raised in your own code. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Discover the power of Airbrake free for 30 days .", "date": "2017-08-04"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì FileNotFoundException", "author": "Unknown", "link": "https://airbrake.io/blog/java/filenotfoundexception", "abstract": "Next up in our in-depth Java Exception Handling series we‚Äôll take a closer look at the FileNotFoundException. As you probably can guess, the FileNotFoundException is thrown when calling a number of IO methods in which you‚Äôve passed an invalid file path. We‚Äôll look at where FileNotFoundException sits in the Java Exception Hierarchy, and also go over some functional code samples showing how this error might come about, so let‚Äôs get to it! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Exception java.io.IOException FileNotFoundException java.lang.Throwable java.lang.Exception java.io.IOException FileNotFoundException java.lang.Exception java.io.IOException FileNotFoundException java.io.IOException FileNotFoundException FileNotFoundException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. The FileNotFoundException is thrown when attempting to access a file that doesn‚Äôt exist, so let‚Äôs just right into some code to see how it works. For this example, we‚Äôre using the Book class that we‚Äôve used in the past to create a couple books, which we then output to a new file in the form of JSON . To easily convert from a Book object to a JSON string we are using the Jackson library, and in particular the com.fasterxml.jackson.databind.ObjectMapper() class: The writeValueAsString(Object value) method allows us to convert the current Book instance into a JSON string value. Jackson handles all the reflection for us, with the special note that we need to implement the @JsonIgnoreProperties(ignoreUnknown = true) interface at the top of the Book class definition, which tells the parser to ignore properties it doesn‚Äôt recognize when reading from a JSON source. This is necessary because of the tagline property obtained from the Book.getTagline() method. Jackson picks up on this method and outputs the value in the produced JSON file, but since we don‚Äôt have a matching setTagline() method in the Book class, we need to ignore it during import: Next, we have the readBookJson(String path) method, which attempts to read the JSON from the provided file path parameter, and tries to map it to an Array of Books , which are then output to the log: Lastly, the writeBookJson(String path) method performs pretty much the opposite of readBookJson(String path) , by attempting to write the data of a few Books to the provided path file location: Note : This is obviously a bit of a hackey way to create valid JSON (explicitly writing out opening/closing brackets, and comma-separators), but the goal here is to provide a somewhat realistic example of reading/writing files, rather than a perfect illustration of working with JSON. Anyway, with everything now setup we can test stuff out by first trying to write some data to a new file: This creates a new books.json file and populates it with the Book data, as converted to JSON, that we expected: Now let‚Äôs try reading the data from that file: If everything was setup correctly, this should see the output of our Book objects, as read from the JSON. Sure enough, that‚Äôs exactly what we get: Finally, let‚Äôs see what happens if we try to read the JSON data from an invalid file: Lo and behold, executing readBookJson(String path) with an invalid file path throws a FileNotFoundException at us: The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! See for yourself the power of Airbrake Error Monitoring and try it free for 30 days.", "date": "2017-09-09"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì EOFException", "author": "Unknown", "link": "https://airbrake.io/blog/java-exception-handling/eofexception", "abstract": "Making our way through our detailed Java Exception Handling series, today we‚Äôll tackle the EOFException . Most developers will probably recognize that the acronym EOF in this exception name usually stands for ‚Äúend of file‚Äù, which is exactly the case here. When an EOFException is thrown in Java, this indicates that the end of the file or stream has been reached unexpectedly. In this article we‚Äôll examine the EOFException in more detail, starting with where it sits in the larger Java Exception Hierarchy. We‚Äôll also go over some functional sample code that shows basic file manipulation, and how failing to improperly handle reaching the end of file or memory streams will result in uncaught EOFExceptions . Let‚Äôs get to it! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Exception java.io.IOException EOFException java.lang.Throwable java.lang.Exception java.io.IOException EOFException java.lang.Exception java.io.IOException EOFException java.io.IOException EOFException EOFException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Since the appearance of an EOFException simply indicates that the end of the file or memory stream was reached, the best way to show how to properly use and handle this exception is in code, so let‚Äôs jump right into our sample. We start with a basic Book class that contains a few fields, which we‚Äôll be using to create some real-world objects to output to a local file. In our Main program class we start by defining a basic List<Book> private property called DATA , along with the path to our FILE : Next we have the WriteBooksToFile() method, which does just as the name suggests: By using a DataOutputStream instance we‚Äôre able to loop through the collection of Books found in our DATA property and create a new string via the writeUTF(...) method. Once complete, we close the stream, and all is taken care of. Executing this method produces the following output to the log: To confirm the formatted Book strings are being locally saved we can open up the local books.txt file. Here‚Äôs the current contents of that file (Note that this file is actually in binary, even though it mostly appears as plain text): Cool. Now, to retrieve the data that was saved to books.txt we start with the ReadBooksFromFileImproperly() method: Executing this method produces the following output: Everything seems to be working propertly at first but, as you can see, once we reach the end of the file an EOFException is thrown, which we‚Äôve caught and output to the log. However, this method isn‚Äôt configured very well, since any other unexpected exception (such as an IOException ) might take precedent over the expected EOFException , which we‚Äôll get every time. Therefore, the recommended way to handle reaching the end of a file in this sort of scenario is to enclose the stream-reading statements in their very own try-catch block, to explicitly handle EOFExceptions . Once the expected EOFException is caught, this can be used as control flow statement to redirect execution flow to the next proper statement in the code. While this sort of practice is usually frowned on in most languages, in this particular case it is the only way to handle EOFExceptions . To illustrate one such example let‚Äôs look at the modified ReadBooksFromFile() method: As you can see, this method contains quite a bit more code than the improper version, but it explicitly surrounds the statements that are reading from the stream with try-catch block to handle EOFExceptions . When an EOFException is caught, the break; statement breaks the infinite while (true) loop and continues executing the rest of the method, like normal. Additionally, we can then perform all our normal exception handling with the outer try-catch block covering the entirety of the method code. The Airbrake-Java library provides real-time error monitorin g and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices. Try Airbrake free for 30 days!", "date": "2017-10-30"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì ExceptionInInitializerError", "author": "Unknown", "link": "https://airbrake.io/blog/java/exceptionininitializererror", "abstract": "Moving along through our in-depth Java Exception Handling series, today we‚Äôll dive into the ExceptionInInitializerError , which is thrown when an error occurs within the static initializer of a class or object. Since an ExceptionInInitializerError isn‚Äôt ever the cause of a thrown error, catching such an exception provides an underlying causal exception that indicates what the actual source of the issue was. Throughout this article we‚Äôll examine the ExceptionInInitializerError by looking at where it resides in the overall Java Exception Hierarchy. We‚Äôll then explore a simple and fully-functional code sample that illustrates how a static initializer works, and what might lead to a thrown ExceptionInInitializerError in such an initializer, so let‚Äôs get to it! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Error java.lang.LinkageError ExceptionInInitializerError java.lang.Throwable java.lang.Error java.lang.LinkageError ExceptionInInitializerError java.lang.Error java.lang.LinkageError ExceptionInInitializerError java.lang.LinkageError ExceptionInInitializerError ExceptionInInitializerError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Since the appearance of an ExceptionInInitializerError indicates a problem within a static initializer , we should briefly examine what a static initializer is and how they‚Äôre typically used. Put simply, a static initializer block is a normal code block that is executed when the class is loaded. A static initializer is created by enclosing code anywhere inside a class definition surrounded by braces ( { & } ) and also preceded by the static keyword. For example: As you can see in the code above, there can be as many static initializer blocks as desired within a class definition. Each will be executed in a top-down manner when the class is first loaded. Static initializers are not to be confused with instance initializers (or instance members ), which are executed when the class is instantiated (i.e. a new object of that class type is created). Instance initializers are also executed just before the constructor method. An instance initializer is written inside a class definition using two braces ( { & } ), but without a preceding static keyword: Just as with static versions, multiple instance initializers can be defined and will be executed from top to bottom. The purpose of a static initializer is typically to execute any initialization code that must occur before a class can be used. Critically, static initializers are only executed once ever , the first time that class is loaded. Thus, they are great for classes that are frequently used throughout the application, but only need some basic configuration code to be executed once before multiple instances are used elsewhere, such as a database connection class. To test a static initializer in ‚Äúreal‚Äù code we‚Äôve added a simple snippet and field to our trusty Book class: A static initializer block has been added near to the top of the class definition, and merely attempts to ensure the publicationType static field is an upper case value: With this static initializer in place let‚Äôs try creating a new Book instance: Executing this main(String[] args) method produces the following output: Sure enough, this threw an ExceptionInInitializerError at us. Just as importantly, since ExceptionInInitializerErrors aren‚Äôt ever going to cause a problem themselves, catching such an exception always contains an actual causal exception , which is the error that was thrown within a static initializer that led to the caught ExceptionInInitializerError . In this case, we see the cause was a NullPointerException . With a bit of digging and consideration, we can see that the problem is within the static initializer code inside the Book class. It attempts to get the static publicationType value, but we don‚Äôt explicitly set an initial value for this field, so calling this references a null value, hence the NullPointerException . The solution is to either set an initial value for publicationType , or to include a try-catch block within the static initializer. In this case, a try-catch block handles the error, but doesn‚Äôt resolve the root cause, so it‚Äôs probably better to specify a default value instead: Now, rerunning the same main(String[] args) method instantiates our Book just fine and outputs the results: A few things worth noting. First, since our code to force the publicationType value to be upper case occurs within a static initializer, this occurs before our Book instance is initialized, as well as before the Book(String title, String author, Integer pageCount, Date publishedAt, String publicationType) constructor method is executed. Thus, even though we successfully change the publicationType from the default of Book to novel , it won‚Äôt be upper case‚Äôd unless we do so inside an instance or member initializer . Additionally, since publicationType is a static field, this means it is unique to the entire Book class. If we were to create a second Book instance with a publicationType specified in the constructor of poem , the publicationType of our Game of Thrones Book instance would also have its publicationType changed to poem : This code produces the following output: As we can see, the publicationType of both instances is now the new value of poem , so just be aware that static members and initializers are global to all instances of a particular class. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days!", "date": "2017-10-11"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì ConnectException", "author": "Unknown", "link": "https://airbrake.io/blog/java/connectexception", "abstract": "Moving along through our detailed Java Exception Handling series, today we‚Äôll dive into the ConnectException in Java. As you can probably guess, the ConnectException indicates an error has occurred while attempting to connect a socket to a remote address, such as when trying to access a URL that doesn‚Äôt exist, or which refuses outside connections. In this article we‚Äôll examine the ConnectException in more detail, looking at where it sits in the Java Exception Hierarchy. We‚Äôll also go over a bit of functional sample code that aims to illustrate how ConnectExceptions are typically thrown using built-in libraries, and also how you might throw your own instances when necessary, so let‚Äôs get to it! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Throwable java.lang.Exception java.io.IOException java.net.SocketException ConnectException java.lang.Exception java.io.IOException java.net.SocketException ConnectException java.io.IOException java.net.SocketException ConnectException java.net.SocketException ConnectException ConnectException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Since the ConnectException is only used when dealing with remote connections, we‚Äôll jump right into our code, which attempts to create a basic connection through the HttpURLConnection class (technically we‚Äôre using the HttpsURLConnection class, since this is a secure connection, but this class inherits from HttpURLConnection , so that‚Äôs what parameter type our method signatures declare). We start with the connect(String uri ) method, which creates a new URI instance and then tries to establish a connection via the openConnection() method: As you can see, we perform processing on that connection object in the processResponse(HttpURLConnection connection) method: Right now this is just an intermediary method, since it merely passes the connection parameter along to the final method in the chain. However, we include this to show where we might perform our logic based on the connection object properties and responses that were provided. Finally, we call the logConnection(HttpURLConnection connection) method, which nicely formats a bit of basic information about the connection and outputs it to the log: With everything in place let‚Äôs try connecting to a few different addresses and see what happens: We start with https://www.airbrake.io , which should work just fine. Sure enough, the log output of the first call shows a connection was established and an OK / 200 response code was returned: However, when we try our second call using the URI for brakeair.io ‚Äî a (currently) non-existent address ‚Äî our connection attempt throws a ConnectException at us: Quick and easy. That‚Äôs the usage of the ConnectException in a nutshell. However, it‚Äôs briefly worth noting that the actual error message content that we see above isn‚Äôt all that revealing. Therefore, in some cases, it might be worthwhile to throw a ConnectException yourself with a more detailed error message. For example, here we‚Äôve modified the processResponse(HttpURLConnection connection) method a bit: As you can see, we explicitly check if a ConnectException is caught that has an error message of \"Connection refused: connect\" . If such an exception is caught we throw a new ConnectException with a more detailed message. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices. Try Airbrake free for 30 days!", "date": "2017-08-25"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì ConcurrentModificationException", "author": "Unknown", "link": "https://airbrake.io/blog/java/concurrentmodificationexception", "abstract": "Today we‚Äôll bite off another morsel from our delicious and mildly satiating Java Exception Handling series with a close look at the java.util.ConcurrentModificationException. The java.util.ConcurrentModificationException is typically thrown when code attempts to modify a data collection while that collection is actively in use, such as being iterated. We‚Äôll take the time in this article to further explore the java.util.ConcurrentModificationException , looking at where it sits in the Java Exception Hierarchy, along with some simple, functional code samples that will illustrate common scenarios that java.util.ConcurrentModificationExceptions might occur, and how to prevent them. Let‚Äôs get to it! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. java.lang.Exception inherits from java.lang.Throwable . java.lang.RuntimeException inherits from java.lang.Exception . Finally, java.util.ConcurrentModificationException inherits from java.lang.RuntimeException / As discussed in the introduction, the most typical scenario that might lead to a java.util.ConcurrentModificationException is when performing modifications on a collection object that is currently in use. To illustrate, in our example code we‚Äôll be creating a basic ArrayList<> object, adding a few items to it, then iterating through the elements. Depending on how we build our application and, therefore, how we choose to perform any modifications during the iteration, we‚Äôll see that the application will behave very differently. To begin, let‚Äôs start with the full working code sample below. At the end of the sample block we‚Äôll go through each section in more detail to see what‚Äôs going on: To make our example a bit more realistic we‚Äôve added a simple Book class with a few fields to store basic book information: Our goal is to build a List collection of Books that we can iterate through, while simultaneously checking for a particular element in the list and proactively removing any matching book element from the list while the iteration continues. To accomplish this we start with the modifiedListExample() method: As you can see, this method creates a new ArrayList<Book> object called library , adds a handful of Books to the list, then performs an advanced for loop on the library list. For each book element in the list we output the book info to the log, then also check if the current book element has a title of \"Gone Girl\" , in which case we remove that element from the library list. Let‚Äôs execute this method and see what we get in the log output: Everything was working fine at first, but after removing \"Gone Girl\" from the library list we ran into a problem and threw a java.util.ConcurrentModificationException . The reason for this is that the JVM couldn‚Äôt determine what element should‚Äôve come next in our for loop, since, for example, the original fourth element ( \"His Dark Materials\" ) is no longer where it should‚Äôve been. To fix this issue we can slightly modify how we perform our iteration of library elements and, instead of using an advanced for loop syntax as above, we can create a new Iterator<Book> object, which will serve as our means of iterating through elements and, most importantly, allow us to remove any matched book elements without affecting the iteration process. Thus let‚Äôs take a look at the modifiedIteratorExample() method: The big difference is the for loop using a new Iterator<Book> object, grabbed from the library.iterator() method. We then call the bookIterator.hasNext() method to check if another element exists, then retrieve it inside the loop with bookIterator.next() . Lastly, and most importantly, we are not calling library.remove() directly on the parent list object. Instead we use the bookIterator.remove() method, which allows us to safely remove the current element from the iterator, so the upcoming bookIterator.hasNext() and bookIterator.next() don‚Äôt fail and throw another java.util.ConcurrentModificationException . The result is that our log output shows all books except the one we removed and skipped over: It‚Äôs also worth noting that the above sample code is a bit verbose, just to better illustrate what‚Äôs going on with our iteration. We could almost entirely remove the for code block and use the following snippet instead, which uses a lambda expression to check each book element and perform a remove function if the title is what we‚Äôre filtering: The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake Error Monitoring allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices!", "date": "2017-07-21"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì ClassNotFoundException", "author": "Unknown", "link": "https://airbrake.io/blog/java/classnotfoundexception", "abstract": "Today we continue our detailed Java Exception Handling series with a closer look at the java.lang.ClassNotFoundException. Unlike many Java errors that can occur in a variety of scenarios, the ClassNotFoundException can only be thrown as a result of three different method calls, all of which handling loading classes by name. In this article we‚Äôll dig into the ClassNotFoundException in more detail, looking at where it sits in the Java Exception Hierarchy, along with some functional code samples illustrating how ClassNotFoundExceptions are thrown, so let‚Äôs get this party started! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. java.lang.Exception inherits from java.lang.Throwable . java.lang.ReflectiveOperationException inherits from java.lang.Exception . Finally, java.lang.ClassNotFoundException inherits from java.lang.ReflectiveOperationException . As mentioned, the ClassNotFoundException can only occur as a result of three different methods failing to load the specified class. The three methods in question are as follows (we‚Äôve obviously excluded their respective overloads): Class.forName(String className) ClassLoader.findSystemClass(String name) ClassLoader.loadClass(String name) Therefore, the only time a ClassNotFoundException should be raised is when calling one of the above methods with an invalid class name argument. We‚Äôll start with our full code sample below, after which we‚Äôll break it down in a bit more detail and look at how each method is used and might potentially throw a ClassNotFoundException : Since we have three built-in java.lang methods to test, we‚Äôve written three of our own testing methods to coincide with each. We start with the getClassByName(String name) method: This is an extremely basic method (most of the code is for error handling, in fact). As you can see, the purpose is to act as a wrapper and exception catcher for the Class.forName(String className) method call. Next, we have the getSystemClassFromLoaderByName(String name) method, which is a wrapper to call the ClassLoader.findSystemClass(String name) method: As it happens the ClassLoader.findSystemClass(String name) method is protected , which means it can only be accessed from within the class itself, its package , or a subclass that extends ClassLoader . Since our calling code is within a different package ( io.airbrake compared to java.lang ), we cannot make a direct call to ClassLoader.findSystemClass(String name) . The solution here is to create our own class that extends ClassLoader , which will inherit all the methods from the base ClassLoader class, and allowing us to create our own class method that wraps the base ClassLoader.findSystemClass(String name) call. The MyClassLoader class serves this purpose by extending ClassLoader : Just like the ClassLoader.findSystemClass(String name) method, our findSystemClassByName(String name) method throws ClassNotFoundException , which will propagate up through the call stack to our calling code. Finally, the getClassFromLoaderByName(String name) method is a wrapper for the ClassLoader.loadClass(String name) method. Unlike the previous built-in method, this one is not protected , but it is an instance method, so we need to instantiate a new MyClassLoader instance on which we can call loadClass(String name) : To test our code out we are passing a class name to each of our three methods, then outputting the returned class name. If no class was found, the return value is null : We first start by passing a very common and widely used class: java.lang.Integer . This is just to verify that all our methods are working and that classes are retrievable via the underlying, wrapped methods. The output confirms that all three work as expected: Now we change the class name to something that doesn‚Äôt exist; in this case, io.airbrake.InvalidClassName : As you can probably guess, all three of our methods run into trouble and are unable to retrieve a class by that name, resulting in three ClassNotFoundExceptions in the output (along with null return values): The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices! Try Airbrake free for 30 days .", "date": "2017-08-14"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì ClassCastException", "author": "Unknown", "link": "https://airbrake.io/blog/java/classcastexception", "abstract": "Making our way through our detailed Java Exception Handling series, today we‚Äôll be going over the ClassCastException . Any attempt to cast (i.e. convert) an object to another class for which the original class isn‚Äôt a inherited from will result in a ClassCastException . In this article we‚Äôll examine the ClassCastException by looking at where it sits in the grand Java Exception Hierarchy. We‚Äôll also take a gander at some functional code samples that will illustrate how the ClassCastException is commonly thrown, and thus, how it can be avoided. Let‚Äôs get started! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Exception java.lang.RuntimeException ClassCastException java.lang.Throwable java.lang.Exception java.lang.RuntimeException ClassCastException java.lang.Exception java.lang.RuntimeException ClassCastException java.lang.RuntimeException ClassCastException ClassCastException Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. To see how a ClassCastException is typically thrown we‚Äôll be extending a Book class with a few inherited classes, namely PaperbackBook and DigitalBook . For this simple example, we need a simple class hierarchy, so our paperback and digital versions will each specify their own respective enum PublicationType value upon instantiation, differentiating each publication type from the others. Note : To save space, we won‚Äôt go over the full Book class code here, but feel free to scroll up at the full code sample to have a look at it. Instead, we‚Äôll start with the aforementioned PublicationType enum : Now, both the DigitalBook and PaperbackBook extend the Book class and, after passing all the standard parameters to the super (i.e. Book ) constructor, they each set their publicationType property to the respective value: As you may be aware, by extending Book these classes can use most of the functionality and methods that the base Book class provides, while also extending it with their own functionality. Consequently, an instance of the DigitalBook class or the PaperbackBook class can also be considered an instance of the Book class, since they are inherited children. However, the reverse cannot be said, because a Book instance is not necessarily also an instance of DigitalBook or PaperbackBook . This can lead to some troubles when trying to perform explicit casts from one class type to another. For example, here we have a simple castToDigitalBook(Object source) method, which does just as the name suggests: To test this out, we‚Äôll start by instantiating a new DigitalBook and a new PaperbackBook : There‚Äôs nothing unexpected going on here, so this code outputs both books to the log, confirming they‚Äôre each their respective subclass types: However, now let‚Äôs try taking our paperbackBook instance and casting it to a DigitalBook instance: This results in an immediate ClassCastException , which indicates that we cannot cast a PaperbackBook to DigitalBook : As previously mentioned, this is because the source class ( PaperbackBook ) is not a direct descendant of the target class ( DigitalBook ). If it were, such a cast operation would work fine, which we can see by defining and calling the castToBook(Object source) method: It‚Äôs important and interesting to note that, even though we explicitly cast PaperbackBook to a Book , the resulting object still remains a PaperbackBook , because it‚Äôs the most specific type of object that can be inferred from this cast command. In other words: There‚Äôs no reason to cast upward on the chain of inheritance, so it keeps the most extended option it can. The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake Error Monitoring allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices!", "date": "2017-09-21"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì java.lang.ArrayIndexOutOfBoundsException", "author": "Unknown", "link": "https://airbrake.io/blog/java/arrayindexoutofboundsexception", "abstract": "Today we‚Äôll take another journey through the ‚ÄúLand of Errors‚Äù of our ongoing Java Exception Handling series, with a deep dive into the java.lang.ArrayIndexOutOfBoundsException. As the name clearly indicates, the ArrayIndexOutOfBoundsException is thrown when an index is passed to an array which doesn‚Äôt contain an element at that particular index location. In this article we‚Äôll look a bit closer at the java.lang.ArrayIndexOutOfBoundsException by examining where it sits in the Java Exception Hierarchy. We‚Äôll also go over a few simple, functional code samples illustrating how ArrayIndexOutOfBoundsExceptions are commonly thrown, so let‚Äôs get crackin‚Äô! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. java.lang.Exception inherits from java.lang.Throwable . java.lang.RuntimeException inherits from java.lang.Exception . java.lang.IndexOutOfBoundsException inherits from java.lang.RuntimeException . Lastly, java.lang.ArrayIndexOutOfBoundsException inherits from java.lang.IndexOutOfBoundsException . Since Java has internal classes and object structures to manage Arrays ‚Äî and because said objects will produce errors like the java.lang.ArrayIndexOutOfBoundsException on their own ‚Äî there will rarely be a situation where you‚Äôll need to explicitly throw your own ArrayIndexOutOfBoundsException. For example, if you were creating your own data structure object that contained a non-array collection of elements, you‚Äôd likely want to explicitly throw a java.lang.IndexOutOfBoundsException , as opposed to a java.lang.ArrayIndexOutOfBoundsException , since the JVM will handle that for you most of the time. That said, to see how ArrayIndexOutOfBoundsExceptions are commonly thrown we‚Äôll start with the full working code sample, after which we‚Äôll explore it in more detail: To illustrate a common problem when using arrays we have two similar methods, iterateArray(Book[] list) and iterateArrayInvalid(Book[] list) : These methods don‚Äôt do anything fancy and, in fact, basically only serve as wrappers to stick our try-catch blocks in, and to differentiate the slight differences in loop logic between the two. Specifically, as indicated by the code comments, the iterateArrayInvalid(Book[] list) method contains a termination expression that allows index to be less than or equal to the length of list . Since, like most languages, Java uses zero-based numbering to index Arrays and other collections, an index equal to the length of an array will be one greater than the largest index. To better illustrate, consider this table of Arrays showing each array‚Äôs length and its maximum index : With that in mind, we‚Äôll get started testing both of the iteration methods. We‚Äôll use our Book class just to keep things a little more interesting by creating a few elements for our array, then pass it to both methods so we can review the output of each: The output from iterateArray(Book[] list) is just as expected, outputting all four elements before execution is completed: On the other hand, invoking iterateArrayInvalid(Book[] list) runs into a problem. While we successfully output all four elements, as mentioned above, the for loop iterates one too many times, resulting in a call to list[4] , which is an unknown index. This throws a java.lang.ArrayIndexOutOfBoundsException , indicating the index value that was out of bounds: The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake Error Monitoring allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices!", "date": "2017-07-29"},
{"website": "Airbrake", "title": "504 Gateway Timeout Error: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/504-gateway-timeout-error", "abstract": "A 504 Gateway Timeout Error is an HTTP response status code indicating that a server, which is currently acting as a gateway or proxy, did not receive a timely response from another server further upstream. As with most HTTP response codes that indicate an error like this, it can be difficult to determine the exact cause of a 504 Gateway Timeout Error . There are dozens of possible HTTP status codes used to represent the complex relationship between the client, a web application, a web server, and often multiple third-party web services, so determining the cause of a particular status code can be a challenge, even under the best of circumstances. Throughout this article we‚Äôll examine the 504 Gateway Timeout Error by looking at a few troubleshooting tips and potential fixes for common problems that might be causing this issue, so let‚Äôs get started! All HTTP response status codes that are in the 5xx category are considered server error responses . Similar to the 502 Bad Gateway Error we‚Äôve looked at in the past, a 504 Gateway Timeout Error indicates that something has gone wrong with a gateway or proxy server that is further upstream. In general networking parlance, an upstream server is a server that provides a service to (i.e. is accessed by) another server. Thus, a server that is upstream is located higher in the overall server hierarchy than a server that is downstream . Another way to think of upstream versus downstream is their relative proximity to your device (i.e. the client ) ‚Äî the greater the number of hops required to transfer data from your client to the server in question, the further upstream that server is located. Since the 504 Gateway Timeout Error indicates that something has gone wrong within the server of your application, we can largely disregard the client side of things. If you‚Äôre trying to diagnose an issue with your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Many smart phone apps that have a modern looking user interface are actually powered by a normal web application behind the scenes; one that is simply hidden from the user. If you‚Äôre using such an application and a 504 Gateway Timeout Error occurs, the issue isn‚Äôt going to be related to the app installed on your phone or local testing device. Instead, it will be something on the server-side, which is performing most of the logic and processing behind the scenes, outside the purview of the local interface presented to the user. That said, it isn‚Äôt necessarily the case that the specific web server that your application is running on is the source of the problem. Instead, it‚Äôs entirely possible that every aspect of your particular application (along with its servers) are working flawlessly, but a 504 Gateway Timeout Error could still be occurring if an upstream server is experiencing problems. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and so forth, before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application onto a secondary staging server that isn‚Äôt ‚Äúlive,‚Äù or isn‚Äôt otherwise active and available to the public. This will give you a clean testing ground with which to test all potential fixes to resolve the issue, without threatening the security or sanctity of your live application. As mentioned, a 504 Gateway Timeout Error means that a server that is upstream to one that you (the client ) are connecting to did not receive a ‚Äútimely‚Äù response from another server further along upstream. In this scenario, this indicates that the server providing the 504 Gateway Timeout Error is acting as a gateway , so let‚Äôs take a moment to discuss what a gateway (or proxy) is. In most HTTP communications, a client will connect to a server via a third-party gateway computer. The gateway acts as, well, a gateway , by which messages from the client can be securely sent to the server , and vice-versa. A gateway acts as a node within the larger network web, connecting and routing communications between multiple client , server , and other node types within the (virtual) vicinity. Believe it or not, most homes with Internet access even have an active gateway. Your local home network, which is likely setup through a router (or router+modem hybrid), typically assigns IP addresses to all the devices on your network using the base address of 192.168.1.* , where the asterisk changes depending on the device. In most cases, communication from one such local network address to another local network address is allowed, but when your computer attempts to connect to an IP address outside of this base range, your router‚Äôs gateway will intercept it and perform the communication between your computer and the remote server on your behalf. In some situations, the web server running your application may be the cause of the problem. This is particularly true when your server is running either a combination frontend+backend server setup (such as Nginx and Apache), or the web server is relying on third-party services, which are typically located elsewhere on additional upstream servers. Any of the upstream servers that your client (web browser) is connecting through may be down or experiencing issues at this time, which could cause a delay in processing and lead to the 504 Gateway Timeout Error you‚Äôre seeing. Above all, Google is your friend. Don‚Äôt be afraid to search for specific terms related to your issue, such as the name of your application‚Äôs CMS or web server software, along with 504 Gateway Timeout Error . Chances are you‚Äôll find others who have experienced this issue and have potentially been provided a solution. Here are some additional tips to help you troubleshoot what might be causing the 504 Gateway Timeout Error to appear on the server-side of things: Recent DNS Changes ‚Äì The Domain Name System ( DNS ) is a decentralized naming system for devices connected through a network (even a massive network, such as the Internet itself). In short, the DNS associates domain names (e.g. airbrake.io ) to specific IP addresses, and stores that association in a series of authoritative name servers spread around the world. Thus, when you ask your computer to connect to airbrake.io , your computer actually checks with a nearby DNS name server to find out what the specific IP address (internet resource) is that it should connect to. From your perspective it‚Äôs going directly to airbrake.io , but behind the scenes the traffic is routed to an IP address ( 52.203.232.56 , in this case). Consequently, your application may present a 504 Gateway Timeout Error if your site has made recent changes to its DNS server, which is a result of changing host servers or moving the site to a different IP address. Such DNS changes, known as DNS propagation , are not instant and can sometimes take a few hours to propagate throughout all the authoritative name servers. Server Connectivity Issues ‚Äì While it may sound simple, it‚Äôs entirely possible that a 504 Gateway Timeout Error simply indicates that a server somewhere in the chain is down or unreachable for whatever reason. Most modern applications don‚Äôt reside on a single server, but may, instead, be spread over multiple systems, or even rely on many third-party services to function. If any one of these servers are down for maintenance or otherwise inaccessible, this could result in an error that appears to be from your own application. Improper Firewall Configuration ‚Äì A firewall is a basic security device that monitors network traffic and acts as a gatekeeper, deciding which traffic is safe and which could be malicious. In most cases, all potentially harmful traffic is stopped (and may be logged for network admin use). In some situations, it‚Äôs entirely possible for a firewall configured somewhere on the network in which your application is running to be preventing some form of critical traffic from getting through. This is particularly true for applications that rely on content delivery networks ( CDNs ), which act as a third-party host for ‚Äúheavy‚Äù content like images or videos, hosting that content on behalf of your application, so your application can maintain its speed and efficiency. However, automatic firewall services can sometimes perform false positives, mistaking perfectly safe and valid content from CDNs or elsewhere as malicious, thereby shutting off that stream of content in an instant, which could lead to a 504 Gateway Timeout Error . Check the Logs ‚Äì Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. Application Code or Script Bugs ‚Äì If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 504 Gateway Timeout Error occurred and view the application code at the moment something goes wrong. No matter what the cause, the appearance of a 504 Gateway Timeout Error coming from your own web application is a strong indication that you may need an error management tool to help you automatically detect these and other errors in the future. Such mechanisms can even alert you and your team immediately when an error occurs. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-10-25"},
{"website": "Airbrake", "title": "Java Exception Handling ‚Äì AbstractMethodError", "author": "Unknown", "link": "https://airbrake.io/blog/java/abstractmethoderror", "abstract": "Moving along through our in-depth Java Exception Handling series, today we‚Äôll be going over the AbstractMethodError . This error is thrown when there are incompatibilities between compiled classes/JAR files using abstract methods. Throughout this article we‚Äôll examine the AbstractMethodError by looking at where it fits into the overall Java Exception Hierarchy. We‚Äôll also dig into a functional code example that illustrates the basics of using abstract classes and methods in Java, and how their use may lead to AbstractMethodErrors in your own code. Let‚Äôs get to it! All Java errors implement the java.lang.Throwable interface, or are extended from another inherited class therein. The full exception hierarchy of this error is: java.lang.Object java.lang.Throwable java.lang.Error java.lang.LinkageError java.lang.IncompatibleClassChangeError AbstractMethodError java.lang.Throwable java.lang.Error java.lang.LinkageError java.lang.IncompatibleClassChangeError AbstractMethodError java.lang.Error java.lang.LinkageError java.lang.IncompatibleClassChangeError AbstractMethodError java.lang.LinkageError java.lang.IncompatibleClassChangeError AbstractMethodError java.lang.IncompatibleClassChangeError AbstractMethodError AbstractMethodError Below is the full code sample we‚Äôll be using in this article. It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. This code sample also uses the Logging utility class, the source of which can be found here on GitHub . In most situations you‚Äôll rarely experience AbstractMethodErrors during runtime, because they are typically caught by the compiler prior to execution. However, there are certain scenarios in which code is referencing outdated abstract classes, which can lead to AbstractMethodErrors . Most commonly, consider a situation where an abstract class and an inherited class are compiled. Next, modifications are made to the abstract class and only that abstract class is recompiled, while the extended class is left alone. This can cause AbstractMethodErrors , since the runtime doesn‚Äôt know how to handle the incompatibility between the two classes. To illustrate we‚Äôve created a basic Publication abstract class, which defines a handful of methods that should be implemented in all extension classes: The AbstractBook class then extends Publication and provides actual implementation of the abstract methods above: We can test this out by creating a new AbstractBook instance and outputting it to the log: Executing the createBookTestA() method produces the following output: That‚Äôs all well and good, but what happens if we modify one of these classes but not the other (effectively causing their versions to be incompatible)? For example, let‚Äôs modify the Publication abstract class and add another abstract method : If we compile just this Publication class, but not also the inherited AbstractBook class, executing our test code will result in an AbstractMethodError , since the secondary class hasn‚Äôt been recompiled and made aware of the changes: The Airbrake-Java library provides real-time error monitoring and automatic exception reporting for all your Java-based projects. Tight integration with Airbrake‚Äôs state of the art web dashboard ensures that Airbrake-Java gives you round-the-clock status updates on your application‚Äôs health and error rates. Airbrake-Java easily integrates with all the latest Java frameworks and platforms like Spring , Maven , log4j , Struts , Kotlin , Grails , Groovy , and many more. Plus, Airbrake-Java allows you to easily customize exception parameters and gives you full, configurable filter capabilities so you only gather the errors that matter most. Check out all the amazing features Airbrake-Java has to offer and see for yourself why so many of the world‚Äôs best engineering teams are using Airbrake to revolutionize their exception handling practices!", "date": "2018-01-19"},
{"website": "Airbrake", "title": "502 Bad Gateway Error: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/502-bad-gateway-error", "abstract": "HTTP response codes, particularly those that represent an error, can be difficult to deal with. While some are simple, others have obtuse or confusing meanings and, worst of all, since these codes are the result of a much broader relationship between the client, the web application, a web server, and untold numbers of outside web services, pinning down exactly what a given error indicates can be a challenge in the best of circumstances. In this article we‚Äôll explore the 502 Bad Gateway Error , which indicates that a server somewhere within the server stack ‚Äî specifically, one which is acting as a gateway or proxy itself ‚Äî received an invalid response from a different server. Typically, the root of the problem is another server upstream, meaning that the problematic server provides service to the system you received the 502 Bad Gateway Error from. To help you resolve such errors, we‚Äôll examine a few troubleshooting tips and potential fixes for common causes, so let‚Äôs get going! Before we begin, it‚Äôs worth noting that, like most HTTP response codes , the 502 Bad Gateway Error is an indication that something has gone wrong within the server of your application, as opposed to the client side of things. If you‚Äôre trying to diagnose an issue with your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Many smart phone apps that have a modern looking user interface are actually powered by a normal web application behind the scenes; one that is simply hidden from the user. If you‚Äôre using such an application and a 502 Bad Gateway Error occurs, the issue isn‚Äôt going to be related to the app installation on your phone or local testing device. Instead, it will be something on the server-side, which is performing most of the logic and processing behind the scenes, outside the purview of the local interface presented to the user. As mentioned, a 502 Bad Gateway Error means that a server that is upstream to one that you (the client ) are connecting to has run into trouble. In this scenario, this means that the server providing the 502 Bad Gateway Error is acting as a gateway , so let‚Äôs take a moment to discuss what a gateway (or proxy) is. In most HTTP communications, a client will connect to a server via a third-party gateway computer. The gateway acts as, well, a gateway , by which messages from the client can be securely sent to the server , and vice-versa. A gateway acts as a node within the larger network web, connecting and routing communications between multiple client , server , and other node types within the (virtual) vicinity. Believe it or not, most homes with Internet access even have an active gateway. Your local home network, which is likely setup through a router (or router+modem hybrid), typically assigns IP addresses to all the devices on your network using the base address of 192.168.1.* , where the asterisk changes depending on the device. In most cases, communication from one such local network address to another local network address is allowed, but when your computer attempts to connect to an IP address outside of this base range, your router‚Äôs gateway will intercept it and perform the communication between your computer and the remote server on your behalf. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and so forth, before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application onto a secondary staging server that isn‚Äôt ‚Äúlive,‚Äù or isn‚Äôt otherwise active and available to the public. This will give you a clean testing ground with which to test all potential fixes to resolve the issue, without threatening the security or sanctity of your live application. If you‚Äôre running common software packages on the server that is throwing the 502 Bad Gateway Error , you may want to start by looking into the stability and functionality of those platforms first. The most common content management systems ‚Äî like WordPress, Joomla!, and Drupal ‚Äî are all typically well-tested out of the box, but once you start making modifications to the underlying extensions or PHP code (the language in which nearly all modern content management systems are written in), it‚Äôs all too easy to cause an unforeseen issue that results in a 502 Bad Gateway Error . Here are a few tips to help you troubleshoot some of these popular software platforms: Rollback Recent Upgrades ‚Äì If you recently updated the content management system itself just before the 502 Bad Gateway Error appeared, you may want to consider rolling back to the previous version you had installed when things were working fine. Similarly, any extensions or modules that you may have recently upgraded can also cause server-side issues, so reverting to previous versions of those may also help. For assistance with this task, simply Google ‚Äúdowngrade [PLATFORM_NAME]‚Äù and follow along. In some cases, however, certain CMSs don‚Äôt really provide a version downgrade capability, which indicates that they consider the base application, along with each new version released, to be extremely stable and bug-free. This is typically the case for the more popular platforms, so don‚Äôt be afraid if you can‚Äôt find an easy way to revert the platform to an older version. Uninstall New Extensions, Modules, or Plugins ‚Äì Depending on the particular content management system your application is using, the exact name of these components will be different, but they serve the same purpose across every system: improving the capabilities and features of the platform beyond what it‚Äôs normally capable of out of the box. But be warned: such extensions can, more or less, take full control of the system and make virtually any changes, whether it be to the PHP code, HTML, CSS, JavaScript, or database. As such, it may be wise to uninstall any new extensions that may have been recently added. Again, Google the extension name for the official documentation and assistance with this process. Check for Unexpected Database Changes ‚Äì It‚Äôs worth noting that, even if you uninstall an extension through the CMS dashboard, this doesn‚Äôt guarantee that changes made by the extension have been fully reverted. This is particularly true for many WordPress extensions, which are given carte blanche within the application, including full access rights to the database. Unless the extension author explicitly codes such things in, there are scenarios where an extension may modify database records that don‚Äôt ‚Äúbelong‚Äù to the extension itself, but are instead created and managed by other extensions (or even the base CMS itself). In those scenarios, the extension may not know how to revert alterations to database records, so it will ignore such things during uninstallation. Diagnosing such problems can be tricky, but I‚Äôve personally encountered such scenarios multiple times, so your best course of action, assuming you‚Äôre reasonably convinced an extension is the likely culprit for the 502 Bad Gateway Error , is to open the database and manually look through tables and records that were likely modified by the extension. Confirm Proper File Permissions ‚Äì If the application was working fine before and suddenly this error occurs, permissions are not a very likely culprit. However, if modifications were recently made (such as upgrades or installations), it‚Äôs possible that file permissions were changed or are otherwise incorrect, which could cause an issue to propagate its way throughout the application and eventually lead to a 502 Bad Gateway Error . The vast majority of servers use Unix-based operating systems, so have a look here , or elsewhere on the web, for more information on setting up proper permissions for application files and directories to keep things secure, while also allowing your application access where it‚Äôs needed. Above all, Google is your friend. Don‚Äôt be afraid to search for specific terms related to your issue, such as the name of your application‚Äôs CMS, along with the 502 Bad Gateway Error . Chances are you‚Äôll find someone (or, perhaps, many someones) who have experienced this issue and have potentially been provided a solution. If you aren‚Äôt running a CMS application ‚Äî or even if you are, but you‚Äôre confident the 502 Bad Gateway Error isn‚Äôt related to that ‚Äî here are some additional tips to help you troubleshoot what might be causing the issue on the server-side of things: Recent DNS Changes ‚Äì The Domain Name System ( DNS ) is a decentralized naming system for devices connected through a network (even a massive network, such as the Internet itself). In short, the DNS associates domain names (e.g. airbrake.io ) to specific IP addresses, and stores that association in a series of authoritative name servers spread around the world. Thus, when you ask your computer to connect to airbrake.io , your computer actually checks with a nearby DNS name server to find out what the specific IP address (internet resource) is that it should connect to. From your perspective it‚Äôs going directly to airbrake.io , but behind the scenes the traffic is routed to an IP address ( 52.203.232.56 , in this case). Consequently, your application may present a 502 Bad Gateway Error if your site has made recent changes to its DNS server, which is a result of changing host servers or moving the site to a different IP address. Such DNS changes, known as DNS propagation , are not instant and can sometimes take a few hours to propagate throughout all the authoritative name servers. Server Connectivity Issues ‚Äì While it may sound simple, it‚Äôs entirely possible that a 502 Bad Gateway Error simply indicates that a server somewhere in the chain is down or unreachable for whatever reason. Most modern applications don‚Äôt reside on a single server, but may, instead, be spread over multiple systems, or even rely on many third-party services to function. If any one of these servers are down for maintenance or otherwise inaccessible, this could result in an error that appears to be from your own application. Improper Firewall Configuration ‚Äì A firewall is a basic security device that monitors network traffic and acts as a gatekeeper, deciding which traffic is safe and which could be malicious. In most cases, all potentially harmful traffic is stopped (and may be logged for network admin use). In some situations, it‚Äôs entirely possible for a firewall configured somewhere on the network in which your application is running to be preventing some form of critical traffic from getting through. This is particularly true for applications that rely on content delivery networks ( CDNs ), which act as a third-party host for ‚Äúheavy‚Äù content like images or videos, hosting that content on behalf of your application, so your application can maintain its speed and efficiency. However, automatic firewall services can sometimes perform false positives, mistaking perfectly safe and valid content from CDNs or elsewhere as malicious, thereby shutting off that stream of content in an instant, which could lead to a 502 Bad Gateway Error . Check the Logs ‚Äì Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. Application Code or Script Bugs ‚Äì If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 502 Bad Gateway Error occurred and view the application code at the moment something goes wrong. Ultimately, if a 502 Bad Gateway Error is popping up within your application, you should strongly consider an error management tool that will help you automatically detect exceptions and report them to you and your team the moment they occur. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-10-05"},
{"website": "Airbrake", "title": "410 Gone Error: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/410-gone", "abstract": "The 410 Gone Error is an HTTP response status code indicating that the resource requested by the client has been permanently deleted, and that the client should not expect an alternative redirection or forwarding address. The 410 Gone code may appear similar to the 404 Not Found code that we looked at few months ago , but the two codes serve a distinctly different purpose. A 404 code indicates that the requested resource is not currently available, but it could be available in future requests. Conversely, a 410 code is an explicit indication that the requested resource used to exist, but it has since been permanently removed and will not be available in the future. Thus, a 404 response code indicates that the user agent (browser) can repeat requests to the same resource URI , while a 410 tells the user agent not to repeat requests to that same resource. Like most HTTP response codes ‚Äî especially those that indicate an error ‚Äî the appearance of a 410 Gone Error can be a challenge to properly diagnose and resolve. With a potential pool of over 50 status codes that represent the complex relationship between the client, a web application, a web server, and often multiple third-party web services, determining the cause of a particular status code can be a challenge under the best of circumstances. In this article we‚Äôll examine the 410 Gone Error in more detail by looking at what might cause a message, along with a handful of tips for diagnosing and debugging the appearance of this error within your own application. We‚Äôll even examine a number of the most popular content management systems ( CMSs ) for potential problem areas that could cause your own website to be generating a 410 Gone Error unexpectedly. Let‚Äôs dive in! All HTTP response status codes that are in the 4xx category are considered client error responses . These types of messages contrast with errors in the 5xx category, such as the 504 Gateway Timeout Error we explored a while back , which are considered server error responses . That said, the appearance of a 4xx error doesn‚Äôt necessarily mean the issue is on the client side, where the ‚Äúclient‚Äù is the web browser or device being used to access the application. Oftentimes, if you‚Äôre trying to diagnose an issue with your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Many smart phone apps that have a modern looking user interface are actually powered by a normal web application behind the scenes; one that is simply hidden from the user. On the other hand, this doesn‚Äôt rule out the client as the actual cause of a 410 Gone Error , either. In many cases, the client may be unintentionally sending a request to the wrong resource, which may lead to an 410 Gone Error . We‚Äôll explore some of these scenarios (and potential solutions) down below, but be aware that, even though the 410 Gone Error is considered a client error response , it doesn‚Äôt inherently mean we can rule out either the client nor the server as the culprit in this scenario. In these scenarios, the server is still the network object that is producing the 410 Gone Error , and returning it as the HTTP response code to the client, but it could be that the client is causing the issue in some way. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and so forth, before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application onto a secondary staging server that isn‚Äôt ‚Äúlive,‚Äù or isn‚Äôt otherwise active and available to the public. This will give you a clean testing ground with which to test all potential fixes to resolve the issue, without threatening the security or sanctity of your live application. As discussed in the introduction, a 410 Gone Error indicates that the user agent (the web browser, in most cases) has requested a resource that has been permanently deleted from the server . This could happen in a few different circumstances: The server used to have a valid resource available at the requested location, but it was intentionally removed. The server should have a valid resource at the requested location, but it is unintentionally reporting that the resource has been removed. The client is trying to request the incorrect resource. Since the 410 Gone Error is a client error response code, it‚Äôs best to start by troubleshooting any potential client-side issues that could be causing this error. Here are a handful of tips to try on the browser or device that is giving you problems. The most common cause of a 410 Gone Error is simply inputting an incorrect URL. As discussed before, many web servers are tightly secured to disallow access to improper URLs that the server isn‚Äôt prepared to provide access to. This could be anything from trying to access a file directory via a URL to attempting to gain access to a private page meant for other users. Since 410 codes are not as common as 404 codes, the appearance of a 410 usually means that the requested URL was at one time valid, but that is no longer the case. Either way, it‚Äôs a good idea to double-check the exact URL that is returning the 410 Gone Error error to make sure it is intended resource. If you‚Äôre running common software packages on the server that is responding with the 410 Gone Error , you may want to start by looking into the stability and functionality of those platforms first. The most common content management systems ‚Äî like WordPress, Joomla!, and Drupal ‚Äî are all typically well-tested out of the box, but once you start making modifications to the underlying extensions or PHP code (the language in which nearly all modern content management systems are written in), it‚Äôs all too easy to cause an unforeseen issue that results in a 410 Gone Error . There are a few tips below aimed at helping you troubleshoot some of these popular software platforms. If you recently updated the content management system itself just before the 410 Gone Error appeared, you may want to consider rolling back to the previous version you had installed when things were working fine. Similarly, any extensions or modules that you may have recently upgraded can also cause server-side issues, so reverting to previous versions of those may also help. For assistance with this task, simply Google ‚Äúdowngrade [PLATFORM_NAME]‚Äù and follow along. In some cases, however, certain CMSs don‚Äôt really provide a version downgrade capability, which indicates that they consider the base application, along with each new version released, to be extremely stable and bug-free. This is typically the case for the more popular platforms, so don‚Äôt be afraid if you can‚Äôt find an easy way to revert the platform to an older version. Depending on the particular content management system your application is using, the exact name of these components will be different, but they serve the same purpose across every system: improving the capabilities and features of the platform beyond what it‚Äôs normally capable of out of the box. But be warned: such extensions can, more or less, take full control of the system and make virtually any changes, whether it be to the PHP code, HTML, CSS, JavaScript, or database. As such, it may be wise to uninstall any new extensions that may have been recently added. Again, Google the extension name for the official documentation and assistance with this process. It‚Äôs worth noting that, even if you uninstall an extension through the CMS dashboard, this doesn‚Äôt guarantee that changes made by the extension have been fully reverted. This is particularly true for many WordPress extensions, which are given carte blanche within the application, including full access rights to the database. Unless the extension author explicitly codes such things in, there are scenarios where an extension may modify database records that don‚Äôt ‚Äúbelong‚Äù to the extension itself, but are instead created and managed by other extensions (or even the base CMS itself). In those scenarios, the extension may not know how to revert alterations to database records, so it will ignore such things during uninstallation. Diagnosing such problems can be tricky, but I‚Äôve personally encountered such scenarios multiple times, so your best course of action, assuming you‚Äôre reasonably convinced an extension is the likely culprit for the 410 Gone Error , is to open the database and manually look through tables and records that were likely modified by the extension. Above all, don‚Äôt be afraid to Google your issue. Try searching for specific terms related to your issue, such as the name of your application‚Äôs CMS, along with the 410 Gone Error . Chances are you‚Äôll find someone who has experienced the same issue. If you aren‚Äôt running a CMS application ‚Äî or even if you are, but you‚Äôre confident the 410 Gone Error isn‚Äôt related to that ‚Äî here are some additional tips to help you troubleshoot what might be causing the issue on the server-side of things. Your application is likely running on a server that is using one of the two most popular web server softwares, Apache or nginx . At the time of publication, both of these web servers make up over 84% of the world‚Äôs web server software ! Thus, one of the first steps you can take to determine what might be causing these 410 Gone Redirect response codes is to check the configuration files for your web server software for unintentional redirect instructions. To determine which web server your application is using you‚Äôll want to look for a key file. If your web server is Apache then look for an .htaccess file within the root directory of your website file system. For example, if your application is on a shared host you‚Äôll likely have a username associated with the hosting account. In such a case, the application root directory is typically found at the path of /home/<username>/public_html/ , so the .htaccess file would be at /home/<username>/public_html/.htaccess . If you located the .htaccess file then open it in a text editor and look for lines that use RewriteXXX directives, which are part of the mod_rewrite module in Apache. Covering exactly how these rules work is well beyond the scope of this article, however, the basic concept is that a RewriteCond directive defines a text-based pattern that will be matched against entered URLs. If a matching URL is requested by a visitor to the site, the RewriteRule directive that follows one or more RewriteCond directives is used to perform the actual redirection of the request to the appropriate URL. For example, here is a simple RewriteRule that matches all incoming requests to https://airbrake.io/expired_page and responding with a 410 Gone Redirect error code: Notice the R=410 flag at the end of the RewriteRule , which explicitly states that the response code should be 410 , indicating to user agents that the resource has been permanently deleted and no future requests should be made. Thus, if you find any strange RewriteCond or RewriteRule directives in the .htaccess file that don‚Äôt seem to belong, try temporarily commenting them out (using the # character prefix) and restarting your web server to see if this resolves the issue. On the other hand, if your server is running on nginx , you‚Äôll need to look for a completely different configuration file. By default this file is named nginx.conf and is located in one of a few common directories: /usr/local/nginx/conf , /etc/nginx , or /usr/local/etc/nginx . Once located, open nginx.conf in a text editor and look for directives that are using the 410 response code flag. For example, here is a simple block directive (i.e. a named set of directives) that configures a virtual server for airbrake.io and ensures that the error page presented to a user agent that makes a 404 Not Found request is sent to the /deleted.html error page and given a 410 Gone error code response: Have a look through your nginx.conf file for any abnormal directives or lines that include the 410 flag. Comment out any abnormalities before restarting the server to see if the issue was resolved. Configuration options for each different type of web server can vary dramatically, so we‚Äôll just list a few popular ones to give you some resources to look through, depending on what type of server your application is running on: Apache Nginx IIS Node.js Apache Tomcat Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 410 Gone Error occurred and view the application code at the moment something goes wrong. No matter the cause ‚Äî and even if you managed to fix it this time ‚Äî the appearance of an issue like the 410 Gone Error within your own application is a good indication you may want to implement an error management tool, which will help you automatically detect errors and report them to you at the very moment they occur. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-12-28"},
{"website": "Airbrake", "title": "408 Request Timeout: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/408-request-timeout", "abstract": "The 408 Request Timeout is an HTTP response status code indicating that the server did not receive a complete request from the client within the server‚Äôs allotted timeout period. The 408 Request Timeout error code appears similar to the 504 Gateway Timeout error we explored in a previous article , which indicates that that a server acting as a gateway or proxy timed out. However, the 408 Request Timeout error isn‚Äôt a message from a gateway or proxy server somewhere in the node chain, but is a direct message from the active server the client has connected to (like a the web server) It can be difficult to find the cause of unexpected HTTP response codes and the 408 Request Timeout error code is no exception. With a potential pool of over 50 status codes used to represent the complex relationship between the client, a web application, a web server, and (possibly) multiple third-party web services, determining the cause of a particular status code can be challenging, even under the best of circumstances. In this article we‚Äôll explore the 408 Request Timeout in greater depth by looking at what might cause this message to appear, including a few tips you can use to diagnose and debug the appearance of this error within your own application. We‚Äôll even look at a number of the most popular content management systems ( CMSs ) for potential problem areas that could cause your own website to be unexpectedly generating 408 Request Timeout errors. Let‚Äôs dive right in! All HTTP response status codes within the 4xx category are considered client error responses . Errors in the 4xx category contrast with those from the 5xx category, such as the aforementioned 504 Gateway Timeout we examined earlier , which are considered server error responses . That said, the appearance of a 4xx error doesn‚Äôt necessarily mean the issue is on the client side (the ‚Äúclient‚Äù, in this case, is typically the web browser or device being used to access the application). Oftentimes, if you‚Äôre trying to diagnose an issue within your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Smart phone applications often implement modern looking user interfaces that are actually powered by normal web applications behind the scenes. On the other hand, the server could be the root cause of a 408 Request Timeout error. In some cases, the server may be misconfigured and may be handling requests improperly, which can result in 408 code responses and other troublesome traffic routing issues. We‚Äôll explore some of these scenarios (and potential solutions) down below, but be aware that, even though the 408 Request Timeout is considered a client error response , it doesn‚Äôt necessarily mean we can rule out either the client nor the server as the culprit in this scenario. In these situations, the server is still the network object that is producing the 408 Request Timeout and returning it as the HTTP response code to the client , but it could be that the client is causing the issue in some way. As usual, it is better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and all other components of your website or application before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application and stick the copy on a secondary staging server that is either inactive, or publicly inaccessible. This will give you a clean testing ground on which to test all potential fixes needed to resolve the issue, without threatening the security or sanctity of your live application. A 408 Request Timeout response code indicates that the server did not receive a complete request from the client within a specific period of time tracked by the server (i.e. the timeout period). As specified in the RFC7235 HTTP/1.1 Semantics and Content standards document server should include the special Connection header with the close directive as part of its response (e.g. Connection: close ), which informs the client that the connection should be closed. Put simply, a 408 code informs the client that the server has decided to close the connection rather than continue waiting for the transaction to complete. Upon receiving the Connection: close header the client can opt to repeat the original request using a new connection. Most modern browsers implement HTTP preconnection mechanisms , which provides the user agent (i.e. browser) to speed up overall web surfing experiences by essentially predicting what resources ‚Äî and therefore connections ‚Äî the client may be using in the immediate future. The full scope of how browsers use these mechanisms is well beyond the scope of this article, but you can check out the W3C Resource Hints documentation for more details. Since the 408 Request Timeout is a client error response code, it‚Äôs best to start by troubleshooting any potential client-side issues that could be causing this error. Here are a handful of tips to try on the browser or device that is giving you problems. The most common cause of a 408 Request Timeout is simply inputting an incorrect URL. Many servers are tightly secured, so as to disallow unexpected requests to resources that a client/user agent should not have access to. It may be that the requested URL is slightly incorrect, which is causing the user agent to request an unintended resource, which may be routed through a proxy server that requires authentication. For example, a request to the URI https://airbrake.io/login might route requests through a separate proxy server used to handle user authentication. If the original request did not contain appropriate credentials, the result could be a 408 Request Timeout error response. It‚Äôs always a good idea to double-check the exact URL that is returning the 408 Request Timeout error to make sure it is intended resource. If you‚Äôre running common software packages on the server that is responding with the 408 Request Timeout , you may want to start by looking into the stability and functionality of those platforms first. The most common content management systems ‚Äî like WordPress, Joomla!, and Drupal ‚Äî are all typically well-tested out of the box, but once you start making modifications to the underlying extensions or PHP code (the language in which nearly all modern content management systems are written in), it‚Äôs all too easy to cause an unforeseen issue that results in a 408 Request Timeout . There are a few tips below aimed at helping you troubleshoot some of these popular software platforms. If you recently updated the content management system itself just before the 408 Request Timeout appeared, you may want to consider rolling back to the previous version you had installed when things were working fine. Similarly, any extensions or modules that you may have recently upgraded can also cause server-side issues, so reverting to previous versions of those may also help. For assistance with this task, simply Google ‚Äúdowngrade [PLATFORM_NAME]‚Äù and follow along. In some cases, however, certain CMSs don‚Äôt really provide a version downgrade capability, which indicates that they consider the base application, along with each new version released, to be extremely stable and bug-free. This is typically the case for the more popular platforms, so don‚Äôt be afraid if you can‚Äôt find an easy way to revert the platform to an older version. Depending on the particular content management system your application is using, the exact name of these components will be different, but they serve the same purpose across every system: improving the capabilities and features of the platform beyond what it‚Äôs normally capable of out of the box. But be warned: such extensions can, more or less, take full control of the system and make virtually any changes, whether it be to the PHP code, HTML, CSS, JavaScript, or database. As such, it may be wise to uninstall any new extensions that may have been recently added. Again, Google the extension name for the official documentation and assistance with this process. It‚Äôs worth noting that, even if you uninstall an extension through the CMS dashboard, this doesn‚Äôt guarantee that changes made by the extension have been fully reverted. This is particularly true for many WordPress extensions, which are given carte blanche within the application, including full access rights to the database. Unless the extension author explicitly codes such things in, there are scenarios where an extension may modify database records that don‚Äôt ‚Äúbelong‚Äù to the extension itself, but are instead created and managed by other extensions (or even the base CMS itself). In those scenarios, the extension may not know how to revert alterations to database records, so it will ignore such things during uninstallation. Diagnosing such problems can be tricky, but I‚Äôve personally encountered such scenarios multiple times, so your best course of action, assuming you‚Äôre reasonably convinced an extension is the likely culprit for the 408 Request Timeout , is to open the database and manually look through tables and records that were likely modified by the extension. Above all, don‚Äôt be afraid to Google your issue. Try searching for specific terms related to your issue, such as the name of your application‚Äôs CMS, along with the 408 Request Timeout . Chances are you‚Äôll find someone who has experienced the same issue. If you aren‚Äôt running a CMS application ‚Äî or even if you are, but you‚Äôre confident the 408 Request Timeout isn‚Äôt related to that ‚Äî here are some additional tips to help you troubleshoot what might be causing the issue on the server-side of things. Your application is likely running on a server that is using one of the two most popular web server softwares, Apache or nginx . At the time of publication, both of these web servers make up 84% of the world‚Äôs web server software ! Thus, one of the first steps you can take to determine what might be causing these 408 Request Timeout response codes is to check the configuration files for your web server software for unintentional redirect or request handling instructions. To determine which web server your application is using you‚Äôll want to look for a key file. If your web server is Apache then look for an .htaccess file within the root directory of your website file system. For example, if your application is on a shared host you‚Äôll likely have a username associated with the hosting account. In such a case, the application root directory is typically found at the path of /home/<username>/public_html/ , so the .htaccess file would be at /home/<username>/public_html/.htaccess . If you located the .htaccess file then open it in a text editor and look for lines that use KeepAliveTimeout or RequestReadTimeout directives. KeepAliveTimeout is part of the core module, while RequestReadTimeout is from the reqtimeout module in Apache. Covering exactly how these directives work is well beyond the scope of this article, however, the basic concept is that these timeout directives inform the server to allow for incoming client requests to take only a certain amount of time before they are considered failed and closed via a 408 response. For example, here we‚Äôre using the RequestReadTimeout directive to set header and body timeouts of 15 and 30 seconds: Look for any strange timeout directives in the .htaccess file that don‚Äôt seem to belong, then try temporarily commenting them out (using the # character prefix) and restarting your web server to see if this resolves the issue. On the other hand, if your server is running on nginx , you‚Äôll need to look for a completely different configuration file. By default this file is named nginx.conf and is located in one of a few common directories: /usr/local/nginx/conf , /etc/nginx , or /usr/local/etc/nginx . Once located, open nginx.conf in a text editor and look for client_body_timeout , client_header_timeout , or keepalive_timeout directives, which are all part of the http_core Nginx module. For example, here is a simple block directive (i.e. a named set of directives) that configures a virtual server for airbrake.io and sets the client header and body timeouts to 15 and 30 seconds, respectively: Have a look through your nginx.conf file for any abnormal _timeout directives and comment out any abnormalities before restarting the server to see if the issue was resolved. Configuration options for each different type of web server can vary dramatically, so we‚Äôll just list a few popular ones to give you some resources to look through, depending on what type of server your application is running on: Apache Nginx IIS Node.js Apache Tomcat Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 408 Request Timeout occurred and view the application code at the moment something goes wrong. No matter the cause ‚Äî and even if you managed to fix this particular error this time around ‚Äî the appearance of an issue like the 408 Request Timeout within your own application is a good indication you may want to implement an error management tool, which will help you automatically detect errors and will alert you the instant they occur. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-02-08"},
{"website": "Airbrake", "title": "406 Not Acceptable: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/406-not-acceptable", "abstract": "The 406 Not Acceptable is an HTTP response status code indicating that the client has requested a response using Accept- headers that the server is unable to fulfill. This is typically a result of the user agent (i.e. browser) specifying an acceptable character set (via Accept-Charset ), language (via Accept-Language ), and so forth that should be responded with, and the server being unable to provide such a response. Like most HTTP response codes ‚Äî especially for those that indicate an error ‚Äî the cause of a 406 Not Acceptable error code can be difficult to track down and fix. With a potential pool of over 50 status codes that represent the complex relationship between the client, a web application, a web server, and often multiple third-party web services, determining the cause of a particular status code can be a challenge under the best of circumstances. In this article we‚Äôll examine the 406 Not Acceptable in more detail by looking at what might cause a message, along with a handful of tips for diagnosing and debugging the appearance of this error within your own application. We‚Äôll even examine a number of the most popular content management systems ( CMSs ) for potential problem areas that could cause your own website to be generating a 406 Not Acceptable unexpectedly. Let‚Äôs dive in! All HTTP response status codes that are in the 4xx category are considered client error responses . This category contrasts with 5xx classification errors, such as the 504 Gateway Timeout Error we explored a few months ago , which are considered server error responses . That said, the appearance of a 4xx error doesn‚Äôt necessarily mean the issue is on the client side, where the ‚Äúclient‚Äù is the web browser or device being used to access the application. Oftentimes, if you‚Äôre trying to diagnose an issue within your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Many smart phone apps, which implement a modern looking user interface, are actually powered by a normal web application behind the scenes that is simply hidden from the user. On the other hand, the server could be the root cause of a 406 Not Acceptable error. In some cases, the server may be misconfigured and handling requests improperly, which can result in 406 code responses and other problematic traffic routing issues. We‚Äôll explore some of these scenarios (and potential solutions) down below, but be aware that, even though the 406 Not Acceptable is considered a client error response , it doesn‚Äôt inherently mean we can rule out either the client nor the server as the culprit in this scenario. In these scenarios, the server is still the network object that is producing the 406 Not Acceptable and returning it as the HTTP response code to the client, but it could be that the client is causing the issue in some way. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and all other components of your website or application before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application and stick the copy on a secondary staging server that isn‚Äôt active or is inaccessible to the public. This will give you a clean testing ground with which to test all potential fixes to resolve the issue, without threatening the security or sanctity of your live application. As discussed in the introduction, a 406 Not Acceptable indicates that the user agent (the web browser, in most cases) has requested a valid resource, however the request included a special Accept- header that indicates to the server a valid response can only contain certain types of information. Here are a few examples of such scenarios: The user agent may be localized to a particular locale or language that the server cannot provide. For example, a user agent may use the Accept-Language request header to specify a valid language of French ( Accept-Language: fr ), but if the server cannot serve a response in French, a 406 code may be the only proper response. The user agent may be requesting a specific type of content to be returned by the server. These content types, commonly know as MIME types , define things like plain text ( text/plain ), PNG images ( image/png ), mp4 videos ( video/mp4 ), and so forth. Thus, the client may include the Accept header in the request and define an explicit MIME type that should be provided by the server (e.g. Accept: application/xml ). If the server is unable to respond with the matching content type that was requested a 406 Not Acceptable response may be necessary. There are handful of other Accept- headers that can be provided in HTTP requests, but the vast majority of scenarios are similar to above: The user agent wants an explicit type of response, and the server either provides it, or it may return a 406 code indicating it cannot fulfill the request. Since the 406 Not Acceptable is a client error response code, it‚Äôs best to start by troubleshooting any potential client-side issues that could be causing this error. Here are a handful of tips to try on the browser or device that is giving you problems. The most common cause of a 406 Not Acceptable is simply inputting an incorrect URL. Many servers are tightly secured, so as to disallow unexpected requests to resources that a client/user agent should not have access to. It may be that the requested URL is slightly incorrect, which is causing the user agent to request a specific type of response. For example, a request to the URI https://airbrake.io?json might indicate to the server that a JSON response is required. Since 406 codes are not as common as 404 codes, the appearance of a 406 could means that the requested URL is valid, but the browser may be misinterpreting the intended request type. Either way, it‚Äôs a good idea to double-check the exact URL that is returning the 406 Not Acceptable error to make sure it is intended resource. If you‚Äôre running common software packages on the server that is responding with the 406 Not Acceptable , you may want to start by looking into the stability and functionality of those platforms first. The most common content management systems ‚Äî like WordPress, Joomla!, and Drupal ‚Äî are all typically well-tested out of the box, but once you start making modifications to the underlying extensions or PHP code (the language in which nearly all modern content management systems are written in), it‚Äôs all too easy to cause an unforeseen issue that results in a 406 Not Acceptable . There are a few tips below aimed at helping you troubleshoot some of these popular software platforms. If you recently updated the content management system itself just before the 406 Not Acceptable appeared, you may want to consider rolling back to the previous version you had installed when things were working fine. Similarly, any extensions or modules that you may have recently upgraded can also cause server-side issues, so reverting to previous versions of those may also help. For assistance with this task, simply Google ‚Äúdowngrade [PLATFORM_NAME]‚Äù and follow along. In some cases, however, certain CMSs don‚Äôt really provide a version downgrade capability, which indicates that they consider the base application, along with each new version released, to be extremely stable and bug-free. This is typically the case for the more popular platforms, so don‚Äôt be afraid if you can‚Äôt find an easy way to revert the platform to an older version. Depending on the particular content management system your application is using, the exact name of these components will be different, but they serve the same purpose across every system: improving the capabilities and features of the platform beyond what it‚Äôs normally capable of out of the box. But be warned: such extensions can, more or less, take full control of the system and make virtually any changes, whether it be to the PHP code, HTML, CSS, JavaScript, or database. As such, it may be wise to uninstall any new extensions that may have been recently added. Again, Google the extension name for the official documentation and assistance with this process. It‚Äôs worth noting that, even if you uninstall an extension through the CMS dashboard, this doesn‚Äôt guarantee that changes made by the extension have been fully reverted. This is particularly true for many WordPress extensions, which are given carte blanche within the application, including full access rights to the database. Unless the extension author explicitly codes such things in, there are scenarios where an extension may modify database records that don‚Äôt ‚Äúbelong‚Äù to the extension itself, but are instead created and managed by other extensions (or even the base CMS itself). In those scenarios, the extension may not know how to revert alterations to database records, so it will ignore such things during uninstallation. Diagnosing such problems can be tricky, but I‚Äôve personally encountered such scenarios multiple times, so your best course of action, assuming you‚Äôre reasonably convinced an extension is the likely culprit for the 406 Not Acceptable , is to open the database and manually look through tables and records that were likely modified by the extension. Above all, don‚Äôt be afraid to Google your issue. Try searching for specific terms related to your issue, such as the name of your application‚Äôs CMS, along with the 406 Not Acceptable . Chances are you‚Äôll find someone who has experienced the same issue. If you aren‚Äôt running a CMS application ‚Äî or even if you are, but you‚Äôre confident the 406 Not Acceptable isn‚Äôt related to that ‚Äî here are some additional tips to help you troubleshoot what might be causing the issue on the server-side of things. Your application is likely running on a server that is using one of the two most popular web server softwares, Apache or nginx . At the time of publication, both of these web servers make up 84% of the world‚Äôs web server software ! Thus, one of the first steps you can take to determine what might be causing these 406 Not Acceptable response codes is to check the configuration files for your web server software for unintentional redirect or request handling instructions. To determine which web server your application is using you‚Äôll want to look for a key file. If your web server is Apache then look for an .htaccess file within the root directory of your website file system. For example, if your application is on a shared host you‚Äôll likely have a username associated with the hosting account. In such a case, the application root directory is typically found at the path of /home/<username>/public_html/ , so the .htaccess file would be at /home/<username>/public_html/.htaccess . If you located the .htaccess file then open it in a text editor and look for lines that use RewriteXXX directives, which are part of the mod_rewrite module in Apache. Covering exactly how these rules work is well beyond the scope of this article, however, the basic concept is that a RewriteCond directive defines a text-based pattern that will be matched against entered URLs. If a matching URL is requested by a visitor to the site, the RewriteRule directive that follows one or more RewriteCond directives is used to perform the actual redirection of the request to the appropriate URL. For example, here is a simple RewriteRule that matches all incoming requests to https://airbrake.io/users/json that do not contain an Accept: application/json request header. The result is a redirection and 406 Not Acceptable response error code: Notice the R=406 flag at the end of the RewriteRule , which explicitly states that the response code should be 406 , indicating to user agents that the resource exists, but the explicit Accept- headers could not be fulfilled. Thus, if you find any strange RewriteCond or RewriteRule directives in the .htaccess file that don‚Äôt seem to belong, try temporarily commenting them out (using the # character prefix) and restarting your web server to see if this resolves the issue. On the other hand, if your server is running on nginx , you‚Äôll need to look for a completely different configuration file. By default this file is named nginx.conf and is located in one of a few common directories: /usr/local/nginx/conf , /etc/nginx , or /usr/local/etc/nginx . Once located, open nginx.conf in a text editor and look for directives that are using the 406 response code flag. For example, here is a simple block directive (i.e. a named set of directives) that configures a virtual server for airbrake.io and ensures that, similar to above, a request to https://airbrake.io/users/json that doesn‚Äôt include an Accept: application/json request header will fail and is met with a 406 response code: Have a look through your nginx.conf file for any abnormal directives or lines that include the 406 flag. Comment out any abnormalities before restarting the server to see if the issue was resolved. Configuration options for each different type of web server can vary dramatically, so we‚Äôll just list a few popular ones to give you some resources to look through, depending on what type of server your application is running on: Apache Nginx IIS Node.js Apache Tomcat Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 406 Not Acceptable occurred and view the application code at the moment something goes wrong. No matter the cause ‚Äî and even if you managed to fix it this time ‚Äî the appearance of an issue like the 406 Not Acceptable within your own application is a good indication you may want to implement an error management tool, which will help you automatically detect errors and will alert you the very moment they occur. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-01-25"},
{"website": "Airbrake", "title": "405 Method Not Allowed: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/405-method-not-allowed", "abstract": "The 405 Method Not Allowed is an HTTP response status code indicating that the specified request HTTP method was received and recognized by the server, but the server has rejected that particular method for the requested resource. This message is distinctly different from the 404 Not Found code that we looked at a while back . A 404 Not Found error indicates that the requested resource could not be found, and is often the result of an incorrect URL, or trying to access a resource for which the client has inadequate permissions. Conversely, a 405 code response confirms that the requested resource is valid and exists, but the client has used an unacceptable HTTP method during the request. Like most HTTP response codes ‚Äî especially for those that indicate an error ‚Äî the cause of a 405 Method Not Allowed reponse can be difficult to track down and fix. With a potential pool of over 50 status codes that represent the complex relationship between the client, a web application, a web server, and often multiple third-party web services, determining the cause of a particular status code can be a challenge under the best of circumstances. In this article we‚Äôll examine the 405 Method Not Allowed in more detail by looking at what might cause a message, along with a handful of tips for diagnosing and debugging the appearance of this error within your own application. We‚Äôll even examine a number of the most popular content management systems ( CMSs ) for potential problem areas that could cause your own website to be generating a 405 Method Not Allowed unexpectedly. Let‚Äôs dive in! All HTTP response status codes that are in the 4xx category are considered client error responses . This category contrasts with 5xx classification errors, such as the 503 Service Unavailable Error we explored a few months ago , which are considered server error responses . That said, the appearance of a 4xx error doesn‚Äôt necessarily mean the issue is on the client side, where the ‚Äúclient‚Äù is the web browser or device being used to access the application. Oftentimes, if you‚Äôre trying to diagnose an issue within your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Many smart phone apps, which implement a modern looking user interface, are actually powered by a normal web application behind the scenes that is simply hidden from the user. On the other hand, this doesn‚Äôt entirely rule out the server as the actual cause of a 405 Method Not Allowed . In some cases, the server may be misconfigured and handling requests improperly, which can result in 405 code responses and other problematic traffic routing issues. We‚Äôll explore some of these scenarios (and potential solutions) down below, but be aware that, even though the 405 Method Not Allowed is considered a client error response , it doesn‚Äôt inherently mean we can rule out either the client nor the server as the culprit in this scenario. In these scenarios, the server is still the network object that is producing the 405 Method Not Allowed and returning it as the HTTP response code to the client, but it could be that the client is causing the issue in some way. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and all other components of your website or application before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application and stick the copy on a secondary staging server that isn‚Äôt active or is inaccessible to the public. This will give you a clean testing ground with which to test all potential fixes to resolve the issue, without threatening the security or sanctity of your live application. As discussed in the introduction, a 405 Method Not Allowed indicates that the user agent (the web browser, in most cases) has requested a valid resource using an invalid HTTP method. This could happen in a few different circumstances: The user agent is accidentally sending an incorrect HTTP method. The server is expecting only a handful of valid HTTP methods for the requested resource. There are currently 9 possible HTTP methods that can be used, though some of them are far more prevalent than others. For example, the GET method handles the vast majority of requests made on the Internet, as it is used solely to retrieve data (i.e. ‚Äúget‚Äù a page or resource). The POST method is the second-most common, and it‚Äôs typically used to send data to the server (such as login credentials). Since each of the possible HTTP methods have their own intended uses, it often doesn‚Äôt make sense for a server to accept requests using certain methods for particular resources. For example, a resource might exist at the URL https://airbrake.io/users/create , which is used by the server to create a new user when valid credentials are sent via a POST HTTP method request. Therefore, in such a scenario, it makes no sense for the server to accept a GET request at that resource/URL, so it may respond with a 405 Method Not Allowed code when such a request is made. Since the 405 Method Not Allowed is a client error response code, it‚Äôs best to start by troubleshooting any potential client-side issues that could be causing this error. Here are a handful of tips to try on the browser or device that is giving you problems. The most common cause of a 405 Method Not Allowed is simply inputting an incorrect URL. As discussed before, many web servers are tightly secured to disallow access to improper URLs that the server isn‚Äôt prepared to provide access to. This could be anything from trying to access a file directory via a URL to attempting to gain access to a private page meant for other users. Since 405 codes are not as common as 404 codes, the appearance of a 405 could means that the requested URL is valid, but is typically used for . Either way, it‚Äôs a good idea to double-check the exact URL that is returning the 405 Method Not Allowed error to make sure it is intended resource. If you‚Äôre running common software packages on the server that is responding with the 405 Method Not Allowed , you may want to start by looking into the stability and functionality of those platforms first. The most common content management systems ‚Äî like WordPress, Joomla!, and Drupal ‚Äî are all typically well-tested out of the box, but once you start making modifications to the underlying extensions or PHP code (the language in which nearly all modern content management systems are written in), it‚Äôs all too easy to cause an unforeseen issue that results in a 405 Method Not Allowed . There are a few tips below aimed at helping you troubleshoot some of these popular software platforms. If you recently updated the content management system itself just before the 405 Method Not Allowed appeared, you may want to consider rolling back to the previous version you had installed when things were working fine. Similarly, any extensions or modules that you may have recently upgraded can also cause server-side issues, so reverting to previous versions of those may also help. For assistance with this task, simply Google ‚Äúdowngrade [PLATFORM_NAME]‚Äù and follow along. In some cases, however, certain CMSs don‚Äôt really provide a version downgrade capability, which indicates that they consider the base application, along with each new version released, to be extremely stable and bug-free. This is typically the case for the more popular platforms, so don‚Äôt be afraid if you can‚Äôt find an easy way to revert the platform to an older version. Depending on the particular content management system your application is using, the exact name of these components will be different, but they serve the same purpose across every system: improving the capabilities and features of the platform beyond what it‚Äôs normally capable of out of the box. But be warned: such extensions can, more or less, take full control of the system and make virtually any changes, whether it be to the PHP code, HTML, CSS, JavaScript, or database. As such, it may be wise to uninstall any new extensions that may have been recently added. Again, Google the extension name for the official documentation and assistance with this process. It‚Äôs worth noting that, even if you uninstall an extension through the CMS dashboard, this doesn‚Äôt guarantee that changes made by the extension have been fully reverted. This is particularly true for many WordPress extensions, which are given carte blanche within the application, including full access rights to the database. Unless the extension author explicitly codes such things in, there are scenarios where an extension may modify database records that don‚Äôt ‚Äúbelong‚Äù to the extension itself, but are instead created and managed by other extensions (or even the base CMS itself). In those scenarios, the extension may not know how to revert alterations to database records, so it will ignore such things during uninstallation. Diagnosing such problems can be tricky, but I‚Äôve personally encountered such scenarios multiple times, so your best course of action, assuming you‚Äôre reasonably convinced an extension is the likely culprit for the 405 Method Not Allowed , is to open the database and manually look through tables and records that were likely modified by the extension. Above all, don‚Äôt be afraid to Google your issue. Try searching for specific terms related to your issue, such as the name of your application‚Äôs CMS, along with the 405 Method Not Allowed . Chances are you‚Äôll find someone who has experienced the same issue. If you aren‚Äôt running a CMS application ‚Äî or even if you are, but you‚Äôre confident the 405 Method Not Allowed isn‚Äôt related to that ‚Äî here are some additional tips to help you troubleshoot what might be causing the issue on the server-side of things. Your application is likely running on a server that is using one of the two most popular web server softwares, Apache or nginx . At the time of publication, both of these web servers make up 84% of the world‚Äôs web server software ! Thus, one of the first steps you can take to determine what might be causing these 405 Method Not Allowed response codes is to check the configuration files for your web server software for unintentional redirect or request handling instructions. To determine which web server your application is using you‚Äôll want to look for a key file. If your web server is Apache then look for an .htaccess file within the root directory of your website file system. For example, if your application is on a shared host you‚Äôll likely have a username associated with the hosting account. In such a case, the application root directory is typically found at the path of /home/<username>/public_html/ , so the .htaccess file would be at /home/<username>/public_html/.htaccess . If you located the .htaccess file then open it in a text editor and look for lines that use RewriteXXX directives, which are part of the mod_rewrite module in Apache. Covering exactly how these rules work is well beyond the scope of this article, however, the basic concept is that a RewriteCond directive defines a text-based pattern that will be matched against entered URLs. If a matching URL is requested by a visitor to the site, the RewriteRule directive that follows one or more RewriteCond directives is used to perform the actual redirection of the request to the appropriate URL. For example, here is a simple RewriteRule that matches all incoming GET requests to https://airbrake.io/users/create and responds with a 405 Method Not Allowed error code: Notice the R=405 flag at the end of the RewriteRule , which explicitly states that the response code should be 405 , indicating to user agents that the resource exists, but the provided HTTP method is not allowed. Thus, if you find any strange RewriteCond or RewriteRule directives in the .htaccess file that don‚Äôt seem to belong, try temporarily commenting them out (using the # character prefix) and restarting your web server to see if this resolves the issue. On the other hand, if your server is running on nginx , you‚Äôll need to look for a completely different configuration file. By default this file is named nginx.conf and is located in one of a few common directories: /usr/local/nginx/conf , /etc/nginx , or /usr/local/etc/nginx . Once located, open nginx.conf in a text editor and look for directives that are using the 405 response code flag. For example, here is a simple block directive (i.e. a named set of directives) that configures a virtual server for airbrake.io and ensures that a POST request to https://airbrake.io/users/create fails and is responded with a 405 response code: Have a look through your nginx.conf file for any abnormal directives or lines that include the 405 flag. Comment out any abnormalities before restarting the server to see if the issue was resolved. Configuration options for each different type of web server can vary dramatically, so we‚Äôll just list a few popular ones to give you some resources to look through, depending on what type of server your application is running on: Apache Nginx IIS Node.js Apache Tomcat Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 405 Method Not Allowed occurred and view the application code at the moment something goes wrong. No matter the cause ‚Äî and even if you managed to fix it this time ‚Äî the appearance of an issue like the 405 Method Not Allowed within your own application is a good indication you may want to implement an error management tool, which will help you automatically detect errors and will alert you the very moment they occur. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-01-18"},
{"website": "Airbrake", "title": "What is a 407 Proxy Authentication Required", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/407-proxy-authentication-required", "abstract": "The 407 Proxy Authentication Required is an HTTP response status code indicating that the server is unable to complete the request because the client lacks proper authentication credentials for a proxy server that is intercepting the request between the client and server. The 407 error code is similar to the 401 Unauthorized error we looked at a few months ago , which indicates that the client could not be authenticated with the server . However, in the case of a 407 Proxy Authentication Required error, the server isn‚Äôt reporting a direct authentication issue, but is instead reporting that the client needs to authenticate with a proxy server, which must send a special Proxy-Authenticate header as part of the response. As with most HTTP response codes ‚Äî especially those that indicate an error ‚Äî the cause of a 407 Proxy Authentication Required error code can be challenging to find and fix. With a possible pool of over 50 status codes used to represent the complex relationship between the client, a web application, a web server, and (possibly) multiple third-party web services, determining the cause of a particular status code can be difficult under the best of circumstances. In this article we‚Äôll examine the 407 Proxy Authentication Required in more detail by looking at what might cause this message to appear, and we‚Äôll go over a handful of tips you can use to diagnose and debug the appearance of this error within your own application. We‚Äôll even examine a number of the most popular content management systems ( CMSs ) for potential problem areas that could cause your own website to be generating a 407 Proxy Authentication Required unexpectedly. Let‚Äôs get to it! All HTTP response status codes that are in the 4xx category are considered client error responses . Errors in the 4xx category contrast with those from the 5xx category, such as the 503 Service Unavailable Error we wrote about a couple months ago , which are considered server error responses . That said, the appearance of a 4xx error doesn‚Äôt necessarily mean the issue is on the client side (the ‚Äúclient‚Äù, in this case, is typically the web browser or device being used to access the application). Oftentimes, if you‚Äôre trying to diagnose an issue within your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Many smart phone apps, which implement a modern looking user interface, are often powered behind the scenes by a normal web application. On the other hand, the server could be the root cause of a 407 Proxy Authentication Required error. In some cases, the server may be misconfigured and handling requests improperly, which can result in 407 code responses and other problematic traffic routing issues. We‚Äôll explore some of these scenarios (and potential solutions) down below, but be aware that, even though the 407 Proxy Authentication Required is considered a client error response , it doesn‚Äôt inherently mean we can rule out either the client nor the server as the culprit in this scenario. In these situations, the server (or a proxy server , in some cases) is still the network object that is producing the 407 Proxy Authentication Required and returning it as the HTTP response code to the client, but it could be that the client is causing the issue in some way. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and all other components of your website or application before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application and stick the copy on a secondary staging server that is either inactive, or publicly inaccessible. This will give you a clean testing ground on which to test all potential fixes needed to resolve the issue, without threatening the security or sanctity of your live application. As discussed in the introduction, a 407 Proxy Authentication Required indicates that the client has failed to provide proper authentication credentials to a proxy server that is a node (i.e. connection) between the client and the primary web server accepting the original request. As specified by RFC7235 HTTP/1.1 Authentication standards document the proxy server must send a special Proxy-Authenticate header, which indicates to the client what type of authentication can be used to complete the original request, and what access that will provide. The basic syntax of the Proxy-Authenticate header is as follows: Proxy-Authenticate: <type> realm=<realm> . The <type> value can be any of the handful of valid authentication schemes allowed in HTTP/1.1, with the most common authentication scheme being Basic , which accepts a username and password credential pair to validate authentication. The <realm> value is used as a simple description of the protected area or ‚Äúscope‚Äù of access that this particular authentication process will provide to the client. Once the client receives a 407 response code that includes a Proxy-Authenticate header indicating the authentication scheme the proxy server will accept, the user agent will then typically respond with the corresponding Proxy-Authorization request header: Proxy-Authorization: <type> <credentials> . Just as with the Proxy-Authenticate response header, <type> in the Proxy-Authorization request header is used to specify the authentication scheme , which should match the scheme required by the proxy server. The <credentials> should be replaced with the valid credentials to authenticate the client. In the case of a Basic authentication scheme the username and password values are concatenated with a colon separator (i.e. username:password ), which is then encoded to a base64 text string. Thus, a full Proxy-Authorization request header using the Basic scheme with a username and password of username and password would look like this: Proxy-Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ= . Once the user agent includes that header in the follow-up request, the proxy server will authenticate and authorize the client and the request will succeed. Since the 407 Proxy Authentication Required is a client error response code, it‚Äôs best to start by troubleshooting any potential client-side issues that could be causing this error. Here are a handful of tips to try on the browser or device that is giving you problems. The most common cause of a 407 Proxy Authentication Required is simply inputting an incorrect URL. Many servers are tightly secured, so as to disallow unexpected requests to resources that a client/user agent should not have access to. It may be that the requested URL is slightly incorrect, which is causing the user agent to request an unintended resource, which may be routed through a proxy server that requires authentication. For example, a request to the URI https://airbrake.io/login might route requests through a separate proxy server used to handle user authentication. If the original request did not contain appropriate credentials, the result could be a 407 Proxy Authentication Required error response. It‚Äôs always a good idea to double-check the exact URL that is returning the 407 Proxy Authentication Required error to make sure it is intended resource. If you‚Äôre running common software packages on the server that is responding with the 407 Proxy Authentication Required , you may want to start by looking into the stability and functionality of those platforms first. The most common content management systems ‚Äî like WordPress, Joomla!, and Drupal ‚Äî are all typically well-tested out of the box, but once you start making modifications to the underlying extensions or PHP code (the language in which nearly all modern content management systems are written in), it‚Äôs all too easy to cause an unforeseen issue that results in a 407 Proxy Authentication Required . There are a few tips below aimed at helping you troubleshoot some of these popular software platforms. If you recently updated the content management system itself just before the 407 Proxy Authentication Required appeared, you may want to consider rolling back to the previous version you had installed when things were working fine. Similarly, any extensions or modules that you may have recently upgraded can also cause server-side issues, so reverting to previous versions of those may also help. For assistance with this task, simply Google ‚Äúdowngrade [PLATFORM_NAME]‚Äù and follow along. In some cases, however, certain CMSs don‚Äôt really provide a version downgrade capability, which indicates that they consider the base application, along with each new version released, to be extremely stable and bug-free. This is typically the case for the more popular platforms, so don‚Äôt be afraid if you can‚Äôt find an easy way to revert the platform to an older version. Depending on the particular content management system your application is using, the exact name of these components will be different, but they serve the same purpose across every system: improving the capabilities and features of the platform beyond what it‚Äôs normally capable of out of the box. But be warned: such extensions can, more or less, take full control of the system and make virtually any changes, whether it be to the PHP code, HTML, CSS, JavaScript, or database. As such, it may be wise to uninstall any new extensions that may have been recently added. Again, Google the extension name for the official documentation and assistance with this process. It‚Äôs worth noting that, even if you uninstall an extension through the CMS dashboard, this doesn‚Äôt guarantee that changes made by the extension have been fully reverted. This is particularly true for many WordPress extensions, which are given carte blanche within the application, including full access rights to the database. Unless the extension author explicitly codes such things in, there are scenarios where an extension may modify database records that don‚Äôt ‚Äúbelong‚Äù to the extension itself, but are instead created and managed by other extensions (or even the base CMS itself). In those scenarios, the extension may not know how to revert alterations to database records, so it will ignore such things during uninstallation. Diagnosing such problems can be tricky, but I‚Äôve personally encountered such scenarios multiple times, so your best course of action, assuming you‚Äôre reasonably convinced an extension is the likely culprit for the 407 Proxy Authentication Required , is to open the database and manually look through tables and records that were likely modified by the extension. Above all, don‚Äôt be afraid to Google your issue. Try searching for specific terms related to your issue, such as the name of your application‚Äôs CMS, along with the 407 Proxy Authentication Required . Chances are you‚Äôll find someone who has experienced the same issue. If you aren‚Äôt running a CMS application ‚Äî or even if you are, but you‚Äôre confident the 407 Proxy Authentication Required isn‚Äôt related to that ‚Äî here are some additional tips to help you troubleshoot what might be causing the issue on the server-side of things. Your application is likely running on a server that is using one of the two most popular web server softwares, Apache or nginx . At the time of publication, both of these web servers make up 84% of the world‚Äôs web server software ! Thus, one of the first steps you can take to determine what might be causing these 407 Proxy Authentication Required response codes is to check the configuration files for your web server software for unintentional redirect or request handling instructions. To determine which web server your application is using you‚Äôll want to look for a key file. If your web server is Apache then look for an .htaccess file within the root directory of your website file system. For example, if your application is on a shared host you‚Äôll likely have a username associated with the hosting account. In such a case, the application root directory is typically found at the path of /home/<username>/public_html/ , so the .htaccess file would be at /home/<username>/public_html/.htaccess . If you located the .htaccess file then open it in a text editor and look for lines that use ProxyXXX directives, which are part of the mod_proxy module in Apache. Covering exactly how these directives work is well beyond the scope of this article, however, the basic concept is that proxy directives allow the Apache server to map or associate local server requests and URIs to remote proxy locations. For example, here we‚Äôve enabled ProxyPass and ProxyPassReverse directives to match requests to the local /login URI and route them to https://proxy.airbrake.io/login . The <Location /login> section defines the authentication scheme and details we‚Äôre using: This is just one possible example, but if your own server is using a proxy then your particular configuration will look quite different. Look for any strange Proxy directives in the .htaccess file that don‚Äôt seem to belong, then try temporarily commenting them out (using the # character prefix) and restarting your web server to see if this resolves the issue. On the other hand, if your server is running on nginx , you‚Äôll need to look for a completely different configuration file. By default this file is named nginx.conf and is located in one of a few common directories: /usr/local/nginx/conf , /etc/nginx , or /usr/local/etc/nginx . Once located, open nginx.conf in a text editor and look for proxy_ directives. For example, here is a simple block directive (i.e. a named set of directives) that configures a virtual server for airbrake.io and ensures that, similar to above, a request to https://airbrake.io/login will be authenticated via the proxy_pass directive to https://proxy.airbrake.io/login : Have a look through your nginx.conf file for any abnormal proxy_ directives and comment out any abnormalities before restarting the server to see if the issue was resolved. Configuration options for each different type of web server can vary dramatically, so we‚Äôll just list a few popular ones to give you some resources to look through, depending on what type of server your application is running on: Apache Nginx IIS Node.js Apache Tomcat Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 407 Proxy Authentication Required occurred and view the application code at the moment something goes wrong. No matter the cause ‚Äî and even if you managed to fix this particular error this time around ‚Äî the appearance of an issue like the 407 Proxy Authentication Required within your own application is a good indication you may want to implement an error management tool, which will help you automatically detect errors and will alert you the instant they occur. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-02-01"},
{"website": "Airbrake", "title": "308 Permanent Redirect: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/308-permanent-redirect", "abstract": "A 308 Permanent Redirect message is an HTTP response status code indicating that the requested resource has been permanently moved to another URI , as indicated by the special Location header returned within the response. The 308 Permanent Redirect code was added to the HTTP standard relatively recently in April 2015, as detailed in the RFC7538 specification document for the 308 status code. As written in the RFC specification, the 308 Permanent Redirect code was necessary to fill in the gap left with similar codes of 301 , 302 , and 307 . There are dozens of possible HTTP status codes used to represent the complex relationship between the client, a web application, a web server, and the multitude of third-party web services that may be in use, so determining the cause of a particular HTTP response status code can be difficult. Since there are so many potential codes, each of which represents a completely different status or event, it can be difficult to differentiate between many of them and determine the exact cause of such errors, including the 308 Permanent Redirect response code. Throughout this article we‚Äôll explore the 308 Permanent Redirect code by looking at a handful of troubleshooting tips. We‚Äôll also examine a few useful and easy to implement fixes for common problems that could be causing 308 codes to appear in your own web application. Let‚Äôs get down to it! All HTTP response status codes within the 3xx category are considered redirection messages . These codes indicate to the user agent (i.e. your web browser) that an additional action is required in order to complete the request and access the desired resource. The 3xx response code category is distinctly different from the 5xx codes category, which encompasses server error messages. For example, the 503 Service Unavailable error we explored a late last year indicates that a server is temporarily unavailable, or is unable to handle the request for some reason. Thus, while a 5xx category code indicates an actual problem has occurred on a server, a 3xx category code, such as 308 Permanent Redirect , is rarely indicative of an actual problem ‚Äî it merely occurs due to the server‚Äôs behavior or configuration, but is not indicative of an error or bug on the server. The 308 Permanent Redirect code is similar to the 301 Moved Permanently code we explore in our 301 Moved Permanently: What It Is and How to Fix It article. As discussed in that post, the RFC1945 HTTP/1.0 specification document explicitly states that the 301 code should not necessarily inform user agents (i.e. browsers) to automatically redirect POST HTTP method requests to GET HTTP method requests. However, many user agents did erroneously change POST requests to GET redirect requests, which led to unintentional problems. To handle this explicit allowance or denial of changing POST requests to GET requests the HTTP standards included the following codes: 301 Moved Permanently : The resource has been permanently moved and request method conversion from POST to GET is allowed . 307 Temporary Redirect : The resource has been temporarily moved and request method conversion from POST to GET is forbidden . 302 Found : The resource has been temporarily moved and request method conversion from POST to GET is allowed . As you can see, this set of three HTTP status codes is missing a code that indicates a permanent redirect that forbids POST to GET conversion. This is the exact role that the 308 Permanent Redirect status code fulfills. The appearance of a 308 Permanent Redirect is usually not something that requires much user intervention. All modern browsers will automatically detect the 308 Permanent Redirect response code and process the redirection action to the new URI automatically. The server sending a 308 code will also include a special Location header as part of the response it sends to the client. This Location header indicates the new URI where the requested resource can be found. For example, if an HTTP POST method request is sent by the client as an attempt to login at the https://airbrake.io URL, the web server may be configured to redirect this POST request to a different URI , such as https://airbrake.io/login . In this scenario, the server may respond with a 308 Permanent Redirect code and include the Location: https://airbrake.io/login header in the response. This informs the user agent (browser) that the POST request data (login info) was received by the server, but the resource has been permanently moved to the Location header URI of https://airbrake.io/login . It‚Äôs also important to distinguish the purpose and use-cases of the 308 Permanent Redirect response code from many seemingly similar 3xx codes, such as the 307 Temporary Redirect we looked at in the past . The 307 Temporary Redirect code informs the client that the passed Location URI is only a temporary resource, and that all future requests should continue to access the originally requested URI . On the other hand, the 308 Permanent Redirect message is permanent and indicates that the passed Location URI should be used for future (identical) requests. Additionally, since the 308 Permanent Redirect indicates that something has gone wrong within the server of your application, we can largely disregard the client side of things. If you‚Äôre trying to diagnose an issue with your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Many smart phone apps that have a modern looking user interface are actually powered by a normal web application behind the scenes; one that is simply hidden from the user. If you‚Äôre using such an application and a 308 Permanent Redirect occurs, the issue isn‚Äôt going to be related to the app installed on your phone or local testing device. Instead, it will be something on the server-side, which is performing most of the logic and processing behind the scenes, outside the purview of the local interface presented to the user. If your application is generating unexpected 308 Permanent Redirect response codes there are a number of steps you can take to diagnose the problem, so we‚Äôll explore a few potential work around below. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and so forth, before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application onto a secondary staging server that isn‚Äôt ‚Äúlive,‚Äù or isn‚Äôt otherwise active and available to the public. This will give you a clean testing ground with which to test all potential fixes to resolve the issue, without threatening the security or sanctity of your live application. A 308 Permanent Redirect response code indicates that the requested resource has been permanently moved to the new URI specified in the Location response header. However, the appearance of this error itself may be erroneous, as it‚Äôs entirely possible that the server is misconfigured, which could cause it to improperly respond with 308 Permanent Redirect codes, instead of the standard and expected 200 OK code seen for most successful requests. Thus, a large part of diagnosing the issue will be going through the process of double-checking what resources/URLs are generating 308 Permanent Redirect response codes and determining if these codes are appropriate or not. If your application is responding with 308 Permanent Redirect codes that it should not be issuing, this is a problem that many other visitors may be experiencing as well, dramatically hindering your application‚Äôs ability to service users. We‚Äôll go over some troubleshooting tips and tricks to help you try to resolve this issue. If nothing here works, don‚Äôt forget to try Googling for the answer. Search for specific terms related to your issue, such as the name of your application‚Äôs CMS or web server software, along with 308 Permanent Redirect . Chances are you‚Äôll find others who have experienced this issue and have (hopefully) found a solution. Here are some additional tips to help you troubleshoot what might be causing the 308 Permanent Redirect to appear on the server-side of things: Your application is likely running on a server that is using one of the two most popular web server softwares, Apache or nginx . At the time of publication, both of these web servers make up over 84% of the world‚Äôs web server software ! Thus, one of the first steps you can take to determine what might be causing these 308 Permanent Redirect response codes is to check the configuration files for your web server software for unintentional redirect instructions. To determine which web server your application is using you‚Äôll want to look for a key file. If your web server is Apache then look for an .htaccess file within the root directory of your website file system. For example, if your application is on a shared host you‚Äôll likely have a username associated with the hosting account. In such a case, the application root directory is typically found at the path of /home/<username>/public_html/ , so the .htaccess file would be at /home/<username>/public_html/.htaccess . If you located the .htaccess file then open it in a text editor and look for lines that use RewriteXXX directives, which are part of the mod_rewrite module in Apache. Covering exactly how these rules work is well beyond the scope of this article, however, the basic concept is that a RewriteCond directive defines a text-based pattern that will be matched against entered URLs. If a matching URL is requested by a visitor to the site, the RewriteRule directive that follows one or more RewriteCond directives is used to perform the actual redirection of the request to the appropriate URL. For example, here is a simple RewriteCond and RewriteRule combination that matches all incoming requests to airbrake.io using the HTTP POST method, and redirecting them to https://airbrake.io/login via a 308 Permanent Redirect response: Notice the extra flag at the end of the RewriteRule , which explicitly states that the response code should be 308 , indicating to user agents that the request should be repeated to the specified URI , but while retaining the original HTTP method ( POST , in this case). Thus, if you find any strange RewriteCond or RewriteRule directives in the .htaccess file that don‚Äôt seem to belong, try temporarily commenting them out (using the # character prefix) and restarting your web server to see if this resolves the issue. On the other hand, if your server is running on nginx , you‚Äôll need to look for a completely different configuration file. By default this file is named nginx.conf and is located in one of a few common directories: /usr/local/nginx/conf , /etc/nginx , or /usr/local/etc/nginx . Once located, open nginx.conf in a text editor and look for return or rewrite directives that are using the 308 response code flag. For example, here is a simple block directive (i.e. a named set of directives) that configures a virtual server by creating a redirection from airbrake.io to airbrake.io/login for POST HTTP method requests: Return directives in nginx are similar to the RewriteCond and RewriteRule directives found in Apache , as they tend to contain more complex text-based patterns for searching. Either way, look through your nginx.conf file for any abnormal return or rewrite directives that include the 308 flag. Comment out any abnormalities before restarting the server to see if the issue was resolved. Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 308 Permanent Redirect occurred and view the application code at the moment something goes wrong. No matter what the cause, the appearance of a 308 Permanent Redirect within your own web application is a strong indication that you may need an error management tool to help you automatically detect such errors in the future. The best of these tools can even alert you and your team immediately when an error occurs. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-01-11"},
{"website": "Airbrake", "title": "307 Temporary Redirect: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/307-temporary-redirect", "abstract": "A 307 Temporary Redirect message is an HTTP response status code indicating that the requested resource has been temporarily moved to another URI , as indicated by the special Location header returned within the response. The 307 Temporary Redirect code was added to the HTTP standard in HTTP 1.1, as detailed in the RFC2616 specification document that establishes the standards for that version of HTTP. As indicated in the RFC, ‚Äúsince the redirection may be altered on occasion, the client should continue to use the Request-URI for future requests.‚Äù There are dozens of possible HTTP status codes used to represent the complex relationship between the client, a web application, a web server, and the multitude of third-party web services that may be in use, so determining the cause of a particular HTTP response status code can be difficult. Since there are so many potential codes, each of which represents a completely different status or event, it can be difficult to differentiate between many of them and determine the exact cause of such errors, including the 307 Temporary Redirect response code. Throughout this article we‚Äôll explore the 307 Temporary Redirect code by looking at a handful of troubleshooting tips. We‚Äôll also examine a few useful and easy to implement fixes for common problems that could be causing 307 codes to appear in your own web application. Let‚Äôs get down to it! All HTTP response status codes within the 3xx category are considered redirection messages . These codes indicate to the user agent (i.e. your web browser) that an additional action is required in order to complete the request and access the desired resource. The 3xx response code category is distinctly different from the 5xx codes category, which encompasses server error messages. For example, the 502 Bad Gateway error we looked at a few months ago indicates that a server acting as a gateway received and invalid response from a different , upstream server. Thus, while a 5xx category code indicates an actual problem has occurred on a server, a 3xx category code, such as 307 Temporary Redirect , is rarely indicative of an actual problem ‚Äî it merely occurs due to the server‚Äôs behavior or configuration, but is not indicative of an error or bug on the server. The 307 Temporary Redirect code may seem familiar to readers that saw our 302 Found: What It Is and How to Fix It article. As discussed in that post, the 302 code was actually introduced in HTTP/1.0 standard, as specified in RFC1945 . A problem arose shortly thereafter, as many popular user agents (i.e. browsers) actually disregarded the HTTP method that was sent along with the client request. For example, even if the client request was sent using the POST HTTP method, many browsers would automatically send the second request to the temporary URI provided in the Location header, but would do so using the GET HTTP method. This would often change the conditions under which the request was issued. To tackle this issue, the HTTP/1.1 standard opted to add the 303 See Other response code, which we covered in this article , and the 307 Temporary Redirect code that we‚Äôre looking at today. Both 303 and 307 codes indicate that the requested resource has been temporarily moved, but the key difference between the two is that 303 See Other indicates that the follow-up request to the new temporary URI should be performed using the GET HTTP method, while a 307 code indicates that the follow-up request should use the same HTTP method of the original request (so GET stays GET , while POST remains POST , and so forth). This is a subtle but critical difference in functionality between the two, so it‚Äôs important for web developers/admins to account for both scenarios. That said, the appearance of a 307 Temporary Redirect is usually not something that requires much user intervention. All modern browsers will automatically detect the 307 Temporary Redirect response code and process the redirection action to the new URI automatically. The server sending a 307 code will also include a special Location header as part of the response it sends to the client. This Location header indicates the new URI where the requested resource can be found. For example, if an HTTP POST method request is sent by the client as an attempt to login at the https://airbrake.io URL, the web server may be configured to redirect this POST request to a different URI , such as https://airbrake.io/login . In this scenario, the server may respond with a 307 Temporary Redirect code and include the Location: https://airbrake.io/login header in the response. This informs the user agent (browser) that the POST request data (login info) was received by the server, but the resource has been temporarily moved to the Location header URI of https://airbrake.io/login . It‚Äôs also important to distinguish the purpose and use-cases of the 307 Temporary Redirect response code from many seemingly similar 3xx codes, such as the 301 Moved Permanently we looked at last month . Specifically, the 307 Found code informs the client that the passed Location URI is only a temporary resource, and that all future requests should continue to access the originally requested URI . On the other hand, the 301 Moved Permanently message is not temporary, and indicates that passed Location URI should be used for future (identical) requests. Additionally, since the 307 Temporary Redirect indicates that something has gone wrong within the server of your application, we can largely disregard the client side of things. If you‚Äôre trying to diagnose an issue with your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Many smart phone apps that have a modern looking user interface are actually powered by a normal web application behind the scenes; one that is simply hidden from the user. If you‚Äôre using such an application and a 307 Temporary Redirect occurs, the issue isn‚Äôt going to be related to the app installed on your phone or local testing device. Instead, it will be something on the server-side, which is performing most of the logic and processing behind the scenes, outside the purview of the local interface presented to the user. If your application is generating unexpected 307 Temporary Redirect response codes there are a number of steps you can take to diagnose the problem, so we‚Äôll explore a few potential work around below. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and so forth, before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application onto a secondary staging server that isn‚Äôt ‚Äúlive,‚Äù or isn‚Äôt otherwise active and available to the public. This will give you a clean testing ground with which to test all potential fixes to resolve the issue, without threatening the security or sanctity of your live application. A 307 Temporary Redirect response code indicates that the requested resource can be found at the new URI specified in the Location response header, but only temporarily. However, the appearance of this error itself may be erroneous, as it‚Äôs entirely possible that the server is misconfigured, which could cause it to improperly respond with 307 Temporary Redirect codes, instead of the standard and expected 200 OK code seen for most successful requests. Thus, a large part of diagnosing the issue will be going through the process of double-checking what resources/URLs are generating 307 Temporary Redirect response codes and determining if these codes are appropriate or not. If your application is responding with 307 Temporary Redirect codes that it should not be issuing, this is a problem that many other visitors may be experiencing as well, dramatically hindering your application‚Äôs ability to service users. We‚Äôll go over some troubleshooting tips and tricks to help you try to resolve this issue. If nothing here works, don‚Äôt forget to try Googling for the answer. Search for specific terms related to your issue, such as the name of your application‚Äôs CMS or web server software, along with 307 Temporary Redirect . Chances are you‚Äôll find others who have experienced this issue and have (hopefully) found a solution. Here are some additional tips to help you troubleshoot what might be causing the 307 Temporary Redirect to appear on the server-side of things: Your application is likely running on a server that is using one of the two most popular web server softwares, Apache or nginx . At the time of publication, both of these web servers make up over 84% of the world‚Äôs web server software ! Thus, one of the first steps you can take to determine what might be causing these 307 Temporary Redirect response codes is to check the configuration files for your web server software for unintentional redirect instructions. To determine which web server your application is using you‚Äôll want to look for a key file. If your web server is Apache then look for an .htaccess file within the root directory of your website file system. For example, if your application is on a shared host you‚Äôll likely have a username associated with the hosting account. In such a case, the application root directory is typically found at the path of /home/<username>/public_html/ , so the .htaccess file would be at /home/<username>/public_html/.htaccess . If you located the .htaccess file then open it in a text editor and look for lines that use RewriteXXX directives, which are part of the mod_rewrite module in Apache. Covering exactly how these rules work is well beyond the scope of this article, however, the basic concept is that a RewriteCond directive defines a text-based pattern that will be matched against entered URLs. If a matching URL is requested by a visitor to the site, the RewriteRule directive that follows one or more RewriteCond directives is used to perform the actual redirection of the request to the appropriate URL. For example, here is a simple RewriteCond and RewriteRule combination that matches all incoming requests to airbrake.io using the HTTP POST method, and redirecting them to https://airbrake.io/login via a 307 Temporary Redirect response: Notice the extra flag at the end of the RewriteRule , which explicitly states that the response code should be 307 , indicating to user agents that the request should be repeated to the specified URI , but while retaining the original HTTP method ( POST , in this case). Thus, if you find any strange RewriteCond or RewriteRule directives in the .htaccess file that don‚Äôt seem to belong, try temporarily commenting them out (using the # character prefix) and restarting your web server to see if this resolves the issue. On the other hand, if your server is running on nginx , you‚Äôll need to look for a completely different configuration file. By default this file is named nginx.conf and is located in one of a few common directories: /usr/local/nginx/conf , /etc/nginx , or /usr/local/etc/nginx . Once located, open nginx.conf in a text editor and look for return or rewrite directives that are using the 307 response code flag. For example, here is a simple block directive (i.e. a named set of directives) that configures a virtual server by creating a redirection from airbrake.io to airbrake.io/login for both POSt and GET HTTP method requests: Return directives in nginx are similar to the RewriteCond and RewriteRule directives found in Apache , as they tend to contain more complex text-based patterns for searching. Either way, look through your nginx.conf file for any abnormal return or rewrite directives that include the 307 flag. Comment out any abnormalities before restarting the server to see if the issue was resolved. Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 307 Temporary Redirect occurred and view the application code at the moment something goes wrong. No matter what the cause, the appearance of a 307 Temporary Redirect within your own web application is a strong indication that you may need an error management tool to help you automatically detect such errors in the future. The best of these tools can even alert you and your team immediately when an error occurs. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-12-21"},
{"website": "Airbrake", "title": "304 Not Modified: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/304-not-modified", "abstract": "A 304 Not Modified message is an HTTP response status code indicating that the requested resource has not been modified since the previous transmission, so there is no need to retransmit the requested resource to the client. In effect, a 304 Not Modified response code acts as an implicit redirection to a cached version of the requested resource. Often it can be challenging to distinguish between all the possible HTTP response codes and determine the exact cause of errors like the 304 Not Modified code. There are dozens of possible HTTP status codes used to represent the complex relationship between the client, a web application, a web server, and the multitude of third-party web services that may be in use, so determining the cause of a particular status code can be challenging. In this article we‚Äôll examine the 304 Not Modified code by looking at a few troubleshooting tips, along with some potential fixes for common problems that might be causing this issue within your own web applications, so let‚Äôs get to it! All HTTP response status codes that are in the 3xx category are considered redirection messages . Such codes indicate to the user agent (i.e. your web browser) that an additional action is required in order to complete the request and access the desired resource. Unlike client error responses found in the 4xx codes, like the 403 Forbidden Error we looked at recently, which could occur due to either a client- or server-side issue, a 304 Not Modified code generally indicates an issue on the actual web server hosting your application. Having said that, the appearance of a 304 Not Modified is typically not an issue that requires much user intervention on your part. This is because a 304 code is a response when the original user agent request occurred using a safe method. Any HTTP method that doesn‚Äôt alter the state of the server is considered safe . Thus, any request method that only requires the server to response with a read-only operation would be safe . The most common of these safe HTTP methods is GET , but others include HEAD and OPTIONS . If the user agent request included either of the special headers If-None-Match or If-Modified-Since then the server will check the cached version of the resource against the requested version. If the version matches then that cached version can be returned, rather than regenerating a new copy. The If-None-Match header indicates that the ETag response header should be verified, which contains a specific resource version. On the other hand, the If-Modified-Since with a specific last modified date with which to compare the last modified date of the resource. Since the 304 Not Modified indicates that something has gone wrong within the server of your application, we can largely disregard the client side of things. If you‚Äôre trying to diagnose an issue with your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Many smart phone apps that have a modern looking user interface are actually powered by a normal web application behind the scenes; one that is simply hidden from the user. If you‚Äôre using such an application and a 304 Not Modified occurs, the issue isn‚Äôt going to be related to the app installed on your phone or local testing device. Instead, it will be something on the server-side, which is performing most of the logic and processing behind the scenes, outside the purview of the local interface presented to the user. If your application is generating unexpected 304 Not Modified response codes there are a number of steps you can take to diagnose the problem. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and so forth, before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application onto a secondary staging server that isn‚Äôt ‚Äúlive,‚Äù or isn‚Äôt otherwise active and available to the public. This will give you a clean testing ground with which to test all potential fixes to resolve the issue, without threatening the security or sanctity of your live application. A 304 Not Modified response code indicates that the requested resource has not been modified since the previous transmission. This typically means there is no need to retransmit the requested resource to the client, and a cached version can be used, instead. However, it‚Äôs possible that the server is improperly configured, which is causing it to incorrectly respond with a 304 Not Modified code, instead of the standard and expected 200 OK code of a normal, functional request. Thus, a large part of diagnosing the issue will be going through the process of double-checking what resources/URLs are generating 304 Not Modified response codes and determining if these codes are appropriate or not. If your application is responding with 304 Not Modified codes that it should not be issuing, this is an issue that many other visitors may be experiencing as well, dramatically hindering your application‚Äôs ability to service users. We‚Äôll go over some troubleshooting tips and tricks to help you try to resolve this issue. If nothing here works, don‚Äôt forget that Google is your friend. Try searching for specific terms related to your issue, such as the name of your application‚Äôs CMS or web server software, along with 304 Not Modified . Chances are you‚Äôll find others who have experienced this issue and have found a solution. Here are some additional tips to help you troubleshoot what might be causing the 304 Not Modified to appear on the server-side of things: Your application is likely running on a server that is using one of the two most popular web server softwares, Apache or nginx . At the time of publication, both of these web servers make up over 84% of the world‚Äôs web server software ! Thus, one of the first steps you can take to determine what might be causing these 304 Not Modified response codes is to check the configuration files for your web server software for unintentional redirect instructions. To determine which web server your application is using you‚Äôll want to look for a key file. If your web server is Apache then look for an .htaccess file within the root directory of your website file system. For example, if your application is on a shared host you‚Äôll likely have a username associated with the hosting account. In such a case, the application root directory is typically found at the path of /home/<username>/public_html/ , so the .htaccess file would be at /home/<username>/public_html/.htaccess . That said, if you have access to the system Apache configuration file then you should open the /etc/apache2/httpd.conf or /etc/apache2/apache2.conf file instead. The most likely culprit for producing unexpected 304 codes in Apache is the mod_cache module. Thus, within the configuration file you have open look for a section that checks for the mod_cache.c file. Here‚Äôs an example from the official documentation : Since you don‚Äôt want to cause irreversible damage, don‚Äôt delete anything, but instead just temporarily comment out the caching section by adding # characters at the start of every line to be commented out. Save the modified configuration file then restart the Apache web server to see if this fixed the problem. On the other hand, if your server is running on nginx , you‚Äôll need to look for a completely different configuration file. By default this file is named nginx.conf and is located in one of a few common directories: /usr/local/nginx/conf , /etc/nginx , or /usr/local/etc/nginx . By default, nginx actually comes with built-in caching, so it is not uncommon for static resources to be cached and for a 304 Not Modified response code to be sent when refreshing a page or what not. Thus, troubleshooting for unexpected caching can be a bit more challenging then with Apache. The main thing you should look for within the nginx.conf file is the expires directive, which can be used within a block directive (i.e. a name set of directives) to define when requested files from within that server should expire (that is, when the cached versions should be refreshed from the server). For example, here the expires configuration maps a handful of content types to differing expiration timestamps: If you find an expires directive in your own configuration, try temporarily commenting it out by preceding it with # characters. Save the changed file then restart the server and test if the issue was resolved. Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 304 Not Modified occurred and view the application code at the moment something goes wrong. No matter what the cause, the appearance of a 304 Not Modified within your own web application is a strong indication that you may need an error management tool to help you automatically detect such errors in the future. The best of these tools can even alert you and your team immediately when an error occurs. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-12-07"},
{"website": "Airbrake", "title": "303 See Other: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/303-see-other", "abstract": "A 303 See Other message is an HTTP response status code indicating that the requested resource can be found at another URI (address) by using the GET HTTP method. The 303 See Other code is typically provided in response to a POST , PUT , or DELETE HTTP method request, which indicates to the client that the server successfully received the data associated with the request, and the client should send a new GET request to the new URI it was provided by the server. There are dozens of possible HTTP status codes used to represent the complex relationship between the client, a web application, a web server, and the multitude of third-party web services that may be in use, so determining the cause of a particular HTTP response status code can be challenging. Since there are so many different codes, each of which represents a completely different status or event, it can be difficult to differentiate between many of them and determine the exact cause of such errors, like the 303 See Other response code. Throughout this article we‚Äôll explore the 303 See Other code by looking at a handful of troubleshooting tips. We‚Äôll also examine a few potential, easy to implement fixes for common problems that could be causing 303 codes to appear in your own web application. Let the games begin! All HTTP response status codes within the 3xx category are considered redirection messages . These codes indicate to the user agent (i.e. your web browser) that an additional action is required in order to complete the request and access the desired resource. The 3xx response code category is distinctly different from the 5xx codes category, which encompasses server error messages. For example, the 504 Gateway Timeout error we looked at in a recent article indicates that the server is experiencing issues (in this case, a server acting as a gateway is down or failed to respond in time). Thus, while a 5xx category code indicates an actual problem has occurred on the server, a 3xx category code, such as 303 See Other , is rarely indicative of an actual problem ‚Äî it merely occurs due to the server‚Äôs behavior or configuration, but is not exhibitive of an error or bug on the server. That said, the appearance of a 303 See Other is usually not something that requires much user intervention. All modern browsers will automatically detect the 303 See Other response code and process the redirection action to the new URI automatically. The server sending a 303 code will also include a special Location header as part of the response it sends to the client. This Location header indicates the new URI where the requested resource can be found. For example, if an HTTP POST method request is sent by the client as an attempt to logic at the URL https://airbrake.io , the web server may be configured to redirect this POST request to a different URI , such as https://airbrake.io/login . In this scenario the server may respond with a 303 See Other code and include the Location: https://airbrake.io/login header in the response. This informs the user agent (browser) that the POST request data (login info) was received by the server, but the server does not believe the requested resource ( https://airbrake.io ) is representative of what the client is requesting. Instead, the server is indicating ‚Äî via the 303 response ‚Äî that a more representative resource can be found at the Location header URI of https://airbrake.io/login . As put explicitly by the RFC7231 specification document , which details HTTP/1.1 semantics and content rules: ‚ÄúA 303 response to a GET request indicates that the origin server does not have a representation of the target resource that can be transferred by the server over HTTP. However, the Location field value refers to a resource that is descriptive of the target resource, such that making a retrieval request on that other resource might result in a representation that is useful to recipients without implying that it represents the original target resource.‚Äù In the example above, the server believes that https://airbrake.io/login would likely provide a resource that the user agent truly wants to receive, so it issues a 303 See Other response code with that information. Another common use of the 303 See Other code is as a means of identifying real-world objects. For example, imagine the URI https://library.org/book/paperback/the-grapes-of-wrath represents a physical paperback copy of The Grapes of Wrath book by John Steinbeck. Since the server is merely transferring digital bits, it cannot literally respond with a physical paperback copy of The Grapes of Wrath . Thus, using the Semantic Web framework we‚Äôre illustrating here it would be incorrect for the server to respond to a GET request to the URI above with a typical 200 OK response code. Instead, the server would opt to respond with a 303 See Other code, with a redirect Location header of a more appropriate URI , such as https://library.org/book/digital/the-grapes-of-wrath , which would provide a digital representation of the book to the client. It‚Äôs also important to distinguish the purpose and use-cases of the 303 See Other response code from many seemingly similar 3xx codes, such as the 302 Found code we looked at a few weeks ago. Specifically, the 303 Found code informs the client that the passed Location URI is only a temporary resource, and that all future requests should continue to access the originally requested URI . On the other hand, the 303 See Other message is not temporary, and indicates that passed Location URI should be used for future (identical) requests. Additionally, since the 303 See Other indicates that something has gone wrong within the server of your application, we can largely disregard the client side of things. If you‚Äôre trying to diagnose an issue with your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Many smart phone apps that have a modern looking user interface are actually powered by a normal web application behind the scenes; one that is simply hidden from the user. If you‚Äôre using such an application and a 303 See Other occurs, the issue isn‚Äôt going to be related to the app installed on your phone or local testing device. Instead, it will be something on the server-side, which is performing most of the logic and processing behind the scenes, outside the purview of the local interface presented to the user. If your application is generating unexpected 303 See Other response codes there are a number of steps you can take to diagnose the problem. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and so forth, before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application onto a secondary staging server that isn‚Äôt ‚Äúlive,‚Äù or isn‚Äôt otherwise active and available to the public. This will give you a clean testing ground with which to test all potential fixes to resolve the issue, without threatening the security or sanctity of your live application. A 303 See Other response code indicates that the requested resource can better be accessed via the newly-provided URI . However, it‚Äôs entirely possible that the server is misconfigured, which could cause it to improperly respond with 303 See Other codes, instead of the standard and expected 200 OK code of a normal, functional request. Thus, a large part of diagnosing the issue will be going through the process of double-checking what resources/URLs are generating 303 See Other response codes and determining if these codes are appropriate or not. If your application is responding with 303 See Other codes that it should not be issuing, this is an issue that many other visitors may be experiencing as well, dramatically hindering your application‚Äôs ability to service users. We‚Äôll go over some troubleshooting tips and tricks to help you try to resolve this issue. If nothing here works, don‚Äôt forget that Google is your friend. Try searching for specific terms related to your issue, such as the name of your application‚Äôs CMS or web server software, along with 303 See Other . Chances are you‚Äôll find others who have experienced this issue and have found a solution. Here are some additional tips to help you troubleshoot what might be causing the 303 See Other to appear on the server-side of things: Your application is likely running on a server that is using one of the two most popular web server softwares, Apache or nginx . At the time of publication, both of these web servers make up over 84% of the world‚Äôs web server software ! Thus, one of the first steps you can take to determine what might be causing these 303 See Other response codes is to check the configuration files for your web server software for unintentional redirect instructions. To determine which web server your application is using you‚Äôll want to look for a key file. If your web server is Apache then look for an .htaccess file within the root directory of your website file system. For example, if your application is on a shared host you‚Äôll likely have a username associated with the hosting account. In such a case, the application root directory is typically found at the path of /home/<username>/public_html/ , so the .htaccess file would be at /home/<username>/public_html/.htaccess . If you located the .htaccess file then open it in a text editor and look for lines that use RewriteXXX directives, which are part of the mod_rewrite module in Apache. Covering exactly how these rules work is well beyond the scope of this article, however, the basic concept is that a RewriteCond directive defines a text-based pattern that will be matched against entered URLs. If a matching URL is requested by a visitor to the site, the RewriteRule directive that follows one or more RewriteCond directives is used to perform the actual redirection of the request to the appropriate URL. For example, here is a simple RewriteCond and RewriteRule combination that matches all incoming requests to airbrake.io using the HTTP POST method, and redirecting them to https://airbrake.io/login via a 303 See Other response: Notice the extra flag at the end of the RewriteRule , which explicitly states that the response code should be 303 , indicating to user agents that this redirect is a better representation of the request resource. Thus, if you find any strange RewriteCond or RewriteRule directives in the .htaccess file that don‚Äôt seem to belong, try temporarily commenting them out (using the # character prefix) and restarting your web server to see if this resolves the issue. On the other hand, if your server is running on nginx , you‚Äôll need to look for a completely different configuration file. By default this file is named nginx.conf and is located in one of a few common directories: /usr/local/nginx/conf , /etc/nginx , or /usr/local/etc/nginx . Once located, open nginx.conf in a text editor and look for return or rewrite directives that are using the 303 response code flag. For example, here is a simple block directive (i.e. a named set of directives) that configures a virtual server by creating a redirection from airbrake.io to airbrake.io/login for HTTP POST method requests: Return directives in nginx are similar to the RewriteCond and RewriteRule directives found in Apache , as they tend to contain more complex text-based patterns for searching. Either way, look through your nginx.conf file for any abnormal return or rewrite directives that include the 303 flag. Comment out any abnormalities before restarting the server to see if the issue was resolved. Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 303 See Other occurred and view the application code at the moment something goes wrong. No matter what the cause, the appearance of a 303 See Other within your own web application is a strong indication that you may need an error management tool to help you automatically detect such errors in the future. The best of these tools can even alert you and your team immediately when an error occurs. Airbrake‚Äôs error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2017-12-14"},
{"website": "Airbrake", "title": "Golang Error Handling Basics", "author": "Unknown", "link": "https://airbrake.io/blog/golang/golang-error-handling-basics", "abstract": "One of the more useful features of the Go programming language is the way that it handles errors. Instead of using a Try/Catch methodology like other programming languages, Go treats errors as normal return values. By creating simple modules and applying a few logging rules, we can produce useful error messages to catch all sorts of exceptions during the development process. In this article, we will cover some of the most basic ways Golang finds and handles these exceptions. We can capture errors in Go by using simple if/then statements that check for conditions where required parameters are not met. Let‚Äôs look at a basic module that we can create to check whether a string includes a value or not. Create a package named ‚Äúhello‚Äù and import the standard ‚Äúerrors‚Äù and ‚Äúfmt‚Äù modules to recognize errors and formatted text: Then we can create a module that will return a string of text for a named variable. The above checks to see whether a blank string is returned for the ‚Äúname‚Äù variable, which then returns a new error with some specified text. This is our error condition. An error condition checks to see whether the error itself exists. If the condition is not met (i.e., there is no error), we return the value that matches the specified ‚Äúname‚Äù variable: Note that it returns the message and the value of ‚Äúnil,‚Äù meaning that there is no error. This tells the calling program that the function processed with no error. Now we will look at how we can call this package in an actual script. Let‚Äôs create a new script, called test.go As is normal with Golang, a script must begin with defining the package as ‚Äúmain.‚Äù We then import the ‚Äúfmt‚Äù and ‚Äúlog‚Äù packages, along with our created ‚Äúhello‚Äù package, as shown below: Below we define our main function, set a few properties for our logger to create an easy to understand prefix, and (for security reasons) create a flag so that we don‚Äôt show the time, source file, and line number. Next, we‚Äôll specify a message to be displayed: Finally, we look to see whether there is an error by checking if ‚Äúerr‚Äù is not equal to ‚Äúnil.‚Äù If this is the case, we print the message to the console and exit. If no error condition exists, we simply print the message that was defined in our hello package. To test this out, we can run the code as it is. Once we do, we should get a result that looks like this: If we wish to modify our test.go script, enter something like this: Our output should then look like this: Another type of error message that we can return is: fmt.Errorf ‚Äì this will format a string according to Printf‚Äôs rules. Of course, string errors are only one type of error. With Golang error handling , there are several other errors you can check for in your code. One in particular you should know about is numerical errors. Handling integers is simple for Go. Here‚Äôs how it works: Say we have numerical errors, like if we were to divide by zero. First we create a ‚ÄúDivision‚Äù function, which divides two variables x by y. For the first part of our if/then condition, we need to make sure y is not equal to zero: This is the main function. Now, you can pass it two variables. In this example, we‚Äôll use 12 and 0. You‚Äôll then receive a message that says something like: ‚ÄúWe got an error: Thou shalt not divide by zero!‚Äù This is just one example of how you can use Golang error handling to find numerical errors. Really, with the right functions, you can find several errors on your own via Golang. With Golang, you can bring up HTTP status errors if an API we are calling delivers one. Here‚Äôs how: First, let‚Äôs import a new package, ‚Äúnet/http‚Äù: In our main function, call an app (e.g. a website) and log any errors. We know that successful requests fall within the 2xx range, so create a respective status that finds any HTTP errors that fall outside this range. You can do this in the following way: As you can see, our main function is set to which will check to see if any HTTP requests fall within the 2xx range. If the request does not meet this condition, it will show an error message. With only one module, you can quickly gather all the information you need to find and fix your Golang code. This guide only scratches the surface as to how the Go language is designed to handle errors. However, basics such as how to check for the existence of a string, how to raise an error condition if an illogical numerical statement is presented, and how to check the HTTP status codes of a response are all great places to start on your Golang error monitoring journey. Don‚Äôt have time to check and use these Golang error handling techniques manually? That‚Äôs where tools like Airbrake Error Monitoring come in handy. With Airbrake Error Monitoring, you‚Äôll be able to find errors quickly without the need to create individual modules. Try Airbrake Error Monitoring free for 30 days for unlimited errors and performance events.", "date": "2020-12-08"},
{"website": "Airbrake", "title": "What's New in C# 7.0?", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet/whats-new-in-csharp-7-0", "abstract": "First released in early 2002, alongside the initial release of .NET 1.0, C# has had a lot of success in the development community. Thanks to continued support and frequent updates that coincide with each new release of Visual Studio, C# remains one of the most popular languages in use today. The latest major version, released in March of this year alongside Visual Studio 2017, brings with it a number of new features, so we thought it would be fun to explore what‚Äôs new in C# 7.0. Let‚Äôs get to it! Tuples are used with many programming languages when it‚Äôs necessary to return multiple values from a single method. While C# has included tuple support through the System.Tuple since version 4.0 (released early 2010), using them has been a somewhat clunky affair. Not only does it require the explicit creation (and use) of a new System.Tuple object, but accessing items was a hassle and had to be performed using rather vague item signature names. For example, here we see the old way of creating a tuple using System.Tuple : Note : Logging.Log() is just a helper method to output messages to the console. In this example (as well as future examples), we‚Äôll use it to help illustrate results by outputting the title, author, and page count of our books, like so: Anyway, C# 7.0 has introduced tuple types , tuple literals , and tuple names to help reduce some of these pain points when dealing with tuples! Creating a tuple literal merely requires surrounding a series of values with parentheses: This means the old System.Tuple creation example from above can be created with much simpler syntax: Not only can we avoid calling new Tuple&lt;&gt; as in the past, but the compiler is able to infer the value types automatically, so there‚Äôs no need to include a type list either. We can also now easily use the tuple names feature by including item names prior to each value in our tuple literal declaration: Notice how the same output structure allows us to call book2.title instead of book2.Item1 , making it much more obvious what we‚Äôre doing and what the intention of our code is. That‚Äôs all well and good, but tuples are typically used as return values from methods, so C# 7.0 also introduced the ability to define a tuple as a return type within a method definition. For example, here in the GetTupleLiteral() method we‚Äôre expecting a three-part tuple of (string, string, int) to be returned, so that‚Äôs exactly what the method provides: And, just as we can define item names in literal tuple declarations, we can now also define item names within tuple return types as well: To illustrate that these work just as we‚Äôd expect, here we‚Äôll call both GetTupleLiteral() and GetTupleLiteralWithNames() : Sure enough, they both function as intended and output the the expected, formatted results as before: Using the out keyword within method arguments is an easy way to pass values by reference, but in older versions of C# it was necessary to declare the variables you‚Äôre passing before they could be used. For example, here‚Äôs the older method of using the out keyword in variable arguments: Not only do we have to declare the author , title , and pageCount variables ahead of time, but we also have to specify their type. This still works as expected, passing the reference to these arguments into the GetBookData() method, which (for this example) assigns them to specific values, after which we output the book info to the log: Now, C# 7.0 has introduced the out variable syntax, which allows for inline declaration of the variables within the argument list of the method in question. Thus, we‚Äôre able to perform the exact same logic and behavior that we saw in OldOutExample() here in OutVariableExample() , but C# recognizes that the intention is to declare these out variables inline: Moreover, for most basic variable types we don‚Äôt need to specify the type and can use var instead: C# 7.0 also introduces the ability to use discards , which are just local, unnamed, write-only variables that are represented with an underscore ( _ ) character where a normal variable name would go. As you can imagine, a discards are useful for situations where an out variable is necessary to invoke a particular method, but where we can ignore the out variable argument that is used. For example, imagine we are using the DateTime.TryParse() method to evaluate a string and check if the CLR is able to convert it into a DateTime object. Here we have a simple method to perform this task for us. It uses an out variable called result if the TryParse() attempt it successful, outputting a message with the converted result. If the parse fails we throw (and catch) a new ArgumentException indicating the parse didn‚Äôt work: To test this out we‚Äôll first pass in a string value of \"today\" : Unfortunately, TryParse() doesn‚Äôt know what we mean by this, probably because the API already includes the DateTime.Today property for retrieving today‚Äôs date, so an exception is thrown instead: Now let‚Äôs try passing a string to DateTimeTryParseExample() that we know will work: Sure enough, this parse and conversion work as expected, assigning the generated DateTime object to our result out variable : However, there may be situations where we don‚Äôt care about the result of the TryParse() call at all, and all we want to know is whether it worked or not (the returned boolean value). This is a perfect use of the new discard placeholder for the out variable : Now we can just focus on using the boolean result of TryParse() and don‚Äôt need to concern ourselves with the out variable declaration or result. Stay tuned for future parts in this series where we‚Äôll continue exploring the new features introduced in C# 7.0! And don‚Äôt forget, the Sharpbrake library provides robust exception tracking capabilities for all of your C# and .NET applications. Sharpbrake provides real-time error monitoring and automatic exception reporting across your entire project, so you and your team are immediately alerted to even the smallest hiccup, and can appropriately respond before major problems arise. With a robust API and tight integration with the powerful Airbrake web dashboard, Sharpbrake will revolutionize how your team manages exceptions. Check out all the great features Sharpbrake brings to the table and see why so many of the world‚Äôs top development teams use Airbrake to dramatically improve their exception handling practices!", "date": "2017-07-13"},
{"website": "Airbrake", "title": "What's New in C# 7.0? ‚Äì Pattern Matching and Local Functions", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet/whats-new-in-c-7-0-pattern-matching-and-local-functions", "abstract": "C# 7.0, the latest major version of the exceptionally popular language, was released in March 2017 alongside Visual Studio 2017, bringing a number of new features and capabilities to the table. Today we‚Äôll dive deeper into the pattern matching and local functions features in our ongoing series, What‚Äôs New in C# 7.0? : In Part 1 we thoroughly explored tuple types , tuple literals , and out variables . Let‚Äôs get to it! One handy feature that C# 7.0 brings to the table is patterns , which provide a simple syntax to test whether an object meets a criteria related to its value or type (for now). As of writing, there are currently three different pattern matching types, but the C# team has promised that additional pattern types will be introduced in the future. Constant patterns are quite standard and something we‚Äôve seen before. These effectively test if an input is equal to a particular constant value. Type patterns check if an input has a particular type , and if so, extracts the input value into a new variable of that type. Var patterns don‚Äôt perform a conditional match of any kind, thereby making them always match. The purpose of a var pattern is to generate a new variable with the value and type of the input. These will make far more sense in code, so let‚Äôs jump right into the code sample. We start with a series of classes inheriting from one another, all based on the IOrganism interface: These classes don‚Äôt do much on their own, other than estimate their respective global populations (the stats of which were acquired from this publication ). However, we‚Äôll use these classes to illustrate the differences (and potential uses) of the various pattern matching types. We start with the GetPopulationUsingType(IOrganism organism) method, which uses a switch case in combination with the new type pattern to make it easy for us to differentiate between all the potential types that could be passed into this method: Since IOrganism is the baseline interface, and the Mammal and Insect classes implement that interface, which are, in turn, inherited by Human and Bee , it would typically be somewhat challenging to properly differentiate between these types using a series of if-else statements. However, with type patterns , we can simply use a switch (organism) statement, and then create a type-specific case statement that will check if the passed type matches. We can go even further and apply a bit of filtering, which we‚Äôve done with the two case Human human statements. In the event that a Human object is passed, if the Population is too low our first case Human human matches and executes, otherwise the second case Human human will do so. To test this out we‚Äôll call this method a few times by passing different organism types: The resulting output from this looks expected ‚Äî the populations are output for the first four, but the low human population output on the final call causes a problem: To see the var pattern in action we‚Äôve created a GetPopulationUsingVar(IOrganism organism) method: This method also accepts an IOrganism instance and uses a switch statement to handle logic based on the type that was passed. However, notice the syntax of our case statements. By using case var bee in the first case statement we‚Äôve implemented a var pattern . This extracts a matched value of organism and assigns it to the newly-created bee variable, which is then a local variable we can use within the case statement scope. Thus, our first case statement tries to capture a passed Bee object by checking that the population is roughly equal to what we expect for bees, while the human case statement performs a check of the type Name property. We can test these out and verify everything works as expected in the VarPatternExample() method: Executing this results in the first two calls working fine, however, the Mammal passed to the final call is an unknown type, so we get a different output informing us the method doesn‚Äôt know how to handle it (couldn‚Äôt find a match): The last pattern to look at is the constant pattern . Since such a pattern is very basic, we‚Äôll also explore it along with the is-expression , which allows us to check if an object is equivalent to a particular value, or is of a particular type (via a type pattern ). The GetPopulationUsingIs(object organism) method accepts an object , so we can test for the null constant using a constant pattern via an is-expression . We also check if the passed object is of the type IOrganism . If so, we assign it to the new variable of o , which we use for the output: To test this method out we‚Äôll use IsExpressionPatternExample() , which passes a couple objects that both inherit from IOrganism , followed by passing null : The output from running this method is what we expected ‚Äî population data for Insect and Mammal , followed by a cancellation message when passing null : Another cool feature C# 7.0 adds is the ability to create local functions . A local function is, as the name implies, a function that is embedded directly inside the scope of another method. To see this in action, we‚Äôll start with the full code snippet, then break it down afterward: We begin with a basic IBook interface and Book class that implements IBook . We‚Äôll use these to create a simple collection of books in just a moment. However, first we need a reason to use a local function within another method. Creating an iterator method is a common scenario in which a local function may prove useful. An iterator typically performs some action upon each element in the collection, then calls a yield statement in order to yield the next element in the collection. For example, let‚Äôs look closer at the Filter<T>(IEnumerable<T> source, Func<T, bool> filter, bool inclusive = true) method: As the name suggests, its purpose is to filter an enumerable collection using the passed Func , which should return a boolean indicating if the element passed or failed the filtration process. This is a perfect scenario to use a local function, which is exactly what we‚Äôve done with the Iterator() local function found inside. Iterator() just loops through the elements of source and checks if each element passes the filter check, thereby determingin if the element should be yielded. The entire collection of filtered, yielded elements is bubbled up from the Iterator() local function to the return Iterator() statement of the Filter<T>(IEnumerable<T> source, Func<T, bool> filter, bool inclusive = true) method. The advantage to using a local function here, as opposed to an internal or private method, is that we may not want the local Iterator() function to be available to other members of the parent class. A local function makes it easy to maintain the exact scope level that is required, without exposing any of the functionality to outside callers. To test this out and make sure it works as expected, we‚Äôll start by creating a Book collection: This produces the output of all our initial books, as expected: Now we‚Äôll try filtering our collection using the Filter<T>(IEnumerable<T> source, Func<T, bool> filter, bool inclusive = true) method. We‚Äôre also using lambda syntax to simplify the passing of our filter function argument, since we only need to return the result of a single statement. In this case, we‚Äôre just checking if the PageCount for each book exceeds 400 : Our original collection contained three books with high page counts, and our output confirms that the filter behaves as desired: Lastly, to illustrate how we can further alter the behavior of our inner local function , we also added the bool inclusive parameter to the Filter<T>(IEnumerable<T> source, Func<T, bool> filter, bool inclusive = true) method. This allows us to effectively inverse the behavior of the filter process, so any element that would return true from the filter now returns false (and, therefore, is excluded): Here we should see the opposite result of our previous filtration in the output: Stay tuned for future parts in this series where we‚Äôll continue exploring the new features introduced in C# 7.0! And don‚Äôt forget, the Sharpbrake library provides robust exception tracking capabilities for all of your C# and .NET applications. Sharpbrake provides real-time error monitoring and automatic exception reporting across your entire project, so you and your team are immediately alerted to even the smallest hiccup, and can appropriately respond before major problems arise. With a robust API and tight integration with the powerful Airbrake web dashboard, Sharpbrake will revolutionize how your team manages exceptions. Check out all the great features Sharpbrake brings to the table and see why so many of the world‚Äôs top development teams use Airbrake to dramatically improve their exception handling practices!", "date": "2017-07-27"},
{"website": "Airbrake", "title": "Tips for Taking the Headaches out of Deployment", "author": "Unknown", "link": "https://airbrake.io/blog/devops/take-headaches-out-of-deployment", "abstract": "Months and often years of work go into most modern application development life cycles, so when it comes to deployment (whether for testing or even production) it can be a momentous occasion. While many continuous deployment-style practices try to reduce the difficulty and stress involved in deploying by keeping the process a frequent occurrence, it can still be a major challenge to deploy without introducing any number of problems. To try to alleviate some of these deployment headaches in this article we‚Äôll explore a bunch of tips and techniques that your teams can implement with varying levels of effort, but all of which can have a hugely positive impact on the deployment process throughout the entirety of the development life cycle. Let‚Äôs take a look! One of the most helpful practices right out of the gate is to begin your planning as early as possible. You‚Äôll need to plan for all sorts of variables; everything from development and production platforms to languages and frameworks to database structures and schemas to release cycles and story handling to exception management and tracking and more! Since it can be daunting to try to sit down and plan everything from the beginning, don‚Äôt try to tackle the entirety of the scope or project at once, particularly if your organization plans to use some form of agile development where things can (and should) change during the process. Instead, just get in the habit of trying to plan how things will go ‚Äî particularly when it comes to deployment ‚Äî as early as you can safely manage so there are fewer surprises later on down the road. The next broad tip is to iterate often and release regularly. Unless your project or business requirements absolutely forbid it or don‚Äôt allow for more than one massive product launch and release, it‚Äôs almost always going to be an easier road to travel if your team can get in the habit of frequent and regular releases. Whether these occur in localized or remote staging environments or are full-blown public releases, getting releases out there into a deployed state will reveal where things are working and where other aspects might need to be fixed or improved upon. Moreover, it‚Äôs typical to have stubs and temporary solutions in place during development for interfacing with shared services like security, data, CDNs, and the like. Regularly releasing deployments forces your hand a bit into nailing down how all those integrations and services will work with your application almost right out of the gate, which will ensure stability in the future. Continuous X remains a huge buzzword in the industry right now and for good reason: continuous practices generally empower your team and strengthen your application so you can be assured everything works as expected across all environments and even after deployments. To that end, it may be beneficial to consider using some of the common continuous practices within your own project life cycle, depending which practices best fit the needs of your business. Continuous integration ( CI ) is the practice of automatically building and testing your application on a consistent and regular basis. The frequency of testing will depend on your business needs, but with the many powerful tools that are now available this process can occur for every build or even for every single commit to the shared repository. Continuous delivery ( CD ) is less of a practice and more of a concept; the idea that your code base should always be release-ready. What this means is debatable, but the basic idea in most implementations is that your application should always be ready for a single-click (or scheduled and automated) full release into some form of staging or production environment. Finally, continuous deployment (also CD ) is the culmination of these continuous practices and is where the actual deployment of releases or patches take place and are available for wider use (staging, production, etc). Some businesses choose to streamline these processes so much that they are deploying new, updated builds to the public release environment on a daily basis. Don‚Äôt be afraid to take advantage of tools and services that already exist to improve and streamline your deployment practices. Many modern applications successfully rely on these tools as they can immediately improve deployment speed and stability. There are far too many deployment tools out there to list them all here so we‚Äôve listed just a handful of the popular choices below. With a bit of time and research early in the development life cycle your team can find which tools best meet you business requirements needs and fit into the structure of your project. Jenkins : An open source continuous integration tool written in Java, which features pipelines as code and numerous plugins, allowing for simplified deployment. Chef : Chef allows for easy manipulation of servers and deployment environments. Octopus Deploy : A .NET- and Windows-focused automatic deployment tool. Travis CI : A continuous integration tool for syncing with code repositories for automatic testing and deployment. Codeship : A customizable, hosted continuous integration platform service. Capistrano : A Ruby-based remote server automation tool. Deployment is made much easier and less stress-inducing when the stability of the code can be relied on, so another simple yet highly effective practice to improve deployment is to practice automatic code reviews. There are many tried-and-true tools available that can automatically evaluate your application‚Äôs code to check for complexity, style, security, duplication, coverage, and much more. The extra level of assurance that the code is well-built and maintained helps ensure that deployments are more reliable and less error-prone. Deployment and testing tools these days make it relatively simple to automate the vast majority of the deployment process, but therein lies a dangerous trap you may be caught in if you‚Äôre not careful: The temptation to automate everything . While this may be a valiant goal ‚Äî and one that is certainly possible, as many of the largest and most successful applications we all use today have shown us ‚Äî it‚Äôs not always a smart move to spend the often excessive amount of time and resources necessary to try and automate that last little bit of the deployment process. Instead, if automating some things just isn‚Äôt as easy as you had hoped, don‚Äôt be afraid to go ahead with automating the core 95% of the process while leaving the last little bit as a manual process for now. Over time and as your deployment practices improve it‚Äôs likely your team will eventually figure out how to automate that last part as well, but in the meantime you can save a lot of effort by foregoing it. Test as frequently as you can and as early in the development life cycle as possible. Whether that means using a test-driven development methodology or not is up to your team and based on your own requirements, but the important point is that the more frequently the code base is tested and the earlier this occurs in the process, the better the application will perform and the easier frequent deployments will become. Wherever possible try to gradually rollout features instead of pushing a new feature to the entire userbase all at once. A simple way to implement this is to release features that are disabled by default. The new code can be live and in production, but most users aren‚Äôt going to be using the new feature. This allows your own team members, or even a select group of beta testers, to test out and vet the new feature in the wilds of the production environment before you toggle the switch and enable the feature globally in a future release. During the planning process, as well as throughout development, try to maintain a list of go/no-go inflection points that will determine if a build is ready to be deployed. These decision points can be anything that fits your business requirements, but having some formal metrics on which to base the continuation of deployment (or subsequent rollback, if necessary) can really improve the stability and simplicity of releases overall. Blue-green deployment is a practice that aims to reduce downtime and improve stability by running two identical production environments, which are commonly referred to as blue and green . The idea is that only one environment (either blue or green ) is live at any moment and is serving all traffic and meeting all requirements. For example, if blue is the currently active environment then green is idle and not in use. When a new release is ready it should be deployed to and tested on the currently-idle environment ( green in this case). This allows your team to run all tests and diagnostics on the green production environment to ensure everything runs smoothly. Once confirmed simply flip the switch on routing to move the live production service from the previous blue to the new version of green . Not only will this reduce downtime for end-users but it dramatically reduces risk by allowing for immediate rollback to the previous blue version and server with a simple route switch. There are many well-tested and reliable content delivery network services out there, allowing your application to delivery high-bandwidth or frequent media from a reliable and stable location without the need to worry about where that data comes from between one deployment and the next. While this is often (mistakenly) considered a practice solely for developers it‚Äôs critical that dependencies are hard-coded to ensure that deployments never run into troubles because of incompatible versions or software changes made in the future. If a library your application relies on is modified in the future it can have dramatic and negative effects on your software if your deployment isn‚Äôt forcing explicit, hard-coded versions. Even after your application has been deployed and seems to be working the entirety of the deployment process is far from over. One of the most critical stages to any successful deployment is the post-deploy process of monitoring your application to ensure everything is working well and remains stable. Even with the best testing procedures and quality assurance practices you can‚Äôt always be certain that no bugs or issues made their way into the newly-deployed release. Therefore, it‚Äôs critical that you monitor exceptions in a manner that suits your team. Error monitoring services like Airbrake provide an easy and inexpensive way to be automatically alerted of any exceptions which may occur. Airbrake can be quickly integrated and will alert you and your team of issues within the deployed application without the need for user-generated error reports. In addition to monitoring for exceptions you‚Äôll also want an efficient way to handle errors once they‚Äôre discovered. Even a simple error-tracker will make it a breeze to manage those post-deploy exceptions that may pop up. If your deployed application fails to load or feels slow and bogged down then users are likely to become frustrated and may even leave entirely. Be sure to monitor load times so you can be immediately alerted if something isn‚Äôt working correctly. Sometimes an issue will pop up that isn‚Äôt severe enough to raise an exception, but it‚Äôs still important enough to take note of it and investigate. In such cases the issue may still be tracked by application or server logs, so keep a close on those after a new release has been deployed. Key performance indicators ( KPIs ) are simply quantitative ways to measure how your application performs within the various business objectives your organization has laid out. Whether you want to monitor user signup rates, sales figures, click-through frequency, support requests, or anything else you may need, it can be extremely beneficial to understand what is working and what could be improved during this deployment, which can dramatically alter the direction of your application and future deployments as well.", "date": "2017-06-22"},
{"website": "Airbrake", "title": "Production Defects Are Not Inevitable", "author": "Unknown", "link": "https://airbrake.io/blog/devops/production-defects-are-not-inevitable", "abstract": "Let‚Äôs be upfront about this right out of the gate: Defects are an inevitability at some point during the development life cycle, particularly for larger and more complicated projects. There‚Äôs no benefit to be gained by fooling ourselves into the unhealthy belief that all bugs and defects can be avoided. This attitude is dangerous, not only for technical leadership in the company but for customers and even the bottom line of the business as a whole. However, even though some defects are a given throughout the course of development, production defects can often be avoided with intelligent planning, coding practices, and ‚Äî most importantly ‚Äî thorough testing. Throughout this article we‚Äôll explore why, even after decades of advancement in programming and development, creating modern zero-bug applications is still so challenging. We‚Äôll then examine a handful of tried-and-true techniques that can help contain all defects within the confines of safe environments like development and staging, while largely eliminating defects from your full production releases. As many technically-minded individuals like myself can attest, we often like to try simplifying abstract or challenging concepts by quantifying them in some way ‚Äî if it can be measured, counted, or computed it becomes easier to work with. Thus, when it comes to creating powerful, robust, and (hopefully) defect-free applications it helps to understand what level others in the industry are at. This information can help us answer some important questions: How many defects are acceptable in our application? How much should severity level factor in? What is the industry average for bugs? That last question is difficult to answer due to the sheer volume of projects that are being produced across the industry, not to mention the dramatically different goals and scopes of each project. One resource that can help with an answer is the renowned book Code Complete by the highly-respected software engineer Steve McConnell . While his work is somewhat dated at present, the trends in defect rates seem to be hold steady over time, even over the course of decades of advancement ‚Äî as tools and written code get better, the defects we produce just become more complicated. According to McConnell‚Äôs research, the industry average defect rate is around 1-25 bugs for every 1,000 lines of code. Yet this isn‚Äôt to suggest that all applications or all organizations will average out to creating a bug every 80 lines of code. In many cases defect rates are directly proportionate to the potential cost or danger of producing said defects. In his stellar article They Write the Right Stuff , author and business journalist Charles Fishman concludes that much of the success of NASA‚Äôs now-retired Space Shuttle program came from the excellence of the software that largely controlled the spacecraft. The Space Shuttle‚Äôs software was as near to bug-free as humans have ever produced. Fishman lays the stats out in all their glory: ‚ÄúThe last three versions of the program ‚Äî each 420,000 lines long ‚Äî had just one error each. The last 11 versions of this software had a total of 17 errors. Commercial programs of equivalent complexity would have 5,000 errors.‚Äù Granted, the vast majority of software in development these days isn‚Äôt aimed at controlling multi-billion dollar, space-faring, meticulously-engineered feats of wonder, but there‚Äôs certainly a happy middle ground to be had. If too many defects will see your proverbial ship crash and burn, yet zero defects is merely a flight of fancy, what is the reasonable compromise that can produce quality software with as few bugs as possible? Development (and staging) is the playground where anything and everything can go wrong and yet you can always recover. Perhaps the most critical notion necessary for creating robust applications is to make every effort to contain all the defects to the development environment. No matter how hard we try or how diligent our development teams may be there will always be bugs popping up from time to time. Keeping these wild things contained to the confines and the safety of the development or even staging environments means defects are recognized and resolved before a single end-user ever experiences them. A multitude of techniques and tools exist to help detect and resolve bugs during development, but a handful of the tried-and-true practices are: Test-driven development ( TDD ) aims to create tests before software is written, ideally to ensure all written code is aimed at meeting business requirements. The Agile model encourages iterative development and high adaptability to changing requirements. Refactor early and often to improve code stability and reduce the potential for defects while keeping the external behavior the same. Code reviews and pair programming are simple techniques to get more than one person looking at code before it is committed to the repository. Regression testing should also be used to confirm that recent changes haven‚Äôt broken previously functional code. Automated exception tracking and reporting through tools like Airbrake ensures your team is immediately aware of exceptions the moment they occur. While many other best practices and techniques exist to help your team recognize and respond to defects during development and staging, the most important factor is the development of a basic set of standards and requirements for use throughout the project. Obviously, these requirements can (and will) change over the development life cycle, but having a single source of information that everyone on the team can look to makes it much more likely that many potential defects will be avoided altogether. Once you‚Äôre ready for production it‚Äôs time to launch into the orbit of customers who can (and will) invariably find ways to potentially break your application. Thus it‚Äôs critical that all the planning that was put into place and the best practices that were executed upon during development were sound and ideally followed to a T. Thankfully, with the proper development methodologies, solid testing techniques, and powerful exception reporting it‚Äôs quite feasible to enter into production with very few if any defects. That said, even the best-laid plans of mice and men often go awry. While production defects are far from inevitable it‚Äôs critical to have a safety net in the unlikely occurrence that something unexpected happens in your application after it‚Äôs already out there. This is where the power of error monitoring software comes into play. Even during development, but particularly after production release, error monitoring software provides that lifeline your organization needs to ensure your software remains fully functional. Any unforeseen defects are immediately identified and reported to your team, without the need for user-generated feedback or awkward error reports. Check out Airbrake‚Äôs exception handling tools today to see how your organization can keep on top of any defects that slipped through the cracks during production.", "date": "2017-06-16"},
{"website": "Airbrake", "title": "Improve Your Deployments with DevOps", "author": "Unknown", "link": "https://airbrake.io/blog/devops/improve-deployments-devops", "abstract": "DevOps has emerged in recent years as a direct attempt to counteract the typical problem of slow software releases. Every day that passes between the inception of a great software idea and its eventual release into the wild is another day in which that idea loses relevance and value to users. In business, the concept the first-mover advantage sums this up nicely: The first occupant of a market segment is provided a significant advantage over the rest of the competition. Even if the software your organization is developing doesn‚Äôt have any competitors, there are still major incentives (financial and otherwise) to releasing in a timely manner. It is for these basic reasons that DevOps has become such a dominant practice in modern software development. It forces a transition from slower release cycles into those that occur in a continuous manner, commonly referred to as continuous delivery or continuous deployment . In this article we‚Äôll explore a handful of these core concepts and see how you can dramatically improve your deployments with DevOps. The primary aim of DevOps is to smooth out the transition between active development and a functional release. In an ideal world, this process should be completely frictionless and automated, requiring little or not manual human intervention. If this is the end goal, then it stands to reason that DevOps can be used to modify and improve the standard release and deployment process. In most cases, a typically release process contains four overall stages: Scheduling ‚Äì Document and plan on a release schedule, whether that be a singular event or multiple lesser releases. This can be as broad or as detailed a process as is required, but every team or organization that is involved and has a stake in the release should be included in this decision-making process. Operations team members should also be involved in this planning stage, to ensure that releases will be properly supported and are technically feasible with current or expected resources. Compatibility ‚Äì Confirm that all components of the upcoming release are compatible with one another. These may include everything from individual software methods and APIs to third-party services and libraries. This isn‚Äôt entirely software related either ‚Äî hardware, platforms, and architecture requirements and capabilities must also be checked, so there aren‚Äôt any unexpected problems or incompatibilities immediately following or during release. Environments ‚Äì Maintain integrity of the software when transitioning from development/testing/staging to the release environment (e.g. production). It is quite common for components in an overall software application to experience minor adjustments from one environment to the next, so this critical stage of the deployment process aims to ensure nothing untoward has happened during the transition. This might include verifying and maintaining dependency versions, and should include some form of tracking every component in the release. Rollbacks ‚Äì Allow for any given software release to be rolled back to a previous version. In the event of an unexpected error or severe hardware failures, a software rollback to a prior release is often the only safe and prudent solution. There‚Äôs no mention of DevOps practices in any of the release stages above since they‚Äôre all standard techniques for most software releases. However, the inclusion of DevOps practices allows for most (if not all) of these steps to be highly automated. Automation dramatically reduces the likelihood of human error and saves a great deal of resources in the long run. Just as importantly, automating the majority of the deployment process dramatically speeds up the entire act, which allows for all future releases to occur far faster and at much greater frequency. To further elaborate on why automation is so vital let‚Äôs briefly consider the overall stages of a full software development life cycle: Requirements ‚Äì Discuss and document software requirements with customers and other team members. Development ‚Äì Develop the majority of the functional application, including unit tests. Build ‚Äì Build the software for whatever environment is currently required. Testing ‚Äì Test the software, on any and all environments. Deployment ‚Äì Deploy the software to the target environment. Execution ‚Äì Monitor the active release and respond to errors or other events. This is a basic explanation of the stages, but performing all of these manually is a massive burden, which is largely what caused software projects in previous years to turn into massive undertakings that spanned years of effort before a release. DevOps aims to dramatically reduce the time spent in these stages by automating nearly everything following the development stage. Building, testing, deploying, and executing can all be automated, often to such a degree that a single command can be issued to build, test, and release a new version of the software. Automating deployment takes many forms, but a common and powerful practice is stick everything inside version control . This allows for an entire software version to be accessed from a central location, while also forcing developers and operators to create scripts and use tools to automate every aspect of the process. These scripts are modified over time, along with the source code of the actual application, so the deployment process is in a constant state of improvement. DevOps practices are not all tangible techniques related to how software is developed or deployed. In many cases, integrating DevOps is about shifting the outlook and philosophies of the organization, by changing the beliefs and practices of those people that make up said organization. One such philosophical shift that may be difficult for some more traditional groups to implement is the shrinking of team sizes. While the explicit number of people that should be allowed on a team will differ from one expert to the next, the important thing to consider is that a smaller team provides many advantages over more traditional, larger teams: Improved Communication ‚Äì When a massive department meets there‚Äôs little room for discussion, and often one or a handful of individuals are ‚Äúpresenting‚Äù to the group. On the flip side, a small team has few enough people that everyone involved can express opinions, concerns, or ideas that will impact the project or the rest of the team. Plus, meetings tend to be shorter since everything moves faster and more efficiently. Rapid Decision Making ‚Äì Since it‚Äôs easier for members of smaller teams to communicate with one another, this also provides another massive advantage: it‚Äôs easier for the team to reach decisive conclusions in relatively shorter periods of time. A consensus from a dozen or so people is far easier (and even plausible) than reaching one for fifty or more team members. Better Group Dynamics ‚Äì Not everyone will get along with or love everyone else, no matter the size of the team. However, a team with fewer people will typically lead to closer relationships and cohesiveness when compared to a larger team. All that said, even though there are clear advantages to smaller teams, there are certainly tasks or releases that will require many more people than a typical team can take on. With DevOps practices in place, it‚Äôs much easier for smaller teams to work together on larger components of a project. Plus, if everything is version controlled and most everything is automated, members of different teams are still working on and referencing the same primary source at all times. This act of coordination is another key aspect of DevOps. The act of coordinating takes on many forms throughout a full software development life cycle. Team members can coordinate directly in conversation, indirectly by working on shared components, in real time, or in delayed time via tangible elements such as email or chat messages. A version control system is a powerful coordinating tool that ensures a project always maintains forward momentum and historical records of all previous changes. The tricky part about development and deployment is the need to perform a cost/benefit analysis for each coordinating effort throughout the process. While it may not seem obvious at first, every act of coordination has a real cost and (hopefully) a real benefit. For example, a typical morning meeting involving a half-dozen team members forces direct coordination between those people. It may not seem significant, but if said meeting interrupts an active developer who was in a state of flow just prior to being interrupted by this meeting, that may ‚Äúcost‚Äù half a days worth of man hours for that individual developer to get back to the same state of active progress he or she was at before. Multiple this cost by the number of people involved in the meeting and it can quickly become a very costly endeavor. On the other hand, this morning meeting may result in dramatic benefits, such as determining the next major software feature the team should work on. The challenge that DevOps practices tries to improve is finding that sweet spot between too much and too little coordination. The goal can be summed up as ‚Äúminimizing unnecessary coordination.‚Äù For example, maybe the topics covered in the aforementioned morning meeting could actually be handled using indirect coordination (email, Slack, etc), rather than forcing everyone to attend a direct, in-person meeting. This would allow the flow-experiencing developer to continue working uninterrupted, but he or she can still provide input on the topics at a more convenient time. Since the entire goal of DevOps is to reduce time to market for each deployment and release, a major hurdle for many organizations will be determining how to reduce unnecessary coordination practices. Even the most diligently tested software may run into unforeseen errors during or after deployment. Unfortunately, many organizations merely rely on user reports to determine if there are errors in production releases. Not only do the vast majority of users fail to report errors in the first place, but relying on user reporting is both dangerous and foolish, for a variety of reasons. Therefore, error reporting software is a crucial tool for any deployment process, as it will provide you and your team with automatic exception tracking and alerts, without the need for user intervention. Since everything else in the deployment process is automated, there‚Äôs no reason that error monitoring and reporting shouldn‚Äôt also be automated as much as possible. That‚Äôs why Airbrake‚Äôs powerful error monitoring software guarantees that your team won‚Äôt need to worry about losing track of production errors! Airbrake provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-01-16"},
{"website": "Airbrake", "title": "DevOps Best Practices", "author": "Unknown", "link": "https://airbrake.io/blog/devops/devops-best-practices", "abstract": "DevOps is the practice of combining the philosophies and tools of software development ( Dev ) and software operation ( Ops ). For better or worse, DevOps encompasses every aspect of a software system, including actual source code, infrastructure, configuration, data, testing, deployment, staging, production, and so forth. Thus, finding and implementing the most widely accepted DevOps best practices can be a challenge, as there‚Äôs no absolutely ‚Äúcorrect‚Äù technique. Instead, improving your teams‚Äô DevOps practices is just as much about executing a philosophical shift as it is altering code or scripts in the system. In today‚Äôs article we‚Äôll explore a wide range of lesser-known DevOps best practices, including chaos engineering, continuous environment testing, infrastructure automation, temporary environments, and more. Let‚Äôs get to it! Most development teams are likely well-accustomed to using version control for application source code. However, a critical DevOps best practice, which many teams may not be using, is to transition from versioning just a handful of elements like source control, to versioning everything that is even remotely involved in the application. Everything from source code and configuration to infrastructure and the database should be version controlled. This practice ensures that every aspect of the application, throughout the entire development life cycle, can be historically traced back through the single, ultimate origin that is the repository. It maintains a constant and explicit connection between all components of the application, so there‚Äôs never any doubt which version of the database was used with which version of the source code. While most teams understand the concept of versioning everything, few organizations actually implement the practice to the fullest extent. A partial implementation of versioning most , yet not all, aspects of the application largely defeats the purpose, and undermines the foundation and stability of the application architecture. Most teams version control their source code. A good percentage of teams also version their configuration. A small sampling of teams will even version their database. Unfortunately, that‚Äôs typically where versioning stops in most software developments. Ideally, everything should be versioned ‚Äî not just the most common components. This includes all package dependencies, database migration scrips, and the database data itself. The primary goal of versioning everything can be summed up thusly: Any (adequately privileged) team member should be able to recreate a specific version of the complete application stack by issuing a single command. If the entire system has been properly designed and versioned throughout development, this process should merely be a matter of executing one script, which itself triggers all sub-scripts necessary to create every component of the software. Steps for implementing full versioning is beyond the scope of this article, but we‚Äôll explore a few explicit concepts in the sections to follow. The general idea is that every component of the software should be defined and generated by a source script . Whether the script is generating or modifying infrastructure, data, executing deployments, or configuring the application, if it is properly written and version controlled, you and your team can easily access and execute scripts from any iteration of the software you need. Throughout the industry, most of these techniques are better known as X as code , such as infrastructure as code , policy as code , and so forth. The ultimate goal is to introduce idempotence into the application and infrastructure that runs it, which essentially means that a scripted release of one version of the software will be identical to another release of that same version, every time it‚Äôs executed. Implementing infrastructure as code practices revolves around the basic concept of infrastructure automation ‚Äî creating scripts that can perform every step of infrastructure creation including server propagation, OS installation, configuration, and so forth. With a proper script, infrastructure configuration is no longer tied to a single machine or cluster, but can be copied and repeated ad nauseam, for as many nodes as needed. Moreover, by explicitly defining every step in the process inside an automated script, multiple team members can alter and improve the process throughout the development life cycle, so the latest version is always the most robust and well-tested. There are many different tools for handling infrastructure automation, but the most popular and well-established are Puppet and Chef . Both have their own pros and cons, but either choice will provide a solid foundation on which you and your team can generate infrastructure as code scripts with relative ease. Puppet is certainly the most dominant tool, with a great deal of high-profile organizations using their software for infrastructure implementation and management. On the other hand, Chef has a robust online learning tool, with tracks that will guide you through the process of exploring everything Chef is capable of. Both Puppet and Chef use Ruby domain-specific languages to create all configuration scripts and execute all commands. Most importantly, both tools are idempotent, so you‚Äôll always get the exact same result when a particular configuration script is used, each and every time you execute it. Chaos Engineering is the idea that modern distributed software systems are prone to experiencing random, turbulent conditions and, therefore, such systems should be designed to withstand unexpected problems and weaknesses in production environments. Chaos Engineering principles focus on four basic experiments used to test the weaknesses of the software system: Start by defining steady state as some measurable output of a system that indicates normal behavior. Hypothesize that this steady state will continue in both the control group and the experimental group. Introduce variables that reflect real world events like servers that crash, hard drives that malfunction, network connections that are severed, etc. Try to disprove the hypothesis by looking for a difference in steady state between the control group and the experimental group. There are many ways that different organizations try to implement Chaos Engineering practices. Netflix developers, for example, created (and open-sourced) their internal Chaos Monkey tool, which randomly terminates virtual machine instances and containers within the production environment. While this may be a rather extreme approach to take right out of the gate, many teams find success by first experimenting with the randomized failure of non-critical services and instances. Once the team has developed techniques and automated responses that can handle these lesser services, then critical services are also introduced into the mix of potential failures. The goal is simple: Force your team to develop software systems that can instantly and automatically adjust to failures within any and all components, without losing the core functionality of the software. A major benefit to automating your infrastructure is that your software is no longer tied to a single server instance or node. There‚Äôs no more need for developers and IT admins to spend hours and hours slowly establishing and configuring the infrastructure components necessary to run a particular version of the application. When manual intervention is required to establish a development, staging, testing, production, or any other type of environment, there will inevitably be problems and slight differences from one environment to the next, which can lead to a wide range of unexpected behaviors and bugs. The solution is simple: Implement a policy of using temporary environments for everything, save perhaps the production environment itself. The goal is that any given environment should only exist for a short period of time; typically long enough to execute the full suite of automated tests. With automated infrastructure practices and scripts already in place, a temporary environment can be created, tested, and destroyed ‚Äî all without manual, human intervention. It may feel counter-intuitive at first, but there are a number of major advantages to using temporary environments. The first and most critical benefit is the removal of environment-specific dependencies. Your software will no longer be explicitly tied to a singular environment, but can instead be deployed and executed at will, on any environment that may be necessary at the time. The other major benefit of a temporary environment policy is that automation becomes a necessity . Since environments are frequently created and automatically destroyed after a matter of days, if not hours, the entire team is forced to adapt and generate automated scripts that can handle all environmental propagation, which strengthens the entire infrastructure with every single addition or change to the scripts. Continuous practices are becoming standard DevOps practices in many modern organizations. Continuous deployment , continuous integration , and continuous testing are common norms, but few organizations apply these same principles of continuous integration and testing to the environment on which the software is running. As infrastructure as code practices and principles are implemented, it becomes necessary to automate the success and stability of these propagated environments by implementing continuous environment testing into the mix. Luckily, the concepts and practices behind automated environmental testing are simple. Start by defining what steps should be performed in a test, then write the automated test that describes the previous steps. From there, a script must be created that actually executes the actions defined in the test. Lastly, every test must be included in a larger script that can automatically execute everything without human intervention. This ensures that the process fits into the continuous definition that the other continuous practices rely upon. As discussed above, everything that defines these environment tests should also be versioned. These tests need not be complicated, as they‚Äôre often checking simple parameters of the environment, like what version of a package or software is installed. It‚Äôs the combination of all these environmental tests ‚Äî and the ability to add and modify them as development progresses ‚Äî that will provide you and your team with more robust DevOps best practices. Moreover, continuous testing practices also need to scale with your software application itself, by keeping you informed the moment something goes wrong in development, staging, or even production environments. That‚Äôs why Airbrake‚Äôs powerful error monitoring software guarantees that your team won‚Äôt need to worry about losing track of production errors! Airbrake provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize exception parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs error monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices!", "date": "2018-01-09"},
{"website": "Airbrake", "title": "9 Powerful Deployment Tools", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/9-powerful-deployment-tools", "abstract": "Deployment isn‚Äôt usually the sexiest stage of application development, but performing it properly and efficiently is one of the most important factors in producing stable, successful software. To simplify this process, numerous deployment tools have recently emerged that can handle everything from automatically building and testing code to instantly deploying it and reporting errors back to the team when they occur. However, determining what tools are the best can be a bit challenging, especially if you or your team haven‚Äôt been keeping up on the latest ‚Äúcontinuous XYZ‚Äù trends. Throughout this article we‚Äôll explore a hand-picked selection of 9 of the most powerful deployment tools on the market today, all of which can help your organization with every aspect of the development life cycle, including integration, delivery, deployment, testing, and error monitoring . Let‚Äôs take a look! Continuous integration is the practice of automatically building and testing code after every single code commit across the team. Implementing continuous integration provides numerous benefits, including the ability to near-instantly determine if pushed changes are compatible with the existing code base, or whether issues crop up that must be addressed. As such, we‚Äôll take a look at a few of the most popular continuous integration tools that have emerged, all of which aim to streamline this validation process. Jenkins is probably the most well-known open source continuous integration tool on the market. It boasts a long track record and relatively large userbase of successful projects and organizations. Its most powerful feature is the availability of thousands of plugins , which allow Jenkins to be incredibly flexible and well-suited for just about any project, team, organization, or use case. As a simple example, Jenkins isn‚Äôt pre-configured for any particular source control management (SCM) software. Instead, you can simply go to the SCM category plugins page and install a plugin for Git, Subversion, Mercurial, Team Foundation Server, or whatever SCM your team is using. JetBrains TeamCity is a free, enterprise-level, cross-platform continuous integration and continuous deployment tool, which supports unlimited users, build times, and builds. It can be used for up to 100 build configurations, 3 concurrent build agents, and provides a public issue tracker and forum. On-the-fly build progress reporting provides feedback throughout the build process, without the need to wait for each build to complete. TeamCity also includes project hierarchies for configuration and permissions inheritance across multiple projects. Templates can be created and customized to quickly copy common settings from other build configurations. Additionally, build chains and dependencies make it easy to break down a larger build process into smaller procedures, which can be run sequentially or simultaneously. CircleCI is the scalable, enterprise-level continuous integration platform that has powered some of the most well-known web applications and companies on Earth, including Facebook, Spotify, and Kickstarter. CircleCI provides a simple YAML-based configuration syntax for defining exceptionally complex job execution instructions, so you and your team have complete control over the development, testing, and integration processes. Since the service is based on scalable architecture, you can start with the minimal computational power and memory required for your project, then scale things up as more power is needed. CircleCI is also language-agnostic, and includes support for C++, JavaScript, .NET, PHP, Python, and Ruby. Integrated Docker integration also allows you run any image from a Docker registry, while customizing said image on a per-job basis. Manual deployment may have been viable back in the 90s, before ‚Äúweb application‚Äù was a common term and most sites consisted of a handful of HTML pages. These days, modern applications require more precise and automated procedures. Enter the need for automated deployment tools. Using such a tool makes it simple for just about any member of your team to safely deploy new releases, or to roll back a problematic release with the touch of a button. Moreover, many deployment tools can be configured to automatically roll back a troublesome release, with no user intervention at all. Below we take a closer look three of the most powerful and popular automated deployment tools on the market. Google Cloud Deployment Manager is an infrastructure deployment service that automates the creation and management of Google Cloud Platform resources. It provides flexible deployments through custom templates and configuration files, which can be used across the wide range of Google Cloud platforms including Google Cloud Storage, Google Compute Engine, Google Cloud SQL, and many more. The primary advantage to Google Cloud Deployment Manager is that all resources and requirements for an application deployment can be specified and customized within a simple YAML text format, allowing virtually anyone on the team to successfully deploy projects. AWS CodeDeploy automates software deployments onto a variety of compute services including Amazon EC2, AWS Lambda, or even on-premises instances. It fully automates software deployments, providing a rapid and reliable method for frequent release schedules. Moreover, you can choose to deploy your application across multiple environments, from development and testing to staging and production. Since AWS CodeDeploy is powered by the ubiquitous AWS platform it can easily scale with your infrastructure needs, from single Lambda functions all the way up to thousands of EC2 instances. AWS CodeDeploy provides mechanisms for application health monitoring during the deployment process, so your application is made as readily available as possible throughout the deployment process. Deployment rules can be configured to provide alerts for application health metrics during deployment, in order to halt or even revert deployments, if issues arise. AWS CodeDeploy also gives detailed reports showing when and where each application revision was deployed. You can even create push notifications in order to get live updates about deployments as they progress. Octopus Deploy aims to pick up where your continuous integration tool‚Äôs work ends by automating even the most complex application deployments ‚Äî whether cloud based or on-premises. Octopus Deploy‚Äôs primary benefit is the strict requirements and restrictions you can place on various stages of deployment. Development, quality assurance, testing, staging, production deployments, and other deployment phases are separately tracked and performed. You can restrict access to certain phases, so untested code cannot be deployed to production. Octopus Deploy also allows you to build your application once, but deploy it as many times as necessary, ensuring the deployed software is exactly what was tested. In short, Octopus Deploy tries to ensure nothing changes between development and production, so you‚Äôll be confident it will ‚ÄúJust Work‚Ñ¢‚Äù. Octopus Deploy provides an intuitive dashboard for performing high level deployment steps for .NET, Java, and many other platforms. Moreover, custom scripts can be used to manage sensitive data or implement complex deployment patterns. Even the most diligently tested software may run into unforeseen errors after deployment. Unfortunately, many organizations merely rely on user reports to determine if there are errors in production releases. Not only do the vast majority of users fail to report errors in the first place, but relying on user reporting is dangerous and foolish for a multitude of reasons. Therefore, error reporting software is a crucial tool for any deployment process, as it will provide you and your team with automatic exception tracking and alerts, without the need for user intervention. Airbrake‚Äôs error monitoring software reports the error type, error message, parameters, the API method that generated the error, the detailed backtrace, the client machine data, the environment in which the error occurred, the file that caused the error, and much more. There‚Äôs no longer a need to sift through complicated logs or await user-provided feedback and bug reports. Moreover, Airbrake includes deployment tracking and error trend data through the powerful web dashboard, so managing and triaging errors has never been easier. Errors are intelligently grouped so you can review and resolve similar errors within a single, easy-to-use interface. Errors can be tracked over time and can be collated using custom grouping rules. Airbrake also includes advanced filtering capabilities, allowing you and your team to find the exact errors you care about. With GitHub or GitLab integration, backtrace line markers can be clicked through to view the exact source code from where the error originated. Check out Airbrake‚Äôs error monitoring software today and see why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their exception handling practices! If your organization is looking to streamline communication, then a cloud-based communication platform like Slack or Stride (previously HipChat) is a great option. Boasting over 6 million daily users , Slack is the current front runner and de facto choice for most companies. However, Stride should not be ignored, as it comes from Atlassian , the creators of Jira, Trello, and Bitbucket ‚Äî if your team uses these tools, Stride‚Äôs integration might be an ideal fit. Either way, the advantage of a cloud-based communication tool is the ability for everyone in the team ‚Äî and across the entire company ‚Äî to easily communicate with one another. Every conceivable discussion configuration can be realized, from one-on-one private messaging to massive team chats through channels specific to any need you might have. For example, a #deployment channel could be created and dedicated to solely tracking and communicating deployment statuses throughout the week. Team members that need to monitor such information can join the #deployment channel, while all other members can remain oblivious and need not know such a channel even exists. Additionally, both Slack and Stride allow for third-party app integrations, making it easier to configure push notifications to specific team members or channels. For example, you can integrate Slack with Airbrake so that an automatic Slack notification is generated when an error occurs within your application. Or, you can get an automatic notification through automated deployment tools like AWS CodeDeploy when a deployment occurs. The potential for integration is near-limitless.", "date": "2017-12-12"},
{"website": "Airbrake", "title": "Easing the Pain of Defect Triage", "author": "Unknown", "link": "https://airbrake.io/blog/devops/easing-the-pain-of-defect-triage", "abstract": "Triage is a medical term used to assign degrees of urgency to wounds or illnesses, in order to decide on the order (priority) of treatment across a large number of patients. Defect triage (or bug triage ) is a term used in modern software development and is the practice of reviewing, discussing, and categorizing software defects based on their negative severity. Unfortunately, performing defect triage can be a real pain (pun intended), since the process requires intimate knowledge of the entire software and its intended functionality, the capabilities of all relevant systems and components, and the status of all current or incoming defects in the system. To help you ease the pain of defect triage, in today‚Äôs article we‚Äôll be exploring exactly what defect triage is, and we‚Äôll look at a few useful tips aimed at helping you implement a robust and powerful triage process into your own software development life cycles. Let‚Äôs get to it! The entire act of performing defect triage revolves around appropriately defining and categorizing defects into relevant priority and severity levels. Thus, it is critical that your organization has a clear understanding of what both priority and severity mean in this context. The goal is to reduce potential ambiguity as much as possible so that everyone on the team is clearly aware of the differences between each level of priority and severity that your team will be employing. Priority is defined as ‚Äúthe fact or condition of being regarded or treated as more important.‚Äù Thus, applying this to defect triage is merely the act of treating or regarding one defect as more important than another. As dozens, if not hundreds, of defects are discovered and processed by you and your team throughout the entire development life cycle of a given project, it should become instinctual for those involved in the quality assurance process to naturally assign a similar priority level to defects of a certain type. This will come naturally with practice, but can also be supported by well-defined documentation shared across the team, which aims to outline and detail the priority (and severity) levels that should be used. Perhaps the most important practical result of prioritizing defects is the actual turnaround time necessary to resolve a defect. As multiple defects are assigned various priority levels, a natural hierarchy of importance is generated, which ensures that those defects higher on the list are fixed before those further down the list. You and your team can decide on how many priority levels are required, but it is common practice to use three or four different levels: Urgent ‚Äì An urgent priority indicates that the defect should be resolved immediately, usually taking precedence over every other defect in the system. High ‚Äì A high priority is for everything that should be just below urgent ‚Äî that is, if a defect should be prioritized, but is not mission-critical to the stability of the software (or to the ability to test said software), a high priority will usually suffice. Medium ‚Äì Medium priority indicates a bug that is not mission-critical, but may still impact functionality in some way. Low ‚Äì A low priority is for everything else, and is usually assigned to defects that are not mission-critical, nor that have any negative impact on functionality. A common example might be a slight user interface issue in which a label or frame is misplaced ‚Äî other than the visual look, the bug doesn‚Äôt affect anything in the software. Severity is defined as ‚Äúthe fact or condition of being severe,‚Äù which is one of those frustrating definitions that essentially uses the original term within the definition. Severe is defined as ‚Äú(of something bad or undesirable) very great; intense,‚Äù so we can extrapolate that severity essentially means ‚Äúthe fact or condition of being intensely undesirable.‚Äù In the realm of bug triage, most people think of severity as the seriousness or potential negative impact of a defect, if left unresolved. Measured severity levels are often directly correlated with the client‚Äôs (or organization‚Äôs) risk assessment ‚Äî that is, the potential negative impact brought about by the given defect. Just as with priorities, it is up to your organization to decide on the appropriate number of severity levels. That said, most teams find parity between the number of priority levels and severity levels to be useful and natural, so three or four is often the standard: Critical ‚Äì A critical defect is one that completely hinders the software in some way, by either halting normal execution, or by preventing normal testing. Major ‚Äì Major severity indicates a bug that halts normal execution of a component or function within the overall software but still allows for most other components or functionality to remain intact. Moderate ‚Äì A moderate severity indicates a bug that negatively impacts the software by causing it to exhibit unnatural behavior but otherwise doesn‚Äôt halt execution of any core features or components. Minor ‚Äì Lastly, minor severity is used for all remaining defects. These bugs should not negatively impact functionality in any way. There are many possible priority and severity combinations in which a defect can be categorized, so we‚Äôll briefly go over a few common examples here to illustrate how you might consider categorizing your own bugs. Urgent priority + critical severity: Defects that prevent normal execution or testing should be given the highest priority and severity categorizations. High priority + minor severity: Since severity is generally the factor in determining how mission-critical a defect is, a bug that is experienced by nearly every tester and upon every execution of the application ‚Äî yet doesn‚Äôt severely impact functionality (such as an improper UI label) ‚Äî would likely be assigned a high priority and a minor severity. Low priority + major severity: This categorization might be assigned to a defect that has a high impact on software functionality, but is only experienced in an unlikely/extreme use- or test-case. Low priority + minor severity: Typically, low priority and minor severity defects are reserved for issues that have no tangible, functional impact, but still fail to meet quality assurance standards. These often include things like minor cosmetic issues. The act of performing defect triage can be draining and challenging, but ensuring that the process is carried out efficiently and regularly throughout the development life cycle will generate more robust, stable software upon release. There are a handful of major stages of the process, each of which consists of a number of minor steps that will force your team to evaluate any and all defects in the system, whether new or existing and ensure every one of them is properly categorized. The first stage in the defect triage process is initial screening , which simply asks a handful of questions aimed at determining which incoming defects can be ignored, and which should be investigated further: Is the defect a duplicate? ‚Äì If the bug has been previously reported, the new defect can be discarded. Alternatively ‚Äî and often more appropriately ‚Äî an internal reference link can be created within whatever bug tracker software your team is using, so future viewers to the bug report will see that it is a duplicate and can easily view the existing bug. Does the defect occur within a supported software version? ‚Äì For projects with multiple long-term releases, older versions will often be considered ‚Äúend-of-life‚Äù after a certain date, indicating that support may no longer be provided. If a defect is found from an unsupported version it can generally be closed and ignored. Is the defect actual, or a result of user error? ‚Äì In some situations it may be that a bug report is generated that is not actually the fault of the software, but rather, is the result of user error. Now, it may be debatable whether the result of that user‚Äôs error should or should not prompt a change in future versions of the software, but outside of that exception, such defects can typically be ignored. The next stage is confirmation , in which one or more team members attempt to replicate new defects, or to confirm the functionality of submitted fixes for (or possible regression of) existing bugs. This stage is also when your team will decide whether a particular bug should be recorded and marked for resolution, or whether it should be ignored or put off until a later date. As such, it is vital that at least one member of the team is assigned as a facilitator of the group meetings aimed at tackling defect triage. This individual should be in charge of conducting such meetings and coordinating discussions between other stakeholders, each of which can provide input into the severity and priority levels that should be assigned to each defect. Categorization is the real meat and potatoes of the defect triage process. It is within this stage that the team will actually categorize each and every defect into the pre-defined priority and severity levels. As previously mentioned, multiple team members should be capable of completing this categorization process on their own, assuming each individual priority and severity level is well-defined and documented. That said, it often helps to have multiple people discuss defects during this stage, since members of different teams may have varying levels of insight as to how severe or impactful an issue may be. A sub-stage of categorization , the revision stage, allows existing bugs to be reviewed, removed, or recategorized, depending on the status of the defect. An obvious example is a defect that has since been fixed in the latest version ‚Äî if QA testing has confirmed the fix, it can be marked as such and set to low priority for follow-up regression testing in the future. Automated defect tracking and reporting tools, like Airbrake, ensure that your team is immediately aware of exceptions the moment they occur. Airbrake‚Äôs powerful error monitoring software guarantees that your team won‚Äôt need to worry about losing track of that rare production defect that slips through the cracks. Airbrake provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake‚Äôs state of the art web dashboard ensures you receive round-the-clock status updates on your application‚Äôs health and error rates. No matter what you‚Äôre working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake makes it easy to customize defect parameters, while giving you complete control of the active error filter system, so you only gather the errors that matter most. Check out Airbrake‚Äôs defect monitoring software today and see for yourself why so many of the world‚Äôs best engineering teams use Airbrake to revolutionize their defect handling practices!", "date": "2018-01-30"},
{"website": "Airbrake", "title": "PatientsLikeMe", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/patientslikeme", "abstract": "We welcome Winfield from @patientslikeme to be the third Airbrake user in our ‚ÄúAwesome Airbrakers‚Äù series. What does your App do? PatientsLikeMe is a Rails social health startup. We solve complex data analysis and visualization problems. ¬†We help people sick with chronic illness to track and analyze their medical data and meet other people sick like they are for social support and to learn from them. Setup. Environment, Language, Tools, Etc. Rails 2.3, Postgres 9.1, redis 2.2, HAML/SASS, newrelic, Cloudfront, Resque, Passenger/REE, Coffeescript, jquery, prototype What do you like about Airbrake? Great single-serving product for error collection and processing. How long have you been using Airbrake? Since 08/2008. How do you normally deal with Airbrake Exception reports? For each development sprint, one engineering is on interrupt-driven bug duty ‚Äì triaging new bugs that are found and working through the backlog of issues. ¬†This includes triaging the Exception reports every morning and opening bugs or fixing issues directly. What could Airbrake do better? Aggregate stats/notifications ala NewRelic‚Äôs error monitoring service and alerts for thresholds or ‚Äúunusual‚Äù exceptions. Suggest fixes for common problems, inject stackoverflow results for a given exception message. Favorite Music to Hack to. Liquid drum‚Äôn‚Äôbass http://www.bassdrive.com or trip-hop. Other Favourites Coffee: Stumptown Espresso", "date": "2012-01-17"},
{"website": "Airbrake", "title": "Dedicated QA vs. Developer/Engineering Testing", "author": "Unknown", "link": "https://airbrake.io/blog/software-testing/dedicated-qa-vs-developer-engineering-testing", "abstract": "With changes in development testing methodologies, people often wonder if Engineering teams will ultimately replace Quality Assurance (QA) teams by incorporating QA responsibilities into the development lifecycle. This debate has been ongoing within the software industry for years. Inevitably, the question boils down to whether testing should be accomplished by separate and dedicated Quality Assurance (QA) teams or whether testing should become more embedded into the Engineering development process to deliver the best possible application. This debate is complex and requires an understanding of how these distinct roles, and testing strategies, have evolved. The changing roles of the QA team and the evolution of software development go hand-in-hand. Previously, testers on QA teams were not required to have a lot of development experience. Their focus was to make sure that the software functioned as designed. Approaches such as Waterfall SDLC methodologies influenced old QA models,¬†where work flows downhill and testing occurs after development. As SLDC moved towards agile methodologies, the QA tester‚Äôs role shifted to operate as an integrated function within development teams earlier in the development process. Testing is also now performed by many people on a team, including developers. This shift aims to automate testing as much as possible, supporting newer CI/CD Dev/Ops models where software is continually integrated and deployed into production to meet demanding cycles. QA testers are now expected to be more knowledgeable about the development process so that automated testing fits in with current CI/CD structures. That said, there is still a debate as to whether or not the QA tester‚Äôs role has a place in Development. The QA tester‚Äôs role has shifted dramatically because they now work under a ‚Äúshift left‚Äù methodology. If we look at the process of a project moving forward from left to right, ‚Äúleft‚Äù refers to the earlier stages. So, under this methodology, testing begins much earlier in the process of development. To adequately implement a ‚Äúshift left‚Äù philosophy for software quality assurance, testing occurs at the earliest possible stages. This change in testing has led to a simultaneous shift in the roles of engineers and QA professionals. Let‚Äôs look at the advantages and disadvantages of testing by QA professionals versus developers doing evaluation and testing. Developers, by default, have a much more intimate understanding of their code compared to QA testers. Already, they do a lot of testing as they build their code. With this in mind, incorporating testing into the development process makes a certain amount of sense. As developers write code, they can build unit testing modules directly into the code to ensure that by the time a piece of software has moved through the DevOps lifecycle, it has already been tested against most scenarios. If done correctly, this is a very efficient way to test code. Building testing modules into code requires that a fair process is in place to ensure that testing occurs throughout the entire process. Once done, this module can perform some of the duties required from a QA tester. Most developers want to push out quality and error-free code and take the necessary steps to ensure this happens, even if this means performing tasks usually attributed to QA. Productivity deadlines often drive developers; each mistake that is made might further slow them down. When you have a deadline approaching, you simply don‚Äôt have the time to build and run numerous development tests. Furthermore, unit testing is often seen as too complicated, and it can be challenging to create repetitive processes that can be reused for multiple modules. QA engineers typically have a broader knowledge of the regression of an application. They can see how everything fits together as a whole. Developers are at a disadvantage when testing their own code because they often work on narrow segments of a codebase. They may understand the individual parts of code they worked on, but not necessarily other elements and how they work as a whole. Developers want their code to work. This is ultimately counterintuitive when the point of testing is to make it fail. On the other hand, QA teams use a unique set of tools that make up for these shortcomings.¬†Built into the QA mentality is a willingness to make things fail . Unlike developers who operate from making things work, QA engineers are more willing to push software to its limits. This difference in perspective makes QA testers uniquely positioned to ensure code works no matter the circumstances. Finally, QA professionals are more likely to try and think how an actual user of the software will think: they think and act like customers. During the testing process, their input may prove to be invaluable because of this. However, the answer may lie somewhere in the middle of a pure QA or blended Dev/QA option. What‚Äôs needed is to transition from separate QA and Development teams to a more cohesive model where testers and developers work collaboratively. An approach that is commonly referred to as the Quality Engineering (QE) model. With the advances in CI/CD tools and reporting software, such as Airbrake, it becomes possible to integrate testing into the entire development process. Many companies have essentially removed the distinction between developers and testers. Here‚Äôs how it works: Developers do most of their own testing; however, they are supplemented by a team of QA testers who provide frameworks and complete testing within the development process. In QE, testers create specialized automated test cases that work directly with code built by developers. It might even make sense to have developers write these tests, with testers providing input and feedback on testing scripts. In addition to this, developers can write many unit-test cases for their code, making it possible for deployment to occur rapidly for individual modules. However, there does need to be a concerted effort to organize tests into a cohesive whole. New development must not break old code, so a solid library of integration and regression tests, organized by QA testers, is necessary for maintaining quality code. One fundamental necessity for developing a QE model is automation. Whereas traditional QA has been manual, testers now require specialized development know-how to adapt to CI/CD models of rapid deployment. QA engineers working under a QE model should aim towards becoming engineers themselves. This way, testers will be able to think more like developers while learning how to use advanced tools to ensure the entire product works well. By becoming engineers themselves, QA testers will be able to improve the quality of the process and validate the end results to ensure the product remains viable. Throughout the entire product lifecycle, QA and engineers should work together. By integrating QA testers into the development process, it becomes possible to implement effective ‚Äúshift-left methodologies.‚Äù Furthermore, by maintaining QA principles, you can ensure that the final product is functional as a user expects. And the whole team can also expect fewer ‚Äúcleanups‚Äù with a QE process. Ultimately, the end goal should be to move from a QA model to a QE model. With the latter, you can ensure that your applications are running more smoothly during the development process, reducing the time it takes to bring a quality product to the marketplace. The question shouldn‚Äôt be, ‚ÄúShould a QA team or an engineering team handle testing.‚Äù Instead, you should ask yourself, ‚ÄúAm I using a QE model?‚Äù Using a QE model for testing is the most effective way to implement a ‚Äúshift-left‚Äù methodology during the development process. The end product will require less ‚Äúcleanups‚Äù and allow you to deploy quality code quickly.", "date": "2020-12-10"},
{"website": "Airbrake", "title": "Self in Ruby: A Comprehensive Overview", "author": "Unknown", "link": "https://airbrake.io/blog/ruby/self-ruby-overview", "abstract": "For a variety of programming languages, the self (or this ) keyword is a powerful tool, allowing developers to contextually refer to a particular class or object. This capability to refer to the current object, no matter the context, can be difficult to fully grasp, regardless of the language, and Ruby is no different. In this article we‚Äôll explore exactly what the self keyword is within Ruby and the various methods in which it is commonly used, so you‚Äôll have a better understanding of how Ruby (and other object-oriented programming languages) handle self-referential keywords. Let‚Äôs get crackin‚Äô! The purpose (and thus behavior) of self within Ruby is dependant on the situation, or the context in which the self keyword is used. In other words, within one context a call to self may refer to the parent class , whereas in a different context, self may refer to a particular instance of a class . To better illustrate the various contexts, we‚Äôll outline each and provide code examples as well. No matter which context the code finds itself, one important rule about self must be remembered: self always refers to one and only one object at any given time. The trick is to understand (and thus plan around) which particular object that will is, given the current context. Properly doing so provides a great deal of additional development power over the course of most any Ruby project. Top level context is for any Ruby code that is not executing inside any class , module , method , or otherwise any sub-level code block. Typically, top level code is just naked code in an .rb file, executed as a simple script or part of a larger application, without the need for object-oriented components. For example, here is a very simple script that consists of four lines: creating a name variable at the top level of execution, then outputting three lines to the console to display both our name value and show us what self is. The output is: What‚Äôs critical here is that Ruby has told us that self , at least within the top level context, is an object called main . This is because all execution within Ruby occurs within the context of an object. When working inside a particular class , it‚Äôs obvious that that parent class is the object of that context, but when Ruby first begins execution, it automatically creates the main object. Thus, our call to self above refers to the main object instance that Ruby generates for us. When defining a class within Ruby, we can also then refer to self within that context as well. Here we have an Author class, inside which we‚Äôre outputting the value of self : The result is that, directly inside the context of a class definition , self is equivalent to the parent class in which it was defined; Author , in this case. In fact, in this context, the keyword self can be thought of as a substitute for the actual class name. Instead of using self here, we could use Author , and Ruby would treat it the exact same: The use of self inside a module definition is very similar to that of a class definition . In fact, as far as Ruby is concerned, the reference to self doesn‚Äôt care whether you‚Äôre in the context of a class , or a module , it will treat both basically the same. For example, here we‚Äôre enclosed our Author class inside the Library module , then output the value of self within both contexts: While Ruby treats the module definition call to self just as it did with the class definition , representing the parent level object of Library in this case, for the child call it recognizes that there‚Äôs a hierarchy here, so we get the module plus the class : We won‚Äôt get into the full details of what distinguishes a class method from an class instance method in this article, but the simple answer is: A class method is a method that refers only to that class in all contexts, but not to any individual instances of that class. A class instance method is a method that applies to all instances of that class, but not for the class object itself. So, for our example of self , we‚Äôve added the name class method to our Author class (defined by the self. object that precedes the definition). We‚Äôve also added a @@name class variable , which isn‚Äôt necessary for this example, but is a more common practice since it allows our name method to act as a property getter method for the @@name value: The fact that self.name is used to define a class method is a bit of a give away, but sure enough, self inside a class method definition refers to that parent class object ‚Äî Author in this case. We also call Author.name in the output, to show that our class method getter behaves as expected: As discussed in the previous section, a class instance method is a method that can be referenced by all instances of that class , but not directly by the class object itself. In Ruby, defining a class instance method is as simple as excluding the self. object prefix within the method definition; in this case, using just def name does the trick: Since this is an instance method, we can‚Äôt call it until we create a new instance of our Author class. After that, once we call the name method on that instance, we get the full output. Unlike a direct class method reference to self , a class instance method reference to self actually points to the particular instance that is being executed, thus our output shows an instance of the Author class, as indicated by its memory address: The final context you‚Äôre likely to use self within is the class singleton method . A singleton method is a method that is attached to only one specific instance of an object ‚Äî it cannot be called by any other instances of that object, nor directly by the class object itself. To illustrate this, we‚Äôve got our Author class again, but we haven‚Äôt created any methods directly within the Author class definition. Instead, we create a new instance called author , then define a singleton method by using the def [INSTANCE].[METHOD] syntax, or def author.name in our case: Not only are we outputting the self values within our singleton method , but we‚Äôre also generating a second instance of our Author class ( new_author ), which we use to confirm that the name method is, in fact, a singleton method only associated with our original author instance of the class. The full output, once again, shows that inside the singleton method itself, self refers to that particular instance of the class:", "date": "2017-03-09"},
{"website": "Airbrake", "title": "Ruby Exception Handling: UndefinedConversionError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/undefinedconversionerror", "abstract": "As we continue down the well-traveled road of Ruby Exception Handling series, today we‚Äôre taking a look at the UndefinedConversionError . An UndefinedConversionError is raised when using Encoding or String methods, and the transcoding process is unable to convert a character from one encoding to another. In this article, we‚Äôll examine the UndefinedConversionError class, explores where it rests within Ruby‚Äôs Exception class hierarchy, and also dive into how to deal with any UndefinedConversionError you might come across in your own projects. Let‚Äôs get going! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. EncodingError is a direct descendant of the StandardError class, and is also a superclass with a handful of descendants of its own. UndefinedConversionError is a direct descendant of the EncodingError class. As we saw in our ConverterNotFoundError article, Ruby‚Äôs Encoding namespace defines all the encoding and transcoding functionality within Ruby, which allows simply conversion from one encoding to another. However, in the case of the UndefinedConversionError , an attempt to convert a character from one encoding to the other fails, typically because that character is not compatible with the target encoding in question. For example, here we‚Äôre attempting to take a single character (the trademark symbol, ‚Ñ¢ ) and to convert it from UTF-8 encoding to IBM437 : We also have a helper function, but the meat of our code is that single puts \"\\u2122\"... line. As it happens, this encoding process throws an UndefinedConversionError , indicating that the issue is we‚Äôre attempting to convert the U+2122 character (the unicode of the trademark symbol) into IBM437 encoding, which doesn‚Äôt contain that particular character: Since our character simply doesn‚Äôt exist in the target encoding, in this case there‚Äôs no solution for what we want to accomplish, other than using a different target encoding. If we change our target encoding to UTF-16 , which does support the trademark symbol, we should get our expected output: Sure enough, the ‚Ñ¢ symbol is spit out just fine, without raising any errors. While we cannot force transcoding of characters using encodings which don‚Äôt contain appropriate characters, one method for dealing with this error preemptively is to pass extra arguments to the encode() method. Specifically, we can use the :replace keyword argument for the invalid: and undef: options inside our encode() method call: With those options set, when the encode() method encounters a character it cannot transcode, instead of throwing an error, those characters are replaced by placeholder characters. By default, the replacement is a question mark ( ? ), or in unicode converters it‚Äôs ÔøΩ . Therefore, our expectation from the above example, even when trying to convert the trademark symbol into IBM437 encoding, we get a replacement character as our output, but no errors are thrown: As developers and database administrators can attest, it‚Äôs somewhat common to see random ÔøΩ characters popping up in database text fields from time to time. In most cases, it‚Äôs due to these sorts of conversion issues, forcing the developer or database engine to gracefully skip over a potential error like UndefinedConversionError by converting unknown characters to ÔøΩ instead. To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-02-22"},
{"website": "Airbrake", "title": "Ruby Exception Handling: UncaughtThrowError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/uncaughtthrowerror", "abstract": "The steady journey through our extensive¬†Ruby Exception Handling¬†series continues. Today we‚Äôll be taking a closer look at the¬†UncaughtThrowError.¬†UncaughtThrowError¬†is a descendant class of the¬†ArgumentError, which is, in turn, a descendant of the¬†StandardError¬†superclass we all know and love.¬†UncaughtThrowError¬†is, as the name implies, raised when a¬†throw¬†is called but not properly caught by an appropriate¬†catch¬†block. In this article we‚Äôll closely examine the¬†UncaughtThrowError¬†class, looking at where it sits within Ruby‚Äôs¬†Exception¬†class hierarchy, and also how to deal with any¬†UncaughtThrowErrors¬†you may experience during your own coding forays. Let‚Äôs get this party started! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the¬†Exception¬†class, and is also a superclass with many descendants of its own. ArgumentError is a direct descendant of the¬†StandardError¬†class. UncaughtThrowError¬†is a direct descendant of the¬†ArgumentError¬†class. To better understand what causes an¬†UncaughtThrowError¬†to be raised, it‚Äôs important to understand the basics of the¬†throw-catch¬†mechanisms within Ruby. As we‚Äôve seen many times throughout our¬†Ruby Exception Handling¬†series, Ruby‚Äôs most basic error handling capabilities come from the¬†begin-rescue¬†block. Any code executed inside the¬†begin¬†block, and which also happens to raise an exception, will instead continue execution within the corresponding¬†rescue¬†block matching the particular exception type that was raised. A similar kind of execution rerouting can also be¬†explicitly¬†performed using the¬†throw-catch¬†block. When execution encounters a¬†throw¬†method, it immediately finds the location of a corresponding¬†catch¬†block to jump execution to, as indicated by the first passed argument, known as the¬†tag. For example, here we‚Äôre performing a simple process of iterating our¬†count¬†variable every half-second, outputting the¬†count along with the¬†timestamp. Once the¬†count¬†reaches our limit of¬†9 or greater, we execute a¬†throw¬†block using the¬†:alerttag: Even though the¬†while true end¬†block should cause an infinite loop, we‚Äôre taking advantage of the¬†throw¬†method call using the tag¬†:alert¬†and passing the value of¬†count¬†along with it. By then assigning the resulting value of our¬†catch¬†block for the corresponding¬†:alert¬†tag at the top to the¬†result¬†variable, we can execute our infinite loop until¬†count¬†meets our limit of¬†9¬†iterations. We then¬†throw¬†to¬†catch(:alert), which then passes that value of¬†count¬†into the¬†result¬†variable after exiting out of the¬†catch¬†code block. The output, as expected, shows nine iterations then the¬†throw¬†is¬†caught: With a basic understanding of how¬†throw-catch¬†blocks work together, it‚Äôs not much of a leap to extrapolate from there how the¬†UncaughtThrowError¬†might come about. By simply failing to properly¬†catch¬†the¬†:alert¬†tag we threw, an¬†UncaughtThrowError¬†is born. In this example, all we‚Äôve done to our previous code is change the expected tag of our¬†catch¬†block from¬†:alert¬†to a mismatched tag of¬†:error: We‚Äôve also added some niceties to help us properly¬†rescue¬†and display any exceptions we get, but the only fundamental difference is the aforementioned tag change to¬†:error¬†in our¬†catch¬†block. As expected, once our¬†count¬†reaches our limit of¬†9¬†and the¬†throw¬†executes, it fails to find a corresponding¬†catch¬†block looking for the¬†:alert¬†tag, and thus produces an¬†UncaughtThrowError: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-02-01"},
{"website": "Airbrake", "title": "V-Model: What Is It And How Do You Use It?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/v-model", "abstract": "The V-Model is a unique, linear development methodology used during a software development life cycle (SDLC) . The V-Model focuses on a fairly typical waterfall -esque¬†method that follows strict, step-by-step stages. While initial stages are broad design stages, progress proceeds down through more and more granular stages, leading into implementation and coding, and finally back through all testing stages prior to completion of the project. In this article we‚Äôll examine just what the V-Model actually entails, and why it may (or may not) be suitable for certain types of projects or organizations. Some more specific takes on SDLC include: Much like the traditional¬†waterfall model, the V-Model specifies a series of linear stages that should occur across the life cycle, one at a time, until the project is complete. For this reason V-Model is not considered an¬†agile¬†development method, and due to the sheer volume of stages and their integration, understanding the model in detail can be challenging for everyone on the team, let alone clients or users. To begin, it‚Äôs best to visualize the rough stages of the V-Model, as seen in the diagram below. Image courtesy of Wikipedia.org The V-shape of the V-Model method represents the various stages that will be passed through during the software development life cycle. Beginning at the top-left stage and working, over time, toward the top-right tip, the stages represent a linear progression of development similar to the¬†waterfall model. Below we‚Äôll briefly discuss each of roughly nine stages involved in the typical V-Model and how they all come together to generate a finished product. Requirements During this initial phase, system requirements and analysis are performed to determine the feature set and needs of users. Just as with the same phase from the¬†waterfall model¬†or other similar methods, spending enough time and creating thorough user requirement documentation is critical during this phase, as it only occurs once. Another component unique to the V-Model is that during each¬†design¬†stage, the corresponding tests are¬†also¬†designed to be implemented later during the¬†testing¬†stages. Thus, during the¬†requirements¬†phase,¬†acceptance tests¬†are designed. System Design Utilizing feedback and user requirement documents created during the¬†requirements¬†phase, this next stage is used to generate a specification document that will outline all technical components such as the data layers, business logic, and so on. System Tests¬†are also designed during this stage for later use. Architecture Design During this stage, specifications are drawn up that detail how the application will link up all its various components, either internally or via outside integrations. Often this is referred to as high-level design . Integration tests¬†are also developed during this time. Module Design This phase consists of all the low-level design for the system, including detailed specifications for how all functional, coded business logic will be implemented, such as models, components, interfaces, and so forth. Unit tests¬†should also be created during the¬†module design¬†phase. Implementation/Coding At this point, halfway through the stages along the process, the actual coding and implementation occur. This period should allot for as much time as is necessary to convert all previously generated design and specification docs into a coded, functional system. This stage should be fully complete once the testing phases begin. Unit Testing Now the process moves back up the far side of the V-Model with inverse testing, starting with the¬†unit tests¬†developed during the¬†module design¬†phase. Ideally, this phase should eliminate the vast majority of potential bugs and issues, and thus will be the lengthiest testing phase of the project. That said, just as when performing unit testing with other development models, unit tests cannot (or should not) cover every possible issue that can occur in the system, so the less granular testing phases to follow should fill in these gaps. Integration Testing Testing devised during the¬†architecture design¬†phase are executed here, ensuring that the system functions across all components and third-party integrations. System Testing The tests created during¬†system design¬†are next executed, largely focusing on performance and regression testing. Acceptance Testing Lastly,¬†acceptance testing¬†is the process of implementing all tests created during the initial¬†requirements¬†phase and should ensure that the system is functional in a live environment with actual data, ready for deployment. Suited for Restricted Projects: Due to the stringent nature of the V-Model and its linear design, implementation, and testing phases, it‚Äôs perhaps no wonder that the V-Model has been heavily adopted by the medical device industry in recent years. In situations where the project length and scope are well-defined, the technology is stable, and the documentation & design specifications are clear, the V-Model can be a great method. Ideal for Time Management: Along the same vein, V-Model is also well-suited for projects that must maintain a strict deadline and meet key milestone dates throughout the process. With fairly clear and well understood stages that the whole team can easily comprehend and prepare for, it is relatively simple to create a time line for the entire development life cycle, while generating milestones for each stage along the way. Of course, the use of BM in no way ensures milestones will always be met, but the strict nature of the model itself enforces the need to keep to a fairly tight schedule. Lacks Adaptability: Similar to the issues facing the traditional¬†waterfall¬†model on which the V-Model is based, the most problematic aspect to the V-Model is its inability to adapt to any necessary changes during the development life cycle. For example, an overlooked issue within some fundamental¬†system design, that is then only discovered during the¬†implementation¬†phase, can present a severe setback in terms of lost man-hours as well as increased costs. Timeline Restrictions: While not an inherent problem with the V-Model itself, the focus on testing at the end of the life cycle means that it‚Äôs all too easy to be pigeonholed at the end of the project into performing tests in a rushed manner to meet a particular deadline or milestone. Ill-Suited for Lengthy Life Cycles: Like the¬†waterfall model, the V-Model is completely linear and thus projects cannot be easily altered once the development train has left the station. V-Model is therefore poorly suited to handle long-term projects that may require many versions or constant updates/patches. Encourages ‚ÄòDesign-by-Committee‚Äô Development: While V-Model is certainly not the only development model to fall under this criticism, it cannot be denied that the strict and methodical nature of the V-Model and its various linear stages tend to emphasize a development cycle befitting managers and users, rather than developers and designers. With a method like V-Model, it can be all too easy for project managers or others to overlook the vast complexities of software development in favor of trying to meet deadlines, or to simply feel overly confident in the process or current progress, based solely on what stage in the life cycle is actively being developed.", "date": "2016-12-26"},
{"website": "Airbrake", "title": "Ruby Exception Handling: InvalidByteSequenceError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/invalidbytesequenceerror", "abstract": "Moving right along through our in-depth¬†Ruby Exception Handling¬†series, today we‚Äôre going to examine the¬†InvalidByteSequenceError. An¬†InvalidByteSequenceError¬†is raised when utilizing Ruby‚Äôs internal¬†Encoding¬†or¬†Stringmethods to transcode a string that contains an invalid byte for the particular encoding¬†converters¬†being utilized. Throughout this article we‚Äôll examine the¬†InvalidByteSequenceError¬†class, look at where it sits within Ruby‚Äôs¬†Exception¬†class hierarchy, and also explore how to deal with any¬†InvalidByteSequenceErrors¬†you may come across in your own coding endeavors. Let‚Äôs the adventure begin! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the¬†Exception¬†class, and is also a superclass with many descendants of its own. EncodingError is a direct descendant of the¬†StandardError¬†class, and is also a superclass with a handful of descendants of its own. InvalidByteSequenceError¬†is a direct descendant of the¬†EncodingError¬†class. As we explored in our¬†ConverterNotFoundError¬†article, Ruby‚Äôs Encoding namespace houses the majority of all encoding and transcoding functionality within Ruby, allowing us to easily convert from one type of encoding to another. However, in some instances, there may be a part of a string that cannot be converted for one reason or another. In the case of the¬†InvalidByteSequenceError, the reason for the encoding failure is because the provided string contains at least one¬†byte¬†sequence that is unable to be encoded or decoded, by either the¬†source¬†encoding (the format the string started in), or the¬†target¬†encoding (the format the string is being converted into). A byte sequence in Ruby is simply a hexadecimal representation of a character. For example, the byte representation of the letter¬†a¬†is simply the¬†ordinal¬†97, which can be discovered by calling the¬†.ord()¬†method on that string: However, to indicate the hexadecimal value of the byte, we can use the special¬†\\x¬†escape character prior to the hexadecimal value of our character. In this case, for the letter¬†a, we‚Äôd use¬†\\x61. We also called the¬†.chr()¬†method to verify we‚Äôve got the correct character for our byte. We can also represent multiple characters by chaining together an entire¬†byte sequence. This is done either through a single string (e.g.¬†‚Äú\\x01\\x02\\x03‚Äù) or within an array, which is then¬†.joined¬†into a string. Here we‚Äôre taking a byte sequence of five characters and joining them together, then outputting the result: Armed with this basic understanding of how bytes are used in Ruby, we can see what might cause an¬†InvalidByteSequenceError¬†to occur. Specifically, as the name implies, the¬†InvalidByteSequenceError¬†pops up when we attempt to use an escaped byte string (e.g.¬†‚Äú\\x01‚Äù) that is invalid for the current type of encoding. There are multiple reasons that a byte could be invalid for an encoding. Since most text is already encoded using¬†UTF-8, we‚Äôll take a look at some examples converting from¬†UTF-8¬†to¬†ASCII. Here we are simply trying to convert the byte¬†\\xC0¬†from¬†UTF-8¬†to¬†ASCII: This byte value of¬†\\xC0¬†(and¬†\\xC1, in fact) are restricted and should never appear in valid¬†UTF-8¬†sequences because they could only (theoretically) be used for overlong encodings , meaning an attempt to encode a 7-bit¬†ASCII¬†character using two bytes instead of one. The result is that Ruby‚Äôs attempt to encode this byte returns a baseline¬†InvalidByteSequenceError: Once we get into higher byte representations beyond¬†\\xC1, we start to produce slightly different¬†InvalidByteSequenceErrorsif our byte sequence isn‚Äôt correct. For example, let‚Äôs try using¬†\\xC2¬†with nothing else: The result tells us that our sequence is incomplete; that something must follow our byte: As it happens, bytes like¬†\\xC2¬†are¬†leading bytes, meaning they prefix other bytes to create a valid byte sequence. We could resolve this by adding a second byte into the sequence, such as¬†\\xC2\\x80, though we wouldn‚Äôt produce any valid output since¬†ASCII¬†doesn‚Äôt have that character. To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-02-14"},
{"website": "Airbrake", "title": "Ruby Exception Handling: CompatibilityError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/compatibilityerror", "abstract": "As we continue to make our way through the expansive¬†Ruby Exception Handling¬†series, today we‚Äôll be taking a closer look at the¬†CompatibilityError.¬†CompatibilityErrors¬†appear when dealing with encoding in Ruby, and specifically when attempts are made to compare two encoded values which have incompatible encoding types. Throughout this article we‚Äôll delve into the details of the¬†CompatibilityError¬†class, examining where it sits within Ruby‚Äôs¬†Exception¬†class hierarchy, as well as how to handle any¬†CompatibilityErrors¬†that you may deal with personally. Let‚Äôs get going! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. EncodingError is a direct descendant of the¬†StandardError¬†class, and is also a superclass with a handful of descendants of its own. CompatibilityError¬†is a direct descendant of the¬†EncodingError¬†class. Character encoding within Ruby (or even in general development) can be a bit confusing to say the least. Often it‚Äôs a bit of a ‚Äúblack box‚Äù affair, where methods are called to perform encoding and conversions without any clear understanding of how Ruby is handling things. Thankfully, as newer Ruby versions have been released and steady improvements have been included with each, the challenges of working with encoding have certainly lessened, but headaches still abound when a small snippet of code refuses to function because one tiny little character isn‚Äôt compatible with some encoding check deep down in your codebase. For this very reason, Ruby includes a handful of built-in encoding exception classes, the first of which is the¬†CompatibilityError¬†we‚Äôre examining today. As mentioned in the introduction, the¬†CompatibilityError¬†will appear anytime two strings with incompatible encodings are compared in some way. To understand what this means, let‚Äôs first look at a working example: Here we‚Äôre creating a new string with the text¬†‚Äúhello‚Äù. By default, my character encoding in Ruby is¬†UTF-8, so all newly generated strings are automatically assigned¬†UFT-8¬†encoding, hence our variable name of¬†utf8. We‚Äôre also creating a second instance of our¬†‚Äúhello‚Äù¬†string, encoding it to¬†ASCII¬†using the¬†encode()¬†method, and assigning the value to our¬†forced¬†variable. Finally, we compare the two by checking to see if one value (utf8)¬†includes¬†the other value (forced), and outputting the¬†true/false¬†result: As expected, there are no problems, and even though the encodings of¬†UTF-8¬†and¬†ASCII¬†for both strings differ, the byte-representations of the characters that make up the simple string of¬†‚Äúhello‚Äù¬†are equivalent in both encodings, thus the comparison works fine. That is, the¬†ASCII¬†decimal value of the lowercase letter¬†h¬†is¬†104, and the¬†UTF-8/Unicode¬†decimal value for¬†h¬†is also¬†104, so comparing these two simple strings is no problem. However, what happens if we change our string to use characters which are not represented in the limited¬†ASCII¬†character set? For example, let‚Äôs try the word¬†r√©sum√©: We‚Äôve added some helper functions to handle potential exceptions. We‚Äôve also changed our call to the¬†encode¬†method to¬†force_encoding, because a call to¬†encode¬†fails since our string contains values not found in the¬†ASCII¬†encoding set. Lastly, we‚Äôre also outputting the¬†encoding¬†value of our¬†forced¬†variable, just to double-check that the forced encoding actually took. What‚Äôs important to understand here is that calling the¬†force_encoding()¬†method doesn‚Äôt actually change the characters (and thus the underlying string) in anyway; it‚Äôs simply a hack of sorts to inform Ruby of what we consider to be the ‚Äúcorrect‚Äù encoding for this string. Ruby will then use that encoding type value for later execution, as we‚Äôll see right now. The end result of all this is that we‚Äôre asking Ruby to compare our two strings (which are both identical characters of¬†‚Äúr√©sum√©‚Äù) via the¬†include?()¬†method, but one of them has been forced to use¬†ASCII¬†encoding. Since¬†ASCII¬†has no representation for the handful of special characters we are using, this comparison fails and raises the expected¬†CompatibilityError: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-02-13"},
{"website": "Airbrake", "title": "AngularJS Best Practices: 5 Tips For Cleaner Code", "author": "Unknown", "link": "https://airbrake.io/blog/javascript/angularjs-best-practices", "abstract": "AngularJS has rapidly become one of the hottest new trends in development for creating powerful web or local applications on virtually any platform. While this extraordinary platform heralds itself as a¬†MVW¬†(Model-View-Whatever) framework ‚Äì and is therefore suited for whatever your team or project requires ‚Äì it can also be an overwhelmingly daunting foundation to build off of. To help alleviate any potential vertigo as you gaze down from the mountain of potential that is AngularJS, we‚Äôve put together a handful of AngularJS best practices to keep your code clean and your mind (somewhat) sane. Perhaps the best place to begin with any development project, but even more so with AngularJS, is in the creation of a properly structured project. The configuration of project files, directories, and components plants the seeds of the entire life cycle of the project. Components that are illogically structured will make for a miserable development experience as new components must be added or code must be altered. The challenge is that the sheer scope of the code base for even the most rudimentary AngularJS project can be overwhelming, to say the least. Therefore, it‚Äôs strongly recommended that you relieve yourself of a modicum of this burden by establishing and maintaining proper project architecture, particularly when your venture is just taking off. A great place to start is to consider how the business logic of your project will be configured utilizing the primary building blocks of Angular. While some of these are designed specifically for Angular 2, they can be implemented within Angular 1 even, and generally represent the community-accepted method for structuring your project. Modules: At the basic level, Angular¬†modules¬†are simply¬†classes¬†that use the¬†@NgModule¬†decorator and allow you to disperse your application into logical blocks of functionality. Components: Similar to¬†controllers¬†in other popular¬†MVC¬†frameworks,¬†components¬†are used to create the user interface (i.e.¬†views) within your application. Templates: As with¬†views¬†in other¬†MVCs,¬†templates¬†in Angular are altered forms of HTML that describe how the application renders the interface. Metadata: Typically a short and sweet collection of data that precedes a class, which is used to explicitly inform Angular that the class definition which follows is a particular type of class, such as a¬†component. Data Binding: Angular allows for simple binding of data between the¬†DOM¬†and the underlying¬†components. Depending on the syntax used within the¬†templates, this binding can be one way from¬†DOM¬†to¬†component,¬†component¬†to¬†DOM, or simultaneously in both directions. Directives: Markers attached to particular¬†DOM¬†elements which apply a specific behavior or transformation to the element. Services: Perhaps the most generic part of an Angular application, a¬†service¬†is typically a class with well-defined, logical functionality, such as configuration, logging, or data management. Dependency Injection: Finally, with a number of¬†services¬†powering your application, you can utilize an¬†injector¬†to inform a particular¬†component¬†about which¬†services¬†it requires to be functional. If you‚Äôre at all experienced with modern JavaScript application development, you‚Äôve undoubtedly heard of (if not used) Grunt . For those unfamiliar,¬†Grunt¬†is a¬†task runner, which essentially means it is a tool that will¬†automate¬†a number of menial tasks you would otherwise need to perform yourself on a fairly regular basis. Not only does the automation provided by a task runner like¬†Grunt¬†reduce your workflow requirement as a developer, but it also eliminates many unintentional mistakes that may be made by human hands. Grunt¬†is capable of many, many types of tasks (inherently or custom-designed), but a few of the common uses include: Minification: To speed up browser load times, most web applications ‚Äúminify‚Äù their combined JavaScript files, a task¬†Grunt¬†can handle automatically. Live Reload: During development, can automatically reload your browser when changes are made to the code. Best Practice Hints: Like the live reload function, when code is altered,¬†Grunt¬†will analyze and output any hints about potential changes to conform to JavaScript best practices. SASS/LESS Compilation: Will automatically compile any CSS-style framework files into actual CSS. THOUSANDS More:¬†Grunt¬†has a massive plugin directory that contains a plethora of potential tasks depending on your needs. As with any programming language, AngularJS (and the JavaScript that effectively powers it) can be written in a variety of ways and styles, but ‚Äúbreaking the mold‚Äù of the established style guides used by the AngularJS community is never advisable. Instead, wherever possible, it is highly recommended that you try to follow the popular best practice style guidelines laid out in this documentation . More specifically, if you‚Äôre using the latest version of AngularJS (Angular 2), these guidelines are now actually part of the official AngularJS documentation . Just as¬†Grunt¬†can be used to help you automate a number of menial tasks during AngularJS development, with the growing popularity of heavy focus on test-driven development (TDD), there‚Äôs never been a better time to get in the habit of using a¬†test runner¬†tool to automate and speed up all your testing requirements. Best of all, the AngularJS team has taken it upon themselves to develop and support an extremely powerful¬†test runningtool known as Karma (previously named¬†Testacular). At the outside, it should be understood that¬†Karma is not a¬†test framework, meaning you will not directly write code in a specific format or syntax to then instruct¬†Karma¬†to perform a few tests. Instead, as a¬†test runner, similar to the way¬†Grunt¬†is a¬†task runner,¬†Karma¬†is used to¬†automatically execute your entire test suite on real browsers and devices. The power of this simple differentiation from most testing that is not performed on actual browsers/devices cannot be overstated. The¬†Karma¬†homepage includes a nice little introductory video on how¬†Karma¬†works, but the simple explanation is that once you‚Äôve written a few tests in your favorite¬†test framework¬†( Jasmine is a popular and powerful choice), anytime you make a change to your codebase and save the file,¬†Karma¬†will recognize that change, immediately execute all your tests, and display the results in your terminal. This saves loads of time and headache during development, ensuring that you never have to remember to run tests after changes are made. One final addition to our list of AngularJS best practices is to make heavy use of the work of others that have come before you, in the form of the numerous and often exceptionally powerful¬†helper modules¬†available to AngularJS. Just as with libraries or plugins for other programming frameworks,¬†modules¬†in AngularJS are packaged code components that provide additional functionality out of the box.¬†Modules¬†can greatly speed up your own development and improve productivity by allowing you to focus on the core business logic of your code that is unique to the project at hand. There are a number of sources where you can find helpful modules, but a few examples are ngmodules.org and AngularUI .AngularUI¬†will be of particular interest to anyone with experience in (and fondness for) the jQuery framework and it‚Äôs plethora of popular UI components. Beyond that, the UI-Router module is a popular way to easily implement client-side routing, whereby the browser‚Äôs displayed URL automatically updates based on the server-side routing (e.g.¬†app/#/users,¬†app/#/login, etc). The Restangular module is another proven service that allows for simple implementation of a standard RESTful API through standard¬†GET,¬†POST,¬†UPDATE, and¬†DELETE¬†requests. For more help on your AngularJS app, check out Airbrake‚Äôs AngularJS Error Handling tool.", "date": "2016-12-12"},
{"website": "Airbrake", "title": "ES6 JavaScript: What's New? ‚Äì Part 6", "author": "Unknown", "link": "https://airbrake.io/blog/javascript/es6-javascript-whats-new-part-6", "abstract": "Today we‚Äôll continue down the path of exploring all the cool new features that ES6 JavaScript brings to the table. Thus far in this series we‚Äôve covered quite a bit of ground: In Part 1 we took a look at default parameters , classes , and block-scoping with the let keyword. In Part 2 we explored constants , destructuring , and constant literals syntax . In Part 3 we dove deep into just one major feature known as template literals . In Part 4 we examined the world of iterators and generators . In Part 5 we dug into arrow functions and promises . In Part 6 we‚Äôll look at maps , sets , and a slew of new API methods, so let‚Äôs get to it! In the past, storing unordered key/value pairs in JavaScript was a job typically relegated to Objects . Unfortunately, the inability to use a non-string value as a key within an object mapping data structure has always been a major drawback. For example, here‚Äôs a typical key/value mapping within an object. We start with some unique book objects, then create a parent library object to house our books. We use book1 and book2 objects as keys and assign those to the proper publication dates of each book, respectively: Now, we‚Äôll try outputting the published dates by passing our book1 and book2 object keys back to library : As we can see, our library object cannot differentiate between book1 and book2 as key values. This is because JavaScript converts those objects into strings in order to use them as key values. Since both book objects are identical in ‚Äústring form‚Äù, the library[book1] and library[book2] statements are identical. To verify this, we can loop through all our key/value pairs in the library object after assignment: As we can see, this confirms that only a single key/value pair exists in library , with the key being [object Object] (the string representation of both our book objects). This causes the second publication date assignment to override the original date assignment. To resolve this issue, ES6 has added the Map object, which behaves similar to a normal object in that it holds key/value pairs. However, unlike an Array , a Map can use any value as a key, including both primitive types and even objects. Here we‚Äôre using the new ES6 Map object for our library : Map objects don‚Äôt use bracket ( [...] ) syntax to access values, instead implementing the set() and get() methods, which perform the same basic functionality. As we can see from the produced output above, this allows us to use our book1 and book2 objects as keys for the library map object. A Map object also includes a number of additional helper methods, such as: Map.prototype.keys() to retrieve all keys. Map.prototype.values() to retrieve all values. Map.prototype.has() to determine if a provided key exists. Plus, many more methods. Check out the MDN documentation for more details. ES6 also introduces the new Set object, which is single-dimension collection used to hold unique values. Set provides many of the same methods as the Map object, but the behavior (and purpose) is quite different. The function of a Set is to store a list of unique, unordered values. Since there is no key or index associated with a given value, there‚Äôs no need for a Set.prototype.get() method. Instead, we‚Äôd use Set.prototype.has() to check if a given value exists in the Set . As a basic example we‚Äôll create a few book objects again, then play around with adding and removing them from our library Set object: As we can see from the output, by only adding book1 to the set, Set.prototype.has() returns true only for book1 , but not for book2 . We can also Set.prototype.add() book2 and Set.prototype.delete() book1 , then confirm from our output that the objects were properly swapped within the library set: As should be expected with any new major language release, ES6 also includes a number of new API methods that aim to help shore up problematic scenarios found in previous JavaScript versions. Most of these are quite basic, so we won‚Äôt go into them in too much detail. Useful for finding if a value exists in an array. The first parameter passed to Array.prototype.find() should be a predicate function, which expects an array element as its parameter and returns a boolean value indicating if the current array element meets the criteria or not. If a true value is returned by the predicate function, Array.prototype.find() returns the matching element. As a simple example, here we create a predicate function (using arrow syntax) to check if the element is greater than or equal to 5 . As a result, the first element of 1 fails, but the second element of 6 passes and is returned. Similar to Array.prototype.find() , the Array.prototype.findIndex() method accepts a predicate function, but this time it returns the index of the first matching element, rather than the value. Here we‚Äôre finding the index of the first value equal to 4 , which is located at the index of 3 : There are a handful of new String.prototype methods designed to make it easier to search within a string. For example, String.protype.startWith() allows us to check if the target string begins with the characters of another string: String.prototype.endsWith() checks for the final characters of the string, rather than the beginning: String.prototype.includes() is a convenient way to search for a substring within a string. Plus, just as with String.prototype.startsWith() and String.prototype.endsWith() , String.prototype.includes() can accept an optional second parameter indicating what position the search function should begin at: Developers that work with Ruby may feel spoiled, given that it‚Äôs so easy to create repeated strings (e.g. \"Alice Becker\" * 10 to repeat the string ten times). With ES6, JavaScript now provides a simple method for accomplishing this task through String.prototype.repeat() : JavaScript is designed to elegantly switch from a integer representation to a floating point representation when a provided number becomes too big. However, there are situations where it‚Äôs useful to check whether a given value falls within the bounds of an unambiguous integer ‚Äî what JavaScript refers to as safe integers . ES6 now provides a few helper methods to accomplish this. The first pair are constants indicating the minimum and maximum safe number values, Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER : As a convenience, ES6 also includes the Number.isSafeInteger() static function, which does the work of checking if the passed argument falls within the bounds of the minimum and maximum safe integer values: The new Math.trunc() static function saves you the trouble of performing calculations with Math.floor() when trying to retrieve only the integer value of a decimal number: Lastly, the Math.sign() static function allows us to retrieve the sign of the passed argument. Math.sign() will attempt to convert non-numbers into numbers before checking the sign, if possible. Moreover, Math.sign() can only return five possible values, which represent the five possible signs a number can have in JavaScript: 0 : Positive zero. -0 : Negative zero. 1 : Positive number. -1 : Negative number. NaN : Not-A-Number. Here we illustrate using various arguments to return all possible Math.sign() results: Check out the revolutionary Airbrake-JS error tracking tool, which quickly and easily integrates into any new or existing JavaScript application, providing you and your team with real-time error reporting and instant insight into exactly what went wrong. Airbrake-JS works with all the latest JavaScript frameworks and supports full source map control, to ensure your error reports are as detailed as possible. Airbrake-JS also allows you to easily customize error parameters and grants simple filtering tools so you only capture and report the errors you care about most.", "date": "2017-07-20"},
{"website": "Airbrake", "title": "Automation: Why Coding Is Becoming a Job for Everyone", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/rise-of-automation-coding-is-becoming-a-job-for-everyone", "abstract": "Automation and computerization are rapidly becoming hot-button issues, both journalistically and politically. As many workers are all too aware, the pace of technological advancement is dramatically impacting the jobs market, as much of the work previously performed by human laborers can now be completed by relatively inexpensive robots and computerized systems. Many global thinkers, scientists, and business leaders are debating the long-term impact and immediate ramifications of this automation explosion in recent years. Industries hit the hardest tend to be those in manufacturing, where core job tasks tend to follow well-defined, repetitive procedures, which can invariably be codified in computer software and, thus, performed by machines. While the fallout of this computerized-boom continues to be analyzed, it‚Äôs important to recognize some of the benefits of this rise in automation. Most importantly, we can rest easier knowing that, historically, a dramatic rise in technological advancement has never permanently replaced human workers in the marketplace; it merely redirects human labor to other, more advanced jobs. When dealing with any form of skilled labor, emphasis must be placed on the skilled characteristic. No matter the particular form of labor a skilled laborer performs, he or she is still highly trained and skillful. In many ways, a factory worker or plumber is no different from an database administrator or programmer: In each case, the individual practices and learns a particular set of skills, applicable to the job at hand. As we‚Äôll see throughout this article, the transition into a more computerized and automated world of work may present temporary displacement of some traditional occupations and workers, but it also presents new opportunities in other fields: in particular, coding. Traditionally, computerization, automation, and other forms of non-human labor have been adopted within labor-intensive, highly-repetitive occupations. This process first began when humans realized oxen were much better at plowing their fields. Not only did this dramatically reduce the labor that farmers had to endure, but it freed them up to take on more complicated tasks (improving irrigation, forming trade networks, etc). Just as horses replaced humans for efficient field-work and faster travel, in time, automobiles replaced horses. Industrial advancements have maintained much the same trajectory, where human labor executing simple tasks is often replaced by machines (and later robots) that can perform the same tasks, much faster and with little downtime. Yet, while automation has typically been relegated to industrial tasks and improvements in the workforce, with the advancement of computerization, these automated processes are now beginning to encroach on the more creative occupations as well, where subtle human judgments were traditionally a necessity in the past. Computers are now frequently used for tasks ranging from perform high-volume financial trading to monitoring hospital intensive care units. This shift comes largely from the power of programming, algorithms, and machine learning advancements. Automation has even started to encroach on software engineering and programming, where advancements in algorithm design allow computers to make complex parameter and design choices within software. Coding, in particular, has recently seen a spike in the direct use of automation as a means of creating better software. The rise of agile software development methodologies has placed heavy emphasis on automated testing and other DevOps practices over the past few decades. Thankfully, according to labor economists , while it may seem like a hopeless situation for workers displaced by computerization, there has never been a better (nor more necessary) time for workers whose jobs were lost to robots to transition into other forms of skilled labor. According to Lawrence Katz , Professor of Economics at Harvard University and previous Chief Economist at the US Labor Department under President Clinton, the market must emphasize the transition of displaced laborers. ‚ÄúJust allowing the private market to automate without any support is a recipe for blaming immigrants and trade and other things, even when it‚Äôs the long impact of technology,‚Äù says Katz. Transitioning workers is undoubtedly challenging, but many techniques can dramatically ease the process, including retraining programs, stronger unions, more public-sector jobs, increased minimum wage, larger income-earned tax credits, and improved college graduation rates. The Race Between Machine and Man , a recent paper published in May 2016, analyzes the correlation between technology growth and human employment. The authors conclude that, while technological advances typically cause some forms of labor to become automated, more complex versions of existing tasks invariably become available for laborers to undertake. Just as the use of animal labor in the fields freed humans to take on other roles, so to will robotics and computers present new employment opportunities. The paper contends that economic shifts from job title trends show these transitions in action. In 2000, 70% of the workers employed as software developers held new job titles. The same was true in 1990 for radiology technicians and in 1980 for management analysts. In fact, from 1980 to 2007, U.S. employment grew by 17.5%, with nearly half of that growth (8.84%) coming from employment in entirely new occupations. To understand what makes coding a job for everyone in the immediate to far future, it‚Äôs important to observe the landscape of modern factory work, in particular. Obviously, programmers can always get work with actual development studios, or by creating web sites as freelancers, but modern technological advancements on factory floors is what‚Äôs really driving the need for coders: in particular, coders that have transitioned from factory labor jobs in the first place. Factories are nothing if not efficient. Most modern factories utilize a great deal of robotics and computerized automation within their workflows, in stark contrast to the labor-reliant mills of the 18th century. Instead, factories are now highly technical systems, requiring employees that can work with computers, robotics, and automated systems . Many manufacturers and factory-owners are beginning to see this trend for what it is, and embrace the need for a new round of trained, skilled laborers that can deal with these machines. John Deere, for example, has been heavily focusing on finding workers who can handle the technology necessary to repair their million-dollar farming machines. As Andy Winnett , director of John Deere‚Äôs agricultural program at Walla Walla Community College in Washington puts it, ‚ÄúThe toolbox is now a computer.‚Äù This dramatic transition from manual human labor, to mechanical machines, and now to digital computers used to perform skilled factory and manufacturing work, is vital for workers to understand. Both employers and potential employees must embrace this transition to computerization, and the sooner they do, the better for everyone involved. Companies like Siemens are serious enough to be starting their own apprenticeship programs in local high schools, combining on-the-job training with community college degrees. ‚ÄúIn our factories, there‚Äôs a computer about every 20 or 30 feet,‚Äù says Eric Spiegel , the now-retired President and Chief Executive of Siemens U.S.A. ‚ÄúPeople on the plant floor need to be much more skilled than they were in the past. There are no jobs for high school graduates at Siemens today.‚Äù Since automation, computerization, robotics, and many other fields are all combined within these modern industrial settings, just having the title of ‚Äúprogrammer‚Äù is not really the pinnacle of a well-suited employee for many of these organizations. Instead, what matters most to employers is the ability to automate : To analyze and evaluate problems logically, which can then be transferred into tangible solutions in the workplace. It just so happens that employees trained in coding have those skills ingrained in them. With such a dramatic shift in employment opportunities, skilled laborers in the modern workplace may need to be skilled in areas that were previously considered out of the realm of possibility, such as coding. Yet, coding is no longer a profession that should be considered for only an elite few; those highly-skilled and technically-minded individuals. Instead, there‚Äôs an influx of both free and inexpensive education and training, millions of existing developers often able to provide guidance, and most importantly as we examined above, a huge demand for programmers and logical thinkers in technical positions. For many developers and their respective employers, coding is just another form of skilled labor. In modern software development, knowing how to find an answer to a problem is far more important than knowing the answer. While there will always be the Gateses and Zuckerbergs of the world ‚Äî individuals with the foresight and expertise to create advanced, mathematical algorithms well beyond understanding for most of us ‚Äî the realm of software development always needs far more ‚Äúeveryday‚Äù coders. As much as some developers might scoff at the idea, a bit of basic understanding of programming principles and a good grasp of using Google to find answers is all that most people need to get started with development. Don‚Äôt expect to create the next Google or Amazon, but for most workers trying to transition from old forms of skilled labor to these new forms, those basics are all that‚Äôs required. While technologies within the world of development are always in flux, this also lends itself well to newcomers, as newer technologies and techniques are always gaining popularity. This ensures that individuals just getting their feet wet in development can always find a new technology or technique, which they can get in on at the ground floor. Agile methods are barely 15 years old, responsive design is about 10 years old, Node.js is 7 years old; the list goes on and on. As new technologies emerge and gain popularity, developers can quickly jump aboard that train and ride it to success, by starting out on much the same level as other newcomers. Advanced mathematics and breakthrough algorithms are very much the exception, rather than the rule, for most development work, and rarely required for most programmers. Instead, development is typically written using fairly grounded technologies, for organizations that don‚Äôt know of (nor need) fancy solutions. A simple web page or automation script is, more often than not, what many businesses are looking for, and most programming newbies can tackle such tasks without years of training under their belts. The majority of professional developers are not, nor do they strive to be, the prototypical ‚Äúgenius coder‚Äù portrayed in the movies or the media. Best of all, for individuals looking to transition into coding from other occupations, many organizations are recognizing that need. These outlets range from employers directly providing funds and training, to organizations like BitSource , which are aiming to transition workers from ‚Äútraditional‚Äù jobs toward work as software developers and automation-oriented thinkers. In short, modern workers should be those individuals willing to make the transition in the workplace, right alongside the automated and computerized tools that were originally intended to replace them.", "date": "2017-02-28"},
{"website": "Airbrake", "title": "Awesome Airbraker: Loopline Systems", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/loopline-systems", "abstract": "We would like to welcome Loopline Systems as the 35th Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. Loopline Systems offers a lightweight SaaS solution which is easy to implement and provides ongoing, actionable insights for executives and employees by linking data on performance with personal potential and contentment. By means of guided processes, loopline fosters individual committment, enabling high-quality feedback and development. We where looking for a pure Application Monitoring solution without any noise besides that. Some other tools we used added infrastructure monitoring on top. But we use nagios and cacti for that already üôÇ Airbrake really focuses on the main use case, and does that pretty well. The integrations are super helpful. We use the Jira and Slack integration. Having errors reported to Slack immediately helps us react as fast as possible. The thing with errors is: You will have them, but you need to see them. The Airbrake Support is great, it usually takes max 24 hours to get answers. 24 hours sounds long, but we are based in Germany. So due to the time delay direct communication is not possible most of the time. Having an answer the next day is perfect and suitable most of the time. The integrations are great. Using them in the UI a little more would be cool. An example: showing that a JIRA issues is connected + showing the issues status right next to the report. Our TechStack consist of SaltStack to manage our infrastructure. Symfony on the backend, Angular.JS on the frontend and a lot of ruby and bash scripts üôÇ Almost half a year now . Any type of electronic/dance music, vocal trance is perfect. Keep on doing a great job Airbrake! Twitter: https://twitter.com/looplinesys Facebook: https://www.facebook.com/looplinesystems Blog: https://www.loopline-systems.com/en/blog-en Thank you Loopline Systems for being an awesome member of Airbrake¬†Bug Tracker family üôÇ", "date": "2016-02-08"},
{"website": "Airbrake", "title": "Product Delivery in 10 Weeks With Agile Mobile-D Methodology", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/product-delivery-10-weeks-agile-mobile-d-methodology", "abstract": "We‚Äôd like to talk about a new approach to mobile development, dubbed Mobile-D. The method‚Äôs purpose is to establish a functional, agile archetype for software development. It‚Äôs also useful in other applications, such as financial or logistical applications. Mobile-D comprises of 9 components: In their own phrasing, The School of Informatics reports that these 9 constituents must be enmeshed within the various methods associated with the cycle of development: 1) ¬† ¬†Phasing and Placing 2)¬†¬†¬†¬†Architecture Line 3)¬†¬†¬†¬†Mobile Test-Driven Development 4)¬†¬†¬†¬†Continuous Integration 5)¬†¬†¬†¬†Pair Programming 6)¬†¬†¬†¬†Metrics 7)¬†¬†¬†¬†Agile Software Process Improvement 8)¬†¬†¬†¬†Off-Site Customer 9)¬†¬†¬†¬†User-Centered Focus Team cohesiveness, grounded in agile development practices Mobile-D aims towards product delivery within 10 weeks. How does the method achieve this? It grounds itself in agile development practices, which All About Agile reports focus on trusting the judgment of the team, communication with customers, quick turnaround on products, and frequent testing during the project‚Äôs lifecycle. There‚Äôs a crucial importance placed on team cohesiveness, harmony, and confidence in each other. Because a close knit, committed team is required, small teams of no more than ten members are suitable for Mobile-D. Communication is crucial within the team and vertically throughout the organization. ‚ÄúBeing one of the most challenging tasks, communication often determines the success of the project in general,‚Äù as stated in the PDF version of the slideshare provided by University of Zagreb . Continuous interaction and communication with customers allows project managers to discern priceless information on the target market and its needs. This area presents unique challenges as the customer base isn‚Äôt always willing to cooperate, communicate or provide relevant insights. The Mobile-D process comprises of 5 phases: 1)¬†¬†¬†¬†Explore In the first phase, a strategy and the project‚Äôs components are determined by the development team. Three stages are required to complete this phase: Stakeholder establishment Scope definition Project establishment The team will complete tasks specific to this phase such as determining which customers will take an operative role in the process of development. 2)¬†¬†¬†¬†Initialize The team meets with active stakeholders to understand the product and assemble crucial assets, such as communications, technological and physical resources, to commence with production activities. The three stages involved in this phase are: Project set-up Initial planning Trial day 3) Productionize The majority of implementation takes place and should be completed during this phase. Planning days, working days, and release days are the structural driving force behind this phase. Planning days: ‚ÄúPlanning days are aimed at enhancing the development process, prioritizing and analyzing requirements, planning the iteration content, and creating acceptable tests that will be run later in release days,‚Äù according to The School of Informatics . Working days: During working days, functionalities are implemented using the Test-Driven Development (TDD) practice. Release Days: Release days are spent creating a working prototype which will be certified through acceptance testing. 4)¬†¬†¬† Stabilize During the stabilization phase, product finalization occurs. This may encompass fine tuning and modifications, or in a multi-team project ‚Äú integrating subsystems if needed,‚Äù according to the presentation component of the slideshare provided by University of Zagreb . 5)¬†¬†¬†¬†System Test & Fix As its name implies, this phase involves testing the product and ties in closely with the fourth phase, stabilization. Stabilization and system test & fix may continue to cycle until the product meets expectations and client requirements are met. A summary of Mobile-D methodology in bullet points Grounded in agile processes No more than 10 team members Organized but flexible game plan Product turnaround in 10 weeks Cohesive, communicative team Continuous testing and fine tuning Contact with customer base Resources: http://www.allaboutagile.com/what-is-agile-10-key-principles/ http://www.slideshare.net/ZlatkoStapi/using-mobile-d-methodology-in-development-of-mobile-applications-challenges-and-issues-offprint http://www.inf.ed.ac.uk/publications/thesis/online/IM100767.pdf http://www.slideshare.net/ZlatkoStapi/using-mobile-d-methodology-in-development-of-mobile-applicationspptx", "date": "2014-01-13"},
{"website": "Airbrake", "title": "Tools You Need to Speed Up Deployment to Match Demand", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/speed-up-deployment-match-demand", "abstract": "APIs should now be a key component of your deployment strategy. Without a widespread deployment of APIs, you can forget about deploying your final product in a timely fashion and within your¬†budget. What does this mean for your demand versus your deployment? You need to understand the future of APIs if you are looking to move your deployment into a space that can match the accelerated demand of the modern consumer. Here are a few of the tools that you need to take into consideration for this process to work. Embracing API Product Management Too many companies do not yet consider the API as a fully fledged product in and of itself. Companies that do are looking to invoke the maturing¬†product management techniques that help to improve a company‚Äôs best practices. You can expect APIs to extend into an entire life cycle from prototype to retirement, with road mapping, user communication and user feedback as essential components of the cycle. Artificial Intelligence and Bots to Drive Adoption 2017 will be the year that AI, voice interactions and bots become a true fixture in using APIs. If you are on the cutting edge of your industry, you have already implemented these procedures and are using 2017 to accelerate the process. If you haven‚Äôt, you can expect your competition to begin experimenting with interfaces based on voice as much as text, and experiences that are focused on specific apps and browsers. Whether you are adopting these techniques internally or in your final products, you will speed your deployment to match your demand. API Consumption Will Increase There is a continuous demand to make useful APIs accessible to people outside of the development community. Tools such as Zapier, IFTTT, Apiant and Datafire are just a few of the examples that many people are using to speed up their deployment exponentially without taking on any of the infrastructure needed to develop an API. New API Discovery Methods Staying ahead of your competition means staying ahead of their resource base. In some cases, companies will employee a person whose sole job is to find APIs that speed up deployment. Marketplaces such as Hitch and RapidAP¬†will become even more important than they are today. Both external and internal APIs should be considered, as both are challenges. In order to match back in deployment, API publication should be invoked in tandem with full automation features, especially as microservices become more widely used. Managing the Entire Lifecycle of the API The discipline of API management will likely expand and eventually cover the entire API lifecycle. 2017 will see a higher demand for full lifecycle solutions, with standards like OAI/OAS providing even more useful interfacing between tools. As a side note, graphQL¬†will likely become even more valuable as an API pattern in 2017, considering its high adoption level in the previous year. Tools to Bring Together APIs, DevOps and Microservices APIs have become considerably more integrated with microservices. The result is that deployments for cutting-edge companies have become highly automated. If you are looking to move to the bleeding edge of your industry, you should be on the lookout for micro services that are powered by APIs and managed through full automation. IoT Security Your deployment may be able to benefit from the specialist routers that are helping to secure APIs as well as IoT devices. Although the technology is not fully mature, progress will be quick once new design standards and patterns are created that can fully protect both types of products. This means that an office will be able to more securely proliferate IoT devices in its business, securing a faster deployment for its products. Serverless Architecture Microsoft, Google and Amazon are all fighting to be the first to bring serverless architecture to the mainstream, and the technology is quickly becoming a go to feature of all major cloud platforms. We may even begin to see the proliferation of meta-services, which means that equivalent code will be provided in each framework.", "date": "2017-02-03"},
{"website": "Airbrake", "title": "404 Not Found Error: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/404-not-found-error", "abstract": "The 404 Not Found Error is an HTTP response status code , which indicates that the requested resource could not be found. Like most HTTP response codes, and particularly for those codes that indicate an error, the cause of a 404 Not Found Error can be difficult to track down and resolve. There are well over 50 potential status codes that represent the complex relationship between the client, a web application, a web server, and often multiple third-party web services, so determining the cause of a particular status code can be a challenge under the best of circumstances. In this article we‚Äôll explore the 404 Not Found Error by examining what might cause this error, while providing a few tips and tricks to help you diagnose and debug your own application that is experiencing such issues. We‚Äôll also look at a handful of the most common content management systems ( CMSs ) that are in use today, giving you some insight into potential problem areas within these systems that might cause an unexpected 404 Not Found Error , so let‚Äôs get started! All HTTP response status codes that are in the 4xx category are considered client error responses . These types of messages contrast with errors in the 5xx category, such as the 502 Bad Gateway Error we looked at last week, which are considered server error responses . That said, the appearance of a 4xx error doesn‚Äôt necessarily mean the issue is something to do with the client, where the client is the web browser or device being used to access the application. Oftentimes, if you‚Äôre trying to diagnose an issue with your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth. This doesn‚Äôt apply solely to web sites, either. Many smart phone apps that have a modern looking user interface are actually powered by a normal web application behind the scenes; one that is simply hidden from the user. That said, since a 404 Not Found Error indicates that the resource that‚Äôs trying to be accessed is unavailable, it‚Äôs entirely possible the issue steps from the client. You may be trying to access an invalid URL, the browser could be sending invalid credentials to the application, and so on. We‚Äôll explore some of these scenarios (and potential solutions) down below, but be aware that, even though the 404 Not Found Error is considered a client error response , it doesn‚Äôt inherently mean we can rule out either the client nor the server as the root of the problem. In these scenarios, the server is still the network object that is producing the 404 Not Found Error , and returning it as the HTTP response code to the client, but it could be that the client is causing the issue in some way. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road. As such, it is critical that you perform a full backup of your application, database, and so forth, before attempting any fixes or changes to the system. Even better, if you have the capability, create a complete copy of the application onto a secondary staging server that isn‚Äôt ‚Äúlive,‚Äù or isn‚Äôt otherwise active and available to the public. This will give you a clean testing ground with which to test all potential fixes to resolve the issue, without threatening the security or sanctity of your live application. As mentioned, a 404 Not Found Error indicates that the client (web browser) is receiving a message from the server (remote computer) that the specific resource (web page/URL) is unavailable. Such an error can occur in a few scenarios: The client sent a proper request to the server, and the server successfully received said request, but the server was unable to find a valid resource at that particular location. This is typically due to an invalid URL specified by the client; one which the server does not recognize as valid for any number of reasons. This represents the majority of 404 Not Found Errors , and results in an actual 404 response code being sent by the server. Alternatively, some web applications ‚Äúfake‚Äù 404 Not Found Errors when an invalid resource is requested. In such cases, the server returns a standard 200 OK response code, which normally indicates the resource loaded as expected. However, the server then has a custom ‚Äú404 page‚Äù that it displays, indicating to the user that the requested resource was, in fact, not found. However, since the server didn‚Äôt actually return with a 404 response code, such fake errors are typically referred to as soft 404 errors . This is generally considered bad practice on the part of the server/application, since many automated softwares (such as search engine web crawlers) rely on legitimate 404 Not Found Errors to determine if resources/links are valid. In both cases, the provided URL could have been valid in the past, but the server has failed to provide a server-side redirect , which would typically be used to redirect a request made to an invalid or outdated resource to the new, intended target resource. Since the 404 Not Found Error is a client error response code, it‚Äôs best to start by troubleshooting any potential client-side issues that could be causing this error. Here are a handful of tips to try on the browser or device that is giving you problems. The most common cause of a 404 Not Found Error is simply inputting an incorrect URL. Domain names (e.g. airbrake.io ) are case-insensitive, meaning that this mixed case link to AirBrAKe.IO works just as well as the normal, lowercase version of airbrake.io . However, path, query, or fragment portions that appear after the domain name , are quite often case-sensitive, unless the application/server configuration is explicitly designed to pre-process all URLs as lowercase before execution. For example, while airbrake.io can be upper, lower, or mixed case, a link to airbrake.io/BLOG/ (with BLOG in uppercase) is invalid, resulting in our good friend the 404 Not Found Error . Of course, the lowercase version to airbrake.io/blog/ works just fine, as expected. This is all to say that it‚Äôs quite common to have a minor typo in some part of a URL, which often results in an unexpected 404 Not Found Error . As you may already be aware, HTTP cookies are tiny pieces of data stored on your local device, which are used by websites and applications as a mechanism to ‚Äúremember‚Äù information about this particular browser and/or device. Most modern web apps take advantage of cookies to store user- or browser-specific data, identifying the client and allowing for future visits to be faster and easier. However, cookies can store just about any information they need to. In many cases, web applications or services ‚Äî such as ad networks ‚Äî will use data retrieved from local cookies to redirect or handle incoming requests. Thus, an invalid or corrupted cookie could ‚Äúconfuse‚Äù the server into thinking you aren‚Äôt who it thinks you are, or that you‚Äôre trying to access a resource that doesn‚Äôt exist. In most cases, you only need to concern yourself with cookies that are relevant to the website or application causing the problem. Cookies are stored based on the web application‚Äôs domain name , so you can explicitly remove only those cookies that match the website domain (e.g. airbrake.io ), thereby keeping all other cookies intact. However, if you are unfamiliar with manually removing certain cookies, it‚Äôs much easier and safer to clear all cookies at once. Clearing cookies can be accomplished in different ways, depending on the browser you‚Äôre using: Google Chrome Internet Explorer Microsoft Edge Mozilla Firefox Safari If the application you‚Äôre using has some form of user authentication, the last client-side step to try is to log out and then log back in. If you‚Äôve recently cleared the browser cookies, this should usually log you out automatically the next time you try to load the page, so feel free to just try logging back at this point, to see if things are working once again. In some situations, the application may be running into a problem with your previous session , which is just a string that the server sends to the client to identify that client during future requests. As with other data, the session token (or session string ) is stored locally on your device in the cookies and is transferred by the client to the server during every request. If the server doesn‚Äôt recognize the session token being sent by the client, or something has gone wrong with the server that indicates that particular token is invalid, you may get a 404 Not Found Error as a result. For most web applications, logging out and logging back in will force the local session token to be recreated. If you‚Äôre running common software packages on the server that is responding with the 404 Not Found Error , you may want to start by looking into the stability and functionality of those platforms first. The most common content management systems ‚Äî like WordPress, Joomla!, and Drupal ‚Äî are all typically well-tested out of the box, but once you start making modifications to the underlying extensions or PHP code (the language in which nearly all modern content management systems are written in), it‚Äôs all too easy to cause an unforeseen issue that results in a 404 Not Found Error . Here are a few tips to help you troubleshoot some of these popular software platforms: If you recently updated the content management system itself just before the 404 Not Found Error appeared, you may want to consider rolling back to the previous version you had installed when things were working fine. Similarly, any extensions or modules that you may have recently upgraded can also cause server-side issues, so reverting to previous versions of those may also help. For assistance with this task, simply Google ‚Äúdowngrade [PLATFORM_NAME]‚Äù and follow along. In some cases, however, certain CMSs don‚Äôt really provide a version downgrade capability, which indicates that they consider the base application, along with each new version released, to be extremely stable and bug-free. This is typically the case for the more popular platforms, so don‚Äôt be afraid if you can‚Äôt find an easy way to revert the platform to an older version. Depending on the particular content management system your application is using, the exact name of these components will be different, but they serve the same purpose across every system: improving the capabilities and features of the platform beyond what it‚Äôs normally capable of out of the box. But be warned: such extensions can, more or less, take full control of the system and make virtually any changes, whether it be to the PHP code, HTML, CSS, JavaScript, or database. As such, it may be wise to uninstall any new extensions that may have been recently added. Again, Google the extension name for the official documentation and assistance with this process. It‚Äôs worth noting that, even if you uninstall an extension through the CMS dashboard, this doesn‚Äôt guarantee that changes made by the extension have been fully reverted. This is particularly true for many WordPress extensions, which are given carte blanche within the application, including full access rights to the database. Unless the extension author explicitly codes such things in, there are scenarios where an extension may modify database records that don‚Äôt ‚Äúbelong‚Äù to the extension itself, but are instead created and managed by other extensions (or even the base CMS itself). In those scenarios, the extension may not know how to revert alterations to database records, so it will ignore such things during uninstallation. Diagnosing such problems can be tricky, but I‚Äôve personally encountered such scenarios multiple times, so your best course of action, assuming you‚Äôre reasonably convinced an extension is the likely culprit for the 404 Not Found Error , is to open the database and manually look through tables and records that were likely modified by the extension. Above all, Google is your friend. Don‚Äôt be afraid to search for specific terms related to your issue, such as the name of your application‚Äôs CMS, along with the 404 Not Found Error . Chances are you‚Äôll find someone (or, perhaps, many someones) who have experienced this issue and have potentially been provided a solution. If you aren‚Äôt running a CMS application ‚Äî or even if you are, but you‚Äôre confident the 404 Not Found Error isn‚Äôt related to that ‚Äî here are some additional tips to help you troubleshoot what might be causing the issue on the server-side of things. Most modern web servers provide one or more configuration files that allow you to easily adjust the server behavior, based on a wide range of circumstances. For example, the server may be configured to reject requests to certain directories or URLs, which could result in a 404 Not Found Error . Configuration options for each different type of web server can vary dramatically, so we‚Äôll just list a few popular ones to give you some resources to look through, depending on what type of server your application is running on: Apache Nginx IIS Node.js Apache Tomcat Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself. Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. There are a number of useful tools that allow you to evaluate your application, or just specific resources, to check that all links are valid and not producing any 404 Not Found Errors . For starters, you may want to consider registering your site with the Google Search Console (if you haven‚Äôt done so already). This tool gives you insight into what Google‚Äôs own web crawler bots have found while traversing your site. Any issues will be displayed here for all your registered applications, and can be an easy (and automatic) way to find any invalid links or other site problems. If you just need to check a particular resource or URL, then the W3C Link Checker tool will immediately scan the link you provide as you wait, displaying any issues at the bottom. If all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 404 Not Found Error occurred and view the application code at the moment something goes wrong.", "date": "2017-10-19"},
{"website": "Airbrake", "title": "How Dynamic Systems Development Method Led to Agile Project Management", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/dynamic-systems-development-method-agile", "abstract": "If you want to know where a technology is going, sometimes it is effective to study where it has been. The Dynamic Systems Development Method (DSDM) is currently known as an agile development type, with features that are best suited to certain situations. However, many software developers on the inside will tell you that DSDM¬†preceded agile development in total and should be considered a true precursor, because studying DSDM¬†will lead you into a better understanding of agile development as a whole. The Development of DSDM The first version of DSDM was invented circa 1995 as a response to the lack of discipline in the Rapid Application Development methodology. The DSDM¬†Consortium was looking to create a more advanced version of a RAD framework that also had agile principles, although the term ‚ÄúAgile‚Äù was not exactly¬†the formal marker that it is today. As agile development techniques developed, DSDM developed alongside it, with the latest version being released in 2007 and known as DSDM Atern. DSDM is a methodology that prioritizes schedule and quality over functionality. DSDM uses the MoSCoW method of prioritization, which breaks a project down into four different types of requirements: Must have (M) Should have (S) Could have (C) Won‚Äôt have (W) DSDM¬†differentiates itself from other types of agile methodologies because of its formalized reporting and tracking requirement. This is actually less common among Agile. DSDM is also considered a truer project management process because of its focus on pre-development and post-development rather than only the development process. The detail that is involved with DSDM Atern in terms of process descriptions make it one of the more difficult Agile methodologies to consider without dedicated in house expertise or consultation. However, some companies actually prefer DSDM Atern to the popular Scrum in some applications because of DSDM‚Äôs¬†close attention to detail. How DSDM Moved Process Forward When rapid application development was being used to created prototypes in the mid and late 1990s, it was criticized for its lack of mobility. Add to this the lack of discipline inherent in the methodology, and you had a process that many companies considered too unproductive to implement. However, in the same way that rapid application development¬†moved forward the idea of testing prototypes and¬†visualizing functionality before committing to a full scale production run, dynamic systems development method¬†gave more companies the ability to quickly and cheaply utilize the prototyping methodology regardless of industry. The result was a more effective use of time¬†and resources when speculating on new ideas, improved communications with stakeholders, and more accurate production runs based on feedback rather than hypothesis. Before the Agile Manifesto It may be useful for initiates into the Agile Manifesto to take a look at projects that were implemented using dynamic systems development method¬†before the Manifesto became ‚Äúlaw.‚Äù Many things that are taken for granted and automated today had to be worked through by individual and by department in the 1990s and 2000s. New agile development initiates who are having trouble with the Manifesto might benefit from being involved in or observing the entire prototyping experience: experience design, testing and analysis. DSDM¬†Into Agile It is no surprise that many of the developers who were involved in creating dynamic systems development method¬†were also responsible for creating Agile as a formal methodology. One such developer, Mike Griffiths, is a dedicated Agile practitioner who is perhaps one of the most credentialed in the designation. As a faculty member of the University of Calgary, Mike routinely takes his students back into the 1990s, before everything was mapped out with the Agile Manifesto. He moves them through the entire process of pre-development, prototyping and testing, into development and post-dev, letting students see exactly how and why Agile techniques work. Part of the training in many successful companies takes the same approach. Because learning dynamic systems development method¬†and other pre-Agile agile development techniques breaks down the assumptions we take for granted today, processes make sense when they are utilized at lightning speed.", "date": "2017-02-21"},
{"website": "Airbrake", "title": "What Is Behavior-Driven Development and How To Use It", "author": "Unknown", "link": "https://airbrake.io/blog/software-design/behavior-driven-development", "abstract": "The other week we covered the first part of a miniature series covering a trifecta of software development life cycle articles beginning with Object-Oriented Analysis and Design ‚Äì What is it and how do you use it? . Shortly after its introduction, Object-Oriented Analysis and Design was the stepping off point for another new software design pattern, which we covered a few days later in Domain-Driven Design ‚Äì What is it and how do you use it? . A few weeks prior, we also explored Test-Driven Development , which is also related to today‚Äôs topic. The next logical step in this series of models is behavior-driven development ( BDD ), which is the topic we‚Äôll be exploring today. Throughout this article we‚Äôll examine just what BDD is, how it is commonly put into practice, and any potential advantages or disadvantages you might encounter when implementing behavior-driven development techniques into your own projects. Let‚Äôs get crackin‚Äô! At its core, behavior-driven development is a software development methodology that combines practices from test-driven development ( TDD ) and domain-driven design ( DDD ). As we saw in our previous article , test-driven development focuses development on short, cyclical iterations in which (failing) tests are initially created that define the desired functionality, and only then is actual code written that ensures those previously-failing tests can now pass. When performed consistently and rapidly, this TDD structure can dramatically reduce overall development time and lower reported bug counts, since code bases tend to be stronger and more stable throughout the software development life cycle. As we also explored in a prior article , domain-driven design centers on the concept of domain and domain logic , which simply encompass the overall ‚Äúsphere of knowledge or activity around which application logic revolves.‚Äù Thus, DDD practices attempt to simplify the terminology within the project scope by focusing and defining everything in the application as real-world objects or concepts that most people are familiar with. This largely simplifies communication and encourages the team to develop an application that precisely fits the needs of the particular domain in question. Thus, by combining parts of both TDD and DDD , behavior-driven development aims to simplify development through the use of a common domain-specific language ( DSL ), which is used to adapt natural language sentences and phrases into executable tests. Whether it is recognized or not, this practice of using natural language sentences to describe and define tests is used in a plethora of programming languages and testing suites. As a simple example, the built-in testing framework for Ruby on Rails allows tests to be defined like so: While this is treated behind-the-scenes as a normal method, to the end-user when executing the test it‚Äôs easy to quickly differentiate between this test and others, while also immediately recognizing what this test aims to prove or disprove. At its core, behavior-driven development expands on TDD and DDD by narrowing in on the notion of behavior . While ‚Äúloose‚Äù TDD allows for tests to focus on all requirement levels within the application, BDD states that tests should be defined in terms of the ‚Äúdesired behavior of the unit.‚Äù As we learned about from our DDD article, this behavior is best defined as the relevant business logic or domain logic for that particular software unit. Beyond that overall focus on behavior, BDD also specifies a handful of principles that should be put into practice. Typically, defining behaviors within BDD is accomplished through user stories . These are written-out scenarios that include some sort of baseline title that summarizes the intent, a narrative section that describes the who and what that should be involved in achieving this story requirement, and the scenarios section that describes a series of specific scenarios via if-then -style conditions. While BDD doesn‚Äôt enforce any one particular syntax or format for these user stories , it does suggest that your team standardize a format to abide by. This will ensure that your team can continue to easily discuss and modify stories, and multiple team members can create stories without the need to work closely together. Here is a typical user story format used in BDD projects, as recommended by Dan North, who is considered to more or less be the ‚Äúfounder‚Äù of BDD : Expanding on this template, Mr. North provides a filled out user story example in his Introducing BDD article: Just as we discussed in our Domain-Driven Design article, behavior-driven development heavily emphasizes the importance of a ubiquitous language , which is also commonly referred to as domain-specific language or DSL . The DSL should be clearly defined and agreed upon by all team members early in the development life cycle. DSL allows for easy communication about the domain of the project, and should be both simple and robust enough to support discussion between all types of personnel, from developers and team leaders to customers and business executives. Behavior-driven development is heavily supported by specialized tools that aid in the creation and execution of testing suites. Just like automated testing tools used in test-driven development , BDD tools will similarly perform automated tests in an aim to streamline the development process. The big difference, however, between TDD and BDD testing tools is that BDD tools are tightly linked to the DSL that has been defined for the project. As such, test specifications inside typical BDD testing tools will aim to directly copy the language and phrases from the DSL user stories that have already been defined. Looking back at Scenario 1 from Dan North‚Äôs Account Holder withdraws cash story above, for example, we can see how that scenario might be translated into actual automated test code (using the Ruby programming language, in this particular case): And here is the pseudocode that tests for that scenario in Ruby (using Cucumber syntax): Since behavior-driven development is heavily derived from and influenced by test-driven development , many of the same benefits that apply to TDD also apply to BDD . Reduces Regression : With a full suite of tests being continually executed, and with new tests always being added, BDD dramatically reduces the likelihood of regression bugs popping up, since the codebase will be in a constant state of monitoring and testing. Improves Team Communication : The reliance on a well-defined ubiquitous language / DSL means that BDD can often improve communication across the entirety of the team, or even among organizations, since there is a common, real-life basis for phrases and terminology when discussing the project. Requires Specification Before Development : For better or worse, behavior-driven development requires that the team sit down and write out both the DSL and in-depth specification documentation ( user stories ) for each particular scenario or feature, before even a single line of functional code can be written. For many teams, particularly dealing with larger projects, this restriction may not be an issue, but for smaller teams and rapid projects, that extra effort and requirement may be more hindrance than help. Relies on Constant Outside Feedback : While staying in touch with users, customers, or domain experts may not be a problem for some teams, for many organizations this requirement of constant contact with outside people can have a negative impact on development time. In cases where feedback is required to flesh out a new user story or scenario prior to tests being written ‚Äî let alone functional code ‚Äî if the relevant domain expert is unavailable at that time, development can grind to a halt (or be forcibly redirected, which is effectively the same thing in many cases).", "date": "2017-05-02"},
{"website": "Airbrake", "title": "What Is Test-Driven Development and How To Use It", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/test-driven-development", "abstract": "In the world of software development, test-driven development (commonly shortened to tdd ) is an well-known and commonly-used development methodology by which (failing) tests are initially created, and only then is the actual software code created, which aims to pass the newly-generated tests. Today we‚Äôll take some time to explore the fundamental components of test-driven development , including the basic test-driven development life cycle, some best practices, and potential advantages and disadvantages to implemented test-driven development in your own projects. Let‚Äôs get to it! The core of the test-driven development cycle revolves around five simple steps, which are repeated ad nauseam throughout the software development life cycle. The goal of these steps (and the whole of test-driven development in general) is to ensure that code is simple and efficient, while fulfilling all functional business requirements. Since development is driven by tests, the obvious first step is to create a new test. This test should be as succinct and as simple as possible, testing a very specific aspect or component of a larger feature. For example, if you‚Äôre creating a user registration feature, you could create a single test that encompasses every aspect of registration, from the generation of the form elements, to the user entry, to the database connection, to the data models, and so forth. However, it would be quite difficult to properly create a single test that encompasses all those aspects, let alone one that does so efficiently and effectively from the outset. Instead, test-driven development encourages you to write the smallest possible test that is necessary to meet the needs of the actively developed feature. Over time, many tests are created, until enough tests exist to cover every aspect of the much larger feature. Thus, a single test that relates to the user registration feature might be something as simple as: ‚Äú email field is not blank.‚Äù Most tests created in test-driven development use some sort of language-specific framework that allows tests to be ‚Äútitled‚Äù or ‚Äúnamed‚Äù, typically be writing a simple phrase that defines the behavior (commonly referred to as a user story ). Thus, our first test might be titled ‚Äú email field is not blank‚Äù, and its purpose is simply to test that the email field is not empty when the form is submitted. Once the test is created, the next step is to confirm that the test fails. The entire purpose of the test-driven development methodology is to force you to think about the requirements of a feature or a section of code, such that a created test will not only be necessary in order to confirm when the feature is finally working as expected, but also that the test will fail prior to implementing said feature. By confirming that the new test fails ‚Äî and does so for the reason(s) you expect ‚Äî you can be confident that the test is useful, and will be beneficial once you write the code necessary to pass the test. After confirming that the test fails, you now must write the code that will allow the test to pass. One key idea here is that you should not write any additional or extraneous code that goes beyond the scope of the test. Just as we focused on creating the simplest test possible in Step 1 , here we want to write the simplest code possible that allows our test to pass. Code written here will likely be rough and not finalized, but that‚Äôs OK. The entire test-driven development process encourages constant refactoring, meaning your current code is likely to change numerous times in the future. Once your new code is written, confirm that the test now passes. In our example case, we‚Äôve confirmed that submitting our registration form with a blank email field causes our test to fail, while entering text in the email field allows the test to pass. Believe it or not, that‚Äôs all there is to the the basic test-driven development process. During the fifth step, even though you now have a test that passes, the process of writing the code necessary to allow said test to pass may have introduced some duplications or inconsistencies. That‚Äôs perfectly normal and expected, but the importance of the refactoring step is to take the time to locate those problem areas and to focus on simplifying the codebase. This process should also include frequent re-running of all previous tests, to confirm that you haven‚Äôt accidentally introduced any additional bugs, or changed something that now causes a previously passing test to fail. Most developers will know this practice as regression testing ‚Äî confirming that functional code doesn‚Äôt break due to new changes. Arguably, there is a sixth step in this five-step test-driven development process: repeat . If everything is kept small (small use cases, small tests, small code changes, small confirmations, etc), then the entire process, from writing a failing test to confirming a passing test and refactoring, can often take only a few minutes. Thus, the process is repeated over and over, with each new test slowly incrementing the entire codebase, progressing closer and closer to a fully-realized and completed feature. Red-green-refactor is a simplified, shorthand version of test-driven development that you may hear from time to time, and it‚Äôs just another way of referring to the basic steps outlined above. A red test is a failing test, while a green test is a passing test, so the process of red-green-refactor just means to create a failing test, make it pass, and then refactor. For most modern software development projects, test-driven development is largely based around the use of other tools that dramatically assist with the process. The most beneficial of these tools is easily the automated test runner or automated task runner . There are too many such tools to list here, but depending on the language or framework you‚Äôre using, there‚Äôs bound to be multiple choices available to you. The obvious benefit to an automated test runner is the ability to have all your tests executed automatically without your direct intervention. For developer-centric testing, such as most unit testing that is the core of test-driven development practices, not having to worry about manually executing tests yourself is a lifesaver. Many automated test runners can even execute tests when changes are made to a desired set of files. This way, your tests can always be running in the background, and if a test fails due to a recent change in the code, you can be alerted immediately, while otherwise focusing entirely on the code you‚Äôre working on. Reduces the Reliance on Debugging : Since test-driven development focuses on writing tests first, and only then creating code intended to pass said tests, many developers find that a test-driven development life cycle can dramatically reduce the need for debugging. Since test-driven development encourages a much deeper understanding of logic and functional requirements during test writing and coding, the cause of a failing test can often be quickly recognized and remedied. Considers the User Experience : The process of initially thinking about and writing a test fundamentally forces your brain to work backwards: You first consider how the function will be used, then how it might be implemented, and then how a test to encompass that should be written. This encourages you to consider the user experience aspect of the feature (and therefore the entire project as a whole). Can Decrease Overall Development Time : According to some , test-driven development practices have been shown to reduce the total development time for a project when compared to a traditional, non-test-driven model. While total lines of code increase (due to the extra lines in tests), frequent testing often prevents bugs and catches existing bugs much earlier in the process, preventing them from becoming problematic later down the line. Discourages Big Picture Design : Since test-driven development encourages developers to write the simplest possible test, then resolve that test with the simplest possible code, this can often lead to a severe lack of scope regarding the overall design of a feature or the whole project. When using test-driven development practices, it‚Äôs all too easy to miss the forest for the trees, since your entire focus is on the minutiae of the problem at hand. Repeating these focused practices during minute-to-minute development often leads to designs that are too specific in nature, rather than stepping back and looking at the big picture. Difficult to Apply in All Cases : Test-driven development is great at handling smaller projects, or even small components and features of larger projects. Unfortunately, test-driven development practices may begin to falter when applied to incredibly massive or complex projects. Writing tests for a complex feature that you may not yet fully understand can be difficult if not impossible. Writing tests is great, but if those new tests don‚Äôt accurately represent the requirements of the feature, they serve no purpose (or may even actively hinder development). Moreover, some projects ‚Äî particularly those dealing with legacy code or third-party systems ‚Äî simply don‚Äôt lend themselves to test-driven development practices, because it may be near-impossible to create tests that properly integrate with those systems or that legacy code. Requires Additional Time Investment : While arguably the time spent on generating tests upfront is saved later on in the development life cycle (see Advantages above), the fact remains that test-driven development requires a significant upfront output of time and energy to come up with and write tests. For many developers , that time may be better spent simply writing new or refactoring existing code,", "date": "2017-04-11"},
{"website": "Airbrake", "title": "What is Object-Oriented Analysis and Design and How To Use It", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/object-oriented-analysis-and-design", "abstract": "Most developers are well-aware of the concepts of object-oriented development, but those same concepts originate from a broader approach to the entire software development life cycle known as object-oriented analysis and design ( OOAD ). OOAD is a technical method of analyzing and designing an application based on that system‚Äôs object models (the logical components of the system that interact with one another). We‚Äôll take the time in this article to explore exactly what object-oriented analysis and object-oriented design are, how these techniques are typically used in modern development, and any potential advantages or disadvantages you may consider when implementing OOAD into your own work. Let‚Äôs get going! During the software development life cycle, development is typically broken up into stages , which are loose, abstract concepts used to separate the activities taking place within each phase of development. Often, these stages might include requirements , planning , design , coding/development , testing , deployment , maintenance , and so forth. In the case of stringent development methodologies, such as the waterfall method , these stages are sequential and intended to be completely separate from one another. Thus, when creating an application using the waterfall method, it‚Äôs unlikely that discoveries made during the testing or deployment phases can impact the decisions already made during the planning or design phases. These limitations, along with the strict step-by-step staging process of waterfall-esque models, led to the rise of iterative models like object-oriented analysis and design . While OOAD practices have been around for a number of decades, the core ideas and techniques were largely cemented in the collective mind of the development community in the 1990s. An assortment of practitioners and authorities in the industry, working together and on solo endeavors, began to publish a number of books, articles, and techniques that all relied heavily on OOAD concepts. Some of these publications and methodologies are still well-known and in use today, including the Unified Modeling Language and the Rational Unified Process . To define object-oriented analysis we must first define what we mean by an object . The definition of an object , according to most dictionaries, is ‚Äúa tangible, material thing.‚Äù Drilling down a bit more to the realm of computer science, an object can be most anything in a programmatic sense, from a variable or data model to a function, class, or method. Moving even deeper into the realm of object-oriented programming , an object is an instance of a thing that typically represents a real world object and has all the same types of characteristics ( properties ), behaviors ( methods ), and states ( data ). When discussing OOAD concepts, an object most closely resembles the object-oriented programming version of an object , in that it is a representation of a real world object with behaviors, characteristics, and states. With that out of the way, we can define object-oriented analysis ( OOA ). In short, OOA is an iterative stage of analysis, which takes place during the software development life cycle, that aims to model the functional requirements of the software while remaining completely independent of any potential implementation requirements. To accomplish this task via OOAD practices, an object-oriented analysis will focus everything through the lens of objects . This forces OOA to combine all behaviors , characteristics , and states together into one analysis process, rather than splitting them up into separate stages, as many other methodologies would do. To accomplish this goal, a typical OOA phase consists of five stages: Find and define the objects. Organize the objects. Describe how the objects interact with one another. Define the external behavior of the objects. Define the internal behavior of the objects. For example, a typical implementation of OOA is to create an object model for an application. The object model might describe the names , relationships , behaviors , and characteristics of each object in the system. With this information established for each object, the design process that follows is much simpler. The process of object-oriented design is really just an extension of the object-oriented analysis process that preceded it, except with a critical caveat: the consideration and implementation of constraints . For example, with an analyzed object in hand, such as an object model , we must now consider how that object would actually be designed and implemented, which will often require the application of constraints, such as software or hardware platforms, time and budgetary limitations, performance requirements, developer aptitude, and so forth. Put another way, the OOD process takes the theoretical concepts and ideas planned out during the OOA stage, and tries to find a way to design and tangibly implement them, usually via code using whatever language and platforms the development team has settled upon. If OOA is the what , then OOD is the how . Encourages Encapsulation : Since everything within OOAD revolves around the concept of objects (specifically, the object-oriented variety), one of the biggest advantages of OOAD is that it encourages planning and development of systems that are truly independent of one another. Just like a class written using object-oriented techniques, all the systems and objects produced during an OOAD development life cycle can be mixed and matched as necessary, since they will ideally be built as completely self-contained entities. Easy to Understand : Since OOAD principles are fundamentally based on real world objects, it‚Äôs quite easy for everyone on the team to quickly understand what an object name means or how a particular behavior, well, behaves. This makes the overall development life cycle a much smoother process, particularly if your team needs to frequently interact with customers or other non-technical users about the objects and components in the system. In such cases, most people still understand how system components and modelled objects work when they‚Äôre based on real world objects and ideas. Ill-Suited to Procedural Applications : Given the object-oriented nature of OOAD , it is quite difficult (although not impossible) to practice OOAD techniques within a procedural programming language, or often to apply the techniques to non-object business logic. Whereas procedural applications are often logically bound by concepts of scope and modularity, object-oriented applications, of course, emphasize objects that simulate the real world, making OOAD methods ill-suited for procedural languages and applications. Too Complex for Simple Applications : While arguably not a disadvantage that is applicable to all projects, it‚Äôs certainly the case that OOAD practices are generally not ideal for simpler projects. Many developers have their own personal hard and fast rules to help when deciding whether a project should be procedural or object-oriented, but in most cases, the more basic the needs of the application, the more likely a less-structured, procedural approach is the best fit. As always, we must always use our own best judgment.", "date": "2017-04-18"},
{"website": "Airbrake", "title": "What Are Conceptual Models and How Can You Use them?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/conceptual-model", "abstract": "A conceptual model is a representation of a system that uses concepts and ideas to form said representation. Conceptual modeling is used across many fields, ranging from the sciences to socioeconomics to software development. When using a conceptual model to represent abstract ideas, it‚Äôs important to distinguish between a model of a concept versus a model that is conceptual . That is to say, a model is intrinsically a thing unto itself , but that model also contains a concept of what that model represents ‚Äî what a model is , as opposed to what a model represents . Without diving too deep into the philosophical, recognizing these differences between the model itself and what it represents is critical to understanding the proper use of conceptual models in the first place. It should come as no surprise, then, that conceptual models are often used as an abstract representation of real world objects. Throughout this article we‚Äôll explore what conceptual models are, how they are most commonly implemented, as well as a few advantages and disadvantages of using conceptual models in the realm of software development, so let‚Äôs get to it! As touched on above, conceptual modeling is used as a way to describe physical or social aspects of the world in an abstract way. For example, in the realm of software development, a conceptual model may be used to represent the relationships of entities within a database. Whether written down via text or diagrammed visually, such a conceptual model can easily represent abstract concepts of the relationships between objects in the system, such as Users and their relationship to Accounts . In fact, conceptual models within a typical software development life cycle are often referred to as domain models . A domain model is a type of conceptual model that incorporates representations of both behavior and data at the same time. As illustrated above, this often represents database entities, using simple diagramming techniques to illustrate 1-to-1 , 1-to-many , and many-to-many relationships within the system. Overall, a conceptual model should fulfill four fundamental objectives: Enhance understanding of the representative system. Promote efficient conveyance of system details between team members. Provide a point of reference for system designers to gather system specifications. Document the system for future reference. Applying these objectives to our example data model above, we can ascertain that a conceptual data model should capture the key business entities (a person, place, concept, event, or thing about which the organization wants to collect data), as well as the relationships between these entities. Due to the broad spectrum of concepts and inherent abstractness that it can represent, conceptual modeling is used in a wide range of projects, across dozens of fields. Within the realm of software development, as we illustrated above, conceptual modeling is most commonly used as a form of data modeling ; representing abstract business entities and the relationships therein. The rise of rapid application development represents another very common implementation of conceptual modeling , which uses abstract models to represent development processes that are rapidly changing and being iterated upon. Furthermore, within each phase of rapid application development , conceptual models are typically used to communicate sub-concepts as well. Even fundamental modeling practices are, by their very nature, forms of conceptual models . One such example is the Unified Modeling Language , which was created in the mid-90s, and is a general purpose modeling language that attempts to provide a standard method to visualize system design. Throughout all the various implementations of conceptual models , a few best practices have emerged. A conceptual model should: ‚Ä¶ be available to all team members, to facilitate collaboration and iteration. ‚Ä¶ be easily changeable, as a continuous reflection of up-to-date information. ‚Ä¶ contain both visual and written forms of diagramming, to better explain the abstract concepts it may represent. ‚Ä¶ establish relevant terms and concepts that will be used throughout the project. ‚Ä¶ define said terms and concepts. ‚Ä¶ provide a basic structure for entities of the project. In spite of the name, conceptual models are not merely conceptual , they are frequently put to use in real-world scenarios . The Federal Emergency Management Agency ( FEMA ) used conceptual modeling to develop Emergency Response Management systems, as have other vital institutions including the U.S. Missile Defense Agency and the National Institute of Standards and Technology . Since conceptual models are merely representations of abstract concepts and their respective relationships, the potential advantages of implementing a conceptual model are many, but largely depend on your own ability to devise a strong model in the first place. Generally speaking, the primary advantages of a conceptual model include: Establishes Entities : By establishing and defining all the various entities and concepts that are likely to come up throughout the course of a software development life cycle, a conceptual model can help ensure that there are fewer surprises down the road, where entities or relationships might otherwise have been neglected or forgotten. Defines Project Scope : A solid conceptual model can be used as a way to define project scope, which assists with time management and scheduling. Base Model for Other Models : For most projects, additional, less abstract models will need to be generated beyond the rough concepts defined in the conceptual model . Conceptual models serve as a great jumping-off point from which more concrete models can be created, such as logical data models and the like. High-Level Understanding : Conceptual models serve as a great tool by providing a high-level understanding of a system throughout the software development life cycle. This can be particularly beneficial for managers and executives, who may not be dealing directly with coding or implementation, but require a solid understanding of the system and the relationships therein. Since a conceptual model is so abstract, and thus, is only as useful as you make it, there can be a few disadvantages or caveats to watch out for when implementing your own conceptual model : Creation Requires Deep Understanding : While conceptual models can (and should) be adaptive, proper creation and maintenance of a conceptual model requires a fundamental and robust understanding of the project, along with all associated entities and relationships. Potential Time Sink : Improper modeling of entities or relationships within a conceptual model may lead to massive time waste and potential sunk costs, where development and planning have largely gone astray of what was actually necessary in the first place. Possible System Clashes : Since conceptual modeling is used to represent such abstract entities and their relationships, it‚Äôs possible to create clashes between various components. In this case, a clash simply indicates that one component may conflict with another component, somewhere down the line. This may be seen when design or coding clash with deployment , as the initial assumptions of scaling during design and coding were proven wrong when actual deployment occurred. Implementation Challenge Scales With Size : While conceptual models are not inherently ill-suited for large applications, it can be challenging to develop and maintain a proper conceptual model for particularly complex projects, as the number of potential issues, or clashes , will grow exponentially as the system size increases.", "date": "2017-03-23"},
{"website": "Airbrake", "title": "What is Rational Unified Process And How Do You Use It?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/rational-unified-process", "abstract": "The fundamental purpose of the Rational Unified Process is to provide a model for effectively implementing commercially proven approaches to development, for use throughout the entire software development life cycle . Taking elements from other iterative software development models, the Rational Unified Process framework was initially created by the Rational Software Corporation , which was bought out by IBM in 2003. The Rational Unified Process is not a concrete development model, but rather is intended to be adaptive and tailored to the specific needs of your project, team, or organization. The Rational Unified Process is based on a few fundamental ideas, such as the phases of development and the building blocks , which define who, what, when, and how development will take place. Throughout this article we‚Äôll explore the Rational Unified Process in detail, examining the best practices , its fundamental building blocks , and the core life cycles that software will iteratively progress through, before we outline a few advantages and potential disadvantages to using the Rational Unified Process in for your own projects. Let‚Äôs take a look! Some more specific takes on SDLC include: The Rational Unified Process is structured around six fundamental best practices , which are so-named due to their common use throughout the industry: Develop Software Iteratively : Encourages iterative development by locating and working on the high-risk elements within every phase of the software development life cycle. Manage Requirements : Describes how to organize and keep track of functionality requirements, documentation, tradeoffs and decisions, and business requirements. Use Component-Based Architectures : Emphasizes development that focuses on software components which are reusable through this project and, most importantly, within future projects. Visually Model Software : Based on the Unified Modeling Language ( UML ), the Rational Unified Process provides the means to visually model software, including the components and their relationships with one another. Verify Software Quality : Assists with design, implementation, and evaluation of all manner of tests throughout the software development life cycle. Control Changes to Software : Describes how to track and manage all forms of change that will inevitably occur throughout development, in order to produce successful iterations from one build to the next. All aspects of the Rational Unified Process are based on a set of building blocks , which are used to describe what should be produced, who is in charge of producing it, how production will take place, and when production is complete. These four building blocks are: Workers, the ‚ÄòWho‚Äô : The behavior and responsibilities of an individual, or a group of individuals together as a team, working on any activity in order to produce artifacts . Activities, the ‚ÄòHow‚Äô : A unit of work that a worker is to perform. Activities should have a clear purpose, typically by creating or updating artifacts . Artifacts, the ‚ÄòWhat‚Äô : An artifact represents any tangible output that emerges from the process; anything from new code functions to documents to additional life cycle models. Workflows, the ‚ÄòWhen‚Äô : Represents a diagrammed sequence of activities , in order to produce observable value and artifacts . Workflows are further divided up in the Rational Unified Process into six core engineering workflows : Business Modeling Workflow : During this workflow, the business context ( scope ) of the project should be outlined. Requirements Workflow : Used to define all potential requirements of the project, throughout the software development life cycle. Analysis & Design Workflow : Once the requirements workflow is complete, the analysis and design phase takes those requirements and transforms them into a design that can be properly implemented. Implementation Workflow : This is where the majority of actual coding takes place, implementing and organizing all the code into layers that make up the whole of the system. Test Workflow : Testing of all kinds takes place within this workflow. Deployment Workflow : Finally, the deployment workflow constitutes the entire delivery and release process, ensuring that the software reaches the customer as expected. There are also three core supporting workflows defined in the Rational Unified Process : Project Management Workflow : Where all activities dealing with project management take place, from pushing design objectives to managing risk to overcoming delivery constraints. Configuration & Change Management Workflow : Used to describe the various artifacts produced by the development team, ideally ensuring that there is minimal overlap or wasted efforts performing similar activities that result in identical or conflicting artifacts . Environment Workflow : Finally, this workflow handles the setup and management of all software development environments throughout the team, including the processes, as well as the tools, that are to be used throughout the software development life cycle. During the inception phase , the basic idea and structure of the project is determined. The team will sit down and determine if the project is worth pursuing at all, based on the proposed purpose of the project, the estimated costs (monetary and time), and what resources will be required to complete the project once the green light is given. The conclusion of the inception phase is the Lifecycle Objectives Milestone , which consists of the following evaluation criteria: Stakeholder concurrence on scope definition and cost/schedule estimates. Requirements understanding as evidenced by the fidelity of the primary use cases. Credibility of the cost/schedule estimates, priorities, risks, and development process. Depth and breadth of any architectural prototype that was developed. Actual expenditures versus planned expenditures. The purpose of the elaboration phase is to analyze the requirements and necessary architecture of the system. The success of this phase is particularly critical, as the final milestone of this phase signifies the transition of the project from low-risk to high-risk, since the actual development and coding will take place in the following phase. The Lifecycle Architecture Milestone signifies the end of the elaboration phase , and is evaluated using these criteria: Is the vision of the product stable? Is the architecture stable? Does the executable demonstration show that the major risk elements have been addressed and credibly resolved? Is the plan for the construction phase sufficiently detailed and accurate? Is it backed up with a credible basis of estimates? Do all stakeholders agree that the current vision can be achieved if the current plan is executed to develop the complete system, in the context of the current architecture? Is the actual resource expenditure versus planned expenditure acceptable? As the meat and potatoes of the software development life cycle, the construction phase is when the coding and implementation of all application features will take place. This period is also where integrations with other services or existing software should occur. The end of the construction phase is measured by the completion of the Initial Operational Capability Milestone , which is based on these criteria: Is this product release stable and mature enough to be deployed in the user community? Are all stakeholders ready for the transition into the user community? Are the actual resource expenditures versus planned expenditures still acceptable? Easier thought of as deployment , the transition phase is when the finished product is finally released and delivered to customers. However, the transition phase is more than just the process of deployment; it must also handle all post-release support, bug fixes, patches, and so forth. The Product Release Milestone signals the end of the transition phase , and is based on a few simple questions: Is the user satisfied? Are the actual resources expenditures versus planned expenditures still acceptable? The Rational Unified Process also recommends that each of the four above phases be further broken down into iterations , a concept taken from agile and other common iterative development models. Just as with those other models, in the context of the Rational Unified Process , an iteration simply represents a full cycle of the aforementioned core phases, until a product is released in some form (internally or externally). From this baseline, the next iteration can be modified as necessary until, finally, a full and complete product is released to customers. Allows for the adaptive capability to deal with changing requirements throughout the development life cycle, whether they be from customers or from within the project itself. Emphasizes the need (and proper implementation of) accurate documentation. Diffuses potential integration headaches by forcing integration to occur throughout development, specifically within the construction phase where all other coding and development is taking place. Heavily relies on proficient and expert team members, since assignment of activities to individual workers should produce tangible, pre-planned results in the form of artifacts . Given the emphasis on integration throughout the development process, this can also be detrimental during testing or other phases, where integrations are conflicting and getting in the way of other, more fundamental activities. Arguably, rup is a fairly complicated model. Given the assortment of the components involved, including best practices , phases , building blocks , milestone criteria , iterations , and workflows , often proper implementation and use of the Rational Unified Process can be challenging for many organizations, particularly for smaller teams or projects.", "date": "2017-03-14"},
{"website": "Airbrake", "title": "What is Extreme Programming And How Do You Use It?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/extreme-programming", "abstract": "Extreme Programming is a software development methodology designed to improve the quality of software and its ability to properly adapt to the changing needs of the customer or client. During the mid and late nineties, while working on the Chrysler Comprehensive Compensation System (C3) to help manage the company‚Äôs payroll, software engineer Ken Beck first developed the Extreme Programming methodology. In October 1999, he published Extreme Programming Explained , detailing the entire method for others, and shortly thereafter the¬†official website¬†was launched as well. Similar to other¬†Agile Methods¬†of development, Extreme Programming aims to provide iterative and frequent small releases throughout the project, allowing both team members and customers to examine and review the project‚Äôs progress throughout the entire SDLC . Throughout this article, we‚Äôll examine exactly what Extreme Programming is and how it works, from the values and principles that are behind it, to the rules and procedural best practices that are used to implement a new Extreme Programming project, so let‚Äôs get started! Some more specific takes on SDLC include: These five fundamental values provide the foundation on which the entirety of the Extreme Programming paradigm is built, allowing the people involved in the project to feel confident in the direction the project is taking and to understand their personal feedback and insight is as necessary and welcome as anyone else. Simplicity: We will do what is needed and asked for, but no more. This will maximize the value created for the investment made to date. We will take small simple steps to our goal and mitigate failures as they happen. We will create something we are proud of and maintain it long term for reasonable costs. Communication: Everyone is part of the team and we communicate face to face daily. We will work together on everything from requirements to code. We will create the best solution to our problem that we can together. Feedback: We will take every iteration commitment seriously by delivering working software. We demonstrate our software early and often then listen carefully and make any changes needed. We will talk about the project and adapt our process to it, not the other way around. Respect: Everyone gives and feels the respect they deserve as a valued team member. Everyone contributes value even if it‚Äôs simply enthusiasm. Developers respect the expertise of the customers and vice versa. Management respects our right to accept responsibility and receive authority over our own work. Courage: We will tell the truth about progress and estimates. We don‚Äôt document excuses for failure because we plan to succeed. We don‚Äôt fear anything because no one ever works alone. We will adapt to changes when ever they happen. Initially published by Don Wells in 1999, the proprietor of the Extreme Programming website, this set of¬†Extreme Programming Rules¬†were originally intended to help to counter the claims that Extreme Programming fails to support some of the prominent disciplines necessary for modern development. Planning User stories are written. Release planning creates the release schedule. Make frequent small releases. The project is divided into iterations. Iteration planning starts each iteration. Managing Give the team a dedicated open work space. Set a sustainable pace. A stand up meeting starts each day. The Project Velocity is measured. Move people around. Fix Extreme Programming when it breaks. Designing Simplicity. Choose a system metaphor. Use CRC cards for design sessions. Create spike solutions to reduce risk. No functionality is added early. Refactor whenever and wherever possible. Coding The customer is always available. Code must be written to agreed standards. Code the unit test first. All production code is pair programmed. Only one pair integrates code at a time. Integrate often. Set up a dedicated integration computer. Use collective ownership. Testing All code must have unit tests. All code must pass all unit tests before it can be released. When a bug is found tests are created. Acceptance tests are run often and the score is published. Created using what were considered the best practices of software development at the time, these twelve¬†Extreme Programming Best Practices¬†detail the specific procedures that should be followed when implementing a project using Extreme Programming. Pair programming In essence, pair programming means that two people work in tandem on the same system when developing any production code. By frequently rotating partners throughout the team, Extreme Programming promotes better communication and team-building. Planning game Often this takes the form of a meeting at a frequent and well-defined interval (every one or two weeks), where the majority of planning for the project takes place. Within this procedure exists the¬†Release Planning¬†stage, where determinations are made regarding what is required for impending releases. Sections of¬†Release Planning¬†include: Exploration Phase: Story cards are used to detail the most valuable requirements from customers. Commitment Phase: Planning and commitments from the team are made to meet the needs of the next schedule release and get it out on time. Steering Phase: This allows for previously developed plans to be adjusted based on the evolving needs of the project, similar to many other¬†Agile Model¬†methodologies. Following the¬†Release Planning¬†is also the¬†Iteration Planning¬†section, which consists of the same three sub-phases of its own, but with variants on their implementations: Exploration Phase: All project requirements are written down. Commitment Phase: Necessary tasks yet to be completed to meet the upcoming iteration release are assigned to developers and scheduled appropriately. Steering Phase: Development takes place and, upon completion, the resulting iteration is compared to the outlined story cards created at the start of the¬†Planning¬†procedure. Test-driven development While an entire article could be written about test-driven development, the concept is fairly well known among developers and effectively means that tests are generated for each and every requirement of the project, and only then is code developed that will successfully pass those tests. Whole team As with many other SDLC methods and practices, Extreme Programming promotes the inclusion of customers and clients throughout the entire process, using their feedback to help shape the project at all times. Continuous integration Another common practice in modern development, the idea behind continuous integration is that all code developed across the entire team is merged into one common repository many times a day. This ensures that any issues with integration across the entire project are noticed and dealt with as soon as possible. Code refactoring Another very common practice, the idea behind code refactoring is simply to improve and redesign the structure of already existing code, without modifying its fundamental behavior. Simple examples of refactoring include fixing improperly names variables or methods, and reducing repeated code down to a single method or function. Small releases Very much in line with the practices of the¬†Iterative Model, this concept ensures that the project will feature iterated, small releases on a frequent basis, allowing the customer as well, as all team members, to get a sense of how the project is developing. Coding standards The coding standard is simply a set of best practices within the code itself, such as formatting and style, which the entire team abides by throughout the life cycle of the project. This promotes better understanding and readability of the code not only for current members, but for future developers as well. Collective code ownership This practice allows for any developer across the team to change any section of the code, as necessary. While this practice may sound dangerous to some, it speeds up development time, and any potential issues can be quelled with proper unit testing. Simple design There‚Äôs little reason to complicate things whenever a simpler option is available. This basic practice of keeping all components and code as simple as can be ensures that the entire team is always evaluating whether things could be done in an easier way. System metaphor Best thought of as part of the¬†coding standards, the system metaphor is the idea that every person on the team should be able to look at the high-level code that is developed, and have a clear understanding of what functionality that code is performing. Sustainable pace A key concept for better work-life balance with developers on an Extreme Programming project is the notion that nobody should be required to work in excess of the normal scheduled work week. Overtime is frowned upon, as is the concept of ‚Äúcrunch time‚Äù, where developers are expected to work extreme hours near the end of a release to get everything completed on time.", "date": "2017-01-20"},
{"website": "Airbrake", "title": "What is Scaled Agile Framework And How Do You Use It?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/scaled-agile-framework", "abstract": "Scaled Agile Framework ¬Æ , also known as SAFe ¬Æ , is an enterprise-scale development methodology, developed by Scaled Agile, Inc. SAFe combines Lean and Agile principles within a templated framework. Proponents of SAFe claim that it provides a significant increase in employee engagement, increased productivity, faster times to market, and overall higher quality. In this article, we‚Äôll dive deeper into what, exactly, SAFe is, how it is typically implemented, and both the advantages and disadvantages of using the scaled agile framework methodology throughout the software development life cycle.¬†Let‚Äôs get to it! Some more specific takes on SDLC include: For a visual overview of SAFe , the flowchart on the SAFe homepage is a great tool. Yet, to really understand how SAFe works, we need to dig a bit more into some of the fundamental components. SAFe heavily relies on the core principles of Lean and Agile , which it adapts to form the nine SAFe Lean-Agile Principles : Take an economic view : Delivering the best value and quality to people and society in the sustainably shortest lead time requires a fundamental understanding of the economics of the system builder‚Äôs mission. Apply systems thinking : In SAFe , systems thinking is applied to the organization that builds the system, as well as the system under development, and further, how that system operates in its end user environment. Assume variability; preserve options : Lean systems developers maintain multiple requirements and design options for a longer period in the development cycle. Empirical data is then used to narrow focus, resulting in a design that creates better economic outcomes. Build incrementally with fast, integrated learning cycles : Increments provide the opportunity for fast customer feedback and risk mitigation, and also serve as minimum viable solutions or prototypes for market testing and validation. Base milestones on objective evaluation of working systems : In Lean-Agile development, each integration point provides an objective milestone to evaluate the solution, frequently and throughout the development life cycle. This objective evaluation assures that a continuing investment will produce a commensurate return. Visualize and limit WIP, reduce batch sizes, and manage queue lengths : Three primary keys to implementing flow are to: 1) Visualize and limit the amount of work-in-process so as to limit demand to actual capacity, 2) Reduce the batch sizes of work items to facilitate reliable flow though the system, and 3) Manage queue lengths so as to reduce the wait times for new capabilities. Apply cadence, synchronize with cross-domain planning : Cadence transforms unpredictable events into predictable ones, and provides a rhythm for development. Synchronization causes multiple perspectives to be understood, resolved and integrated at the same time. Unlock the intrinsic motivation of knowledge workers : Providing autonomy, mission and purpose, and minimizing constraints, leads to higher levels of employee engagement, and results in better outcomes for customers and the enterprise. Decentralize decision-making : Decentralized decision-making reduces delays, improves product development flow and enables faster feedback and more innovative solutions. However, some decisions are strategic, global in nature, and have economies of scale sufficient enough to warrant centralized decision-making. Scaled agile framework attempts to incorporate the various lessons from Lean and Agile methodologies into the basic principles, which are then used to bring substantial improvements to time to market, employee engagement, quality, and productivity. An Agile Release Train , or ART , is a fundamental concept within the scaled agile framework. The ART is the primary value delivery method of SAFe . Agile Teams are a small group of individuals focused on defining, building, and testing solutions within a short time frame. An ART is a self-organizing, long-lived group of Agile Teams (a team of teams, if you will), whose purpose is to plan, commit, and execute solutions together. Built around the organization‚Äôs core Value Streams , an Agile Release Train exists solely to deliver on promised value by building beneficial solutions for the customer. Using tools like a common Vision , Roadmap , and Program Backlog , and ART aims to complete goals within a specific period of time, known in SAFe as Program Increments (e.g. a 10 week period). Program Level is another key concept within SAFe . Simply put, the Program Level is where development teams and other resources are applied to an important, ongoing development mission. Most Program Levels ‚Äî such as teams, roles, and activities ‚Äî revolve around a specific ART , ensuring a constant flow of incremental, value-generating releases. There are two other Levels ( Portfolio and Team ) within SAFe , which we‚Äôll discuss in a later section. SAFe focuses on four fundamental, core values: Alignment : Fundamentally, global focus is more valuable than local focus. Individuals on a SAFe team should value the team‚Äôs goals above personal tasks and responsibilities. Extending off that, members of Agile Release Trains should emphasize vision and program objectives over team goals. ARTs should focus on Value Stream objectives over ART objectives. Value Streams focus on value contributions toward the business portfolio. Finally, Management should focus on establishing a mission, but should do so with as few constraints as possible. Built-in Quality : SAFe contains a number of built-in quality practices to help ensure that every element, within each incremental build, is up to the same high standard of quality. Transparency : Large-scale development is a challenge. Transparency establishes trust throughout the project by sharing facts and progress openly across all levels. This extra level of trust enables decentralized decision-making and additional employee empowerment. Program Execution : Each Agile Release Train should predictably generate value. The Program Level within SAFe provides responsibilities and guidance to various member roles within ARTs , to assist with the generation of value. Given the sheer size and scope of SAFe , proper implementation can be rather daunting, especially starting out. Since a full explanation of SAFe implementation would require tens of thousands of words ‚Äî and because more detailed information is available on the official website ‚Äî we‚Äôll cover a brief overview of implementation here: Train Implementers : Due to the sheer scope and challenge required in adopting SAFe , most organizations will need a combination of internal and external mentors and coaches. These people should be capable of easily teaching and delivering SAFe techniques to others throughout the organization. Train Executes, Managers, and Leaders : The initial batch of Implementers should first focus on training all executives, managers, and leaders. Once these fundamental team members understand the Lean-Agile mindset, core SAFe principles, and implementation techniques, the process will become much smoother for the entire organization. Train Teams : Individuals should initially be organized into Agile Teams , who can then all be trained on the various Lean , Agile , and SAFe principles. Launch Agile Release Trains : Finally, once the organization has been properly trained, it‚Äôs time to group Agile Teams together into ARTs , and then generate models for objective planning, program execution, program increment planning, and all the other components required for a successful Agile Release Train . SAFe defines three levels within the organization: Portfolio Level : Focuses on the Portfolio Vision , creating Investment Themes with assigned funding, and makes use of Kanban . Epics are also devised at this level, which contain significant initiatives to help guide value streams toward the larger portfolio goals. Program Level : As we discussed earlier, Program Level focuses on specific business value streams. One key aspect of Program Level is the process of breaking down Epics into smaller features that form the Program Backlog . Team Level : At the Team Level , features from the Program Level are broken down further into Stories , forming the Team Backlog . Scrum is then utilized, over the course of typical iteration lengths (2 weeks), to complete the features of Stories . Regardless of any possible downsides, there are clearly a number of positive benefits to using SAFe : Promotes Lean and Agile practices into traditional corporate organizations : Since SAFe focuses on Lean and Agile principles, this promotes a dramatic cultural shift for many organizations looking to adopt SAFe . While it doesn‚Äôt require actual restructuring within an organization, SAFe does require the creation of ‚Äúvirtual teams,‚Äù who can then be assigned to Agile Teams , and from there to Agile Release Trains , in order to fulfill business goals. Emphasizes short term deliveries : Most traditional organizations may have projects with delivery goals that are months if not years in the future. SAFe focuses on a default period of 10 weeks for most Agile Release Trains , which emphasizes regular feedback loops and adaptive planning. Free of charge : While Scaled Agile , the company behind SAFe , does offer numerous training courses to help individuals or organizations get up to speed on SAFe , at the fundamental level, the use of SAFe is free of charge. Advocates long-lived teams : In many organizations, teams are created only for the length of a single project, after which time they are disbanded. SAFe promotes teams that remain together for long periods of time, scaling as necessary across numerous projects. Suited for large organizations : SAFe focuses heavily on supporting very large organizations, through both the practices and implementation itself, and through the availability of training and courses from SAFe professionals. Emphasizes people over technology : Due to the reliance on Lean and Agile principles, SAFe heavily focuses on the importance of people and their knowledge over technology. This recognition of the power and decision-making skills of individuals often leads to products which are better-suited for the customer. Critics of SAFe will contend that the methodology suffers from a few flaws, and depending on the size and needs of your organization, would argue that other methodologies may better serve you throughout the software development life cycle: Pushes certification and training : The SAFe website, which is basically the only real source of information on SAFe and proper usage, places a heavy focus on pushing certification and training courses to organizations looking to implement SAFe . Many critics maintain that this focus on revenue takes away from the potential growth and implementation of the methodology, compared to other, more open methods. Highly prescriptive : SAFe heavily emphasizes the use of its particular practices and rules, without leaving much room for customization on the part of the organization. This strictness can be rather stifling, unless organizations are willing to swallow the whole SAFe pill. ‚ÄúManager-oriented‚Äù Agile : Many critics argue that SAFe fails to truly implement Agile principles, but instead gives the illusion of true Lean and Agile principles by layering Agile on top of a pre-existing organizational hierarchy. In short, this allows managers and executives to make many of the fundamental decisions that trickle down through Agile Teams and ARTs , which must then be transformed into Stories that are actually implemented by the developers and other team members who truly understand the issues first-hand. SAFe and Scaled Agile Framework are registered trademarks of Scaled Agile, Inc.", "date": "2017-02-24"},
{"website": "Airbrake", "title": "4 Common Rails Errors and How To Fix Them", "author": "Unknown", "link": "https://airbrake.io/blog/rails/4-common-rails-errors-and-how-to-fix-them", "abstract": "All software has errors. Duh. However, some of them occur more than others. As the leading error-tracking service, we have good insight into some of the most common errors in Rails applications. The startup you‚Äôve been working at has just crossed the one million user mark and you can‚Äôt figure out why your servers are using vast amounts of memory. The problem could be the massive queries that worked great when you had a few thousand users, but don‚Äôt cut it with a million+. Here‚Äôs an example to illustrate this point: User.has_subscribed(true).each do |subscriber| subscriber.grant_role(:subscriber) end Imagine that each User object requires 600 bytes. This code is acceptable as long as you have relatively few users. However, having a million users means, at runtime, this code takes up 600MB in memory. A much better alternative would be to use find_each in this way: User.has_subscribed(true).find_each do |subscriber| subscriber.grant_role(:subscriber) end This is because find_each uses find_in_batches, which pulls 1000 records at a time. This dramatically lowers the memory requirements at runtime. Even better, if your code is written in this way from the beginning it will make it much easier to scale as more users begin to use your product. One aspect of continuous integration and agile development is to always look ahead and try to solve problems before they affect your service. Writing code that scales easily is one part of that process. It‚Äôs a tough balance though ‚Äì writing too much in terms of future scalability can actually work to slow your team down. Helper methods are a common way to keep the view layer clean in Rails. However, it‚Äôs very important to know how to create tags inside helpers. This is often done with interpolation or concatenation which leads to messy code: link = ‚Äú<li class=‚Äôhouse_list‚Äô> ‚Äú link += link_to(‚Äú#{house.name.upcase} Listing‚Äù, show_all_styles_path(house.id, house.url_name)) link += ‚Äù </li>‚Äù link.html_safe That‚Äôs ugly and confusing even if you know what it‚Äôs doing. Additionally, code like this creates cross-site scripting (XSS) security holes. Instead, using content_tag can help clean up this mess: content_tag :li, :class => ‚Äòhouse_list‚Äô do link_to(‚Äú#{house.name.upcase} Listing‚Äù, show_all_styles_path(house.id, name.url_title)) end The best solution is to use helper methods that will take blocks. Using nested blocks fits well with nested HTML.¬†The code is easy to follow and it plugs some of those security holes.¬†Continuous deployment means that you, or another programmer, maybe reviewing and revising this code at some point in the near future. That job will be much easier if the code you write now is easy to read and dissect. Rails developers can forget that Rails is just Ruby. They focus on creating MVC-oriented code, which is a good habit that makes reading code much easier, but makes it possible to create objects in ways that Rails may not endorse. One great way to fix this is to create facades for 3rd-party services. This allows you to limit the features of the service to only those you actually need. Additionally, it allows you to build a mock facade for testing purposes. Rather than sending requests to the 3rd-party services, the mock facade can deliver a predefined response. This can also be very helpful with exception tracking and exception handling. The core of any Rails application is the data model. This data will corrode due to bugs in the codebase if you don‚Äôt create schema constraints. We‚Äôll look at two examples of an appointment schema to illustrate this: create_table ‚Äúappointment‚Äù do |t| t.integer ‚Äúuser_id‚Äù t.string ‚Äútitle‚Äù t.string ‚Äúdate‚Äù t.string ‚Äúdescription‚Äù end We‚Äôll presume that an Appointment must have a title and belong_to a User. In the example code below, we‚Äôll use database constraints to guarantee this. Adding :null +> false , ensures the model remains consistent regardless of any bugs that may exist in the validation. This is because the database will not save a model if it fails these constraints: create_table ‚Äúappointment‚Äù do |t| t.integer ‚Äúuser_id‚Äù, :null => false t.string ‚Äútitle‚Äù, :null => false t.string ‚Äúdate‚Äù t.string ‚Äúdescription‚Äù end Another thing to consider would be using :limit => N to restrict the size of string columns. By default, strings can have up to 255 characters. This is quite a few more than you would require for a date or phone number. Have any other common errors you‚Äôve solved several times before? Let me know in the comments!", "date": "2013-08-14"},
{"website": "Airbrake", "title": "Best practices for taking advantage of Airbrake", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/best-practices-taking-advantage-airbrake", "abstract": "*This blog post was prepared by one of Airbrake awesome users; Federico Saravia. At Citrusbyte , we‚Äôve been using Airbrake for years, on a variety of projects, including AT&T mHealth and AT&T M2X . It has made our lives easier from Day 1. Now, we want to share our story and what we have learned along the way to help YOU take full advantage of this awesome service. Errors are a common thing in complex software projects ‚Äî your team can (and should) work hard to squash them before reaching production. But, from time to time, a nasty little bug may make it to production and give you and your users a hard time. Software bugs in production are often really hard to identify, especially because they often have really low visibility due to some the following factors: Your users are the ones stumbling on them and their bug reports are not always accurate enough. They often occur in edge case scenarios and are difficult to reproduce. You may not know exactly when they occurred. You will need to spend long hours looking at logs in order to find a clue into what happened. For this and many other reasons, it seems downright crazy not to use an error service that helps you address these issues and makes it easier for you to find and squash bugs faster and more easily. We chose Aibrake because it has a lot of powerful features that make it really easy to deal with errors and lets us know right away when something goes wrong. Here is how we are using Airbrake to make sure our application is always error free: Whenever an error occurs, everyone in the team gets an email from Airbrake with a brief description that points us to what‚Äôs going on. These are really important because we get to identify and fix an error right away without letting it affect more users. Every error in Airbrake is displayed with a lot of contextual information that can be very valuable to identify what happened, when, and where. We get to know exactly which server is experiencing issues, when the issue started and how many times it occurred. Error reports can also contain additional parameters which are automatically collected by the Airbrake client. These can include things like the whole request context, the server‚Äôs environment and pretty much everything you need to identify exactly what happens. Last but not least, you get the whole backtrace exactly as you will find it in a log file but in a much nicer, easier to read format. Cool, huh? Sometimes, the contextual information collected by default is not enough to identify the problem. You may need to know the value of that exact variable or inspect the whole result from a database query. This is when sending additional parameters can come in handy. Exceptions may be the most common errors but they are not the only thing that can go wrong in an application. What if we just need to be sure all items in a batch job have been processed but can‚Äôt raise an exception when only a couple failed? You can leverage Airbrake‚Äôs client and report almost everything you need. Checkout ‚ÄúUseful custom error messages with Airbrake‚Äù to learn more. Did you find more information about an error and want to share it with the team, or let everyone know how an error was fixed? You can add comments for every occurrence of an error and they will be stored within it, expanding the error‚Äôs contextual information. If you already fixed one or more errors, you can mark them as resolved in the UI ‚Äî this will help you keep things clean and focused on issues that still need resolution. If a resolved error happens again, Airbrake will take care of marking it as unresolved and will send you another notification right away so that you don‚Äôt miss anything. Don‚Äôt want to get notified by email or feel that it isn‚Äôt enough? Take a look at Airbrake‚Äôs available integrations for a list of third party applications and tools to which Airbrake can send reports. You can choose from automatically creating an issue in GitHub to receiving notifications in a Slack channel ‚Äî there is no way you will miss that next error! Airbrake is not only useful for reporting errors that happen on a remote server, you can also use it in your local development environment and have instant access to all the goodies in their UI for debugging an application. Just create a new project, add the token to your local environment et voila! You can even share the full context of a development error with your team in a really easy and useful way. Using Airbrake‚Äôs error service is a real lifesaver when dealing with software errors ‚Äî it takes a common but annoying problem and turns it into something easy to manage and fix. Go ahead and give it a try! They are always happy to receive feedback from their users. ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì Guest author Federico Saravia¬†is a software engineer who works at Citrusbyte. When he‚Äôs not spending time with his family he likes to read books and learn new things. He writes software for fun and profit and from time to time he writes technical articles on the Internet. He likes to spend his free time on the outdoors doing sports or playing with his dogs. Interested in writing for Airbrake¬†Blog? Send us a pitch !", "date": "2015-10-13"},
{"website": "Airbrake", "title": "Domain-Driven Design: What is it and how do you use it?", "author": "Unknown", "link": "https://airbrake.io/blog/software-design/domain-driven-design", "abstract": "Expanding on our previous article that covered Object-Oriented Analysis and Design ( OOAD ), today‚Äôs article will explore domain-driven design ( DDD ). DDD is a software development approach that uses and builds upon OOAD principles and ideas, so it‚Äôs the next logical topic for us to dive into. Throughout this article we‚Äôll examine what domain-driven design is, how it is commonly implemented in modern development life cycles, and consider a few potential advantages and disadvantages of using DDD in your own projects. Let‚Äôs get crackin‚Äô! To define domain-driven design we should first establish what we mean by domain in this context (and in development in general). The common dictionary definition of domain is: ‚ÄúA sphere of knowledge or activity.‚Äù Drilling down a bit from that, domain in the realm of software engineering commonly refers to the subject area on which the application is intended to apply. In other words, during application development, the domain is the ‚Äúsphere of knowledge and activity around which the application logic revolves.‚Äù Another common term used during software development is the domain layer or domain logic , which may be better known to many developers as the business logic . The business logic of an application refers to the higher-level rules for how business objects (see: OOAD ) interact with one another to create and modify modelled data. Initially introduced and made popular by programmer Eric Evans in his 2004 book, Domain-Driven Design: Tackling Complexity in the Heart of Software , domain-driven design is the expansion upon and application of the domain concept, as it applies to the development of software. It aims to ease the creation of complex applications by connecting the related pieces of the software into an ever-evolving model. DDD focuses on three core principles: Focus on the core domain and domain logic . Base complex designs on models of the domain . Constantly collaborate with domain experts , in order to improve the application model and resolve any emerging domain -related issues. Evans‚Äô Domain-Driven Design further defines a few common terms that are useful when describing and discussing DDD practices: Context : The setting in which a word or statement appears that determines its meaning. Statements about a model can only be understood in a context. Model : A system of abstractions that describes selected aspects of a domain and can be used to solve problems related to that domain . Ubiquitous Language : A language structured around the domain model and used by all team members to connect all the activities of the team with the software. Bounded Context : A description of a boundary (typically a subsystem, or the work of a specific team) within which a particular model is defined and applicable. Domain-driven design also defines a number of high-level concepts that can be used in conjunction with one another to create and modify domain models : Entity : An object that is identified by its consistent thread of continuity, as opposed to traditional objects , which are defined by their attributes . Value Object : An immutable (unchangeable) object that has attributes , but no distinct identity. Domain Event : An object that is used to record a discrete event related to model activity within the system. While all events within the system could be tracked, a domain event is only created for event types which the domain experts care about. Aggregate : A cluster of entities and value objects with defined boundaries around the group. Rather than allowing every single entity or value object to perform all actions on its own, the collective aggregate of items is assigned a singular aggregate root item. Now, external objects no longer have direct access to every individual entity or value object within the aggregate , but instead only have access to the single aggregate root item, and use that to pass along instructions to the group as a whole. This practice correlates with many of the actual coding practices we‚Äôre covering in our design patterns series. Service : Essentially, a service is an operation or form of business logic that doesn‚Äôt naturally fit within the realm of objects . In other words, if some functionality must exist, but it cannot be related to an entity or value object , it‚Äôs probably a service . Repositories : Not be confused with common version control repositories , the DDD meaning of a repository is a service that uses a global interface to provide access to all entities and value objects that are within a particular aggregate collection. Methods should be defined to allow for creation, modification, and deletion of objects within the aggregate . However, by using this repository service to make data queries, the goal is to remove such data query capabilities from within the business logic of object models . Factories : As we‚Äôve discussed through a number of design patterns articles already, DDD suggests the use of a factory , which encapsulates the logic of creating complex objects and aggregates , ensuring that the client has no knowledge of the inner-workings of object manipulation. Domain-driven design also heavily emphasizes the ever-more-popular practice of continuous integration , which asks the entire development team to use one shared code repository and push commits to it daily (if not multiple times a day). An automatic process executes at the end of the work day, which checks the integrity of the entire code base, running automated unit tests, regression tests, and the like, to quickly detect any potential problems that may have been introduced in the latest commits. Eases Communication : With an early emphasis on establishing a common and ubiquitous language related to the domain model of the project, teams will often find communication throughout the entire development life cycle to be much easier. Typically, DDD will require less technical jargon when discussing aspects of the application, since the ubiquitous language established early on will likely define simpler terms to refer to those more technical aspects. Improves Flexibility : Since DDD is so heavily based around the concepts of object-oriented analysis and design , nearly everything within the domain model will be based on an object and will, therefore, be quite modular and encapsulated. This allows for various components, or even the entire system as a whole, to be altered and improved on a regular, continuous basis. Emphasizes Domain Over Interface : Since DDD is the practice of building around the concepts of domain and what the domain experts within the project advise, DDD will often produce applications that are accurately suited for and representative of the domain at hand, as opposed to those applications which emphasize the UI/UX first and foremost. While an obvious balance is required, the focus on domain means that a DDD approach can produce a product that resonates well with the audience associated with that domain . Requires Robust Domain Expertise : Even with the most technically proficient minds working on development, it‚Äôs all for naught if there isn‚Äôt at least one domain expert on the team that knows the exact ins and outs of the subject area on which the application is intended to apply. In some cases, domain-driven design may require the integration of one or more outside team members who can act as domain experts throughout the development life cycle. Encourages Iterative Practices : While many would consider this an advantage, it cannot be denied that DDD practices strongly rely on constant iteration and continuous integration in order to build a malleable project that can adjust itself when necessary. Some organizations may have trouble with these practices, particularly if their past experience is largely tied to less-flexible development models, such as the waterfall model or the like. Ill-Suited for Highly Technical Projects : While DDD is great for applications where there is a great deal of domain complexity (where business logic is rather complex and convoluted), DDD is not very well-suited for applications that have marginal domain complexity, but conversely have a great deal of technical complexity. Since DDD so heavily emphasizes the need for (and importance of) domain experts to generate the proper ubiquitous language and then domain model on which the project is based, a project that is incredibly technically complex may be challenging for domain experts to grasp, causing problems down the line, perhaps when technical requirements or limitations were not fully understood by all members of the team.", "date": "2017-04-21"},
{"website": "Airbrake", "title": "403 Forbidden Error: What It Is and How to Fix It", "author": "Unknown", "link": "https://airbrake.io/blog/http-errors/403-forbidden-error", "abstract": "The 403 Forbidden Error is an HTTP response status code , which indicates that the identified client does not have proper authorization to access to the requested content.  As with most HTTP response codes, particularly those that indicate an error, the appearance of a 403 Forbidden Error can be a challenge to properly diagnose and resolve.  With a pool of over 50 potential status codes that represent the complex relationship between the client, a web application, a web server, and often multiple third-party web services, determining the cause of a particular status code can be a challenge under the best of circumstances. In this article we‚Äôll examine the 403 Forbidden Error in more detail by looking at what might cause a message, along with a handful of tips for diagnosing and debugging your own application to find a resolution.  We‚Äôll even examine a number of the most popular content management systems ( CMSs ) for potential problem areas that could cause your own website to be generating a 403 Forbidden Error unexpectedly.  Let‚Äôs dive in! All HTTP response status codes that are in the 4xx category are considered client error responses .  These types of messages contrast with errors in the 5xx category, such as the 502 Bad Gateway Error we looked at last week, which are considered server error responses .  That said, the appearance of a 4xx error doesn‚Äôt necessarily mean the issue is something to do with the client, where the client is the web browser or device being used to access the application.  Oftentimes, if you‚Äôre trying to diagnose an issue with your own application, you can immediately ignore most client-side code and components, such as HTML, cascading style sheets (CSS), client-side JavaScript, and so forth.  This doesn‚Äôt apply solely to web sites, either.  Many smart phone apps that have a modern looking user interface are actually powered by a normal web application behind the scenes; one that is simply hidden from the user. On the other hand, this doesn‚Äôt rule out the client as the actual cause of a 403 Forbidden Error , either.  The client might be trying to access an invalid URL, the browser could be failing to send the proper credentials to the site, and so forth.  We‚Äôll explore some of these scenarios (and potential solutions) down below, but be aware that, even though the 403 Forbidden Error is considered a client error response , it doesn‚Äôt inherently mean we can rule out either the client nor the server as the culprit in this scenario.  In these scenarios, the server is still the network object that is producing the 403 Forbidden Error , and returning it as the HTTP response code to the client, but it could be that the client is causing the issue in some way. As with anything, it‚Äôs better to have played it safe at the start than to screw something up and come to regret it later on down the road.  As such, it is critical that you perform a full backup of your application, database, and so forth, before attempting any fixes or changes to the system.  Even better, if you have the capability, create a complete copy of the application onto a secondary staging server that isn‚Äôt ‚Äúlive,‚Äù or isn‚Äôt otherwise active and available to the public.  This will give you a clean testing ground with which to test all potential fixes to resolve the issue, without threatening the security or sanctity of your live application. As previously mentioned, a 403 Forbidden Error indicates that the client (the web browser, in most cases) is being informed by the server that it does not have proper authorization to access the requested content.  A 403 Forbidden Error can typically occur in one of two scenarios: The client sent its authentication credentials to the server, the server acknowledged that the client is validly authenticated, and yet, the server rejected the authorized client from accessing the requested content for some reason. The requested content is strictly forbidden for all clients, regardless of authorization.  This can occur when attempting to access an invalid or forbidden URL that has been explicitly restricted by the web server software.  For example, Apache servers typically return a 403 Forbidden Error when a client tries to access a URL that corresponds to a file system directory, since providing direct file access is usually a security flaw. Since the 403 Forbidden Error is a client error response code, it‚Äôs best to start by troubleshooting any potential client-side issues that could be causing this error.  Here are a handful of tips to try on the browser or device that is giving you problems. The most common cause of a 403 Forbidden Error is simply inputting an incorrect URL.  As discussed before, many web servers are tightly secured to disallow access to improper URLs that the server isn‚Äôt prepared to provide access to.  This could be anything from trying to access a file directory via a URL to attempting to gain access to a private page meant for other users.  Thus, it‚Äôs a good idea to double-check the exact URL that is returning the 403 Forbidden Error error to make sure that is the exact resource you intend to request. As you may already be aware, HTTP cookies are tiny pieces of data stored on your local device, which are used by websites and applications as a mechanism to ‚Äúremember‚Äù information about this particular browser and/or device.  Most modern web apps take advantage of cookies to store user authentication status, which can be used to easily inform the web application which user is currently active, and what kind of authorization the current client (browser) should be granted. Thus, when a 403 Forbidden Error occurs ‚Äî which often indicates the client has not been authenticated to perform the particular request ‚Äî the first consideration should be a problem with invalid or corrupted cookies, causing improper authentication for the server.  In most cases, you only need to concern yourself with cookies that are relevant to the website or application causing the problem.  Cookies are stored based on the domain where the application is located, so you can explicitly remove only cookies that match the website domain (e.g. airbrake.io ) to keep most other cookies in tact.  However, if you aren‚Äôt experienced with manually removing certain cookies, it‚Äôs much easier and safer to clear all cookies at once. Clearing cookies can be accomplished in different ways, depending on the browser you‚Äôre using: Google Chrome Internet Explorer Microsoft Edge Mozilla Firefox Safari Just like cookies, it‚Äôs also possible that the local browser cache could be causing the 403 Forbidden Error to appear.  Cache is just a collection of storage dedicated to retaining local copies of web content on your device for later use.  A browser‚Äôs cache can include just about any type of data, but it is typically used to store compressed snapshots of webpages you frequently visit, including images and other binary data your browser often accesses.  With a local copy of these resources on your device, your browser doesn‚Äôt need to spend the time or bandwidth to explicitly download this identical data every time you return to the same page.  For example, every time you open up Facebook, a large portion of page you‚Äôre seeing has already been loaded during a previous visit, and that content was cached and stored on your local device. Since your browser‚Äôs cache stores local copies of web content and resources, it‚Äôs possible that a change to the live version of your application is conflicting with the cached version already on your device, which can sometimes produce a 403 Forbidden Error as a result.  Try clearing your browser‚Äôs cache to see if that fixes the issue. As with cookies, clearing the cache is browser-dependant, so here are a few links to that relevant documentation for the most popular browsers: Google Chrome Internet Explorer Microsoft Edge Mozilla Firefox Safari If the application you‚Äôre using has some form of user authentication, the last client-side step to try is to log out and then log back in.  If you‚Äôve recently cleared the browser cookies, this should usually log you out automatically the next time you try to load the page, so feel free to just try logging back at this point, to see if things are working once again.  In some situations, the application may be running into a problem with your previous session , which is just a string that the server sends to the client to identify that client during future requests.  As with other data, the session token (or session string ) is stored locally on your device in the cookies and is transferred by the client to the server during every request.  If the server doesn‚Äôt recognize the session token being sent by the client, or something has gone wrong with the server that indicates that particular token is invalid, you may see a 403 Forbidden Error as a result. For most web applications, logging out and logging back in will force the local session token to be recreated. If you‚Äôre running common software packages on the server that is responding with the 403 Forbidden Error , you may want to start by looking into the stability and functionality of those platforms first.  The most common content management systems ‚Äî like WordPress, Joomla!, and Drupal ‚Äî are all typically well-tested out of the box, but once you start making modifications to the underlying extensions or PHP code (the language in which nearly all modern content management systems are written in), it‚Äôs all too easy to cause an unforeseen issue that results in a 403 Forbidden Error . Here are a few tips to help you troubleshoot some of these popular software platforms: If you recently updated the content management system itself just before the 403 Forbidden Error appeared, you may want to consider rolling back to the previous version you had installed when things were working fine.  Similarly, any extensions or modules that you may have recently upgraded can also cause server-side issues, so reverting to previous versions of those may also help.  For assistance with this task, simply Google ‚Äúdowngrade [PLATFORM_NAME]‚Äù and follow along.  In some cases, however, certain CMSs don‚Äôt really provide a version downgrade capability, which indicates that they consider the base application, along with each new version released, to be extremely stable and bug-free.  This is typically the case for the more popular platforms, so don‚Äôt be afraid if you can‚Äôt find an easy way to revert the platform to an older version. Depending on the particular content management system your application is using, the exact name of these components will be different, but they serve the same purpose across every system: improving the capabilities and features of the platform beyond what it‚Äôs normally capable of out of the box.  But be warned: such extensions can, more or less, take full control of the system and make virtually any changes, whether it be to the PHP code, HTML, CSS, JavaScript, or database.  As such, it may be wise to uninstall any new extensions that may have been recently added.  Again, Google the extension name for the official documentation and assistance with this process. It‚Äôs worth noting that, even if you uninstall an extension through the CMS dashboard, this doesn‚Äôt guarantee that changes made by the extension have been fully reverted.  This is particularly true for many WordPress extensions, which are given carte blanche within the application, including full access rights to the database.  Unless the extension author explicitly codes such things in, there are scenarios where an extension may modify database records that don‚Äôt ‚Äúbelong‚Äù to the extension itself, but are instead created and managed by other extensions (or even the base CMS itself).  In those scenarios, the extension may not know how to revert alterations to database records, so it will ignore such things during uninstallation.  Diagnosing such problems can be tricky, but I‚Äôve personally encountered such scenarios multiple times, so your best course of action, assuming you‚Äôre reasonably convinced an extension is the likely culprit for the 403 Forbidden Error , is to open the database and manually look through tables and records that were likely modified by the extension. If the application was working fine before and suddenly this error occurs, permissions are not a very likely culprit.  However, if modifications were recently made (such as upgrades or installations), it‚Äôs possible that file permissions were changed or are otherwise incorrect, which could cause an issue to propagate its way throughout the application and eventually lead to a 403 Forbidden Error .  The vast majority of servers use Unix-based operating systems, so have a look here , or elsewhere on the web, for more information on setting up proper permissions for application files and directories to keep things secure, while also allowing your application access where it‚Äôs needed. Above all, Google is your friend.  Don‚Äôt be afraid to search for specific terms related to your issue, such as the name of your application‚Äôs CMS, along with the 403 Forbidden Error .  Chances are you‚Äôll find someone (or, perhaps, many someones) who have experienced this issue and have potentially been provided a solution. If you aren‚Äôt running a CMS application ‚Äî or even if you are, but you‚Äôre confident the 403 Forbidden Error isn‚Äôt related to that ‚Äî here are some additional tips to help you troubleshoot what might be causing the issue on the server-side of things. Most modern web servers provide one or more configuration files that allow you to easily adjust the server behavior, based on a wide range of circumstances.  For example, the server may be configured to reject requests to certain directories or URLs, which could result in a 403 Forbidden Error . Configuration options for each different type of web server can vary dramatically, so we‚Äôll just list a few popular ones to give you some resources to look through, depending on what type of server your application is running on: Apache Nginx IIS Node.js Apache Tomcat Nearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, such as which pages were requested, which servers it connected to, which database results it provides, and so forth. Server logs are related to the actual hardware that is running the application, and will often provide details about the health and status of all connected services, or even just the server itself.  Google ‚Äúlogs [PLATFORM_NAME]‚Äù if you‚Äôre using a CMS, or ‚Äúlogs [PROGRAMMING_LANGUAGE]‚Äù and ‚Äúlogs [OPERATING_SYSTEM]‚Äù if you‚Äôre running a custom application, to get more information on finding the logs in question. Since the presence of a 403 Forbidden Error may indicate that the client was properly authenticated, but isn‚Äôt being provided access to the requested resource by the server for whatever reason, it‚Äôs worth checking on the server side for any reason this might be happening.  For example, check the database for proper user authentication, if applicable, to make sure the client is actually being authenticated as the intended user. While it may sound simple, it‚Äôs entirely possible that a 403 Forbidden Error simply indicates that a server somewhere in the chain is down or unreachable for whatever reason.  Most modern applications don‚Äôt reside on a single server, but may, instead, be spread over multiple systems, or even rely on many third-party services to function.  If any one of these servers are down for maintenance or otherwise inaccessible, this could result in an error that appears to be from your own application. If all else fails, it may be that a problem in some custom code within your application is causing the issue.  Try to diagnose where the issue may be coming from through manually debugging your application, along with parsing through application and server logs.  Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 403 Forbidden Error occurred and view the application code at the moment something goes wrong.", "date": "2017-10-12"},
{"website": "Airbrake", "title": "Create a Serverless Twitter Bot with Airbrake and AWS Lambda ‚Äì Part 3", "author": "Unknown", "link": "https://airbrake.io/blog/nodejs/serverless-twitter-bot-airbrake-lambda-part-3", "abstract": "In Part 1 of this series we setup our development environment, created our twitter-bot project, integrated it with the Twitter API so it could send out programmatic tweets, and performed a basic Atom feed retrieval for some actual content to tweet.  In Part 2 we integrated Airbrake‚Äôs Node.js software to handle automatic error reporting, plus, we also started the AWS Lambda integration. Today, we‚Äôll finish up this series and project by completing the integration into AWS Lambda by packaging our application code, uploading it to AWS Lambda, creating functions and handlers, testing, and eventually getting a fully automated, error-managed, serverless Twitter bot running, so let‚Äôs get to it! AWS Lambda allows us to write code directly within the Lambda dashboard, but we must ensure that all dependencies that our Node.js application relies upon are included and available to AWS Lambda.  Therefore, the solution is to package our entire project directory into a zip file, which we can then upload directly to AWS Lambda.  This will ensure that the node_modules directory is included with our index.js , along with all other application code. Navigate to your project directory in the console and enter the following command: To create an AWS Lambda function, start by navigating to the AWS Lambda console and then click Create Function . Make sure Author from scratch is selected, since we‚Äôll be using our own custom code and exported handler .  For this example I‚Äôve named my function airbrake-article-twitter-bot . For the Runtime dropdown you‚Äôll want to use the latest version of Node.js , or the one closest to your own version.  At the time of writing Node.js 6.10 is the latest supported version. If this is your first Lambda function you‚Äôll likely need to Create a new role from template(s) in the Role dropdown.  Then enter a descriptive Role name , such as airbrakeArticleTwitterBotRole .  For this basic bot we don‚Äôt need any advanced permissions, so leave Policy templates blank and click Create function . Once created you‚Äôll be looking at the airbrake-article-twitter-bot function dashboard, which includes the Designer panel, where a graphical layout of your function is displayed.  Below that is the Function code screen, which includes a default handler function.  From there, most of the sections can be ignored for now. To upload the zip package we created simply click on the Function code > Code entry type dropdown box and select Upload a .ZIP file , then click Upload and select the twitter-bot.zip file. Next, we need to tell AWS Lambda which particular handler function it should invoke when executing this function, so we‚Äôll change Function code > Handler to index.tweetHelloWorld .  The index portion is the name of the app file ( index.js ), and the second portion is the handler function.  Now click Save at the top right and the zip will be uploaded! Our code is uploaded and ready to go, but we need to actually tell AWS Lambda when and how to invoke our handler function.  In this case, it‚Äôs easiest to start with a manual execution test. Click the Test button at the top right, select Create new test event , choose Hello World from the Event template dropdown, then enter any Event name you wish and click Create .  The actual parameters of the test aren‚Äôt relevant to this particular example, but feel free to change them before creating your test. Now your new test will be selected in the test dropdown, so just click the Test button and this will invoke the AWS Lambda function, which will call the handler function in your code ( index.tweetHelloWorld , in this case). Once execution completes you‚Äôll see the result dialog at the top, which can be expanded for more detail.  In this case, the function result shows: And the log output, which is automatically tracked by AWS Lambda and stored in Amazon CloudWatch Logs, shows: As expected, our tweet was successfully created by AWS Lambda and shows up on the AirbrakeArticles Twitter page ! As you may recall from before, trying to send out a second, identical tweet results in a rejected request from the Twitter API, which indicates that the status is a duplicate.  Therefore, this is a great opportunity to test our Airbrake-JS integration with AWS Lambda.  To do so just execute the same Test once again, which will invoke the index.tweetHelloWorld handler a second time and attempt to tweet \"Hello World\" again. As expected, the result of execution in AWS Lambda is: The log output confirms the issue: Most importantly, looking over at the Airbrake project dashboard for our twitter-bot Node project immediately displays a Status is a duplicate. error, with all the same detailed contextual information that we saw previously from when this error occurred in our local development environment. While this is cool so far that we‚Äôre able to use AWS Lambda to execute our Node.js application code, it‚Äôs not very useful unless execution can be triggered from another event.  There are many possible ways to trigger Lambda functions, but we‚Äôll keep it simple by setting up a schedule.  To add a scheduled trigger, open the Designer panel in the airbrake-article-twitter-bot dashboard and select CloudWatch Events .  This will add CloudWatch Events to the trigger side of the visual display, while also opening the Configure triggers panel where you‚Äôll actually specify how the trigger will behave. Select Create a new rule from the Rule dropdown and enter a descriptive name.  For testing purposes we‚Äôll be creating a trigger that occurs once a minute, so we‚Äôll name this rule every-minute .  We can now specify the schedule in the Schedule expression box, using Cron or rate expressions.  We don‚Äôt need anything complex, so we‚Äôll just use rate(1 minute) to trigger this function every 60 seconds.  Finally, you may want to uncheck Enable trigger for now, so the trigger won‚Äôt be enabled until you do so yourself.  Click Add to create the trigger. We also want to change the handler function that is being executed to something that won‚Äôt automatically produce an error.  To modify our function code again just click on the visual airbrake-article-twitter-bot box in the Designer panel.  Under Function code > Handler enter index.tweetTime , then click Save .  If you want to manually test the function again you can click Test and ensure the result is successful: Our goal is to schedule the function to trigger on its own, so select CloudWatch Events in the Designer panel, Enable the every-minute trigger, then click Save to confirm the changes.  Now. we just sit back and wait a minute or two and we‚Äôll have an automatically scheduled trigger causing our AWS Lambda function to execute, which will generate a tweet of the current time every minute.  We can confirm this either by checking for the produced tweets , or open the CloudWatch Logs page on AWS Lambda: Note: If you are experiencing timeout errors indicating that the AWS Lambda function concluded before execution completed, you may need to increase the timeout period under the Basic settings panel. Now that we know everything works as expected, the last step is to use the tweetRandomArticle handler for our AWS Lambda function, and to modify the schedule to something more appropriate.  We‚Äôll begin by testing that the handler works as expected and actually retrieves and posts a random article.  After changing the handler field to index.tweetRandomArticle and clicking Save we‚Äôll check the logs and our AirbrakeArticles Twitter account. Sure enough, it works as expected and a random article was retrieved and tweeted automatically !  Plus, when our bot inevitably chooses a random article that is a duplicate from a previous recent tweet, Airbrake catches and reports the error immediately. The article retrieval process isn‚Äôt very efficient, so we don‚Äôt want to execute this all that often.  Therefore, we‚Äôll change our schedule trigger to occur once every twelve hours, but otherwise we‚Äôre all set.  We now have a fully functional, serverless Twitter bot written with Node.js and automatically triggered and executed within AWS Lambda!", "date": "2018-01-04"},
{"website": "Airbrake", "title": "Behavioral Design Patterns: Template Method", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/template-method-design-pattern", "abstract": "Today we‚Äôll take a look at the template method design pattern , which is the final design pattern introduced in the well-known book 1994, Design Patterns: Elements of Reusable Object-Oriented Software .  We‚Äôve covered all other patterns thus far in our detailed Guide to Software Design Patterns series, with both real world and fully functional C# code samples of each, illustrating how the patterns can be used and implemented in your own code. The template method design pattern is intended to outline the basic structure or ‚Äúskeleton‚Äù of an algorithm, without explicitly defining (or advertising) the logic of each step within the overall structure to the client.  This pattern is ideal for complex algorithms that must be shared and executed by multiple classes, where each class must define their own specific implementation. Let‚Äôs get to exploring the template method pattern with both a real world example, as well as a functional C# sample! In terms of components, the template method design pattern is one of the simplest patterns we‚Äôve examined, as it includes only two parts: AbstractClass ‚Äì Defines a series of primitive operations , many of which inheriting ConcreteClasses must implement.  These operations are executed within the TemplateMethod , which is the primary method of the AbstractClass that is invoked by each instance of the ConcreteClass .  This TemplateMethod performs all the necessary operations ( primitive operations ) that makeup the main algorithm. ConcreteClass ‚Äì Each ConcreteClass implements all the primitive operation methods that were declared in the AbstractClass .  When the client creates a new ConcreteClass instance, the TemplateMethod is invoked, which executes all primitive operations specific to this ConcreteClass implementation. Since the entire purpose of the template method is to define a TemplateMethod that invokes a particular algorithm (i.e. a series of method calls), this pattern is frequently used in the real world, where a step-by-step process is required to complete a complex task.  For example, let‚Äôs consider what might be required to get a new TV show up and running on a broadcast network or streaming service.  I‚Äôm no expert, but from a layman‚Äôs perspective we might assume that broadcasting a new show requires these steps, in roughly the following order: Write a script. Pitch the script to a network. Cast some actors. Shoot the pilot. Determine the best broadcast time slot. Broadcast! Now, undoubtedly some of these steps can occur at different points in the process, but, generally speaking, most of the time pitching will occur after a script as written, as will casting actors.  Certainly, the pilot episode cannot be shot if there are no actors nor a network to help with production. Given that the process of creating and broadcasting a show is more or less an ordered ‚Äúalgorithm‚Äù, it‚Äôs a perfect example of the template method design pattern in real life.  The above steps are fairly generic and ordered, but the exact implementation of them will vary, depending on factors like the type of show, the network involved, how it is broadcast, and so forth.  Thus, each particular network acts as a unique ConcreteClass , implementing all the primitive operation steps to produce and broadcast a show that we see above, but doing so in their own way. Below is the full code sample we‚Äôll be using in this article.  It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Our sample code continues with the television show example.  Specifically, we want to be able to broadcast a Show ( AbstractClass ), but doing so will depend on the particular NetworkShow ( ConcreteClass ) that inherits from Show .  The Show class has a single Broadcast() method, which acts as the TemplateMethod that invokes all the various primitive operations required to actually get the show created and broadcast. Thus, we begin with the Show ( AbstractClass ): As mentioned, the Broadcast() method is the TemplateMethod that will be invoked by all object instances, so we see that it invokes a series of methods to accomplish this ‚Äî everything from WriteScript() to AssignBroadcastSlot() .  Once complete, it outputs a confirmation with formatted details of the Show that is being Broadcast() . It‚Äôs also worth noting that a few #regions are defined, just to illustrate the different method types we can use.  For this example, we‚Äôve only chosen to explicitly implement the AssignBroadcastSlot() and FindNetwork() methods within all subclasses, so setting these to abstract will force this behavior.  Meanwhile, any methods we want to allow a default behavior for ‚Äî such as CastActors() , ShootPilot() , and WriteScript() ‚Äî are virtual methods, so they have their own base logic, which can be overriden if necessary. To help handle the day of the week and time slot requirements for Shows that may need it, we‚Äôve also created the helper BroadcastSlot class: The comments outline most of the functionality here, but the basic purpose is to allow each Show instance to specify whether it‚Äôs broadcast at a particular time on a specific day of the week, like most network shows, or whether it‚Äôs always available on a streaming service (such as YouTube or Netflix).  As we‚Äôll see in a moment, a new instance of BroadcastSlot is created within each NetworkShow ( ConcreteClass ) implementation‚Äôs AssignBroadcastSlot() method, and then assigned to the Show.BroadcastSlot property. Speaking of ConcreteClasses , now let‚Äôs take a look at the three different NetworkShow implementations we‚Äôve defined for this example, covering the networks of NBC , Netflix , and YouTube : As previously discussed, we‚Äôve chosen to only require that two of our primitive operation methods be overriden, AssignBroadcastSlot() and FindNetwork() , since these operations will significantly change depending if the show is on a regular broadcast network or on an online streaming service. Of particular note is the NBCShow(string name, DayOfWeek day, int hour, int minute = 0) constructor method, which forces the client to specify a broadcast day and time slot when creating a new NBCShow .  On the other hand, the YouTubeShow(string name) and NetflixShow(string name) constructor methods only require the Show.Name property to be specified, since the BroadcastSlot for both streaming services has a Type property set to SlotType.Streaming .  This ensures that the Show has no specific day of the week or time slot for broadcast, since such shows can be watched anytime.  Other than that, the FindNetwork() method just assigns the Show.Network property. Obviously, further refinement of this example might include refactoring the current default methods like CastActors() , but the above should properly illustrate the purpose and setup of the template method design pattern . Now, to test all this out with client code we‚Äôre creating just a handful of shows, one for each NetworkShow ( ConcreteClass ) implementation: We start with The Office , which was on NBC and (mostly) aired on Thursdays at 9PM.  As we saw above, the NBCShow class requires that a day of the week,  hour, and optional minute be specified in its constructor, so that‚Äôs where we pass the data indicating when the show will broadcast.  Once a new instance is created, we simply call theOffice.Broadcast() , which is the main TemplateMethod of all Shows .  This invokes all underlying primitive operations and gets our show on the air!  The output this produces can be seen below: As intended, we see an output message for each primitive operation method that was invoked by Broadcast() , along with a final message from Broadcast() itself that summarizes the show, the network, and when it broadcasts. We‚Äôre also creating and broadcasting Computerphile on YouTube, and Stranger Things on Netflix.  Both of these networks are streaming services, so we don‚Äôt need to specify a time slot.  This is confirmed with the output from executing both of these show creations: There we have it!  Hopefully this article provided a bit of insight into the purpose and implementation of the template method design pattern .  With that, our series comes to a close, but, for more information on all the other popular design patterns, head on over to our detailed design pattern series here !", "date": "2017-10-03"},
{"website": "Airbrake", "title": "Behavioral Design Patterns: State", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/behavioral-design-patterns-state", "abstract": "As we approach the end of our thorough Guide to Software Design Patterns series we‚Äôll be looking into the state design pattern .  The state pattern allows you to programmatically change the behavior of a class based on changes made to the underlying state of said class.  In this article we‚Äôll look at both a real world example and a fully-functional C# code sample of the state design pattern , so let‚Äôs get to it! The state pattern consists of three basic components: Context ‚Äì The base object that will contain a State object, indicating what state (and therefore what behavior) is currently implemented. State ‚Äì An interface or abstract class defining the basic characteristics (methods, properties, etc) of all ConcreteState objects. ConcreteState ‚Äì These individual classes implement the base State interface/abstract class.  Each ConcreteState can implement its own logic and behavior, which will affect the Context instance when it is assigned to a particular ConcreteState . As you can start to see, the purpose of the state design pattern is to allow Context objects to adjust their behavior solely because of the change of the current ConcreteState(s) that may be applied.  While this sort of logic can be performed with traditional if-else control statements, it‚Äôs far cleaner to apply State objects to a Context object, so said Context doesn‚Äôt need to be aware of how the State logic is implemented. In the real world, this can be seen all over, particularly in digital services and technologies.  For example, consider making a purchase with your debit card, or depositing money into that same checking account.  Behind the scenes, it‚Äôs likely that your account behaves as a Context object, with various ConcreteStates assigned to it, dependent on the characteristics of your account.  If your bank has a minimum balance requirement before your account accrues interest, this change in behavior could be easily handled with a handful of ConcreteState objects.  When your balance meets or exceeds the minimum balance threshold, the state of your account changes, and additional behaviors (such as applying interest) may be automatically put into action. Below is the full code sample we‚Äôll be using in this article.  It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Our code sample continues with the bank account example, since just about everyone will have experience with the mechanics of depositing and withdrawing from a simple checking account.  We start with the Context object, since this is the element upon which the entire state system is based.  In this case, our Context object is the Account class: As you can see, the Account class performs the basic functions: depositing money, withdrawing money, and accruing interest on the current balance.  However, to accomplish these actions and change the behavior, we need the underlying AccountState object, which each Account tracks and changes for itself, as necessary: AccountState is the base State object of our state pattern example, as it defines all the base properties and methods that each inherited ConcreteAccountState object will require.  With the base AccountState abstract class in place, we can start implementing some specific ConcreteAccountStates , starting with the ZeroInterestAccountState : Everything works as you might expect, but it‚Äôs worth noting the TryStateChange() method that is invoked inside every other major method call.  This is where this specific ConcreteState object determines if the assigned Account.AccountState should be changed to a different state or not.  In this case, if the balance falls below the LowerLimit of $0 , we want to be sure the account is now considered overdrawn.  On the other hand, if the balance exceeds the UpperLimit of $1,000 , the account should start accruing interest. Now, the TryStateChange() method and logic could be placed within the base AccountState object, but keeping it separated, and inside each individual ConcreteAccountState class, ensures that each class can have distinctly specific logic and behavior in the future, regardless of what other states may be doing.  It‚Äôs also likely that in real-world code we‚Äôd opt to implement all the various calls to the TryStateChange() method in a more elegant manner, perhaps by linking all Withdraw , Deposit , and similar methods to an event , that could then ensure TryStateChange() logic is invoked when appropriate.  But, for our purposes, this simple setup will suffice. Next we have the InterestAccountState which, as we just saw, is applied when the balance exceeds $1,000 : For the most part, the behavior is the same here as with the ZeroInterestAccountState class, except calling AccrueInterest() actually calculates and adds the applied interest, based on the current interest rate, to the Account.Balance . Finally, the OverdrawnAccountState class is for Accounts with a Balance below $0 : No interest can be accrued, nor can any withdrawals be made, so any attempt to do so issues a warning indicating a lack of funds. To tie everything together and test it out we just create a new Account , then perform some deposits: This produces two outputs, indicating the deposited values, along with the current Balance and AccountState : Since we haven‚Äôt exceeded the $1,000 minimum to start earning interest, Alice's account remains in the ZeroInterestAccountState .  However, let‚Äôs try depositing a few more times, so the Balance exceeds that limit: Sure enough, the AccountState automatically changes to the InterestAccountState : Now we can successfully accrue some interest on the account: Finally, let‚Äôs try withdrawing far more than the account contains.  We‚Äôll start with $2,500 , which succeeds because, even though the total Balance is only 2,420.25 , an OverdrawnAccountState is allowed to go all the way down to the LowerLimit of -$1,000 : This puts Alice in the negative: Now let‚Äôs try another withdrawal of over $1,000 on her already overdrawn account, and see what happens: As expected, no action is taken and alert is given, indicating the severe lack of funds: That‚Äôs the gist of it!  I hope this article gave you a bit more information on what the state design pattern is, and how it can be easily implemented in your own code.  For more information on all the other popular design patterns, head on over to our ongoing design pattern series here !", "date": "2017-09-25"},
{"website": "Airbrake", "title": "What is the Runtime Broker Application?", "author": "Unknown", "link": "https://airbrake.io/blog/what-is/runtime-broker", "abstract": "The Runtime Broker application is a Microsoft program included with Windows 8 (and newer versions) that handles permissions for all local Universal Windows Platform ( UWP ) applications.  Normally, the Runtime Broker application is completely harmless and can be left alone to do its thing.  However, in some rare instances you may be experiencing slowdown on your computer, only to find that RuntimeBroker.exe is using an abundance of memory and/or an excess of CPU time. In this article we‚Äôll explore exactly what the Runtime Broker application is, examining not only what it does, but why it might be affecting computer performance in some scenarios.  Let‚Äôs get to it! To understand the purpose of the Runtime Broker app we need to first briefly explore what the Universal Windows Platform ( UWP ) is.  Put simply, the UWP is an application design and programming framework created by Microsoft that attempts to make it easy to create applications compatible with any Windows-based device.  This includes not just desktop PCs, but also Windows phones and even the Xbox One gaming console.  To accomplish this, the UWP supports a wide variety of screen displays, creating dynamic applications using a common API and in-depth extension software development kits ( SDKs ). Each UWP application must also includes a Package.appxmanifest file that informs the application how to be packaged up into a distributable format known as AppX .  This manifest configures a great deal about the application ‚Äî everything from the application name, supported screen configurations, visual assets, built-in functionality declarations, packaging requirements, and also the list of system features and devices the application should have access to.  This manifest is written in a simple XML file, a sample of which can be seen below for the MyTestApplication app we‚Äôll use in just a moment: The last feature of the app manifest file ‚Äî these system and device permissions ‚Äî are particularly important to the Runtime Broker application.  These UWP application capabilities are what Runtime Broker manages, ensuring that all UWP apps only have all appropriate permissions and necessary access to your local computer.  As it happens, the list of requested capabilities (permissions) of the MyTestApplication app can be seen in the final section of the XML above, in the <Capabilities> element. The purpose of Runtime Broker is to monitor and manage all permissions granted to running UWP applications.  If you‚Äôve ever opened the Windows Store , or launched any UWP application from a built-in start menu ‚Äútile‚Äù, chances are this application has used the Runtime Broker to verify its proper permissions and capabilities . As such, the Runtime Broker application is typically idling with no CPU usage and low memory usage (just a dozen or so megabytes).  However, in some scenarios, Runtime Broker may experience significant spikes in CPU and/or memory usage, as a result of a currently monitored or recently launched UWP application. To illustrate how Runtime Broker might experience varying performance let‚Äôs look at the simple MyTestApplication UWP app that we created.  We‚Äôre using Visual Studio 2017 to create a new UWP application, which includes a few default files.  We already looked at our modified Package.appxmanifest XML file above, so the only other code we‚Äôve altered from the default is in the App.xaml.cs : For testing purposes we‚Äôve added the CreateFile(string name, char character = 'a', int characterCount = 100_000_000) method, which uses asynchronous methods to create a new text file in the application‚Äôs temporary folder on our local drive.  It then writes a number of characters to the file to give it some content, then returns the resulting file within our infinite while (true) loop, adding said file to the List<StorageFile> Files class property.  We‚Äôre just trying to give our application some behavior to repeat while it‚Äôs running, to see if this impacts Runtime Broker's performance in anyway. As shown above, we‚Äôve also explicitly selected every single capability available to our application, which indicates that our application needs permissions and access to all sorts of local machine features and devices, from bluetooth and contacts to the music library and VOIP calling.  Since Runtime Broker handles the permissions for all these capabilities , we want to make sure our application requires as much work as possible from Runtime Broker . With everything setup, we can test the performance of Runtime Broker by running a performance monitor of the active RuntimeBroker.exe process.  This allows us to track various performance metrics over time, including the current CPU usage of RuntimeBroker.exe .  Even for unmanaged code applications like this (which simply means an application that is running as an executable or DLL , rather than within Visual Studio) we can see from this performance report how much CPU time is being used. While monitoring the performance of Runtime Broker we then launch the MyTestApplication app and look at the CPU usage: Don‚Äôt worry if this table doesn‚Äôt make too much sense.  What‚Äôs important is that the top row shows the RuntimeBroker.exe process that we‚Äôre monitoring, and the total number of CPU cycles that were used during our monitoring.  Below that, each !0x00... entry is an internal function call that RuntimeBroker.exe executed, showing how many CPU cycles it uses.  Most importantly, the last column shows the Total of All CPU (%) used by each function during monitoring.  As we can see, in total the execution of MyTestApplication with all capabilities used approximately 13.5% of all CPU usage during the brief period of time while it was initially launching.  This indicates that Runtime Broker is only performing permission checks when our UWP application first loads, which is logical since that‚Äôs when it needs to grant or deny system access. Interestingly, there seems to be some form of in-memory (or local) storage of recent permissions that Runtime Broker has already granted to an application.  We can conclude this because, if we shut down our MyTestApplication app and then relaunch it without making any changes or altering Runtime Broker in anyway, Runtime Broker doesn‚Äôt seem to notice MyTestApplication or process anything at all.  Here‚Äôs the performance report from relaunching MyTestApplication with all capabilities a second time: Note that the 100.00 % isn‚Äôt the amount of total CPU that was used.  Instead, we see absolutely no internal function calls executed by RuntimeBroker.exe , so it was just running its main threads and waiting for some event indicating that it should perform some processing.  Yet, again, for some reason it doesn‚Äôt process the relaunching of MyTestApplication a second time, presumably because it‚Äôs somehow keeping track of permissions in memory or a local file.  Nothing critical to note, but somewhat interesting. By comparison, let‚Äôs take a look at a proper and efficiently-written UWP application.  Below we can see the RuntimeBroker.exe CPU usage profile while launching the official Netflix UWP application: Likely because the Netflix app requires far fewer capabilities (permissions), there are far fewer internal function calls made.  Additionally, total CPU usage is much lower than we saw with MyTestApplication , clocking in around 4.25% at peak CPU usage during initial load. While neither of our UWP test applications above produced any unexpected CPU or memory usage from Runtime Broker , it‚Äôs entirely possible that you could experience such issues if your system is running an inefficient or buggy UWP application.  You can check Runtime Broker's performance by opening the Task Manager ( Ctrl + Shift + ESC ) and scrolling down to Runtime Broker .  If the CPU usage is consistently above ~1 ‚Äì 5%, or memory usage is frequently above ~100 MB, you may be experiencing a problem with an active UWP application. The resolve this, the first thing to try is simply restarting your computer.  This will force Runtime Broker (and any associated applications) to reload, and may fix the problem. Another potential fix was recommended by Reddit user /u/owldyn in this post : Press the Start Menu key, type Settings , and hit Enter . Open System . Select Notifications & actions on the left. Under the Notifications header, check if Get tips, tricks, and suggestions as you use Windows is selected.  If so, turn that option Off .  This may reportedly fix high CPU usage of Runtime Broker . The only other potential resolution is to find the particular UWP application that is causing the trouble.  This can only really be done through guesswork and trial & error.  To see what UWP applications you have on your computer follow these steps (for Windows 10): Press the Start Menu key, type Store , and hit Enter . Click the ellipses ( ... ) at the top right of the Windows Store application and select My Library from the dropdown. The list of applications under the topmost Apps category shows all the UWP applications currently installed on your system. Pick one of these listed applications you think might be the cause of your Runtime Broker issue and, if you know how, close it down manually. If you don‚Äôt know how to close the application or it‚Äôs not responding, open the Task Manager ( Ctrl + Shift + ESC ) and locate the application process here, then manually close it with End Task . Repeat until the problematic UWP application is located.", "date": "2017-10-17"},
{"website": "Airbrake", "title": "Airbrake Python Integrations Release", "author": "Unknown", "link": "https://airbrake.io/blog/uncategorized/airbrake-python-integrations-release", "abstract": "We‚Äôre proud to announce a new library to make it easier to use airbrake with Python. Airbrake Python Integrations is now the home for integrations built on top of our core Python notifier library . This initial release includes integrations for three major Python projects: Django, Flask, and Twisted. We‚Äôre excited to work with the community to improve and expand the library. For example, to use Airbrake with Flask: Make sure the airbrake configuration variables are set: Then import and use the library! Version 2.1.0 of our core Python notifier library, airbrake-python, was also released recently. We added support for sending top-level uncaught exceptions by default and fixed a number of bugs. As always, pull requests are more than welcome, and much appreciated.", "date": "2017-09-22"},
{"website": "Airbrake", "title": "Behavioral Design Patterns: Strategy", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/strategy-design-pattern", "abstract": "Next up in our in-depth Guide to Software Design Patterns series we‚Äôll dig into the strategy design pattern .  The strategy pattern is ideal when code should programmatically determine which algorithm, function, or method should be executed at runtime . In this article we‚Äôll look into a real world example of the strategy design pattern , along with a fully-functional C# code sample illustrating how that pattern can be implemented, so let‚Äôs get to it! The strategy pattern , which is sometimes called a policy pattern , consists of three basic components: Strategy ‚Äì A interfaced implementation of the core algorithm. Concrete Strategy ‚Äì An actual implementation of the core algorithm, to be passed to the Client . Client ‚Äì Stores a local Strategy instance, which is used to perform the core algorithm of that strategy. The goal of the strategy design pattern is to allow the Client to perform the core algorithm, based on the locally-selected Strategy .  In so doing, this allows different objects or data to use different strategies, independently of one another. To better explain, let‚Äôs consider the real world example of a postal service packaging and mailing out various objects.  The characteristics of a given object will determine what packing materials are necessary to safely ship it.  That is to say, the packaging required to send a letter will differ dramatically from the packaging necessary to send a watermelon or a saxophone. These different forms of packaging up objects can be thought of as unique packaging strategies .  The strategy for most paper mail is typically envelopes and stamps, while the strategy for packaging perishable food may require a box, packing foam, and possibly even dry ice.  The power of the strategy design pattern in this scenario is that the post office can look at each individual object, and implement the most suitable strategy to package it safely and efficiently. Below is the full code sample we‚Äôll be using in this article.  It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. The code sample continues with the packaging analogy and illustrates how code might be used to differentiate between various packaging strategies, which are used based on the type of object that is being shipped. We begin with the basic Package class, which is not a key component to the strategy pattern , but merely allows us to represent individual packages as they work their way through the system.  A Package is our primary form of data. We also use the PackingMaterials to store some common materials that we‚Äôll use within our packaging strategies.  The ultimate goal is to assign a list of PackingMaterials to each unique Package , as determined by the packaging strategy that is implemented. Speaking of which, now let‚Äôs take a look at the IPackagingStrategy interface, and the abstract PackagingStrategy class that implements it: These are the bread and butter components of the strategy pattern . IPackagingStrategy is the Strategy and defines the core algorithm (the Pack(Package package) method, in this case)  that we‚Äôll be using on our Packages .  From that interface we create the PackagingStrategy class, which is effectively a Concrete Strategy object.  It‚Äôs abstract (with a virtual Pack(Package package) method) in this case just to provide a default form of a concrete strategy, from which all our real strategies can inherit.  Regardless, as you can see, the Pack(Package package) simply adds any relevant PackingMaterials to the package.Packaging property list. Now, let‚Äôs look at all the aforementioned strategies that are inheriting PackagingStrategy : We won‚Äôt go through an explanation of each, since the comments and code are fairly explanatory, but you can see that DefaultStrategy doesn‚Äôt need to implement or override the Pack(Package package) method, since we want to use the default values.  Other classes add the appropriate set of materials based on the strategy they are trying to implement.  For example, a fragile package needs a lot of protection, so the FragileStrategy uses a box, foam, bubble wrap, and tape to properly secure the package. The last component is our Client class, which we‚Äôve named Packager to better fit the example: Within the strategy design pattern , the Client is what connects the data to the strategy.  Typically, this is done by assigning a specific, singular Concrete Strategy instance to a local variable within the Client instance.  Thus, our code does this within the constructor itself.  As we‚Äôll see later, we can also ‚Äúreuse‚Äù an existing Packager by passing a new IPackagingStrategy instance to the Pack(Package package, IPackagingStrategy strategy) method signature, which assigns the passed strategy to the local Strategy property, then proceeds as normal.  In effect, the Packager ( Client ) invokes the core algorithm ( Pack(Package package) ) of the local Strategy , using the passed data ( Package ) the main argument. Alright, let‚Äôs put this all together and see how we might actually use the strategy pattern here to send some packages.  We have four different objects we‚Äôd like to send, so we‚Äôll split each into a singular example: We start by creating a new Package , the contents of which will be a teddy bear.  Nothing too abnormal going on here, so we create a new Packager instance and pass in the DefaultStrategy that we want to use.  Once the Packager instance is created, we can call the core algorithm ( Pack(Package package) method) and pass in the data ( Package instance).  The result should be our teddy bear being packaged up using the default strategy, which is confirmed by the log output: Now, let‚Äôs try something a bit more awkward and fragile than a teddy bear ‚Äî a computer monitor: Since we need to ensure the security of this package during shipment, we‚Äôll use the FragileStrategy for this package, but everything else is the same as before.  Our output shows that the strategy worked, making sure both bubble wrap and foam were used: While many implementations of the strategy pattern like to make new instances of Clients every time a new Strategy is implemented, our third example shows how easy it is to create a pattern that reuses existing Clients : To ship a few salmon filets we have reused the existing Packager instance named packager , but implemented a specific strategy by passing PerishableStrategy as the second Pack(...) argument.  Since this item is perishable and must be kept cold, our packaging includes dry ice: Lastly, a normal teddy bear is fine and dandy, but what about a MASSIVE teddy bear?  We‚Äôd need an OversizedStrategy for particularly large objects, so that‚Äôs what we use: There we have it!  I hope this article gave you a bit more information on what the strategy design pattern is, and how it can be easily implemented in your own code.  For more information on all the other popular design patterns, head on over to our ongoing design pattern series here !", "date": "2017-09-13"},
{"website": "Airbrake", "title": "Behavioral Design Patterns: Visitor", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/visitor-design-pattern", "abstract": "Next up in our detailed Guide to Software Design Patterns series we‚Äôll look at the visitor design pattern , which is one of the more complex patterns we‚Äôll be discussing.  The visitor pattern is ideal for adding new capabilities to existing objects, without modifying the classes on which those objects operate. In this article we‚Äôll be showing a real world and fully-functional C# code sample of the visitor pattern, so let‚Äôs jump right in! The visitor pattern is made up of a number of components, but the primary ones are: Visitor ‚Äì Declares a Visit() method that accepts a passed Visitable argument.  The method signature determines the object type that will be used when executing the method code.  This allows the code to differentiate between different Visitable objects, and route subsequent logic accordingly. Visitable ‚Äì Declares an Accept() method, which expects a passed Visitor argument.  Within this Accept() method, the Visitor parameter invokes its Visit() method, passing the calling Visitable object.  This ties the two objects together, without either worrying about the specific data type of the other. I know that‚Äôs a bit vague and perhaps difficult to follow, but we‚Äôll clear things up when you see it in code.  For now, let‚Äôs consider the real world example of visiting Disneyland (or the amusement park of your choice).  Upon arrival, you buy a full day pass, which costs a pretty penny but gives you unlimited access to all the rides for the rest of the day.  Woohoo! Now that you have your pass, you don‚Äôt need to jump through any additional hoops to go on Space (or Splash) Mountain.  You just hop in line and flash your pass to the attendant when the time comes for some fun.  Likewise, the attendant doesn‚Äôt need to perform any extra checks; once he or she sees your pass, the unspoken contract has been agreed to. Ignoring the fact that I haven‚Äôt personally been to Disneyland in years, and they may not even use a pass-based system anymore for all I know, the concept still holds true.  The visitor design pattern is used for, well, visiting theme parks so that, once you have access, nobody inside needs to worry about selling you tickets for individual rides. Below is the full code sample we‚Äôll be using in this article.  It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Our visitor pattern code sample is built around the basic concept of creating digital text documents.  Each Document consists of a series of elements such as Text , Heading , BoldText , and so forth.  We then want to format the document appropriately, depending whether the output should be in HTML , Markdown , or BBCode . The simplest place to start is with the IVisitable interface, which is where we declare our Accept(IVisitor visitor) method. IVisitable also has a Text field, which we‚Äôll use to store the primary text content of each element. Visitable is an abstract class that implements IVisitable .  This class allows us to define any default method logic, such as that for our Accept(IVisitor visitor) method: As the comments state, one important note is that we‚Äôre using the dynamic keyword within Accept(IVisitor visitor) , which allows both the Visitable and Visitor instances to bypass static type checking.  This allows the appropriate Visit() method signature, within the appropriate Visitor class declaration, to be called at runtime.  We‚Äôll see this in action in a moment, but it allows our code to only include method declarations that are critical to behavior, while allowing the code to use defaults elsewhere. Next we need to define some Visitables , all of which inherit the Visitable class: I‚Äôve left out the comments for these since they‚Äôre quite self-explanatory.  We call : base(text) within each constructor, so we don‚Äôt need to reassign the passed string text parameter to the Text property of the base Visitable class.  Other than that, each of these classes allows us to create unique element types within our Document class, which we‚Äôll see in a moment. With our Visitables out of the way, it‚Äôs now time to create our IVisitor interface, and the Visitor that that implements it: As previously mentioned, the fundamental method we need is Visit(IVisitable visitable) .  As you‚Äôll recall, this is invoked within the Visitable.Accept(IVisitor visitor) method, and is the primary means by which all Visitors interact with all Visitables .  In this case, the default logic consists of simply concatenating the Text property from the passed IVisitable onto the string Content property of the Visitor instance. Now we need to define the various types of document formatting we want, which is accomplished within unique Visitor -inherited classes: Here we‚Äôre starting to see the visitor design pattern come to fruition.  Each Visit(...) method signature above is contained within a unique Visitor class, and is differentiated by the unique Visitable data type it accepts.  This combination of two unique instance types determining the logical behavior is the primary purpose of the visitor pattern , and is known as multiple dispatch (or double dispatch ).  This allows languages like C#, which are typically only single dispatch , to perform function calls based on the runtime types of multiple objects, as seen above. Anyway, each of the Visitor classes above concatenates the passed element Text onto the parent Content property string, while also formatting it in a way that matches that particular Visitor style.  For example, I‚Äôm writing these words right now in a Markdown document, so when I create a url like this , I format it in exactly the same way that MarkdownVisitor(Hyperlink element) formats its passed element. What‚Äôs also critically important here is that we would typically need to declare a Visit(...) method overload for each and every Visitable class in the application.  However, you‚Äôll notice that we‚Äôve left out such method declarations for some Visitor classes.  For example, neither MarkdownVisitor nor BbVisitor have a Visit(Text element) method.  This is because, as you may recall, we configured this example to use dynamic values when invoking our Visit(...) methods.  This allows C# to dynamically determine if a matching method signature exists at runtime.  If so, it passes execution along to that method, but if not, it defaults to the baseline Visitor.Visit(IVisitable visitable) method. The last component to our example is the basic Document class, which isn‚Äôt necessary to the visitor pattern .  However, it serves the purpose here of holding a List<Visitable> property called Elements , which is all the Visitable objects we‚Äôve added to the document. Accept(IVisitor visitor) iterates over all elements and invokes their respective Accept(IVisitor visitor) , using the passed IVisitor instance.  This will allow us Accept() a single Visitor with one call. Now, with everything setup, let‚Äôs test this out in our Program.Main(string[] args) method: The comments walk through what‚Äôs happening, but we basically start with a new Document and add some elements to it.  We then create a few Visitor instances, and force the document instance to Accept() each of those, which, as we saw above, calls Accept() for each element in the Document .  Now, when we output the Visitors to the log, we should see each element in the Document , but properly formatted to match the formatting rules specified in each unique Visitor class: Sure enough, that‚Äôs exactly what we get!  HTML all runs together since it doesn‚Äôt typically include linebreaks.  Markdown has proper formatting, including linebreaks around the Paragraph element.  BBCode has similar Paragraph linebreaks, but handles formatting of other types, like BoldText and Hyperlinks , quite differently. There you have it!  Hopefully this article provided a bit of insight into the capabilities of the visitor design pattern , and gave you some basic tools you can use in your own future projects.  For more information on all the other popular design patterns, head on over to our ongoing design pattern series here !", "date": "2017-09-05"},
{"website": "Airbrake", "title": "Behavioral Design Patterns: Memento", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/memento-design-pattern", "abstract": "Moving along through our detailed Guide to Software Design Patterns series, today we land on the island of the memento design pattern .  The memento pattern is typically used to store the historical state of an object and, therefore, allow previous states to be restored at any time.  The pattern shares many similarities with the command pattern , which we explored in our previous Behavioral Design Patterns: Command Design Pattern post. Throughout today‚Äôs article we‚Äôll explore the memento design pattern by looking at both a real world example and fully-functional C# code samples.  This code will illustrate how a memento pattern can be setup fairly easily, ideally providing you with some ideas for your own projects, so let‚Äôs get going! The memento design pattern can be found in the real world almost everywhere we look.  In fact, essentially any object you interact with that can have a singular state at a given moment in time, and which allows that state to be adjusted at will, is effectively an example of the memento pattern. For example, consider the volume control of your television.  No matter whether you have an old CRT display or a state-of-the-art smart OLED display, the fundamental behavior of changing the volume works the same.  The television (or receiver, speakers, etc) has a saved volume state .  If the volume is set to 3 , and you can‚Äôt quite hear Morgan Freeman‚Äôs soft, dulcet tones, you‚Äôll probably turn the knob or press your remote to crank it up to 11 !  The act of changing that volume state from 3 to 11 is a simple form of the memento pattern , in which we‚Äôre changing the state of an object (the volume, in this case) to a new value.  Critically, we can also revert that change at any time, going back to any volume state value we had previously. For older televisions this process will be incremental, meaning we go from 3 to 4 to 5 , and so on.  Yet, on some newer televisions, we can explicitly choose a value to jump to immediately, making the change from 3 to 11 in a single step.  Regardless, both of these techniques are commonly used in memento design pattern implementations.  In some cases, undo and redo only occur in incremental fashion, using the most recent state as the fallback position.  In other cases, like the code implementation we‚Äôll look at below, reverting to previous states can occur in any order, allowing us to jump backwards in the revision history as many jumps as required. The memento design pattern has three key components: Memento ‚Äì Simple object that contains basic state storage and retrieval capabilities. Originator ‚Äì Gets and sets values of Mementoes.  Also, creates new Mementoes and assigns current values to them. Caretaker ‚Äì Holds a collection that contains all previous Mementoes.  Can also store and retrieve Mementoes. As discussed in the introduction, there is a clear similarity between the memento and command patterns.  The command pattern allows tasks to be assigned to a queue , which can then be processed by a client at any moment in time.  This structure makes the command pattern particularly well-suited for providing undo and redo functionality, since tasks can be reverted when desired. The memento design pattern is far more abstract, but it also allows tasks to be reverted when necessary.  The distinct difference between the two patterns, however, is that the memento pattern is intended to change the singular state of just one object.  On the other hand, the command pattern effectively handles multiple states simultaneously ‚Äî the logic and behavior of which is handled by a Manager class that orchestrates everything.  Check out our Command Design Pattern article for more details. Alright, let‚Äôs get into the good stuff!  We‚Äôll start with the full code sample below, after which we‚Äôll break it down in more detail to see exactly how everything is put together: The example we‚Äôre using here is based on some of the classes we saw in our command pattern article, namely the Character class.  A Character might be used as a basic entity in a video game, containing both a Name and a collection of basic attributes: Agility , Charism , and Strength .  We‚Äôll be defining generic Memento , Originator , and Caretaker classes that will all accept a generic object type <T> , which we can then specify as Characters we‚Äôll be creating.  The real world purpose of this memento pattern might be a game you‚Äôre creating in which a single Character can be selected or active at a time, but you want to retain the history of all the Characters that have been used previously, and allow the player to revert to any previous Character at will. Our goal here is to generalize the memento pattern implementation as much as possible, so we can reuse it for future implementations if desired.  Thus, we start with the Memento<T> class: Nothing fancy going on here.  All a Memento<T> object really needs is some form of state , so we‚Äôve defined the T State property.  Along with the constructor, this allows a new Memento<T> instance of any type to be created quite easily (e.g. new Memento<Character>(new Character()) ). Next we have the Originator<T> class, which stores a local T _state property and updates this property based on the currently manipulated Memento<T> instance.  For extensibility, we also have a simple OnMementoChanged event handler, which allows us to fire some basic logic whenever the Originator<T> instance updates a Memento<T> in some way: The important methods of Originator<T> are CreateMemento() and SetMemento(Memento<T> memento) .  The former creates a new Memento<T> instance based on the current _state property, while the latter updates the _state property based on the passed Memento<T> argument. The final piece in the memento pattern trifecta is the Caretaker<T> class: The primary purpose of the caretaker object is to store the historical list of mementoes that have been created, effectively containing all the state values that have ever existed.  The Save() method handles the creation of a new Memento<T> instance within the Originator property value.  Conversely, Restore(Memento<T> memento) searches for the passed memento instance in the full list and sets the current memento (i.e. state ) of Originator to that value, if its found in the list. That‚Äôs the whole of the memento pattern setup.  Now, for implementation we use the aforementioned Character class, along with the statistic classes implementing the IStatistic interface that it uses: The Program.Main(string[] args) method actually tests all this code out for us: As indicated by the comments, the above code starts by creating a new Originator<Character> instance, then passes that to be used by the new Caretaker<Character> instance.  Next, we create a few Character instances to represent our three different characters, giving each unique names and attribute scores. Now comes the memento pattern usage.  We take our originator instance and call SetState(Memento<T> memento) , passing in our first Character instance.  Behind the scenes, this sets the state of the originator instance to be equal to that passed in alice Character value.  Then we call caretaker.Save() , which adds the alice memento to the stored MementoList property.  This also triggers our OnMementoChanged event, so we produce a little bit of output to confirm what is going on.  We repeat this process a couple more times, changing the saved state first to bob , then to christine . Finally, we call caretaker.Restore(bobMemento) , which effectively checks if bob can be found in the underlying MementoList property.  If so, it restores the state back to the state of when bob was added, then fires our OnMementoChanged event again to provide some output. The result of all this code is that we should see three state changes as each Character instance is saved as the state , then a final reversion back to the state of the second bob Character .  Sure enough, that‚Äôs exactly what we find in the output: There you have it!  I hope this provided a bit of insight into the potential power of the memento design pattern, and gave you some basic tools you can use in your own projects to implement it where it seems most appropriate.  For more information on all the other popular design patterns, head on over to our ongoing design pattern series here !", "date": "2017-08-24"},
{"website": "Airbrake", "title": "Celebrate the Eclipse with CSS!", "author": "Unknown", "link": "https://airbrake.io/blog/css/celebrate-the-eclipse-with-css", "abstract": "Although total solar eclipses typically occur at least twice a year in some part of the world, on August 21st, 2017, many Americans will experience the first total eclipse in their lifetimes!  Last time anyone on U.S. soil saw a total eclipse was in the lovely state of Hawaii back in 1991.  Prior to that, a few states near the west coast got a glimpse in 1979, but this 2017 event will mark a total eclipse path across the entire country! To celebrate this momentous occasion we thought we‚Äôd show you how to create your very own solar eclipse using nothing but the power of cascading style sheet ( CSS ) animations.  As you may recall, we celebrated the Fourth of July this year with a cool JavaScript Fireworks animation, but now we‚Äôre simplifying things even more by sticking with CSS for this little tutorial.  With that, let‚Äôs have some fun! To follow along with this project you‚Äôll need a modern web browser, your favorite text editor, and Ruby installed.  For Windows users, installing Ruby is super easy with the RubyInstaller project.  For Mac or Linux users, your favorite package manager will do the trick. While we could write our style sheets in modern CSS, we‚Äôll be taking advantage of CSS variables , which are not completely supported by all browsers at this time.  Rather than asking you to use a specific browser to run this code, we‚Äôll be opting to use the powerful Sass CSS extension. Sass allows us to create more readable CSS, while also using variables throughout the style sheet so we can keep things organized and make it easier to play around with the settings later on. Once you have Ruby installed, installing Sass is just a matter of executing the gem install sass command from your terminal: Now let‚Äôs move onto setting up the project! Since we‚Äôre using just HTML and CSS for this tutorial, all we need are two files in our project directory: index.html : This is the HTML page we‚Äôll load in our browser to view our finished work. default.scss : The Sass -powered cascading stylesheet that contains all the styles we‚Äôll manipulate to create our eclipse animation. That‚Äôs it, so add a new project directory wherever you‚Äôd like and create those two blank files.  If you wish to use a third-party tool you can also opt for a development playground like Codepen , in which case everything will appear in the browser as you follow along. Note: If you use Codepen, be sure to select SCSS from the CSS dropdown toggle. The way Sass works behind the scenes is that you write your special, extended CSS within a .scss file, then Sass will parse and compile that advanced code into baseline CSS that all modern browsers understand.  To accomplish this we‚Äôll tell Sass to watch a particular file, and when it detects changes, it will automatically parse and compile it into the output file we want. To begin this process, navigate to your project directory within your console and type the following command: This tells Sass to watch the default.scss file where we‚Äôll actually write our code, and to output the resulting CSS to default.css , which our index.html file will load. If you want to skip ahead and see what the end result will look like, check out this CodePen page . We‚Äôll start by creating the basic HTML structure with the elements we‚Äôll manipulate using CSS.  In this case, we have two basic objects, the sun and the moon.  Both of these are represented by a div element, which is also assigned the eclipse class that we‚Äôll use in our CSS to create the actual eclipse animation effects: Our index.html file begins with a standard DOCTYPE specification, the <meta> tag where we specify the character set we‚Äôre using, and the page <title> .  We also need to link our default.css , since, as you‚Äôll recall, this is the compiled output file that Sass will automatically generate for us. Now we get into the real bread and butter of the project.  The goal, as you might imagine, is to animate the trajectory of the moon so it passes in front of the sun .  As it does so, we also want to adjust the color of the sky so it darkens as the moon approaches and reaches totality.  Lastly, for a bit more realism we want to create a corona effect around the sun as the moon begins to line up during total eclipse. That‚Äôs all well and good, but we also want to be able to easily adjust things and play around with different settings.  We can accomplish this by making heavy use of variables , which begin with a dollar sign ( $ ) in Sass syntax. We start with a number of configuration options: The comments should generally explain what each of these do, but the most important settings are: $duration ‚Äì How long the full animation takes. $celestial-body-diameter ‚Äì The size of the two celestial bodies relative to the page. $XYZ-colors ‚Äì The various colors used throughout the animation.  For example, while the corona color is typically a silvery-white color, feel free to mess around with these settings and see what you can come up with! The first thing we do is alter the background of the page, which is effectively the color of the sky, through the body tag: If you aren‚Äôt familiar with it, we‚Äôre making heavy use of the animation property, which allows us to animate transitions from one CSS configuration to another.  The properties we provide start with adjust-brightness , which is actually the animation-name property of an animation @keyframes configuration we specify elsewhere: CSS @keyframes are basically just like normal animation keyframes, allowing us to specify different properties and CSS configurations at various steps in the animation sequence.  Throughout this project we‚Äôll use percentage keyframes, either directly or via Sass $variables .  For example, the adjust-brightness animation above sets keyframes at 0% and 100% , which indicate that the background-color property should be the normal $sky-color .  This means our sky will be its default color at both the beginning and the end of the full animation. From there, we also have two more keyframes set to the values of $total-eclipse-start-percent and $total-eclipse-end-percent , which specify moments in the animation sequence that the background-color should be changed to $eclipsed-sky-color .  Since these are keyframes, the CSS engine will automatically transform between these two configuration states over time, based on the percentages of the total animation time we‚Äôve specified above. Looking back up a bit at the body:animation property, we also indicate that the duration of the animation should be the $duration of our full animation.  We also want the animation to be linear (meaning it won‚Äôt ease in or out but will perform static transition speeds), and should repeat forever. To give our empty div elements some actual dimensions, we merely need to add a few properties to the .eclipse class: Here we‚Äôre making sure the sun and moon are centered, and also give them a size of $celestial-body-diameter , so we can easily adjust how big they are in the configuration. Now let‚Äôs move the moon!  We start by using the ampersand ( & ) shorthand syntax that Sass provides to call the parent selector so we can easily create a nested selector for the .moon class inside the .eclipse class: As indicated by the comment, & is basically just a shorthand way of specifying the parent selector, .eclipse in this case. We‚Äôve adjusted the z-index property so the moon appears on top of the sun element.  Once again, we also use the same animation property settings that we saw before, except this time we‚Äôre specifying a different animation-name of eclipse , which can be found below: The goal here is to move the moon element from right to left, pausing briefly while it‚Äôs centered over top of the sun element to simulate that brief period of total eclipse that‚Äôs oh so cool.  To achieve this, we‚Äôll use some percentage keyframes, again. 0% indicates the moon should be offset to the right about 250% of the distance of the sun (and moon) itself, so the animation doesn‚Äôt start with the moon already overlapping the sun.  We also set the moon to its own $moon-color ‚Äî something just slightly off-white by default. Again, we use the same eclipse percentage offsets as before to indicate when, in the animation sequence, the moon should come to a halt in front of the sun.  It should also change its color to match the $eclipsed-sky-color , since it‚Äôs completely in shadow at that point and, thus, would appear as a very similar color. Finally, for the 100% keyframe we apply a negative offset to keep the moon moving to the left and adjust its color back to normal. Finally, we want to simulate a corona effect (the white halo that appears around the sun when a total eclipse occurs).  Even though the sun element is stationary throughout the entire animation, to create a corona we need to apply an animation property to the .sun element: The corona animation-name is, once again, a percentage keyframe configuration.  Here we‚Äôre using the box-shadow property to create a full-circumference shadow effect all around the sun element.  We can apply a bit of blur and spreading to try to get just the right look.  While this won‚Äôt be perfect (the actual corona is must less uniform, for example), it‚Äôll get the job done for a simple CSS animation! We start by applying the unset value at the start and end of the animation.  Then, during the same stop and start keyframes that indicate when the moon is paused in front of the sun, we create a shadow without size, but only radius and spread , instead.  This causes that blurring and outward-spreading effect that we‚Äôre after.  We‚Äôve also set the color of the corona to $corona-color , since the corona is much lighter than the normal color of the sun. And that‚Äôs it!  We‚Äôve created the sun and the moon, moved the moon, adjusted the sky color, and added a corona during the total eclipse.  Loading up the index.html page in your browser should show you a nice little sun with a moon slowly eclipsing it, before getting bored of that job and moseying along.", "date": "2017-08-21"},
{"website": "Airbrake", "title": "Behavioral Design Patterns: Observer", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/observer-design-pattern", "abstract": "Today we‚Äôll continue our journey through the Guide to Software Design Patterns series with a deep dive into the observer design pattern .  The observer pattern is categorized as a behavioral design pattern , and its primary purpose is to allow a observer to ‚Äúsubscribe‚Äù to push-notifications generated by a provider . In this article we‚Äôll examine the observer design pattern by digging into both a real world example, along with a fully-functional C# code sample.  By the end of this piece you should have a solid understanding of what the observer pattern is and how it can be implemented into your own code projects, so let‚Äôs get crackin‚Äô! The observer design pattern consists of three main components: Provider ‚Äì Sends notifications of data to subscribed observers .  It does so by keeping track of all subscribed observers . Observer ‚Äì Receives notifications of data from providers .  Keeps track of received data so it can properly handle (and potentially ignore) data notifications that have already been received. Data ‚Äì The data that the provider is sending to observers via push-notification. Paradoxically, it‚Äôs rather challenging to come up with a real world example of an observer pattern that doesn‚Äôt involve computing, because nearly every technological service or device we use on a daily basis implements an observer pattern in one way or another.  App notifications on your phone or email alerts from your favorite shopping site are just two of the extremely common observer pattern scenarios many of us frequently experience. One slightly less technical real world example of the observer pattern is when you sign up for a magazine subscription, such as WIRED (one of my personal favorites).  While computers are obviously handling all the logic behind-the-scenes, the observer pattern is still being used in this case.  You (an observer ) have subscribed to a magazine provider .  When the provider publishes a new issue (the data ), you receive it in the mail a few days later.  Critically, this is not a one-to-one relationship, in which the provider is sending the notification (magazine) only to you.  Instead, they‚Äôre able to send it to thousands of people all at once, just as most digital services do when you sign-up for their email newsletter. Below is the full code sample we‚Äôll be using in this article.  It can be copied and pasted if you‚Äôd like to play with the code yourself and see how everything works. Our code sample uses the concept of news agencies like the Associated Press and Reuters .  These agencies gather and create news reports from across the world, and then sell said reports to specific news organizations, such as newspapers and TV networks.  To keep things a bit simpler, our sample code will encompass that relationship between just two news agencies ( Associated Press and Reuters ) and two newspapers ( The Washington Post and The New York Times ). We‚Äôve taken a handful of today‚Äôs top headlines from both agencies, and have created our example observer pattern code around the notion that these newspapers will subscribe (and possibly also unsubscribe) to said agencies, thereby receiving notifications of news stories as they‚Äôre published. To achieve this we‚Äôll start with the most basic object in the codebase, the Article class: An Article is the basic form of data that an Agency will produce and publish, which sends it out to all subscribed observers ‚Äî Newspapers in this case.  The Article class has some basic properties, though we‚Äôre foregoing the actual article content and just using the title and author to differentiate them from one another.  We also want to know what Agency published said Article , so that property is also included.  Lastly, we implement the IComparable interface so we can compare and sort Articles elsewhere in the code. Next we have the Agency class, which acts as the provider in this example by publishing news Articles : As previously mentioned, a provider should keep track of all its active observers , so the Agency definition begins with a list of Articles and observers , which are defined by implementing the IObserver interface. The Subscribe(IObserver<Article> observer) method can be called by any IObserver<Article> object (such as Newspaper , which we‚Äôll see in a moment).  Doing so ensures that the observer is now tracked and will subscribe to all notifications created by this Agency instance.  The Subscribe(IObserver<Article> observer) method also returns a new instance of Unsubscriber<Article> , which implements the IDisposable interface and allows the Dispose() method to be called, thereby releasing any unmanaged resources when invoked: Back to the Agency instance methods, we‚Äôll skip over CompareTo(object agency) since that‚Äôs self-explanatory.  The Publish(string title, string author) method performs most of the logic when creating a new Article .  It adds the Article to the local Articles list, then invokes the OnNext(Article article) method of all subscribed observers .  We‚Äôll look at this in a moment within the Newspaper class, but this method is required by the IObservable<T> interface and is the means by which observers are alerted of new data . It‚Äôs also worth noting that we‚Äôve elected to accept direct string parameters in the Publish(string title, string author) definition and used those to create a new local Article instance.  This was done to simplify this code example, but in a real world scenario, it would likely be beneficial to create Article instances in an outside scope, and then pass them via a method signature like Publish(Article article) . The final method, Shutdown() , can be called if we want this Agency instance to halt all notifications and remove all current observers . The last object in our observer design pattern trifecta is the Newspaper class, which acts as our observer entity and subscribes to Agency instances, in order to receive Article publications pushed via the Publish(string title, string author) method: As an observer , the Newspaper class stores a list of Articles it has received, so it can avoid duplicates since an observer shouldn‚Äôt know (or care) when or how often a provider will push notifications out.  It also maintains a SortedList<TKey, TValue> where TKey is Agency and TValue is IDisposable .  This allows a Newspaper instance to subscribe to multiple providers ( Agencies ) at once, and when desired, unsubscribe only from the desired Agency (while maintaining other subscriptions). As you may notice, Newspaper implements the IObserver<Article> interface, which requires that the following three methods be implemented. OnCompleted() , which is invoked by the provider to indicate that it has stopped sending notifications: OnError() , which indicates that the provider experienced an error.  We‚Äôve elected not to implement this method since no errors will be generated, but it‚Äôs required by the interface: Finally, the OnNext(Article article) method, which is invoked by the provider when a new Article is published.  This is the bread and butter of this class, and allows the observer to receive new data notifications: Since Newspaper is an observer , we also need to implement some way for it to subscribe to providers ( Agencies ).  The Subscribe(Agency agency) method allows the Newspaper to subscribe to the passed agency instance, by invoking the IDisposable Subscribe(IObserver<Article> observer) method within the Agency class and adding the IDisposable token to the local cancellations list for that Agency : Similarly, we also have the Unsubscribe(Agency agency) method, which calls the Dispose() method of the cancellations list element for the passed agency .  It also finds and removes all stored Articles that were produced by that Agency : Whew!  Now, with everything setup and ready to go, we can test this out by creating a few Agency and Newspaper instances, adding some subscriptions, publishing some articles, and seeing the results in the log output: As you can see, we start by creating Agency instances for Associated Press and Reuters .  We also create Newspaper instances for The New York Times and The Washington Post .  Before we examine it any further, let‚Äôs jump ahead a bit and look at the output from executing the code above, which we‚Äôll reference as we go through the remainder of the NewsTest() method: Even though the next line of our method has associatedPress publishing an article by Juliet Linderman, our output doesn‚Äôt display that article anywhere.  This is because neither of our Newspaper instances have subscribed to associatedPress at this point.  This illustrates how the observer pattern is ignorant of the relationships behind-the-scenes.  It doesn‚Äôt care who is subscribed, it just pushes notifications and those who happen to be listening will receive them. Anyway, the next section of code has newYorkTimes subscribing to associatedPress , along with washingtonPost subscribing to reuters , both of which are reflected in the output log: reuters then publishes two Articles and, now that it has subscribed, washingtonPost receives both of those notifications: Similarly, associatedPress publishes two Articles of its own, which newYorkTimes receives: The washingtonPost then subscribes to associatedPress as well, followed by two more publications from associatedPress .  Now that associatedPress has two subscribers, we should see two outputs for each Article published: The washingtonPost has now elected to unsubscribe from associatedPress , just before associatedPress publishes one last Article .  Both these events are shown in the log, with the last article only being picked up by the remaining observer ( newYorkTimes ): Finally, reuters publishes three more Articles , and we illustrate that the washingtonPost observer can remain subscribed to an Agency even after leaving another, since it receives all three notifications: There you have it!  Hopefully this article provided a bit of insight into the capabilities of the observer design pattern , and gave you some basic tools you can use in your own future projects.  For more information on all the other popular design patterns, head on over to our ongoing design pattern series here !", "date": "2017-08-29"},
{"website": "Airbrake", "title": "Behavioral Design Patterns: Mediator", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/mediator-design-pattern", "abstract": "Making our way through the detailed Guide to Software Design Patterns series we‚Äôve been publishing, today we‚Äôll be exploring the handy mediator design pattern.  In the mediator design pattern , a mediator object encapsulates how other types of objects interact, without the need for those objects to be aware the implementation of other objects. Throughout this article we‚Äôll investigate the mediator design pattern using a real world example.  We‚Äôll follow that up with a fully-functional C# code sample that will illustrate how the mediator pattern can be quickly and easily implemented, so let‚Äôs get to it! The mediator design pattern obviously originates from the concept of mediation , or to mediate .  Its purpose is to serve as a go-between, so other components can properly interact with one another, even in situations where doing so may be difficult.  In fact, the obvious real world example of a mediator pattern is in a scenario like group counseling.  A therapist may act as a mediator between spouses who are going through couples therapy.  Or, a mediator may drive discussion and encourage speakers at a local AA meeting.  Lawyer jokes aside, attorneys often act as mediators during difficult proceedings between family members or friends who find themselves in a difficult legal battle. Outside the realm of the humanities, most of us experience some form of technological mediation multiple times a day.  Virtually every modern communication app on our phones uses some form of the mediator pattern to connect multiple phones (and, thereby, people) together.  When you send a text to your BFF, you aren‚Äôt making a direct connection from your phone to your friend‚Äôs phone.  Instead, your carrier receives your request and establishes a connection on your behalf, acting as the mediator.  The bits that makeup your message are sent out to the nearby cell tower to a switching service handled by your carrier.  The carrier then passes the message along via the fastest fiber optic route to the cell tower nearest to your friend.  From there, the message finally arrives at your friend‚Äôs phone.  In some cases, satellites might even be involved, which also behave as a mediator in many ways. The mediator pattern has three major components: Mediator ‚Äì Coordinates communication between all colleague objects. Colleague ‚Äì Sends message to and receives messages from other colleagues through an associated mediator object. Client ‚Äì Creates colleagues and associates an appropriate mediator with each. Having just watched the latest episode of Game of Thrones , it seems appropriate to tie the show into our code sample in some way.  To do so, we‚Äôll loosely base our code on the real world telephonic communication example cited above ‚Äî a carrier service behaves as a mediator so two callers ( colleagues ) can communicate with one another.  However, cell reception is spotty, at best, way up north on The Wall , so our sample code uses a ‚Äútown crier‚Äù ( Crier class) to act as the go-between or mediator for our list of people who want to communicate with each other.  When a character says something, the crier hears the message and shouts it out, ensuring that all the other characters hear the message themselves and know who said it. The full code sample can be found below, after which we‚Äôll break it down into smaller chunks to see how the mediator pattern is actually working: We start by defining the ICrier interface and the Crier class that implements it: The Crier class acts as our mediator object and must receive the colleague object that is trying to send a message ( Person , in this case).  The Shout(string message, Person source) method handles the only logic we need for mediation.  Specifically, we‚Äôre using the MessageReceived event handler ‚Äî a delegate with the same signature as the calling method ‚Äî to fire when the crier shouts out a message. Now we need to define at least one colleague object.  This will be the IPerson interface and the Person class that implements it: The first requirement of the Person class is that it has an association with a Crier ( mediator ).  We accomplish this through the constructor parameter and the Crier property assignment.  The other requirement is the ability for Person to send a message (or some other behavior) that can be handled by the associated mediator .  In this case, the Say(string message) method handles that by calling Crier.Shout(message, this) .  In the fantasy scenario we‚Äôve built for ourselves, this means that when a person says something, the crier hears it and shouts it loudly, relaying not only the message, but also the person it originated from. Since we want to avoid having to directly associate every single unique instance of our colleague ( Person ) object with every other, we‚Äôre using an event/subscriber pattern so all persons can listen for messages shouted by the crier.  In the constructor we subscribe the Listen(string message, Person source) method to the Crier.MessageReceived handler.  Thus, every time the Crier shouts out a message, each Person will receive that subscribed event, effectively allowing everyone to listen to what every else says. Alright, enough messing about with setup, let‚Äôs see this in action.  Our client code uses the Crier and Person classes within the Program.Main() method: Connoisseurs of the books (or even the show): please bear with me.  I wanted to choose characters that had some interesting quotes, so we‚Äôll need to pretend that these characters were all hanging out together, perhaps at a lovely gala, when these particular utterances were made. As you can see, we start by instantiating a Crier object.  Then, we create a series of characters and be sure to pass the crier instance to each constructor, which forms the fundamental connection between Colleague and Mediator that the entire mediator pattern relies on. Now our characters can Say() whatever they‚Äôd like.  By using a mediator design pattern here, the goal is to allow anything said by one character to be heard by all other characters, as relayed by the associated crier .  To see if everything works as expected, let‚Äôs take a look at the output produced by the code above: As expected, each message sent by an individual is transferred to everyone else via the crier.  For example, we see that when Arya says ‚ÄúValar morghulis‚Äù, all the other characters receive that message and know it is from her, even though no two Person instances have a connection or awareness of one another.  It‚Äôs also worth noting that, because of the use of an event handler, even though Ilyn Payne cannot speak, he can still listen and is able to receive all the messages sent by the others. That should do it for now!  Hopefully this gave you a better sense of what the mediator design pattern is for and how it can be relatively easily implemented into almost any scenario.  For more information on all the other popular design patterns, head on over to our ongoing design pattern series here !", "date": "2017-08-15"},
{"website": "Airbrake", "title": "Behavioral Design Patterns: Command", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/behavioral-command-design-pattern", "abstract": "Not to be rude, but I hereby command you to check out today‚Äôs article in our ongoing Guide to Software Design Patterns series, in which we dive into the extremely useful command design pattern in all its glory!  As another behavioral pattern, the command design pattern makes it easy to add work to a queue, which can be processed by a client at any moment in time.  Furthermore, the client need not be aware of the underlying functionality or implementation of the queued work. In this article we‚Äôll closely examine the command design pattern , exploring a real world example of the pattern in action, along with a fully-functional C# code sample intended to illustrate how the pattern can be used in your own coding endeavors.  Let‚Äôs get this party started! To explain a real world example of the command pattern , we should first outline the basic components that make up the bulk of its logic. Receiver ‚Äì Receives actions via Commands . Command ‚Äì Binds an action to a Receiver . Invoker ‚Äì Handles a collection of Commands and determines when Commands are executed. Client ‚Äì Manages interactions between Receiver / Command and Command / Invoker . While that‚Äôs all very high level and abstract, it may begin to make sense when you consider that the postal service as a modern, real world example of the command pattern in action.  A recipient waiting to get some mail is a receiver .  Letters would be considered commands , each awaiting their time to be ‚Äúexecuted,‚Äù by being delivered to the appropriate recipient.  A mailman/mailwoman is obviously the invoker , handling the collection of letters ( commands ) and determining when they are delivered (executed).  The postoffice itself is, therefore, the client , as it determines which letters ( commands ) are assigned to which mailpersons ( invokers ). Moreover, the command pattern is intended to make it easy to revert or undo a previous command action, if necessary.  As we all know, this also applies to postal deliveries, since a refused letter or package can easily be picked up and returned to sender, thereby reverting the initial command action. As with other behavioral pattern code samples, the command pattern example is somewhat complex at first glance.   We‚Äôll completely break down our sample below, so you can easily understand everything that‚Äôs going on in the code.  As an avid gamer myself, I decided to implement a basic Character modification system for our command design pattern example.  Here‚Äôs the basic rundown of the logic: Character class ‚Äì Our receiver , which contains a few standard statistics ( Agility , Charisma , and Strength ) that we want to manipulate. Modification class ‚Äì Our command class, which allows us to modify a statistic for the associated Character instance. ModificationManager class ‚Äì Our invoker class, which holds the Modifications queue and determines when queued commands should be invoked. Program.Main(string[]) method ‚Äì Our simple client class, which creates two Characters , a number of Modifications , then proceeds with executing and reverting them to see how Character statistics change. That‚Äôs the big picture of what we‚Äôre going for here, so now we‚Äôll start with the full code sample for easy copy-pasting.  Afterward, we‚Äôll start digging into it to see exactly what‚Äôs going on: The Command.Statistics namespace contains just a few statistic classes ( Strength , Agility , and Charisma ), each of which merely contain a Value property. They‚Äôre not a fundamental part of the command pattern , so we won‚Äôt go into anymore detail on those.  Instead, let‚Äôs take a look at the Character class: This is our core Receiver class, which is basically the object we‚Äôll be acting upon via Modifications .  As you can see, each Character just has a Name and a set of statistic properties, each of which have Value properties of their own that default to 0 . Next, we move onto the Modification class.  However, before we do so, let‚Äôs look at the IModification interface that Modification implements: One of the goals of our command pattern example is the ability to revert modifications that have already been made.  This effectively allows the system to freely perform any modifications, in any order, and even to roll them back in any order as well, without confusing the logic or incorrectly modifying the underlying Character statistic values.  To that end, we‚Äôll be using the Command.Status enumeration values throughout our logic to assign and check the current stage of each Modification . The IModification interface is really the actual Command object we‚Äôll be using.  However, since it‚Äôs an interface, we refer to classes that implement said interface as ConcreteCommands .  The fundamental methods we need are Execute() to trigger an action and Revert() to roll an action back.  We also store the Status and unique Id , in case we need to refer to a Modification elsewhere in code. Now we get to the Modification class, which is ultimately a Command , although we could have multiple Command classes to implement the IModification interface, so calling Modification a ConcreteCommand is a bit more accurate in this context. The Modification constructor method accepts a Character , a StatisticType (which is just an easy way to refer to Agility , Charisma , or Strength statistics), and a decimal value .  The value parameter represents the potential change in value for the passed StatisticType associated with the passed Character instance.  Fundamentally, that‚Äôs all that a Modification does ‚Äî it changes one of the statistic property values of the passed Character . This value change is performed in the Execute() method, which passes most of its logical behavior to the UpdateValue(bool) method.  This method uses the CharacterStatisticValueProperty and CharacterStatistic properties ‚Äî both of which use a bit of reflection magic to obtain their underlying represented object values ‚Äî to calculate and update that new underlying Value .  The bool isReversion parameter allows us to use UpdateValue(bool) for both Execute() and Revert() calls, with almost no logical difference between the two methods. Next let‚Äôs look at the ModificationManager , which is our invoker class.  It handles the Modification queue and determines when Modifications need to be executed, reverted, or ignored: The most important component of the ModificationManager is the List<IModification> _queue property.  This collection is used by every method within the class.  For example, the HasQueue property uses LINQ to check if any queued objects have either a failing Status or are Queued (indicating they haven‚Äôt been processed yet). The AddModification(IModification) method allows us to add Modifications to the queue.  Similarly, RevertModification(IModification) attempts to find the passed Modification in the queue.  If it‚Äôs found and has recently been successfully executed, the Revert() method is called on that Modification , which rolls back the value of the Character statistic it‚Äôs associated with.  The RevertModification(Guid) overload allows us to perform reversion based on Id instead of an actual Modification instance argument. Lastly, the ProcessQueue() method will be used to perform the majority of logical processing of the queue.  This can be safely executed at any time, and simply finds any queued objects that recently failed or have never been executed.  This is why a distinction between the Status.RevertFailed and Status.ExecuteFailed enumeration values is important, since we can use the Status value to determine which action to take on the failed Modification . Lastly, we get to actually using our command pattern in some way, which is where the Program.Main(string[]) method comes in.  This is effectively our client object: Nothing too crazy going on here.  We start by creating a ModificationManager instance, along with a couple Characters , and a number of Modification instances for assorted statistics and values.  Then, we add the Modifications , in an irrelevant order,  to the manager queue, before calling manager.ProcessQueue() to apply all the modifications.  The output, up to this point, shows everything working as expected: Now that the queue contains some Modifications we can revert any of these changes we need to, at any time.  In this case, our code does so right away, but our assertions verify that the appropriate statistic Values are reverting as expected.  We also confirm that we can call RevertModification(Guid) using an Id rather than a Modification instance still results in proper behavior.  Sure enough, the output (and passing tests) confirm everything is working: So there you have it!  A small but relatively robust example of the command design pattern in action.  For more information on all the other popular design patterns, head on over to our ongoing design pattern series here !", "date": "2017-08-01"},
{"website": "Airbrake", "title": "Behavioral Design Patterns: Iterator", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/iterator-design-pattern", "abstract": "Today we‚Äôll be exploring the Iterator design pattern in our ongoing Guide to Software Design Patterns series.  The iterator design pattern may be the most frequently used pattern we‚Äôll be looking at throughout this entire collection of articles.  The purpose of this pattern is to traverse through a collection of objects and retrieve each element in turn.  This practice is used in programming so often that many developers may not even realize it‚Äôs considered a design pattern at all! In this article we‚Äôll examine the iterator design pattern in more detail, looking at both a real world example and some fully-functional C# code that will illustrate a few different ways this pattern can be implemented.  Let‚Äôs get going! One of the fundamental features of the iterator pattern is that it should allow a client to iterate through a collection, without any knowledge about the implementation of that collection, or the specifics and ordering of individual elements.  Thus, this sort of iteration through an anonymous collection reminds me a lot of a real-world audition process. Imagine you‚Äôre the theater director of the popular local theater.  A playwright comes to you looking to put on a production of her next big hit, Hamilton 2: Lincoln‚Äôs Revenge .  You put the word out that there are half a dozen major parts available and auditions will be held the next day.  Audition day rolls around and you sit third row center.  After meticulously arranging your pen and notepad just so, you call out, with appropriately dramatic flourish, that you‚Äôre ready to begin.  The first auditionee is a meek, mousy young woman who doesn‚Äôt seem to fit the part of the boisterous and fiendish queen she‚Äôs trying out for, so you jot down a note and quickly shout, ‚ÄúThank you.  Next!‚Äù  Out comes the next lamb to the slaughter, and the process repeats, again and again. This is the core of the iterator design pattern .  There‚Äôs a group (collection) of performers waiting backstage, but you (as the client) know nothing of what that group is made up of, the order they are in, or the individual people (elements) within it.  All you know is that when you yell, ‚ÄúNext!‚Äù, another person from the larger group comes on stage and gives it their all, and then awaits your judgment. Since we‚Äôre using C# for our sample code, implementing our own iterator design pattern is extremely easy, if we want it to be.  .NET provides built-in interfaces, like IEnumerable , that make traversal over a collection a piece of cake to code. Therefore, in the spirit of actually illustrating the underlying components of a traditional iterator pattern , our code sample will contain two different types of iterator implementations.  The basic iterator will show a more traditional pattern and all the actual components necessary to make a simple iterator in just about any programming language.  The advanced iterator, on the other hand, illustrates how we can use built-in .NET interfaces and members to implement an iterator as quickly and easily as possible. As usual, we begin with the full code sample below, so it can be copy/pasted for your own testing purpose if you‚Äôre following along.  After the code break, we‚Äôll then dive into the specifics and see exactly what‚Äôs going on: For all generic implementations of the iterator design pattern we effectively need three components: Aggregate ‚Äì Houses the collection of elements to be iterated, along with a way to access an Iterator instance. Iterator ‚Äì Handles iteration logic of the passed Aggregate collection. Client ‚Äì Creates the Aggregate instance and collection, then performs the actual iteration looping. Therefore, our basic iterator example begins with the IAggregate interface and Aggregate class that implements it: The primary functionality is that the Aggregate should hold our object collection and provide an Iterator instance so we can iterate over the elements.  For simplicity, we‚Äôve also provide access to the underlying elements by index via the this[int index] property.  This will be used in the Iterator class to perform iteration based on the element index. Speaking of the iterator, let‚Äôs take a look at the IIterator interface and the Iterator class that implements it: The fundamental requirements of the Iterator is that it can retrieve the next element in the underlying Aggregate collection.  We just iterate the private _index property when the Next() method is called, returning a boolean that indicates if the index is within the bounds of the collection or not.  Alternatively, we could also have the Next() method return the next object element, but we‚Äôve abstracted that task to the Current property instead. To test out our basic iterator we now need some sort of client code, which is setup in the main Program class: The BasicIteratorTest() method performs all the client logic.  In this case, we create a new Aggregate instance and populate its collection with a list of Books .  Next, we need to retrieve an instance of the Iterator that will iterate over the aggregate collection.  With the iterator in hand we can call iterator.Next() to see if the next element exists, and while it does so, call iterator.Current and output the result to the log. If all is working correctly, we should get a log output for each Book .  Sure enough, that‚Äôs just what we see: That shows the generic way of implementing an iterator in most languages.  Now, let‚Äôs look at the advanced iterator, where we use built-in components provided by .NET to simplify the process and limit our code requirement as much as possible. Our iterator and aggregate components are all contained within the Iterator<T> class: We want to ensure this iterator is generic (can be used with any type of object), so we use <T> throughout the code.  Most importantly, the Iterator<T> class implements the IEnumerable<T> interface, which exposes built-in members that handle iteration logic for us.  All we need to do is define the GetEnumerator() and IEnumerable.GetEnumerator() methods within our class, and .NET will handle the rest for us.  In this case, GetEnumerator() loops through the collection via the index and returns each element via the yield keyword.  The yield keyword halts execution each time it is called, allowing the iterator to call each subsequent element within the collection. The Program.AdvancedIteratorTest() method acts as our client component: We start by creating a new Iterator<Book> instance, then add the Book collection to the Values property.  Now we can loop through the Iterator collection just as we would any other IEnumerable in C#.  In this case, we can use foreach to retrieve each object, which is yielded to us via the GetEnumerator() method. As before, we should see the output showing us all the Books in our collection: There we have it!  We saw two different methods for implementing the iterator design pattern , depending how much you want to rely on built-in APIs versus your own explicit code.  For more information on all the other popular design patterns, head on over to our ongoing design pattern series here !", "date": "2017-08-08"},
{"website": "Airbrake", "title": "Structural Design Patterns: Proxy", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/proxy-design-pattern", "abstract": "Today we‚Äôre looking at the last of the Structural design patterns within our comprehensive Guide to Software Design Patterns series. The proxy design pattern is intended to act as a simple wrapper for another object. The proxy object can be directly accessed by the user and can perform logic or configuration changes required by the underlying subject object, without giving the client direct access to said subject . In this article we‚Äôll examine the proxy design pattern in more detail, looking at a real world example, along with a fully-functional C# code sample that will help to illustrate how the pattern might be implemented, so let‚Äôs get started! In the real world, many of us use a proxy pattern on a daily basis: Every time we hand our debit card to the barista or allow Amazon to charge our credit card for that next sweet bargain, we‚Äôre using a dominant (and powerful) proxy design pattern found throughout the modern world. A debit card is merely a representational proxy of a bank account. Money orders and checks act in much the same manner, which Jerry Seinfeld explores in one of his great bits: ‚ÄúA check is like a note from your mother that says, ‚ÄòI don‚Äôt have any money, but if you contact these people I‚Äôm sure they‚Äôll stick up for me. If you could just trust me this one time. I don‚Äôt have any money, but I have these. I wrote on these‚Ä¶ Is this of any value at all?'‚Äù Just like checks, your credit card acts as a proxy for your bank account. It‚Äôs a (relatively) secure way for a client (such as your favorite local coffee shop) to post a charge to your underlying account, without allowing that vendor direct access to said account. This kind of system is used all the time due to its simplicity and ease of use. For the proxy design pattern code sample we‚Äôll stick with the credit card example above and implement a few classes that illustrate the basic concepts that a client would use to interact with your underlying account by going through a proxy of a credit or debit card. For simplicity, we‚Äôll start with the full working code sample below, after which we‚Äôll explore it in more detail: The basic structure of a proxy pattern consists of three components: Subject : The baseline interface that defines the fundamental components of the subject in question. RealSubject : The actual subject class that implements the Subject interface, and which the Proxy class will access behind the scenes and ‚Äúwrap‚Äù to enable easier client interaction. Proxy : The wrapper class that enables the client to perform actions upon the underlying RealSubject object, without performing any direct actions upon it. Therefore, we begin by implementing the Subject interface, which we‚Äôre calling IAccount to represent a bank account. For this exceptionally simple example we‚Äôre just tracking one property ( Balance ) and one method ( ChargeAccount(decimal amount) ), which are both self-explanatory in function: Now we need to create a RealSubject class that will implement the IAccount interface, so here we have the Account class: Note : It‚Äôs worth pointing out that we‚Äôve elected to specify a default balance value of $1000 for this example, whereas this amount would obviously be grabbed from a data service in production code. Most of the logic takes place in the ChargeAccount(decimal amount) method, where we check if the Balance is greater than or equal to the charge amount , and either reduce the balance appropriately and issue a success message, or issue a failure message. Finally, we need to create at least one Proxy class that will attach itself to our RealSubject class ( Account ) in some way, and then perform actions that ‚Äúwrap‚Äù those underlying class methods. For this example we‚Äôve actually defined two proxy classes with CreditCard and DebitCard , which both perform similar actions. However, their major difference is that CreditCard allows charge attempts to exceed the current Balance by performing an overcharge (i.e. simulating a credit card), whereas the DebitCard class prevents charges that would exceed the current Balance . In both cases, it‚Äôs important that we access an Account class instance, so we‚Äôve defined two constructors, one where an Account instance can be passed, and the other where a new Account instance is generated during construction: Now, to make use of the proxy pattern classes we start by instantiating one of our proxy classes. We‚Äôll begin with the DebitCardTest() method: As mentioned, we first create an instance of DebitCard() (which creates a new, associated instance of Account ), then we attempt three charges to the account. Since this is the DebitCard proxy class, our expectation is that an attempt to overcharge the account will result in a failed transaction. Sure enough, the log output shows our two successful charges followed by the third failed charge: Now let‚Äôs try the CreditCardTest() method, which performs the same series of charges, but should allow our final charge to succeed by performing an overcharge: As expected, the output shows that all three charges succeeded, however, since the last charge resulted in an overcharge (which is explicitly allowed by the CreditCard proxy class), the final account balance is negative $57.60 . This was a tiny sample of what the proxy design pattern can do, but should help to give a sense of its potential. Feel free to check out more design patterns in our ongoing design pattern series here !", "date": "2017-07-18"},
{"website": "Airbrake", "title": "Structural Design Patterns: Flyweight", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/flyweight-design-pattern", "abstract": "Dive into the exciting world of the flyweight design pattern in today‚Äôs article, as we continue looking at Structural design patterns throughout our extensive Guide to Software Design Patterns series. The flyweight design pattern , named after the boxing weight class of the same name, is intended to be just as agile and adaptive as those nimble athletes. Flyweight gains this agility by minimizing memory and computational usage by sharing and reusing objects. In this article we‚Äôll explore the flyweight pattern in more detail, looking at both a real world and fully-functional C# code example to help illustrate how the pattern can best be used, so let‚Äôs get to it! Virtually any instance of reuse that we might encounter in our day-to-day lives would arguably constitute a form of the flyweight pattern . However, since one major principle of the pattern is the notion of ‚Äúsharing‚Äù ‚Äî and since I personally just returned a movie rental yesterday ‚Äî the immediate example that comes to my mind is physical movie rental services like the ubiquitous Redbox. In case you aren‚Äôt aware, Redbox is a DVD-rental service that provides little red kiosks, plopped outside storefronts and the like, each packed with an assortment of movies and console games that can be rented for a day at the cost of a few bucks. Select your movie, swipe your credit card, and the machine spits out your Blu-ray or DVD to take home. If can get home fast enough, you can possibly binge-watch 50 Shades of Grey eleven times during your 24-hour rental period, before you‚Äôll need to rush back to a Redbox kiosk and return the now well-worn disc. Movie tastes aside, the Redbox business model (and the entire concept of movie rentals, for the matter), is a great real world example of the flyweight design pattern . Movie studios and distributors don‚Äôt want to print an excess of discs, but they don‚Äôt want an availability shortage either. Since discs are generally quite cheap to print and distribute, most companies err on the side of excess. This is where Redbox (and similar services) carve out their entire business model: Scooping up those excess discs on the cheap and renting them out to viewers who don‚Äôt mind stopping by a kiosk to grab a movie that isn‚Äôt available on streaming services. Since each Redbox kiosk may only contain a handful of copies of a specific movie, most individual discs will be rented and viewed by many people over the course of their lifespan. The distributor and/or Redbox only need a relatively small library of discs inside a single kiosk to facilitate rentals from many, many individuals. The ability to ‚Äúreuse‚Äù discs between different renters, as well as sharing discs between customers and across other kiosks, is exactly what the flyweight pattern aims to accomplish. Even though I used movies as a real world example of the flyweight design pattern , we‚Äôre going to use more literary examples in our code sample. As usual, let‚Äôs start with the full code below, then we‚Äôll dig into it a bit more afterward: As briefly mentioned in the introduction, the overall purpose of the flyweight pattern is to make it easier to reuse objects whenever possible, ideally saving both memory and processor time. To assist with this goal, a typical flyweight pattern implementation consists of the following three components: Flyweight interface : This interface defines the basic members of all flyweight objects. ConcreteFlyweight class : A class that implements the Flyweight interface . Must be shareable. FlyweightFactory class : Handles all flyweight object sharing. Can retrieve existing flyweight objects, or create new ones when necessary, usually through a shared collection. While we won‚Äôt show an example of it here, another common type of object is the optional UnsharedFlyweight : (Optional) UnsharedFlyweight class : Also implements the Flyweight interface , but these do not require sharing. For our example code above we‚Äôre using these fundamental concepts to build the Library class, which behaves as our FlyweightFactory . We add IPublication objects, like Books and GraphicNovels , to our Library collection, sharing all these objects in a Dictionary collection. We start by defining a few helper classes specific to our example. Author , Illustrator , and Publisher are not part of the flyweight design pattern , but they‚Äôre included to flesh out the code and illustrate something closer to a production example. The same goes for the PublicationType enumeration: Next, we get to the first major component of our flyweight pattern , the IPublication interface, which acts as our Flyweight interface and defines a few properties: We now need a few ConcreteFlyweight classes in the mix, so here we define our Book and GraphicNovel classes, both of which implement the IPublication interface: In this case, Book and GraphicNovel contain slightly different property signatures, which is a bit more realistic. Regardless, the point is that we can define as many ConcreteFlyweight classes as we need to, and within our FlyweightFactory class we‚Äôll actually differentiate between them when we need to handle sharing logic. Speaking of the FlyweightFactory class , now we finally declare our own in the form of the Library class: While this may appear a little complicated, we‚Äôll break down the fundamental components of the Library class and you‚Äôll see that there‚Äôs really not a lot going on at all. A fundamental aspect of the flyweight pattern is the ability to share and reuse objects, so our factory needs a collection, or some other means of tracking all flyweight objects. Therefore, we begin with the Publications property: We‚Äôre using a Dictionary here to store our collection, which makes it easy to use a complex key value (a three-part tuple, in this case) that can be associated with each IPublication object value . The GetPublication() method is where most of the magic happens. In this example we‚Äôre using this method to perform all sharing, reuse, and creation logic, but obviously we could split this logic up if necessary. Again, we need a way to uniquely identify our IPublication (flyweight) objects, so we use the same three-value tuple as the key, then immediately create a new IPublication instance variable. We‚Äôll use this variable throughout the method logic to hold either the new or existing object. Next, when implementing reusability we won‚Äôt want to create objects that already exist, so we first check if the Publications collection property contains the key parameter. If the key exists in the collection we simply assign the existing object to the local publication value: On the other hand, if key doesn‚Äôt exist in the collection we probably need to create a new object instance and add it to the collection. For this example we‚Äôre using the third value of our tuple key to store the PublicationType of the object. Therefore, we perform a switch() using that third item of the tuple, and try to find a match of either PublicationType.Book or PublicationType.GraphicNovel , both of which our method can handle: If we‚Äôre dealing with a valid PublicationType our code creates a new instance of the respective object. Note: In this example only some of the arguments passed to new Book() and new GraphicNovel() are dynamic (e.g. obtained from the key tuple), while the remaining arguments are hard-coded. Obviously, this is a poor practice in a real-world application, but creating a five- or six-part tuple is a bit of a hassle, so I decided to leave it as is for now. Lastly, since the local publication variable within this else block scope was assigned to the newly-generated IPublication instance, we need to Add() it to the shared Publication collection. Now that we‚Äôre all set up let‚Äôs try actually using our Library flyweight configuration. We always begin by creating a new FlyweightFactory class instance ( Library , in this case), and then use the GetPublication() method to create (or retrieve) object instances. In our first example here, we start by creating a new book and a new graphic novel, then we attempt to GetPublication() using the same key tuple values we passed in the first call: We end the example with an output from library.GetPublicationCount , which simply retrieves the quantity of IPublication objects stored in the library. Since our second Book retrieval attempt uses the same values as the first, if our code is working correctly we‚Äôd expect to see only 2 publications in the collection, since the second Book call should be a retrieval of an existing record. However, our output actually shows that the second Book call also created a new instance, thereby giving us 3 objects in the collection: Keen observers will probably already notice the problem: The Author value we‚Äôre passing into our tuple creation is always a new Author() instance in this example. Even though the string Name property value of the Author is the same in both cases, the underlying Author object is different, and therefore, the generated key that is used for comparison within the Library.GetPublication() method differs. The solution is to explicitly pass the same instance of Author to both our Book retrieval attempts, which we do here in Example2() : Executing the above code now gives us the output we‚Äôd expect: The first call to Book and GraphicNovel both create new object instances, while the second identical Book call performs a retrieval of the existing book object, resulting in only 2 total publications in the collection: Just for fun we‚Äôve also included a final example illustrating what might happen if we pass a key to the retrieval method that doesn‚Äôt exist in the collection, but also cannot be used to create a new object instance either. To accomplish this we‚Äôve added a third PublicationType enumeration, but the Library.GetPublication() method is only built to handle Book or GraphicNovel , throwing an ArgumentException if another type is used: Sure enough, executing the above example method throws an exception our way, as expected: This is just a small taste of what can be accomplished with the flyweight design pattern , but hopefully it helped to illustrate the agility and potential for resource savings that this pattern can provide. Check out more design patterns in our ongoing series over here !", "date": "2017-07-11"},
{"website": "Airbrake", "title": "Behavioral Design Patterns: Chain of Responsibility", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/chain-of-responsibility", "abstract": "Today we‚Äôll begin the last leg of our journey through all the most common design patterns within our Guide to Software Design Patterns series.  It‚Äôs finally time to move onto Behavioral patterns, which try to build a foundation on which objects can communicate and assign responsibilities to one another.  First up in the Behavioral pattern list is the Chain of Responsibility design pattern, which makes it easy to chain objects together in an ordered set.  A specific, logical requirement is passed into the chain and is checked against each object in the set, in order, until a suitable match is found that meets the needs of the particular requirement. In this article we‚Äôll explore the chain of responsibility design pattern in more detail, looking at both a real world example and a fully-functional C# code sample that will illustrate how you might use the pattern in your own code, so let‚Äôs get going! Upon hearing the term chain of responsibility , it isn‚Äôt a far stretch to think of the similar phrase known as a chain of command .  In point of fact, both terms are often used interchangeably to mean the same thing.  However, when dealing with programming, the concept of command isn‚Äôt always applicable (or, more likely, could be confused for its other meanings), so the chain of responsibility pattern was born and is generally more representative of the intended goals. That said, one obvious real world example of a chain of responsibility pattern is the order of command in a governmental or business organization.  For example, The United States Presidency is held by the current President, but an extensive line of succession is laid out through the United States Constitution and the Presidential Succession Act of 1947 .  In the event that the current President cannot continue with his or her responsibilities, the Presidency would pass down to the Vice President, then the Speaker of the House of Representatives, and so forth. While a chain of succession begins from the top of the chain and works its way downward, a chain of responsibility typically works its way upward, starting from the bottom.  This practice is commonly seen in the realm of business, when an important decision must be made within a company.  The decision must pass up the chain of command, from employee to supervisors to manager to president and so on, until an individual with enough authority to make an appropriate decision is found. We‚Äôll be basing our code sample off the real world chain of responsibility pattern found in many companies and put into practice via its employees.  Specifically, imagine we starting a publishing company and we have a series of books we want to publish.  Each book is assigned a type of cover (paperback, digital, or hard cover), along with an estimated publishing cost.  We‚Äôll then create a series of specifications (using the specifications pattern ) that will define various criteria to check for our books, such as their cover type or publication cost.  We‚Äôll create a list of employees with varying authority levels (CEO, President, CFO, etc), and assign each employee a set of specifications that will determine what types of books that employee is qualified to approve for publication.  Finally, with everything in place, we can loop through each book and run up the chain of responsibility of each employee, checking whether he or she has the proper authority to publish that book.  If so, publication occurs, and if not, the next employee up the chain is checked for authority. That‚Äôs the basic explanation of what our code accomplishes.  As usual, we‚Äôll start with the full code sample below, and then we‚Äôll dive into the details and explain what‚Äôs going on afterward: Note : As you can see, this code sample is quite massive and somewhat complex.  As such, to save space in this article, we‚Äôve excluded the code of the Logging class that is used to output information to the console.  Feel free to check out previous design pattern articles, such as our Proxy Design Pattern article, if you need that code.  Otherwise, this sample will work perfectly fine by replacing all Logging.Log() method calls with Console.WriteLine() calls instead. The chain of responsibility design pattern consists of just two fundamental objects: Handler Interface ‚Äì Defines the methods and properties that will be used to handle requests. ConcreteHandler Class ‚Äì Handles all requests and stores a successor .  If the current ConcreteHandler can manage a request, it does so, otherwise it passes it along up the chain to the successor . For our purposes, we‚Äôve defined the IEmployee interface to behave as the Handler interface, along with the Employee class, which implements IEmployee and acts as our ConcreteHandler : For now let‚Äôs ignore the IPublishable interface, which Employee requires its Type to be a member of, and just briefly explain what the class does.  The fundamental requirement is the storage of a successor , which is an IEmployee<T> instance itself.  This will be used to indicate which other Employee is next in the chain of responsibility .  We also have a few properties like name and position that we‚Äôre using for logic and output elsewhere, to make it easier to differentiate between employees. Beyond that, our basic logic occurs in CanApprove(T book) and PublishBook(T book) .  When we want to publish a passed book we first need to check if the current Employee has the authority to approve that request, so CanApprove(T book) calls the _specification.IsSatisfiedBy(T book) method.  We‚Äôll explore what this does later, but the purpose here is to check if the current Employee meets all the specification criteria required by the book in question.  If so, we Invoke() the _publicationAction that was passed and output the successful publication result.  On the other hand, if CanApprove(T book) is false, we check if _successor exists, and if so, we call PublishBook(T book) for the successor (the next Employee up the chain of responsibility ).  This process repeats until an Employee with the proper specifications necessary to publish the book are found, or until the end of the chain is reached and publication, therefore, fails. Our Book class implements the IPublishable interface, which we saw used earlier by the Employee class, and simply covers the fundamental properties of a book (title, author, cover type, and publication cost): The last set of classes we‚Äôll need for our setup is the ISpecification<T> interface, and the Specification<T> class that implements it.  As previously mentioned, we‚Äôre using the specification pattern here, so that we can define loose sets of business rules for our books, which can then be freely applied to our various employees based on their ranks.  To that end, the fundamental behavior of the specification pattern is the IsSatisfiedBy(T expression) method, which basically checks if a passed in candidate or expression meets the criteria of (is satisfied by) the current specification. IsSatisfiedBy(T expression) returns a boolean indicating the success or failure of this check. Beyond that we also have a few extensions for the Specification<T> class, so we can perform simple And , Or , or Not logic using multiple specifications: Whew!  Now that everything is setup we can make use of our chain of responsibility pattern and test it out.  There‚Äôs a lot going on in our Main(string[] args) method, so we‚Äôll break it down into smaller chunks. We start by creating a new List<Book> and add a handful of books, each with a title, author, cover type, and estimated publication cost.  Our goal is to check this set of books, to see which ones can be published, and which Employee within our chain of responsibility has the authority to do so: Next we need to create some specifications.  These can be as simple or as complex as we want.  In this case, we start by creating a specification for each CoverType of book that we have.  We also create some PublicationCost -based specifications, which each cover a unique range of costs: Now we need to create a few Employees , which will serve as the basis of our chain of responsibility .  To better differentiate between each employee we assign them a unique Name and Position .  Lastly, we‚Äôve created a new PublicationProcess instance, which is a simple class that implements two methods, PublishBook(Book book) and FailedPublication(Book book) .  These two methods will be passed to our various Employee instances to indicate the behavior (the publication Action<T> ) that should be taken when the Employee successfully publishes (or fails to publish) a book: Now that our employees are defines we want to start giving them each various levels of responsibility and authority.  We accomplish this by assigning them sets of specifications.  The comments provide details on what is going on in each example, but the basic goal is to ensure that a particular Employee can only handle certain types of books, based on CoverType and/or PublicationCost : Now that each Employee has their own set of specifications, the last step is to create the chain of responsibility .  We do this by calling SetSuccessor() for each Employee , to indicate which other Employee is his or her immediate superior.  We‚Äôve used defaultEmployee throughout this to be the baseline or ‚Äúfallback‚Äù Employee instance.  The Action<T> that was passed to defaultEmployee during instantiation was publicationProcess.FailedPublication .  This action allows us to specify that, should a particular book reach the defaultEmployee in the chain (above the CEO), that indicates that no actual employee met the criteria of the book, so publication is not possible: With everything ready to go, we begin the process of searching up through the chain of responsibility for an applicable Employee that has the authority to publish each Book , starting at the bottom with the director : The end result of all this after running our code is some output showing us which books in our set were actually published, and by whom: For each Book in the set we can actually look back at the specifications assigned to each Employee in the chain to see why that Employee had the authority to approve publication.  In the case of 1984 by George Orwell, no Employee was found that met those specifications.  We can see it‚Äôs a paperback CoverType and at $22,500 would fall into the lowBudgetSpec .  However, looking back at our Employee specifications we can see that none of them meet both those criteria.  The director meets the lowBudgetSpec , but only for books that are digital CoverType .  As a result, our defaultEmployee ended up being the only candidate, which forced a call to FailedPublication() , hence the output that we see. This is a small taste of what the chain of responsibility design pattern is capable of.  It can be quite useful in certain situations, and when combined with other patterns like the specification pattern used above, it can be both powerful and robust.  For more information on all the other popular design patterns, take a look at our ongoing design pattern series over here !", "date": "2017-07-25"},
{"website": "Airbrake", "title": "Structural Design Patterns: Facade", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/facade-design-pattern", "abstract": "Today, as we make our way through the last few Structural design patterns in our extensive Guide to Software Design Patterns series, we‚Äôll be taking a closer look at the facade design pattern.  The facade design pattern is one of the simpler (and thus most commonly used) patterns we‚Äôll come across, as it provides a simple interface that can be used to manipulate more complex logic behind the scenes, hidden from the client executor. Throughout this article we‚Äôll dig into the facade pattern a bit more by looking at a real world example, along with some fully-functional C# code to illustrate how the pattern can be used in your own development.  Let‚Äôs get this party started! The facade design pattern makes it rather easy to simplify complex processes into more abstract concepts, unbeknownst to the instigator of said processes.  This practice is applied in virtually all forms of business today, but the most obvious application is in manufacturing.  For example, imagine you are an executive at General Motors and you want to produce a new model of car.  Your involvement in that process will be rather limited, relative to the overall complexity of releasing a new car to the world.  Ultimately, you might make some top-level decisions, such as the name, style, major features, pricing, and so forth, but the actual creation of the car (and all its subsequent components) will be accomplished by thousands of other employees and departments across your company. This is a simple example of the facade design pattern in action: The client (you, as an executive at GM in this case) makes a top-level decision about a task that is to be performed (creating a new car model).  The client initiates this process with some basic inputs (name, style, price, etc), but then the majority of the grunt work is performed by more concrete worker objects (in this case, actual workers).  One depertment might handle electronics, another the body shape and styling, another the engine, and so forth.  As the instigating client you‚Äôll likely perform regular checkups to see how progress is coming along, but these updates will typically be abstract notions rather than highly-detailed specifics.  The Head of Electronics might indicate that 80% of the work is complete, but an extra two weeks are required.  The specifics of what exactly is going on with the electronics ‚Äî which components are working and which need to be redesigned ‚Äî will often be irrelevant to you, as the client that began the process of creating a new model. These concepts bleed into nearly every aspect of business, but that‚Äôs a relatively common (and simple) real world example of the facade design pattern being put to good use. For facade design pattern code example we‚Äôll be sticking with one of my favorite topics: books.  In this case, our client wants to check if a particular book is ready to be published, but the client doesn‚Äôt want to concern him or herself with the specific status of each component involved in publication (author, content, editor, publisher, cover, and so forth).  The client just wants an easy way to determine if a particular book is ready to be published or not, so this is a perfect scenario in which to implement a facade pattern . As is often the case, we‚Äôll start with the full working code example right away, and afterward we‚Äôll go over it in more detail to see how the facade design pattern is implemented: The facade design pattern is intended to simplify the behavior of many sub-components that are required to create a larger, more abstract concept.  Therefore, in the case of publishing a book we start with a series of classes that all perform a unique role in creating the completed work: We have five component classes that we‚Äôll be using here.  As you can see, Author and Content include a few constructor overloads to allow for population of the Name and Title properties, respectively.  Otherwise, all five of these component classes are quite basic, simply implementing a HasClassName() method that returns a boolean indicating if the passed in book parameter meets the requirements of that class.  For Cover.HasCover() and the like, this method merely checks for the existence of the Cover property associated with the book parameter. Author , on the other hand, also verifies that the Author has a Name . Again, the logic of these component classes can be expanded as much as necessary, but the basic principles still apply.  We‚Äôre able to use all of these classes, along with their internal logic, and in tandem with a facade of some sort, to determine if a book is ready to be published. We next need to define our Book class, which each of our component classes expects as a passed parameter: Nothing too fancy going on here.  Just to simplify things we‚Äôre keeping track of public properties of each of our component classes within the Book class, which can be easily populated with one of the constructor overloads.  That said, we‚Äôre not performing any logic about the Book instance or its readiness for publishing within this class, because we want to handle that via a facade if some sort.  As it happens, we‚Äôll handle that facade right now with our final definition, the BookFacade class: Here we‚Äôve decided to use internal properties for each of our component classes (along with initial instances as their default values).  This ensures that we can use instances of these components within our BookFacade logic, without exposing them to outside clients or other objects. Our entire facade design pattern example here boils down to the BookFacade.IsPublishable(Book book) method, which checks that every component class returns a positive ( true ) value for their respective HasClassName() method call.  Thus, a client only needs to call IsPublishable() with a passed in Book instance to determine if all the underlying component logic is valid or not. To put this into action we have two book instances we‚Äôve created: We start by instantiating a new BookFacade object, then move onto creating an empty Book object, before outputting the content of emptyBook and the status of the bookFacade.IsPublishable() method result.  As we should expect, since a completely empty Book instance doesn‚Äôt contain any of the requisite component property instances, emptyBook isn‚Äôt publishable: We‚Äôve also created a second Book instance called populatedBook , and passed in new instances of all the component classes.  This should populate all the required properties of populatedBook , giving us a positive result from the IsPublishable() .  Sure enough, it works! This is just a small taste of what can be accomplished with the facade design pattern , but I hope it gave you a bit more insight into the simplicity and potential power it can provide.  Check out more design patterns in our ongoing series over here !", "date": "2017-07-06"},
{"website": "Airbrake", "title": "Celebrate the Fourth of July with JavaScript Fireworks!", "author": "Unknown", "link": "https://airbrake.io/blog/javascript/fourth-of-july-javascript-fireworks", "abstract": "Many Americans celebrate the Fourth of July by hanging out with friends, having a backyard barbeque while enjoying some cool drinks and watching a wonderful display of colorful fireworks.  In honor of the holiday, we thought we‚Äôd create our own little JavaScript fireworks display. Even if you aren‚Äôt from America yourself, fireworks can still be fun and beautiful, so come celebrate with us and learn how to create your own cool fireworks display with a bit of JavaScript! To begin this project all you need is a modern web browser and whatever text editor you prefer.  I‚Äôm using Google Chrome and Visual Studio Code, but most anything you are comfortable with will work just fine; even Notepad! We‚Äôll be using JavaScript for this tutorial because its simplicity and its prominence ‚Äî just about every computer or device out there can handle JavaScript, so there shouldn‚Äôt be any compatibility issues for those of you following along. Our entire application will consist of just three files: index.html : This is the HTML page we‚Äôll load in our browser to view our finished work. default.css : The cascading stylesheet that contains the (minor) styling adjustments we‚Äôll need to make things look great. app.js : The meat and potatoes of our application.  This is where all our firework-generating goodness will reside. That‚Äôs all we‚Äôll need, so start by adding a new directory on your computer and creating those three blank files.  Alternatively, you can use an online development playground tool like Codepen , in which case everything will appear in the browser as you follow along. Since this is an animated fireworks display that we‚Äôre going for, it‚Äôs rather difficult to portray what the final result will look like in writing.  If you want to see what the final product will look like (as well as view the full code all in one place), have a look at this CodePen entry . Let‚Äôs begin by writing the simple HTML that we‚Äôll need to display our fireworks application.  We‚Äôre going to be using the powerful canvas API that was introduced with HTML5 , which makes it very easy to create all sorts of web-based graphics using real-time languages like JavaScript. Therefore, most of our drawing and creation logic takes place in the app.js file, so the contents of index.html is fairly sparse.  Copy and paste the following into index.html : Our index.html file begins with a standard DOCTYPE specification, along with the <meta> tag where we specify the character set we‚Äôre using, along with the page <title> .  We also need to include our default.css stylesheet, so the <link> tag comes next to accomplish that. Next is our (limited) <script> block.  Normally we‚Äôd directly include the app.js script file via <script src=\"app.js\"></script> .  However, it‚Äôs important that we attempt to load the app.js code after our page has fully loaded.  Since we‚Äôre not using any outside libraries like jQuery, which would normally give us the means to do this automatically, we need a few lines inside the <script> tag to force our HTML page to load app.js after the page has finished loading all other elements. The final thing we need to add is the <canvas> element, which is where all the magic happens and where our fireworks graphics will actually be drawn. Our style content for this tutorial is extremely simple.  Start by opening the default.css file that was created earlier and paste the following into it: As indicated by the comments, all we‚Äôre doing here is changing the <body> background to black and removing the margins .  For the critical <canvas> element we‚Äôre simply changing the display style to block , which ensures that the canvas stretches the entire width of the page. That‚Äôs all we need to do for styling, since most of the graphics will be created in real-time through our JavaScript code.  It‚Äôs also important to note here that we‚Äôre using so little CSS that we could‚Äôve just included the inline styling directly inside our index.html page using <style></style> tags.  However, it‚Äôs generally recommended to avoid inline styling, since it helps to keep projects much cleaner by separating styling ( CSS ) from layout ( HTML ). Finally we get to the fun part ‚Äî writing some JavaScript code!  There are many ways to accomplish the goal of creating fireworks (just browse through the plethora of examples on CodePen and elsewhere), but for this script we‚Äôve opted for a fairly simple approach.  Our fireworks display will be made up of two types of elements: fireworks and particles . A firework (within our code) represents a single trail that is launched from the bottom of the screen to a destination position.  Once it reaches its destination, it should explode and create a series of particles , which will shimmer and rain down just like real fireworks! To get started simply open up (or create) the app.js file.  One goal of this example is to allow for a lot of customization, so you can easily modify the behavior of nearly all elements of the fireworks to see what cool things you can come up with.  Therefore, we begin our app.js file with all the configuration options: We‚Äôve purposefully opted to use the const keyword for all the configuration settings.  This is generally good practice since it ensures we cannot accidentally change the value during runtime.  Most of the configuration options are reasonably commented and use appropriate default values, but once our application is up and running, feel free to play with these settings and see what you can do! The configuration is split into four main categories: Fireworks settings to adjust the behavior of the fireworks themselves, particles to adjust the behavior of explosion particles, canvas coloration to modify global behavior, and tick restrictions to adjust how frequently fireworks are launched. The next section houses all the local variables.  These are not constants, and will be used and modified frequently throughout the entire project.  Go ahead and add this next section to app.js : Again, most variables are commented, but critical ones include the fireworks = [] and particles = [] arrays that we‚Äôll use to keep track all the individual instances that are active at any given time. While not required, it‚Äôs often beneficial to create a few helper functions in most applications.  These should be independent functions that are not tied into the logic or functionality of your application in anyway.  Think of them like a library that can be used in virtually any project. For our purposes we just have a few helper functions to add to app.js : In addition to random() , used to get a random value within a range, and calculateDistance() , to figure out how far apart two points are, a particularly important helper function is window.requestAnimFrame() .  This immediately invoked function expression ( IIFE ) allows us to call the appropriate requestAnimationFrame() method of whatever browser is being used. requestAnimationFrame() is a smooth way to request that the browser redraw the window, without resorting to weaker techniques like using setTimeout() (which should be a last resort for modern development). One small (but fun) feature we‚Äôll be adding is the ability to click anywhere on the page to manually launch a new firework toward that specific position.  To accomplish this we need to know where the mouse position is at any given moment, while also tracking when the mouse button is pressed and released.  These event listener functions allow us to update relevant variables when the mouse is moved or clicked: The prototyping section of the app.js code is where the majority of our application logic takes place.  This is where we‚Äôll define how fireworks and particles are created, updated, and eventually destroyed.  We‚Äôll use the great number of configuration settings we defined at the top of the app.js file, along with elapsed time (in the form of ticks or loops of our animation), to determine what should be changed.  This will be a fairly extensive section, so we‚Äôll break it up into functinal sections to make it easier to digest. As the name of this section indicates, we‚Äôll be using the tried-and-true prototyping technique to create our critical Firework and Particle objects.  This allows us to track individual instances of these elements easily, while also assigning each instance a unique set of properties that will affect its behavior. We begin with the Firework object: Most of this function is used to set the assortment of properties that the Firework will use elsewhere.  Of particular note is the start and end point parameter coordinates, which tell the Firework the path it should travel on.  We use these points to calculate the distance it will travel, the angle of trajectory, and so forth. Next is the Firework.prototype.update() method: This is where most of the behavioral logic of our Firework takes place.  We start by adjusting the trail property array, which we‚Äôre using to track a list of active positions that should be used to draw our firework trail graphic. We also adjust the speed and use the calculated velocity to determine how far this firework has travelled.  We use this travelled distance to determine if the firework has reached its target destination, in which case we destroy it and create a new explosion of particles via createParticles() . The final Firework prototype is the draw() method: This is where all visual updates are made to this particular Firework instance.  All we‚Äôre really doing is creating a new line that spans between the current position of the firework and the tail end of the firework‚Äôs trail. We also have a second stroke using the arc() method that creates our target circle indicator, showing the position that the firework is heading toward. The next section contains the latter half of our prototyping code, which we‚Äôre using to handle the Particle elements.  As we‚Äôve already seen, Particles are the series of trails that are generated when a Firework reaches its target position and explodes. Since much of the Particle prototype code is similar to that of Firework , we don‚Äôt need to explain it in detail outside of the provided comments, so feel free to add the following to app.js to continue: Next we need to add a series of helper functions that are specifically tied to the logic and functionality of our application.  That means they make direct use of the various app-specific variables and objects we‚Äôve defined, so these functions are distinctly different from the helper functions we defined earlier. We start with cleanCanvas() , which you can read more about in the source comments, but is primarily intended to cleanup existing trails based on their current transparency/alpha level: We‚Äôve called createParticles() elsewhere already, and we‚Äôre using this method to create a series of new Particle instances when a Firework explodes: launchAutomatedFirework() is executed every animation loop and determines if enough time has passed to launch another automatic firework.  We launch fireworks from the bottom center of the screen and aim them toward a random position in the upper half: launchManualFirework() is also executed every animation frame and checks if enough time has elapsed to launch a manual firework, assuming the mouse button is currently pressed: The last two app helper functions are updateFireworks() and updateParticles() , which perform their respective tasks of drawing and updating the status of all existing Firework/Particle elements that are currently active: Last but certainly not least comes the main loop() function, which drives the entire application by recursively passing itself to each requestAnimFrame() call.  This ensure that within each frame, all our Fireworks and Particles are moved, updated, and redrawn as necessary, while also creating any new fireworks that need to be launched.  The final snippet of code to add to app.js is as follows: That‚Äôs all there is to it!  You‚Äôre now ready to open up the index.html file in your browser of choice and watch the fireworks fly.  Feel free to click around (or hold the mouse button) to launch them even faster.  Best of all, start messing with some of the configuration options to really kick things up a notch.  If your system can handle it, I recommend dramatically increasing PARTICLE_COUNT and lowering CANVAS_CLEANUP_ALPHA to really make things come alive!  Happy Fourth of July!", "date": "2017-07-04"},
{"website": "Airbrake", "title": "ES6 JavaScript: What's New? ‚Äì Part 5", "author": "Unknown", "link": "https://airbrake.io/blog/javascript/es6-javascript-whats-new-part-5", "abstract": "Today we continue our journey of exploring all the cool new features that ES6 JavaScript has to offer.  Thus far in this series we‚Äôve covered quite a bit of ground: In Part 1 we took a look at default parameters , classes , and block-scoping with the let keyword. In Part 2 we explored constants , destructuring , and constant literals syntax . In Part 3 we dove deep into just one major feature known as template literals . In Part 4 we examined the world of iterators and generators . For Part 5, today we‚Äôll be looking at arrow functions and promises . In the past, defining functions in JavaScript was a bit cumbersome compared to some other languages.  The new ES6 feature of arrow function syntax aims to reduce the amount of fluff required to define a function in many cases, often reducing the number of characters (or lines) required to create new functions.  We‚Äôll be using arrow functions throughout the next section of this article, so it‚Äôs a good idea to cover them here to illustrate how they differ from normal function definitions of the past. To illustrate let‚Äôs start with an example right out of the gate.  Here we have two functions that perform the same operation, but using the standard and arrow syntax, respectively: The first big change with arrow function syntax is we no longer need the function keyword.  Instead, the inclusion of => indicates the separation of the argument list ( (a, b) in this case) from the function code body ( a + b; ).  This tells JavaScript that this is a function definition without requiring function to be used anywhere in there. You‚Äôll also notice we‚Äôve done away with the curly braces ( { ... } ).  This is allowed only when the body of the function is a single line/expression.  If we were to extend our function body to two or more expressions we‚Äôd need to include the curly braces once again. Additionally, you‚Äôll notice the above example also discards the return keyword.  Again, if our function body contains only one expression and we‚Äôve omitted the curly braces, the return statement is implied but not necessary to write in there. However, if we want to expand our function body to two or more expressions we now have to add the curly braces and the return statement (if applicable) back in there: That‚Äôs about all there is to arrow function syntax, but it‚Äôs a good idea to get used to the pattern since you‚Äôll often find it in modern JavaScript code bases (including later on in this very article)! Promises are often compared to callbacks , which is the commonly accepted term used to describe a coding convention of creating a function that returns a result which may take some time to process.  Such functions are often referred to as asynchronous (or async for short), indicating that these functions require additional time (beyond what it would take to call the function during execution) to return their result. A ‚Äúnormal‚Äù function is one that returns a result immediately.  For example, performing a simple mathematical operation in JavaScript can be performed immediately and isn‚Äôt considered a callback function: On the other hand, a function which might require extra time to return a result, such as querying a database or performing some form of IO operation, are good candidates for callback functions: Making use of just a handful of callback functions in an application is usually no problem, but a common term in the realm of JS development is callback hell .  This loose term refers to code that contains callback upon callback upon callback, all of which are nested together in a tangle that‚Äôs extremely difficult to write let alone debug.  For example, consider something simple like determining if a User is registered in the database.  The callback chain could contain half a dozen functions looking something like this: While smart developers will aim to keep their code as shallow as possible (that is, removing as much callback nesting as possible), it can be difficult to accomplish when business requirements demand certain functionality. This is where the power of the ES6 promise feature comes into play.  A promise is similar to a callback in that it allows for asynchronous function execution.  However, the big advantage promises have over callbacks is that a promise represents a future result of an operation .  A promise is actually a new type of JavaScript object ‚Äî conveniently called a Promise ‚Äî which itself has a number of unique capabilities and methods.  In particular, a promise is a time-independent container wrapped around the value of a normal function. A Promise object only has three possible states: pending : The initial state prior to execution. fulfilled : Indicates a successful operation. rejected : Indicates a failed operation. Let‚Äôs see how promises actually work with a simple code example.  Here we have a Book class with a queryDatabase() function that we can call to perform simple CRUD queries regarding a specific book object.  Critically, queryDatabase() actually returns a new Promise object, which we‚Äôll use later to determine the async results of our query attempts.  For this simple example the actual asynchronous operations are replaced with setTimeout() calls to generate delays, but in a real world application actual database calls would be placed here instead: To query our database let‚Äôs start by creating a new Book instance and then we‚Äôll call the queryDatabase() method.  To simulate different database queries we pass different values to queryDatabase() such as READ or UPDATE : The .then() method of a Promise object accepts up to two arguments: the callback functions representing a success or failure of the promise itself.  Thus, in the example above our call to book.queryDatabase('READ') returns a new Promise object, with which we immediately invoke the .then() method and pass it a single function argument: The first argument of .then() is the fulfillment operation, meaning the passed parameter of this first callback function is simply the fulfillment (or success) message of our invoked promise object.  As you‚Äôll recall, inside the Book.queryDatabase() method the returned Promise actually calls the special resolve() function when we‚Äôre reading from the database, passing in a message specific to the fulfillment of the Promise object: Therefore, when we call book.queryDatabase('READ').then(...) the output we get is our fulfillment message from the underlying Promise object result, indicating we successfully queried the database and read the book record: Pretty cool, but promises are capable of quite a bit more.  Not only are promises executed independent of time (asynchronous), they are also independent (and unaware) of the code used to call them in the first place.  This means a promise can be called from anywhere, or even chained onto one another.  For example, let‚Äôs take our previous example above, but let‚Äôs modify the function invoked in the first .then() call and add another Promise call.  In this case we‚Äôre just using book.queryDatabase('UPDATE') since we know that it returns a Promise object and it will be unique from the original promise when calling book.queryDatabase('READ') : Since the first .then() method call returned a second Promise object we‚Äôre now able to chain a second .then() method call onto our first one.  The arguments of the second .this() call will be invoked when the book.queryDatabase('UPDATE') promise is returned.  Once again, our fulfillment function spits out the success message to our console.  As a result, executing the above example shows both of the promises were created and executed, just as we intended: So far our promises have all been successful, but often we‚Äôll run into situations where a database query or IO operation fails and we need to plan for this.  Thankfully, promises provide such functionality by making failure and error handling quite simple. As we previously mentioned, the .then() method expects up to two arguments to be passed: the first represents the fulfillment function and the second is the rejection function.  This means we can provide two different operations depending on whether our promise worked or not.  In this example we have a new Book instance and we‚Äôre trying to remove it from the database.  Here we‚Äôve provided two function arguments to .then() .  While they both look almost identical in this example, we can actually perform any sort of operations within these functions that we want, based on whether the promise succeeded or failed: Recall back to our Book class and the .queryDatabase() method definition.  Just to make this example more interesting, we‚Äôve ensured that calling .queryDatabase('DESTROY') produces a reject() result.  In this rejection we create a new Error() object and indicate that our book couldn‚Äôt be destroyed because it wasn‚Äôt found: Now, when we execute the book2.queryDatabase('DESTROY') example above the second ( rejection ) argument of the .then() method is invoked and the log output shows the error that we produced: The Promise API also provides a number of useful static methods that make working with promises easier.  One useful example is Promise.all() , which accepts an iterable object (like an Array ) that contains a list of promises. Promise.all() returns a new Promise object with a fulfillment or rejection status indicating whether all the provided promises were successful or not.  If one promise in the iterable is rejected the returned promise is a rejection and includes the reason it failed. To see this in action let‚Äôs first create another Book instance.  With our new book3 object in hand we then call Promise.all() and pass a new Array of three elements, each of which is a new Promise object representing the result of calling CREATE , READ , and UPDATE queries on our database.  Remember, Book.queryDatabase() returns a Promise object itself, so this is equivalent to directly creating new Promise() instances within our Array : Since Promise.all() returns its own Promise object we can call the .then() method and pass in the two standard arguments, the first for our fulfillment function and the second for the rejection function.  In this case, we want to confirm that we‚Äôre able to perform all three queries.  Sure enough, executing the above code produces a successful fulfillment message in our log: Just to confirm Promise.all() produces a failing result if any of the provided promises fail we can also add queryDatabase('DESTROY') into the Array and see what happens: Unsurprisingly, our DESTROY query still throws an Error , resulting in a rejection message in our log: The last feature of promises we‚Äôll cover here is the Promise.race() method.  Similar to Promise.all() , the Promise.race() method accepts an iterable of Promise objects and invokes all of them together.  However, whereas Promise.all() returns fulfillment only if all promises succeed, Promise.race() returns the result of the first promise in the list to complete. For example, here we‚Äôve created another Book instance and are using Promise.race() to call all four of our queryDatabase() queries: Even though we know that queryDatabase('DESTROY') produces an Error (and therefore a rejection result), all that matters to Promise.race() is which promise is the quickest .  In this particular case our log shows that READ was the quickest: However, keen observers may have noticed that all of our ‚Äúpsuedo-callback‚Äù functions using setTimeout() used the same delay argument value of 1000 milliseconds.  Therefore, we‚Äôd expect that the promise returned by Promise.race() would be slightly randomized, which we can see somewhat in this example since our READ promise finished first, even though it‚Äôs listed second.  This just illustrates the minor differences in execution when dealing with delayed callbacks/promises, since another execution of the same code results in CREATE as the ‚Äúwinner‚Äù of our race: To help you and your team with JavaScript development, particularly when dealing with unexpected errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-06-29"},
{"website": "Airbrake", "title": "Structural Design Patterns: Decorator", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/structural-design-patterns-decorator", "abstract": "Next up in our continued journey through common Structural design patterns, as part of our extensive Guide to Software Design Patterns series, we‚Äôll be exploring the decorator design pattern.  The decorator pattern allows the behavior of an individual instance of an object to be changed without impacting the behavior of other instance objects of the same type. In this article we‚Äôll take a closer look at the decorator pattern with both a real world illustration and a fully-functional C# example showing how to use decorators in your own code.  Let‚Äôs get this adventure going! One of the most common real world examples of the decorator pattern, and one which everyone reading this article can relate to, is the basic concept of your personal computer or smart phone; specifically how its behavior changes as you add and remove applications. For example, if you‚Äôre builing a new PC these days you‚Äôll likely start with an empty SSD on which you‚Äôll place your most critical applications.  At the outset your computer won‚Äôt have anything on it and will just be a clean slate, but the first step is to add an operating system.  Once the operating system is installed suddenly the behavior and potential capabilities of your computer improve dramatically , allowing you to install all manner of additional applications.  If you‚Äôre a developer you may want to to begin working using your new system, so you might install a framework or a code editor like Visual Studio (so you can create code like that we‚Äôll see later in this article!) Lo and behold, your computer is a base component on which you‚Äôve applied a handful of decorators (application installers), all of which have modified the behavior of your computer.  However, these installed applications are specific to your computer .  While these same applications can be (and often are) installed on other computers, we‚Äôre showing a simple decorator pattern example here because your decision to install a particular application doesn‚Äôt impact the behavior of other computers you may have within your home or office. To illustrate the decorator pattern in code we‚Äôre going to use a slightly different example than the real world one give above.  Instead of computers and application installation we‚Äôre going to look at pizza and the act of adding ingredients to see how decoration works in code.  The reason for using pizza is not only because it‚Äôs delicious, but also because the decorator pattern shares many similarities with the builder pattern, and we used pizza as our builder code example in an article we published previously .  Since we used pizza construction in the builder pattern article we‚Äôre going to use pizza again for the decorator , allowing us to compare the two methods and see which is better. As usual we‚Äôll start with the full example source code below and then take the time to examine what‚Äôs going on in more detail afterward: Our decorator code example above also uses the Builder namespace which is seen below.  We won‚Äôt go over this code again but if you are interested in further explanation check out our Builder design pattern article . As for our decorator example we need to establish four basic types of objects: Base Interface : The base interface used by our concrete components . Base Component : The base object upon with decorators can be used to modify behavior. Base Decorator : The base interface used by our concrete decorators . Concrete Decorator : The additional functionality that will be applied to our components . Thus, our code begins with the base interface , which we‚Äôve defined here as the IPizza interface. IPizza defines the basic properties or methods our component and decorators will use: Next we have our base component of PizzaBase .  Here we use this component to specify all the necessary properties, giving many of them default values and basic logic.  Of particular note is the Description property, which outputs information about the toppings and cost of our current pizza instance.  We‚Äôll use Description later to verify our decorated pizzas are being modified. The third part of our decorator pattern we need to add is the base decorator , which we‚Äôve defined here as the abstract PizzaDecorator class: This base decorator is where the full power of the decorator pattern begins to take shape.  The pattern takes advantage of two fundamental features of this object.  First, it‚Äôs critical that the constructor of our base decorator accepts an instance of our base interface ( IPizza in this case) as an argument.  This passed object instance is stored as a private variable for use elsewhere in the decorator. Secondly, our base decorator should perform any basic logic which merges behaviors or values from our base component ( PizzaBase ) and subsequent decorators.  In this case, we‚Äôve specified the logic of Cost.get() to combine the Cost of the passed in IPizza object instance with the private _cost of our inherited base component ( PizzaBase ).  Similar logic is performed for the list of toppings in the Toppings property.  This ensures that any modifications to these two properties within inherited decorators will propogate those values up through the chain, so we can keep track of all the changes that future decorations may provide. The fourth and final component within our decorator pattern is the series of concrete decorators .  These are the independent classes which can be used to modify the behavior of our object however we see fit.  For this example we have four concrete decorators , all of which are used to add a particular ingredient to our pizza: While not necessary, you may also notice that we snuck another layer of encapsulation in there with the ToppingDecorator class, which inherits from our base decorator of PizzaDecorator , and then is used to extend our four actual toppings decorators .  This extra level isn‚Äôt necessary by any means, but, in this case, it allows our code to programmatically grab the ingredient name from our child classes without including the \"Decorator\" portion of the names.  This means our ingredient decorator classes, like PepperoniDecorator , only need to concern themselves with modifying one property directly, which is the extra _cost that ingredient adds to the total. Obviously, this isn‚Äôt a fully fleshed-out example ‚Äî in real world code we‚Äôd likely adjust the cost of a particular ingredient based on the Size of the pizza ‚Äî but for our purposes this serves well enough to illustrate how the decorator pattern works. With our code ready to go we implement it in our Program.Main() method: We start with an instance of our base component ( PizzaBase ), output that object to the log, and then pass it to one of our concrete decorators to create a new, decorated instance.  In this case we add olives, then mushrooms, and so forth, each time outputting the modified object‚Äôs Description to confirm each additional decorator has properly been applied.  If we look at the log output we can confirm the results: By using the decorator pattern here we can modify a base component (or any other object that inherits from it) with as many decorators as we wish, and the changes will always propogate through the chain since we‚Äôre always adding on or ‚Äúmodifying‚Äù the underlying object.  This is why the Toppings list and Cost properties adjust themselves with each new addition. We previously mentioned that decorator and builder patterns are similar, so let‚Äôs also briefly look at how we might create similar pizzas using the builder pattern: The log output is not formatted quite the same but we can see that each call to the appropriate AddIngredient() method, each of which is chained onto the PizzaBuilder class constructor, has produced the appropriate change to our pizza‚Äôs ingredients: While both patterns work in this case, the fundamental difference between the builder and decorator patterns is that builder is aimed at modifying an object during construction, while decorator is aimed at modifying an object after construction.  In the above example we see that every chained method call made on the PizzaBuilder class happens during the construction phase of the object.  Once our builderPizza instance is created we can no longer modify it with any of the builder functionality we have in place. On the other hand, the decorator pattern has no means of specifying the entire list of ingredients during construction.  Instead, we must create a base instance and then add decorators one at a time on top of that base instance to get to the final pizza we‚Äôre after. From this we can conclude that neither pattern is better than the other, they‚Äôre simply used in different ways and the best choice depends on the specific needs or design requirements of your application.", "date": "2017-06-27"},
{"website": "Airbrake", "title": "Structural Design Patterns: Composite", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/composite", "abstract": "Today we‚Äôll be continuing our exploration of the common Structural design patterns as part of our much bigger Guide to Software Design Patterns series.  Next up is the composite design pattern, which is used to separate an abstraction from its implementation so both can be modified on their own.  Specifically, the composite pattern aims to treat singular object instances and collections of the same object types uniformly.  This allows the client code to interact with this type of composited object the same throughout the code, regardless of whether it‚Äôs a singular instance or a collection of instances. Throughout this article we‚Äôll look more closely at the composite pattern by examining both a real world example of its use and a fully-functional C# code example to show how you might put the composite pattern into practice.  Let‚Äôs get to it! A real world concept we can all relate to is that of family.  Love ‚Äôem or leave ‚Äôem, we all have family members to some degree and we can examine the rough hierarchy of familiar ties as a way to explore how the composite design pattern can be seen in the real world. You, just like your parents or your siblings or cousins, are an individual person.  You have your own unique qualities and attributes that make you you, just as the other individual members of your family have their own quirks and idiosyncrasies.  And yet, even though all our family members are unique individuals, we all make up the larger group of a family.  Put another way, we might say that your family is composed of individual family members like yourself. Expanding this idea further, family members are related to one another through their parentage.  You and your siblings might share the same parent, your children will have you as a parent, while your mother had someone else as a parent, and so forth.  Thus, all these individuals that were born into the same family tree are still a part of that overall composition of that family group. As discussed in the introduction, the basic purpose of the composite pattern is to allow an object to represent both a singular and a collective group of said object type, without any need to differentiate between the two groupings when using them.  To better understand this we‚Äôll start with the full code example and then we‚Äôll break it down a bit and see what‚Äôs actually happening and how the composite design pattern is being used: In this example we‚Äôre continuing with the family concept.  We want to be able to add parent/child relationships to our individuals while also maintaining a collection of children under the hood.  To begin we start with a simple IFamilyMember interface that only provides a single Name property: From there we add our Person class, which is a normal class but is also enumerable through the IEnumerable interface: Our Person class implements our simple IFamilyMember interface and, therefore, has become the composite object of our example.  In order to behave as a composite we need to provide basic operations within it that allow it to alter underlying children objects, which are stored privately in the _children property. _children is just a List<IFamilyMember> , so we can start to see the potential for recursion that we‚Äôre after. To complete the capabilities we‚Äôve added a few helper methods to Person like AddChild() , RemoveChild() , and GetChild() .  We‚Äôve also added the GetChildren() method to get the full list of children, plus a helper LogChildren() method to output the list so we can see what‚Äôs going on during testing. With everything in place we can now try creating a few people and adding some relationships, like so: We start by creating some new Person instances to represent the parents ( Jane and John ) and their children ( Alice , Billy , and Christine ).  Before we do anything else we want to confirm that Jane and John don‚Äôt have any children so we output that and confirm: Getting away from the nuclear family a bit, as it happens Jane and John have one child together ( Alice ), but each of them also have a child from before they got together ( Billy for John and Christine for Jane ).  Thus when we LogChildren() after adding their respective kids we get a new output: What makes the composite pattern particularly cool is that we can expand on the base interface that our object is using ‚Äî IFamilyMember in this case ‚Äî to create other types of components known as leaf components .  In this case we‚Äôve added the Aunt and Uncle leaf components, both of which must use the IFamilyMember interface: This allows us to continue our example from above by introducing a few new people and relationships by using one of the leaf component classes: Here we‚Äôve added John's brother David .  Since John has children this obviously makes David an Uncle so we use that leaf component class for him.  Both David and John are the sons of Edward , so we also add him as another Person and then add both David and John as children.  This is a critical benefit of the composite pattern: Even though David and John are actually different object types ( Uncle and Person , respectively) they can both be added in the same way using the same AddChild() method of the Person composite object.  We can confirm this all works with a call to edward.LogChildren() :", "date": "2017-06-13"},
{"website": "Airbrake", "title": "Debugging With Visual Studio ‚Äì Part 2", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet/debugging-with-visual-studio-part-2", "abstract": "During the first article in our How to Debug series we went over a few generalized debugging best practices that are applicable to most platforms and debugging tools. Next we dove into Visual Studio with Debugging with Visual Studio ‚Äì Part 1 and saw how Visual Studio handles code navigation, debugging windows, tooltips, and much more. Today we‚Äôll finish up our examination of Visual Studio and the powerful debugging features it provides including remote debugging, working with 64-bit applications, targeting different .NET Framework versions, and much more! In addition to the typical localized debugging tools Visual Studio provides, it also supports a powerful remote debugging capability which allows you to debug applications deployed on different computers. Visual Studio supports debugging for ASP.NET applications running on IIS systems, ASP.NET on Azure, or C#/C++ applications running on a Windows-based network. To begin using remote debugging start by installing the Remote Tools package appropriate to your particular Visual Studio version . Once installed you can setup a remote debugger configuration by specifying the type of connection and location of the remote machine, along with the appropriate user credentials to connect. The final step is to configure your local Visual Studio project properties and insert the remote machine name into the Debug > Use remote machine field so your system knows where to make a connection. Check out example configurations in more detail in the official documentation . As surprising as it may be, even the latest versions of Visual Studio are not 64-bit applications and instead continue to use the tried-and-true 32-bit architecture we all know and love (or hate, depending on your perspective). In mid-2016 the Visual Studio Product Team even responded to requests from users asking that they upgrade Visual Studio to a 64-bit application. While there are many pros and cons to both 32- and 64-bit versions of Visual Studio, at the time of their response, the Visual Studio Team felt the return on investment of building, testing, and supporting two different architectures of the product wasn‚Äôt worth the pain and complexity in making the switch. All that said, even though Visual Studio itself isn‚Äôt a 64-bit application it certainly supports the creation and debugging of 64-bit applications. To debug a 64-bit application locally you just need to add a new configuration in the Configuration Manager with a 64-bit CPU specified: Open Build > Configuration Manager . Select (or create a New ) Active solution configuration . Click New under Active solution platform and select x64 (or whatever appropriate 64-bit CPU option you have available). Close the Configuration Manager then start debugging as normal using the new 64-bit configuration you created. Visual Studio also allows remote 64-bit application debugging, which is setup and performed much the same way as normal remote debugging. For more information check out the 64-Bit Application Debugging documentation . While not always relevant to your project most modern versions of Visual Studio allow you to specify the particular .NET Framework version your project/application should use during debugging. This can be useful for projects that are intended to be used by other developers, such as .DLL libraries and the like, allowing you to easily test compatibility of your application with older (or even newer) .NET Framework versions. When creating a new project in newer versions of Visual Studio you can set the targeted .NET Framework version using the dropdown at the top of the New Project dialog. Changing the .NET Framework version for an existing project requires a few more steps but is still quite simple: Open the Project > [ProjectName] Properties window. Select the Application tab. Choose the appropriate .NET Framework version from the Target framework dropdown. You may see a warning popup indicating that you may need to manually modify some project files to allow your application to build. This is usually necessary when your project uses outside resources and references that target .NET Framework versions which differ from than version you‚Äôre now specifying. Once any appropriate manual changes are made your project will now build and run using the new .NET Framework version you‚Äôve selected. To learn more check out the official documentation . While not specific to using Visual Studio the .NET Framework provides the very powerful ability to extend code-specific metadata from directly within written source code using attributes . We won‚Äôt go into the full details of attributes and how to use them here, but the short explanation is that attributes allow you to add keyword-like declarations which help to annotate elements of your code such as types , methods , and properties . When the code is compiled it is converted to an intermediate language ( MSIL ) which can then be parsed and read by tools like Visual Studio in order to evaluate that extra metadata during execution and debugging. Check out a lot more info about general attribute use in .NET within the docs . This ability to add and alter attributes in your code makes it easy to change the look, feel, and behavior of the data presented throughout the various debugger windows found throughout Visual Studio. For example, the DebuggerTypeProxy attribute can be applied to structures , classes , and assemblies , allowing you to change the way that particular object is displayed in debugger windows. We can also use the DebuggerDisplay attribute, which directly changes how objects , properties , fields , and the like are displayed in debugger windows throughout Visual Studio. For example we can modify our simple Book class below by adding those two attributes (seen here in C# ): In this simple example we basically want to override the default behavior by hiding the private properties of our Book class ( _author and _title ) in the drill-down display of debugger windows. To accomplish this we create our BookDebugView class as an internal and give it a private _book property to hold our Book class instance, which is passed as the only parameter to the constructor. We can then use our public Author and Title property methods as normal, which will act as our proxy replacement for the fields displayed in our debugger window. The result is that all Visual Studio debugger windows now use the BookDebugView class as their base object type to display thanks to the DebuggerTypeProxy attribute. Plus, we‚Äôve used the DebuggerDisplay attribute to alter how the value of our Book objects is displayed in our debugger windows. Thus, when create a new instance of Book named book and view it in a debugger window, it changes from the default of this: to this: Visual Studio also includes powerful user interface components known as visualizers . A visualizer typically creates a dialog box or other interface to display a value or object in a custom manner that is most appropriate based on that data type. When debugging with Visual Studio you‚Äôll often see little magnifying glass icons which are the mechanism used to choose the visualizer you want to use to view that object. By default Visual Studio comes with visualizers for HTML , JSON , Text , XML , and a handful of others. However, Visual Studio makes it easy to create your own custom visualizers. Visualizers are effectively just compiled .DLL files that are referenced in whatever project you want to use them in, so creating a custom visualizer begins with creating a new Class Library project. For example, here‚Äôs a very simple visualizer that targets objects of type System.String and creates a message box dialog popup with the string value when the visualizer is called: Check out all the cool stuff you can do with visualizers in the official documentation . If you‚Äôve ever found yourself trying to recreate a bug reported by another user which you simply can‚Äôt seem to replicate then you‚Äôll probably wish you had access to Visual Studio‚Äôs dump file support. For those unfamiliar with them a dump file is a snapshot of an entire application at the exact moment the dump was recorded. It includes tons of metadata such as the processes and modules that were running, memory records, execution and stack traces, and much more. With a dump file in hand you can open it in Visual Studio and be presented with the Dump File Summary screen which outlines the basic information about the state of the application when the dump was taken. This includes stuff like the process name, exception codes, and the list of modules ( .DLL and .exes ) that were used by the application. From there you can use Visual Studio to load up an exact recreation of the debugging process from the moment the dump was recorded. If you have access to the source code (or symbol files therein) that are used by the application you‚Äôll be able to see exactly what line of code execution halted at when the dump was recorded, the values of local variables, and basically everything else you‚Äôre used to viewing within the Visual Studio debugger. Learn more in the Using Dump Files docs . The final debugging feature of Visual Studio we‚Äôll discuss is IntelliTrace . IntelliTrace is an advanced feature available to professional-grade Visual Studio versions that essentially acts as a recorder for debugging sessions . When you begin a debugging session IntelliTrace will monitor for all ‚Äúimportant‚Äù events that take place and record said events. These might include user interactions like clicking buttons, file IO access, database connections and executions, exceptions, and so forth. With IntelliTrace enabled during an active debugging session the Diagnostic Tools debugger window will feature a list of events that were tracked and recorded by IntelliTrace. Again, these event types might include gestures by the user within the application interface, database queries, and so forth. With the currently live debugging session paused you can then navigate through the event log and select a particular event you wish to view then click Activate Historical Debugging . This will immediately enter Historical Debugging mode which shows your application code (along with all relevant local variables) in the state they were in at that specific moment of the accessed event. This incredibly powerful feature allows you to perform historical diagnostics during a debugging session so you can more easily investigate particular bugs or issues when you aren‚Äôt sure exactly what event in the code might‚Äôve caused them. As usual, feel free to check out the official documentation for more information on IntelliTrace in Visual Studio.", "date": "2017-06-08"},
{"website": "Airbrake", "title": "Structural Design Patterns: Bridge", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/structural-design-patterns-bridge", "abstract": "Today we continue our journey through the common set of Structural design patterns within the larger Guide to Software Design Patterns series. Next on the docket is the bridge design pattern, which is intended to decouple the abstractions of an multiple objects from their actual implementation, so changing one will not effect the other. The goal of the bridge pattern is to effectively allow for two (or more) levels of abstraction, whereby one category of object (the implementor ) can be altered and have no impact on the second category of object (the bridge ), which can, in turn, also be altered and abstracted without impacting the implementor . Many applications and programming frameworks use the bridge pattern to help handle UI/UX components. For example, an object used to define the layout of a component might be abstracted and used in combination with an object used to render the visual output of that same component. By using the bridge pattern and abstracting the layout and the render objects away from one another both can be altered without them impacting one another. Throughout this article we‚Äôll closely examine the bridge pattern by taking a look at a real world example where the bridge pattern is used, as well as some functional C# code examples of the bridge pattern in action, so let‚Äôs get started! Expanding a bit on the visual example used above, in the real world we often see the bridge pattern used by book publishers when determining the different styles of book binding used to produce physical books. There are many different types of binding ranging from perfect binding (which most of us are used to) to spiral binding and even saddle-stitch binding, which typically just folds the whole set of paper sheets directly in half at the seam. Additionally, there are countless novels, both new and old, and they often can be categorized into a number of unique genres such as fantasy, science fiction, and mystery. When it comes time to publish the publisher must decide which book to publish and what binding type(s) to produce. In many cases the genre of the book may be a big factor in what type of bindings are used, since it‚Äôd probably be uncommon to see massive fantasy novels printed using saddle-stitch binding due to the sheer volume of pages and inability to easily fold them together. In these publishing scenarios the combination of genre and binding are two levels of abstraction that are combined using a bridge pattern. No matter what changes are made to the way a particular genre is handled ‚Äî nor how a specific binding is created ‚Äî changes to one will never impact the other. Taking that same book publishing concept into our example code seems to make a lot of sense, so below we have a working example that creates a number of abstractions based on the IBinding interface and the IBook interface. We can then combine both interface abstractions to create a single book instance based on a genre and whatever binding we want. As usual, it‚Äôll be easiest if we start with the full code example, after which we‚Äôll step through the sections one at a time and explain what‚Äôs going on. Let‚Äôs begin with how we handing the bindings: We start with the IBinding interface that contains just a single Name property, which will later help us illustrate which specific binding is being used. To make things easier for our unique binding abstractions later on we inherit the IBinding interface in a Binding class that actually implements our Name.get() property method. From there we can create our binding classes ( PerfectBinding , SpiralBinding , and SaddleStitchBinding ), which could all have their own unique logic if needed, though we don‚Äôt need to include anything more in this simple example. With our Binding abstraction classes created we then move onto the second object we want to abstract, which is the IBook interface: These require a bit more code since we‚Äôre actually passing in arguments and using the parameters to set property values, but overall the idea is similar to when we created our bindings. The IBook interface specifies the Author , Title , and (most importantly) Binding properties. Again we inherit IBook into the base Book class to make abstraction and inheritance easier for our genre-specific classes later on, which is where most of the instantiation and logic takes place. Of particular importance is the Logging.Log() method call, which acts as a simple way to output information about the book we‚Äôre creating, the genre, and the specific binding associated with it. Finally we create some genre-specific book classes of MysteryBook , FantasyBook , and ScienceFictionBook , each of which inherit from our base Book class. With our binding and book objects ready to go we can now make use of this bridge pattern, which we do in the Program.main() method: We start by instantiating a new SpiralBinding object, then we create two unique books, one of which is a FantasyBook and the other a ScienceFictionBook . What‚Äôs important to note here is that since all of our genre-specific book classes inherit from the Book class, the third argument we pass must be a Binding -inherited class, which all our binding type classes are. However, there‚Äôs no logic or limitations within the Book (or subclass) implementations that specify anything about how the associated binding will behave. As a result, we can freely mix and match various types of bindings with various types of book genres, making logical changes to both without fear of impacting the other. This is power of the bridge design pattern at work. To confirm that all is working as expected let‚Äôs take a look at the Logging.Log() output we produced when instantiating our books: Sure enough both unique book classes were able to use the same binding type since they‚Äôre effectively ‚Äúbinding agnostic‚Äù now that we‚Äôve properly implemented them using the bridge pattern.", "date": "2017-06-06"},
{"website": "Airbrake", "title": "ES6 JavaScript: What's New? ‚Äì Part 4", "author": "Unknown", "link": "https://airbrake.io/blog/javascript/es6-javascript-whats-new-part-4", "abstract": "Today we continue our journey of exploring all the cool new features that ES6 JavaScript has to offer. This isn‚Äôt the first part in this series by any means and thus far we‚Äôve covered quite a bit of ground: In Part 1 we took a look at default parameters , classes , and block-scoping with the let keyword. In Part 2 we explored constants , destructuring , and constant literals syntax . In Part 3 we dove deep into just one major feature known as template literals . For Part 4 today we‚Äôll be looking at iterators and generators , so let‚Äôs get to it! The concept of iterators is not new to programming by any means. Most modern languages offer an interface for defining an iterator, which is a pattern that specifies that an object can be traversed in order to pull a single, consecutive item from a larger list. In previous versions of JavaScript developers would be forced to create their own ad-hoc iterators. Here‚Äôs a basic iterator example from ES5 where we have a doubler object with a next() property that retrieves the next iteration (in this case, the doubled value of our number): As expected, we get the doubled output from this every time until we reach our maximum of 1024 : Unfortunately, this old iterator pattern isn‚Äôt the most user-friendly implementation. For one thing we‚Äôre using an infinite loop, which always spells trouble if we fail to hit our break statement. We could get around that by performing our check inside the next() method call and if the iteration is complete return some value indicating as much (like undefined ). Regardless, the new iterator syntax introduced in ES6 aims to standardize these patterns. Here we have the same doubler iterator as before: ES6 iterators require a next() method which is used to retrieve the next IteratorResult . The IteratorResult should be an object with two properties: value and done . value can be any value (or omitted if done is true ). done is a boolean indicating whether the iterator has completed its sequence. Therefore, you can see that our iterator example returns { value: value, done: false } for most calls of next() , but when we reach the end of our sequence ‚Äî when value is greater than 1024 ‚Äî we return { done: true } . This results in the exact same output as our previous example since we‚Äôre iterating through our doubler via a for (var...of) loop: While iterators require that execution be completed all at once, and therefore looping through the full set of iterations before any additional action can be taken, ES6 also introduces a new tool to get around this limitation called generators . A generator is a special kind of function that allows execution to be paused at any time, only to be resumed later on. Generators take a lot of functionality from iterators (in fact, underneath each generator is an iterator created by the JavaScript engine). The syntax for a generator is the same as a normal function except an asterisk ( * ) must precede the function name: function *myGenerator() { } The special sauce of the generator largely comes from the new yield keyword that it also introduces. You may be familiar with yield from other programming languages, but the basic idea is that the yield statement tells the executing code that it should temporarily pause at that location, stepping out of the current function scope for the time being, while remembering that location for later resumption. For example, here we have a simple *myGenerator() function that outputs a before message, then issues a yield call, before finally outputting an after message: As discussed, since a generator is merely a wrapper for an iterator, we assign it to a variable and call it via the next() method. In our example above, our first next() call outputs the before message, then we‚Äôre free to execute any other code we want since the inner-execution of our *myGenerator() function was halted when it encountered the first yield statement. Finally we make another call to next() to produce our post-yield after message: In addition to acting as a pause point within the generator function, the yield statement can also be used to return a value , which is merely substituted into the value property of our IteratorResult object of our wrapped iterator. Let‚Äôs modify our above example to yield the value 50 and see how output changes: Notice that, in addition to adding our output value of 50 after our yield statement, we also want to retrieve (and output) the value that we get from our first next() iteration call, which will contain the yielded value in our output: Things really start to get cool when we stick yield inside a loop. This allows us to easily generate a pseudo-infinite iterator that can be called anywhere and at anytime to grab the next value that our generator spits out. Let‚Äôs modify our previous doubler iterator to be a generator instead that can be called over and over to give us the next doubled output: As you can see, we can call doubler.next() as many times we want, wherever we want, and we‚Äôll generate and return the next iteration. Calling it six times, as seen above, produces the expected output result: Just as an asterisk ( * ) prior to our function names converts a normal function into an iterable generator, we can also precede a yield value with an asterisk, so long as the value is itself an iterable. This will cause the parent generator which houses the yield to use the underlying iterator associated with the yielded value to retrieve (and return) each iteration. As an example, let‚Äôs take our infinite *doubler() generator from before, which you‚Äôll recall is an iterator unto itself, and call make a generator call to it via yield inside a new *useDoubler() generator: Now we can assign our *useDoubler() generator just as we did before and make however many next() calls we wish. This will cause the yield to call the next() method of the underlying iterator it is associated with, which is *doubler() in this case: The returned value propagates back up through the chain so we get the same output result as before: To help you and your team with JavaScript development, particularly when dealing with unexpected errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-05-31"},
{"website": "Airbrake", "title": "Debugging with Visual Studio ‚Äì Part 1", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet/debugging-with-visual-studio-part-1", "abstract": "In our first part of our How to Debug series we took a look at general best practices that apply to most debugging platforms and tools. Now we‚Äôre free to dig a bit deeper by looking at specific languages and tools. This week we‚Äôll be examining tips on debugging with Visual Studio . While there are many versions of Visual Studio on the market, it‚Äôs always advisable to use the latest tools available whenever possible, so we‚Äôll be using the latest Visual Studio 2017 as the basis for all our examples throughout this article. Since Visual Studio offers and incredible breadth and depth of debugging features and functionality, it‚Äôs probably best that we just jump right in and get to exploring! As we discussed in our How to Debug: Best Practices article, debuggers typically provide a means to halt execution and step through code one line at a time, giving you the ability to evaluate the process of the application‚Äôs execution and see what‚Äôs really going on. Visual Studio is no exception and makes it easy to navigate through your code via buttons or hotkeys. We won‚Äôt go into too much detail since these concepts are fairly well-understood already (and covered in a previous article anyway), but at the very least it‚Äôs worth learning the hotkeys you‚Äôll commonly be using in Visual Studio to handle execution during debugging. While there are many other hotkeys that can be used during debugging, these are the primary functions you‚Äôll be repeatedly performing. Since Visual Studio is a full-blown integrated development environment ( IDE ) it offers a robust set of tools to make debugging easier. Many of these tools are visual components, which are part of the Visual Studio user interface and they can be accessed through the Debug > Windows dropdown menu. We‚Äôll just give a brief overview of each window and the purpose it serves here, but it‚Äôs always a good idea to check out the official documentation for more details. Breakpoints : Displays a convenient list of all current breakpoints, including their location, hit count, what action is taken when the breakpoint is hit, and much more. Provides an easy way to customize breakpoint behavior in a simple window. Exception Settings : While Visual Studio features many intelligent default behaviors for debugging, the Exception Settings window gives you direct access to a full list of Exceptions that may be thrown during execution. This window allows you to set what behavior should occur when a particular exception type is thrown, such as whether to break execution at that line. You can also specify additional conditions used to trigger actions based on the particular exception type. Output : Displays any IDE outputs that Visual Studio needs to spit out during execution. Show Diagnostic Tools : Houses the basic, built-in diagnostic tools such as the CPU and memory profilers. GPU Threads : For performance-heavy applications such as games, the GPU Threads window provides a way to examine and manipulate threads that are running on the GPU, as opposed to the normal CPU threads. Tasks : For applications that use System.Threading.Tasks and employ a Task-based Asynchronous Pattern , the Tasks window is an easy way to interact with the currently active list of tasks during debugging. Parallel Stacks : For multi-threaded applications the Parallel Stacks window provides a diagrammed view of all active threads (or tasks), including call stacks for each thread to make it easy to trace what‚Äôs going on where. Parallel Watch : A bit like the normal Watch window, the Parallel Watch window allows you to simultaneously track variables and expressions across multiple threads. Watch : A convenient way to see how variables and expression values change during debugging. Autos : Automatically populated with variables used around the current line of execution. Locals : Automatically populated with currently-scoped variables as you navigate through the code. Immediate : This window basically acts as an interactive console, allowing you to enter expressions and other code to be executed immediately, even while actively debugging. Live Visual Tree : For WPF-style applications that rely on XAML the Live Visual Tree window lets you examine XAML code in real-time. Live Property Explorer : Also for WPF-style applications, the Live Property Explorer allows you to view XAML properties in real-time. Call Stack : An easy way to see the current call stack while paused during debug execution. Threads : A visual view for viewing and interacting with all active threads during execution. Modules : Displays all DLL and EXE files used by your application. Processes : Displays all active processes that are attached to your application or the debugger itself. Memory : A table view of memory space used by your application. This can be useful for evaluating larger or cumbersome data sets that do not work well inside normal watch windows, or for evaluating specific memory addresses during execution. Disassembly : Shows assembly code that is created by the compiler, including memory addresses, derived source code, symbol names, and more. Registers : Displays a list of the current register contents, which can viewed in real-time during debugging code navigation. When debugging an application it is typically the case that you‚Äôll only want to debug your own code, ignoring all other third-party module or .NET framework calls. Debugging just your own written code in this manner is the default behavior of Visual Studio and is referred to as the Just My Code debugging option. For example, here we‚Äôve created a simple Book class and created a new instance of it. We‚Äôve then called a third-party module class ( Logging ) to output some information about our new object instance: Using the default Just In Time option during debugging, if we‚Äôre paused at the Logging.Log(book) call and press F11 to issue a Step Into command, the debugger will merely ignore that Step Into command and will issue a Step Over command instead, moving to the next line within our own code automatically. This is because the Logging.Log() method call is not our code ‚Äî it is from a third-party DLL reference within our application. This means that we don‚Äôt have direct access to the source code, so we cannot inspect the source code of such method calls. This behavior is also performed for all .NET Framework calls by default, ignoring and skipping over them entirely. However, Visual Studio provides a means to actually debug such third-party code, such as modules or the .NET Framework. To do this simply uncheck the Just My Code option. You‚Äôll also need access to the relevant symbol files , typically stored in .pdb files, which act as a source code map, mapping between identifiers within the actual source code to the identifiers used in the compiled executable created during debugging. This source mapping technique is common in many languages and can be a handy way to dig deeper into third-party libraries and the like when trying to really figure out the cause of a particular bug. Even though the application you‚Äôre currently working on is the most common target for your debugging efforts, in some cases you may wish to debug a different application, such as a remote app or something not originally developed in Visual Studio. Once you‚Äôve begun the debug process yourself, you can then begin debugging another application by selecting the Debug > Attach to Process dropdown command. A new window will appear with the list of local processes, but you can also connect to other remote target systems as well and attach to running processes therein. Just select the process you wish to attach to and off you go! While windows-based or web-based applications have a very obvious method of stopping the application, such as closing the main window or shutting down the web server, most console applications developed in Visual Studio may not have any built-in means that requires outside input before completing execution. Thus, it is common when debugging console applications to launch the application with the debugger, then have execution immediately complete, closing the debugger once again before you even have a chance to halt execution and start the debugging process. Therefore, when debugging console applications it‚Äôs a good idea to make sure execution will halt at least once so you can begin debugging as intended. This might be from setting an explicit break point where you know you need one, or by right-clicking somewhere in the code and selecting the Run to Cursor option, which will cause the debugger to start and execute up until that line, where it will pause and await your command. As the name implies, debugging in Visual Studio can be, well, quite visual . One feature that really helps you visualize what‚Äôs going on during debugging is known as DataTips . These are simply little tooltips that pop out when debug execution is halted and you mouse over any currently-scoped variable. This will display the value of the variable in question and allow you to drill down as deep as you wish if the variable is a complex object of some sort. Simply removing the cursor from the variable in code will hide the DataTip. While that default behavior is extremely useful, you can go even further by pinning and commenting on DataTips. Simply click the pin icon on the side of a DataTip to pin that tip inline next to the code. This will create a constant display of that variable‚Äôs DataTip during all future debug executions, behaving a bit like an inline form of a variable Watch . You can even add comments to pinned DataTips, which are a great way to make notes about particular variables or snippets of code from one debugging execution to the next. There may be some cases where you are viewing a variable in a debugger window within Visual Studio, but a particular field you‚Äôre interested in is extremely difficult to drill down to and find because the parent object housing that field is so complex. It can be time-consuming and frustrating to halt debugging and then have to dig through a series of a dozen or more obtuse parent objects in the debugger window just to finally get to the field you care about. Thankfully, Visual Studio provides the Natvis framework, which is an XML-based syntax that allows you to define unique, custom visualization rules for any data type you wish. This means you can alter the behavior of Visual Studio‚Äôs debugger windows for that type, making that critical field you were looking for just one level down rather than dozens or more. Another great feature is the ability to make edits to your code while debug execution is halted, then continue execution as before, with the newly edited code being interwoven just as if it were there when execution began. This can save a great deal of time since you don‚Äôt need to stop execution and recompile every time you want to make a minor change. While most changes can be made without actually stopping debug execution, there are a few restrictions that will apply depending on the language you‚Äôre using. We won‚Äôt go into the details here, but feel free to check out the official documentation for more details. We‚Äôve covered a good chunk of the major features which Visual Studio brings to the debugging process. Stay tuned for Part 2 in which we finish up with Visual Studio!", "date": "2017-05-29"},
{"website": "Airbrake", "title": "Structural Design Patterns: Adapter", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/structural-design-patterns-adapter", "abstract": "Today we‚Äôve finally made it to the Structural pattern section of our Guide to Software Design Patterns series, and to celebrate we‚Äôll be exploring the adapter design pattern (while possibly eating some delicious cake as well). Structural patterns are used to configure how entities interact with and are related to one another. Thus, the adapter pattern allows us to make two normally incompatible entities compatible with one another. In this article we‚Äôll examine the adapter pattern in a bit more detail, illustrating some examples in both the real world as well as functional C# code. Let‚Äôs get to it! Whether we realize it or not, most of us use adapters (or converters) all the time. The act of talking on your phone uses an analog-to-digital converter to convert the analog signal of your voice as picked up by a microphone into a digital signal. And, of course, the reverse happens when you‚Äôre hearing the voice of the person on the other end. Speaking of phones, we all probably have at least one or two devices with a USB port to plug into a computer or a charger. There are now so many different types of USB connections out there that many adapters exist to allow for some semblance of compatibility between them. Anyone who‚Äôs an avid gamer like myself might also have tried to find a way to use gamepads or controllers on a console they weren‚Äôt originally designed for. In many cases these experiments lead to third-party adapters to get the job done. While these adapters may not be very pretty or reliable, they can save you fortune when compared to buying an entirely new controller for $50 a pop. Many more examples of adapters exist, but the basic idea should be clear: An adapter provides us with a way to integrate two objects that are normally incompatible with one another. To illustrate an example of the adapter design pattern in code we‚Äôll continue with the gaming example above, where we have an XBox console but we want to use a PlayStation controller with it. This requires some sort of adapter that will convert the signals from the PlayStation controller into the appropriate signals that our XBox expects. With that in mind let‚Äôs start with the full code example, then we‚Äôll examine it in more detail piece by piece. At the most basic level we start with some controller classes to represent the unique controller types for both XBox and PlayStation. These inherit from the Controller class, which itself inherits from IController . For this example we don‚Äôt actually need any fields, properties, or methods in these entities, so they‚Äôre all empty and just represent the rudimentary objects that we‚Äôll use elsewhere in the example. Obviously, in the real world we could add additional logic to these controllers if needed: Next we need our adapter. The ControllerAdapter class is relatively simple, but its purpose is not to be complex. Instead, it merely acts as an adapter (often called a wrapper in many programming contexts) so we can use it to associate a Controller object with a Console . As before, the logic is not very fleshed out here, but we could add additional logic within the ControllerAdapter method (or elsewhere in the class) that check which particular type of Controller object is passed in and make any necessary adaptation adjustments. Here we‚Äôre just opting to output a simple message indicating that the passed controller has been adapted. Next we have the IConsole interface which specifies a single Play() method: Our Console class then inherits from IConsole . While not necessary, in this case we wanted to add some extra functionality to the Controller.set() method call by producing an output message that indicates which type of Controller is being plugged into the current console, so we used a private _Controller field. It‚Äôs also particularly important to note that we have set the access modifier of the Console.Controller property to protected . This ensures that it cannot be publicly accessed by other entities (or outside its own scope), but that the Controller property can still be used within the Console class along with any inherited classes as well. As with our controller classes the constructor of Console doesn‚Äôt need to do anything to illustrate the adapter pattern, so we leave it blank. Lastly, we have the Play() methods. The first Play() definition assumes no arguments are passed and outputs a message indicating that ‚Äúplay‚Äù is executed using the currently assigned Controller on the current Console . On the other hand, Play(ControllerAdapter adapter) is used when we want to play a game on our console using an incompatible controller. In this case, the only way to do so is to pass a ControllerAdapter instance to the Play() method, which then assigns the Controller and outputs the same indication message as the previous Play() definition: The final two class definitions are for our unique console classes, XBox and PlayStation . These inherit from Console and therefore don‚Äôt need to define much themselves, except that we assume each console will use its own respective Controller class by default, so we set that property during construction: That‚Äôs all the setup complete, so now we have three basic types of entities: Controllers, consoles, and an adapter. Each controller is compatible with its matching console type (e.g. XBox console with XBoxController ), but because we didn‚Äôt want any way to directly access the Controller property for our Console class instances, the default controller assignment is handled during initialization of the XBox and PlayStation classes. Here‚Äôs our code to see this adapter pattern in action: We start by creating a new instance of our XBox console then call xbox.Play() to start playing using the default controller. These first two lines produce the following output, telling us we‚Äôve plugged in the (default) XBoxController into our console and then we‚Äôre using the XBoxController within our Play() method call: However, we want to use a PlayStation controller instead, so we start by creating a new instance of PlayStationController . Now we need our adapter. We create a new instance of ControllerAdapter , which expects a Controller class to be passed as the only argument. Finally, we invoke the xbox.Play(ControllerAdapter adapter) method call by passing in our new adapter , which is set to use a PlayStation controller. As a result, our output shows that the adapter was used on the new PlayStationController instance, then it was plugged into our XBox console, before we finally were able to begin playing with it: This is the crux of the entire adapter pattern: We were able to take a PlayStation controller and adapt it to be used with our XBox console. Moreover, we did so without any direct access to the Controller property of our XBox : Console class, and instead simply used a ControllerAdapter instance to perform the necessary compatibility changes behind the scenes. Just to illustrate that this works both ways, the final few lines of code reverse everything to try using an XBoxController via an adapter with our PlayStation console: This works just fine illustrating that, once implemented, the adapter pattern can easily be expanded as much as necessary to meet your own project requirements:", "date": "2017-05-26"},
{"website": "Airbrake", "title": "ES6 JavaScript: What's New? ‚Äì Part 3", "author": "Unknown", "link": "https://airbrake.io/blog/javascript/es6-javascript-whats-new-part-3", "abstract": "In Part 1 of our ES6 JavaScript series we tackled the strange naming conventions that ECMAScript is finally settling on, then took a look at new features within JavaScript like default parameters , classes , and block-scoping with the let keyword. In Part 2 we explored constants , destructuring , and constant literals syntax . Today for Part 3 we‚Äôll cover just one particular (yet exciting) new feature known as template literals , so let‚Äôs get to it! ES6 brings a new feature to JavaScript that most other programming languages have had for some time: string interpolation . ES6 has named this feature somewhat interestingly, opting to call such interpolated strings template literals , yet the functionality is much the same as with other languages such as C#, Ruby, Python, and so forth. A template literal is a new type of string literal that uses the backtick delimiter instead of the traditional single- or double-quotes. By defining a string literal with backticks, we‚Äôre now able to insert interpolated expressions directly inside the string literal. These interpolated expressions are chunks of code that are evaluated inline as they‚Äôre parsed, making string creation a (usually) cleaner affair. For example, here we have a common method for generating a string in traditional JavaScript by concatenating strings together with the + character: Using the new backtick syntax to create a template literal in ES6, we can now recreate the same output string by using ${...} syntax everywhere we want an interpolated expression. In this case, we‚Äôre merely inserting the variables of title and author as inline evaluations, which are inserted into those positions in the string: In both cases the output is identical, but the latter string literal is much shorter and easier to read. While we just used simple string variables for interpolation in our previous example, the new template literals syntax allows us to insert any valid expression within the ${...} interpolation statement. For example, here we‚Äôve defined the getYearsBetweenDates() function, which does as the name describes. Traditionally we‚Äôd still concatenate our evaluated statements with string literals to form our total output string : With ES6 and interpolated expressions we can simply insert any inline expression we want within a ${...} statement and the result is the same: This also greatly simplifies inline express interpolations where we‚Äôd be performing mathematical calculations such as addition, which must use the same + symbol as our concatenation of strings: To ensure that the mathematical expression is evaluated separately from the concatenation of the strings and the resulting expression value, traditionally we have to surround our calculation in parentheses (...) . With ES6, we can remove the parentheses entirely and just continue using the same ${...} syntax as before: We can go even deeper if we want. As it happens, template interpolated expressions can be nested , meaning we can write a template literal inside the interpolated expression of another template literal. For example, maybe we have a function call that we pass a value to ‚Äî such as this upper() function below ‚Äî and we want to make a few calls to that function but pass in a variable one time, then a slightly modified variable the next. For example, here we‚Äôre trying to emphasize the name of Alice by making it uppercase, but the second time we call it we‚Äôre showing possession by also adding an apostrophe plus ‚Äús‚Äù to the name variable before we pass it to the upper function. The result is a fairly messy series of calls and concatenations in traditional JavaScript: While this produces the output we want, we can dramatically simplify this with the new ES6 syntax by using a template literal inside our interpolated expression call within our outer template literal, allowing us to (relatively) easily create the possessive form of our name noun for the output: I leave it to you to determine when it is appropriate to use this new technique, but it‚Äôs nice to know it‚Äôs there. Obviously there is some potential for ugly code if nesting occurs too frequently or too deeply within a single literal, so take care to ensure its use is warranted. Another feature that template literals provide in ES6 is known as tagged template literals , which allow you to parse the literal strings provided in a template literal through the use of a function. It‚Äôs a bit difficult to describe what that means, so it‚Äôs best to just show an example and then we can talk about what‚Äôs going on. Here we have a function we‚Äôll be using to perform our tagging, aptly named tag() . Let‚Äôs ignore the logic of this for now until after we call this function via a tagged literal to see what it does: Here we‚Äôre calling our tag function as a tagged template literal , which means we‚Äôre using the new syntax of: functionName`Tagged literal string` . This calls our tag() function and passes our template literal as a series of parameters: If we look back up at the tag() function definition we can see that we‚Äôre expecting a total of four parameters: strings , a , diff , and b . The first argument of a tag function will automatically contain an array of string values which make up the template literal string that was passed into it, separated by the ${...} interpolators, if any exist. For our example here we see that the template literal we passed to our tag function contained three ${...} interpolations: The number ${a} is ${ true } than the number ${b}. If we were to split our template literal string using each ${...} interpolation statement as a separator, we‚Äôd have four strings remaining (don‚Äôt forget the final period which is a small string unto itself). Therefore, console.log(strings) shows that the generated strings array contains all four of those string values automatically. The remaining arguments of the tag function are simply the expression interpolations we included in our template literal. In this case, a is equal to 1234 and b is equal to 5678 . diff is the interesting parameter because when we call the tag() function, we just included the value of true for that interpolation. The reason is that we want to ‚Äúinsert‚Äù our own value in place of this diff parameter using some simple logic to check if the number a is greater than or less than the number b . In this case a is less than b , so we set diff to less . Finally, for the return statement we concatenate our full template literal string once again by alternating through all four values in strings with each of the other three parameters. The result is our intended, formatted string output: \"The number 1234 is less than the number 5678.\" Just to show the logic works as expected, we change the values of a and b then call tag() again: As expected, this time our diff value changes to greater since 9999 is by far the larger of the two. The last feature worth noting about the new template literals functionality is raw strings . Keen observers may have noticed in the previous example discussing tagged template literals that the first parameter of our tag function ( strings ) actually contained five values: our four delimited string values from our template literal string, plus a value with the key raw that was its own array. The raw value of the strings array is another copy of all the delimited strings from our template literal that was passed in, except these are the raw strings, which means they inherently ignore any escape sequences which might be present. For example, here we have another simple tag() function and we‚Äôre passing in a template literal that contains a number of tab ( \\t ) escape sequences between each word: While the basic forms of the strings array evaluates these escape sequences as normal, thereby inserting tabs between each word, the strings.raw array ignores all such sequences, giving us a string with many \\t characters within it. To help you and your team with JavaScript development, particularly when dealing with unexpected errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-05-24"},
{"website": "Airbrake", "title": "How to Debug: Best Practices", "author": "Unknown", "link": "https://airbrake.io/blog/debugging/debug-best-practices", "abstract": "Knowing how to debug¬†is a critical aspect of every application development life cycle. Debugging allows developers to not only recognize that an exception has occurred, but to also then systematically traverse through the application‚Äôs execution until the culprit code can be located and fixed. Whether the resolution requires repairing a minor typo or even rewriting a massive component in the system, the simple act of debugging allows developers to (eventually) solve nearly every issue, given enough time and manpower to do so. However, as powerful as debugging is, it can also be somewhat overwhelming. With hundreds of active programming languages and frameworks used across dozens of code editors and integrated development environments ( IDEs ), knowing exactly how to get started when trying to debug your own projects can be somewhat staggering at first. Therefore, this series of articles attempts to answer the simple question of: How to Debug? . In this first article we‚Äôll take a broader approach in answering that question by providing a handful of fundamental tips and best practices that apply across numerous languages and development environments. We‚Äôll then dig a bit deeper for future articles, looking in more detail at specific programming languages and code editing tools to promote additional tips and tricks. Let‚Äôs get debuggin‚Äô! The first important distinction to make between the process of debugging and normal application execution is that debugging allows for some form of additional interaction on your part as the developer. When you normally execute your application, it runs on its own and executes all code by its own volition, based on the logic and instructions provided in the codebase, commonly without the need for user interaction. On the other hand, a crucial component of debugging is that ability for an individual to interact with the application while it is executing . This run-time interaction opens up a number of useful features and functionalities that would normally be unavailable. The most critical of these features provided by debugging is the ability to control the flow of execution . Just as with a normal application, you can issue some basic commands to the application to get it to start and stop execution, but debugging allows for much more control over the execution through additional commands. To illustrate, we‚Äôll use a very simple snippet of C# code: As with most applications this code would be executed line by line, in order from top to bottom. Therefore, we‚Äôd first create a birthday DateTime , then get the difference in days between DateTime.Today and birthday , then finally output the result as the number of days old: For normal execution, this process occurs extremely quickly and begins when we issue the start command to the application, telling it to begin execution. However, debugging introduces a few additional commands that allow us to halt execution and step through it line by line, if desired. The rough list of debugging execution flow commands can be found below: Start Pause Continue Step Into Step Over Step Out Stop Start and stop are pretty self-explanatory. However, once we gain the ability to pause midway through execution things really start to get interesting. Consider our simple three-line application above. For now, as soon as we begin execution we‚Äôll hit pause . When that occurs, the debugger process that is running in the background halts the current execution at the exact line of code it was at when we issued that pause command. Perhaps we halted execution on the second line of our application: int daysOld = (DateTime.Today - birthday).Days; . This means that our application has already executed the first line, so we have a DateTime value called birthday , but the second and third line have not yet executed (meaning our daysOld variable is 0 , the default value of an int ). Now we can start using the step capabilities of our debugger. Most applications consist of many lines of code that often make calls to other functions or methods. A given method might have many lines of code to execute inside it, and it may even call additional methods or functions inside itself. This process can continue ad nauseam, deeper and deeper through many levels of execution. The Step Into command allows us to continue line-by-line execution while traversing into all those sub-function and sub-method calls. In our case, if we are on line 2 of our application and use Step Into , we‚Äôd just move ahead to line 3. However, issuing a Step Into on line 3 steps into our Logging.Log method, which is part of a simple helper class to output information during debugging: After a few more Step Into commands we‚Äôd traverse through all the executed lines of Logging.Log , then we‚Äôd jump back out to our calling main method before the application shuts down. While Step Into is the most robust member of the step commands by digging into every single procedure call that the code makes and following it down the rabbit hole, the Step Over command does not traverse into method or function calls when it reaches them. Instead, as the name implies, the Step Over command simply steps to the next statement within the current procedure. Thus, when we reach line 3 of our simple application above where there‚Äôs a call to the Logging.Log method, a Step Over command will tell the application to continue execution (and will therefore run the Logging.Log call as normal), but it will do so behind the scenes, without stepping into that method via the debugger. Finally, Step Out takes this trend one step further (no pun intended). When issuing a Step Out command, all remaining lines of the procedure which contains the current execution point are executed, after which the debugger jumps out to the next statement, following the procedure call that placed execution inside the inner procedure in the first place. In other words, Step Out jumps outside of the current ( local ) method or function, executing the rest of that local scope code automatically and without halting. For example, if we‚Äôre inside the Logging.Log method and we‚Äôre sitting at the Debug.WriteLine(value) line, when we issue a Step Out command the application will immediately execute all remaining lines inside that calling procedure ( Logging.Log ), then it will suspend execution and wait at the end of our application, following the third line of code that contained our: Logging.Log($\"Age is {daysOld} days old.\"); . Steps are all well and good, but when applications become much larger than a few lines of code, halting execution at the proper spot by timing a pause command becomes nearly impossible. This is where breakpoints come in handy. A breakpoint is an intentional marker placed at a particular line of code that instructs the debugger to temporarily suspend execution when it reaches that line of code ‚Äî in other words, to break at that point . In most code editors breakpoints can be placed by simply clicking on the left-hand gutter next to a line of code. This usually creates a dot or other marker indicating that a breakpoint has been made. Now, when executing the application in debug mode, execution will halt at the first line of code with an associated breakpoint on it. From there, normal step commands can be used to traverse through the relevant sections of code that need inspection, rather than the whole of the application. As useful as breakpoints are, there are many scenarios where we may wish to halt execution at a specific breakpoint only under certain circumstances. For example, if we have a snippet of code that loops through thousands of objects and we need to debug that code for only one specific iteration of that loop, it can be a painstaking process to sit there and step through that looped code thousands of times just to reach the single loop iteration that we care about. That‚Äôs why most debuggers allow us to create breakpoint conditions . A condition is usually just one or more boolean ( true/false ) statements, typically written in the code of the application in question, which is used to determine when a particular breakpoint should trigger and halt execution. For example, here we have two lines of code that use our PizzaBuilder class to create a tasty little pizza, then we output the resulting instance to the logger: Perhaps we‚Äôre creating a bunch of pizzas and we have a breakpoint on the Logging.Log(pizza) line, but we only want that breakpoint to trigger (and suspend execution) if our pizza has provolone cheese on it. Thus, our breakpoint condition would contain this simple statement: pizza.Cheese == Cheese.Provolone Now, when this breakpoint is reached during execution, our debugger will execute the statement above and confirm that our pizza does contain provolone cheese. Since this condition is true, our breakpoint triggers and the debugger halts at the Logging.Log(pizza) line, awaiting further commands from us. Stepping through our code line by line, or skipping around as desired, is a great feature, but it‚Äôs not very useful if we cannot examine and evaluate how each line of executed code is altering values and states of objects. This is where locals come into the debugging process. For most debuggers, a local is simply a representation of a local variable (one that is defined within the local scope, such as the currently executing method or function). Thus, the collection of locals is a full, automatically populated list of all local variables within the current execution scope, as determined by whatever line of code execution is suspended at. For example, pausing execution at the end of our three-line age output method shows us the following list of locals : While automatically generated locals are certainly useful to check on variable values and the like, most debugging tools provide inline inspection , which allows us to examine objects, variables, statements, and so forth directly inline during run-time. For example, let‚Äôs suspend execution at this line: Logging.Log($\"Age is {daysOld} days old.\"); . The debugger I‚Äôm using allows me to simply mouse over the daysOld variable in that line and a tooltip immediately pops out showing me what the current value of daysOld is at this point in execution ( 6332 ). In many cases while debugging, it may be necessary to evaluate a variable, object, or line of code that isn‚Äôt actually being executed at the time (either it wasn‚Äôt written at all in the code base, or maybe it‚Äôs being executed elsewhere but we need to check it right now). This is where the wonderful watch functionality comes to the rescue. Most debuggers allow us to create watches , which are local code statements that are executed/evaluated automatically during the debugging process, every time execution steps to a new line of code. For example, let‚Äôs remind ourselves of our simple three-line program: Let‚Äôs start by suspending execution at the first line before anything has executed. Then, let‚Äôs add a few items to our watch list: birthday , DateTime.Today , (DateTime.Today - birthday).Days , and daysOld . A few important things to note here. While not the case with all languages, for this example using C# and .NET, the common language runtime is smart enough to evaluate the type of objects by looking ahead at our code, even when it hasn‚Äôt actually initialized those values yet. Thus, even though we haven‚Äôt initialized our birthday variable yet, we already declared via the compiler, which automatically gives it a default value. In this case, since birthday is a System.DateTime , its default value is Midnight, January 1st of the year 1 . A similar process of assigning default values occurs for our other variables. However, as you may have noticed we can add not only variables but full, executable code statements to our watch list. (DateTime.Today - birthday).Days is just such a statement. It is executed and evaluated every time we break at a new line of code (that is, every time we execute a code statement). Therefore, while the value is currently showing as some 736,451 days (since it‚Äôs counting from year 1), once we Step Over to the second line of code, all our watches update automatically: Now that the first line has executed, birthday was changed to our intended date of January 1st, 2000 and, therefore, our third watch statement also updated to a new value of 6332 . While debugging practices often include many more additional features, hopefully this brief introduction is a good starting point for your dive into debugging on your own projects. In future articles in this series we‚Äôll cover more topics and in greater detail, including specific languages and editors, so stay tuned for that!", "date": "2017-05-18"},
{"website": "Airbrake", "title": "Creational Design Patterns: Singleton", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/creational-design-patterns-singleton", "abstract": "Today we‚Äôre continuing our journey through our Guide to Software Design Patterns series with our final Creational pattern: singleton . The purpose of the singleton pattern is to ensure that only a single instance of the object or class in question can exist at one time. We‚Äôll spend some time in this article examining the singleton pattern in more detail, using both real world examples and some functional C# code. We‚Äôll also briefly touch on the differences between thread safe vs non-thread safe methods of implementation, and why consideration of those two dynamics may be important. Let‚Äôs get going! There are certainly many instances in the real world where a particular object could be considered a singleton . Individual human beings are the most relatable, since each of us is extraordinarily unique through the structure of our cells, our minds, our experiences, our behaviors, and so forth (#UniqueSnowflakes). However, it‚Äôs important to differentiate between singularity and uniqueness . While it would be correct for us to state that there is no other individual person that is exactly like you , and therefore you are unique in that regard, of course there are billions of other human beings. In a programming sense, if you were creating a class to represent a singleton instance of yourself, you might call the class Me : However, we couldn‚Äôt simply create a Person class, since we would likely have to create billions of instances of the Person class, in order to represent everyone on the planet. Thus, when considering the singleton class, it‚Äôs critical to think in terms of uniqueness . To that end, another real world example of a singleton object is a simple deck of cards . When most of us sit down to play a few games of poker with our buddies, we often play using a single entity known as the deck . This typically consists of 52 cards in total, made up of thirteen ranks of four suits each. When a hand is dealt around the table, all cards are obtained from that single shuffled instance of the deck . Once the hand is over and you‚Äôve (hopefully) taken your friends for all they‚Äôre worth, all 52 cards are gathered up and shuffled back into that same single instance of the deck , then a new hand is dealt from it. Repeat ad nauseam until all money is lost and/or drunkenness overtakes you. Now, as mentioned in the introduction, the basic purpose of the singleton pattern is when there is a class which you want to ensure can only ever have a maximum of one instance in existence at any given moment. While not an very common pattern, there are some cases where it‚Äôs helpful to have a singleton class, such as when performing heavy I/O functions on a data set where you must be assured that multiple duplicate requests don‚Äôt occur simultaneously. In that case, a singleton pattern could be used as part of a queue or job system. To illustrate how a singleton pattern is implemented we‚Äôll continue with a deck of cards example. As with our previous design pattern articles, it‚Äôs probably easiest to give the full code at the start, then we‚Äôll explore it in more detail to follow: Note: To keep this a bit shorter we‚Äôve left out the Utility namespace and Logging class code. Those snippets have been included in other Design Pattern articles, so feel free to check those out if you‚Äôre curious. For this example we have a basic Deck class and we want to ensure that it is a singleton , such that only one instance of the class can ever be created or used in code. However, when dealing with singleton patterns, another important factor must be taken into consideration: thread safety . We won‚Äôt get into too many of the details but, like many programming languages/frameworks, .NET allows for the creation and execution of multiple threads. In practice, this usually means that one thread might be handling UI and visual functionality, while another thread could be handling background logic and processing. The challenge with developing multi-thread applications is ensuring that the entire codebase is thread safe . An application is thread safe when multiple threads can execute in tandem, but never present what are known as race conditions , which occur when the application behavior or state changes based on sequential or timed executions. As we‚Äôll see in our example code shortly, a non-thread safe application can allow for multiple threads to interact with (and thus alter) the state of an object without the other thread knowing about these interactions. Thus, our example code begins with some basic enums to represent the possible suits and ranks of our cards. We also have a simple ICard interface which is used by our Card class to indicate that a single instance of Card must have a valid Suit and Rank enumeration value: With those basics setup, we can start by defining our Deck classes. We begin with the NonThreadSafeDeck class: This is our first crack at a singleton pattern to represent our deck of cards. The sealed keyword ensure that no other class can inherit from NonThreadSafeDeck . This is a critical part of the singleton pattern, since allowing inheritance would mean that two (or more) subclasses could be defined and then initialized, which would lead to two (or more) unique instances of our class (which violates the singleton pattern). We then define a static property called instance , which expects to be set to a NonThreadSafeDeck type. This is used to store our single instance of our class. We also have the Cards property, which is just a list of Card class instances that we‚Äôll use for the basic logic of populating our deck. The private NonThreadSafeDeck constructor could be blank, though here we have our basic logic to instantiate our list of Cards by using a LINQ query to create a unique Card instance for each combination of all Ranks and Suits (giving us the standard 52 card deck). Finally, we have a static Instance method that is our only public member of the class. This method checks if our instance property exists yet, and if not, creates a new instance of our class then returns that value. The result is that we can instantiate our singleton instance of NonThreadSafeDeck via the NonThreadSafeDeck.Instance property: However, as the name of our class implies, this potentially presents a pretty big problem: It‚Äôs not thread safe . To see why we have three simple methods that use NonThreadSafeDeck across a total of three execution threads: The code is reasonably commented, but the basic idea here is that we create two new threads ( A and B ) and define that the execution of each thread should begin with the NonSafeThreadA and NonSafeThreadB methods, respectively. Within each method we get the Instance of our NonThreadSafeDeck class, assign it to a local deck variable, then perform some simple steps: Output the current card count, remove a single card, then output the updated card count. Finally, we wait for three seconds to ensure our A and B threads have completed before we continue in the main thread, grabbing the Instance one last time and outputting that current card count a final time. While you can probably guess what will happen, here‚Äôs the resulting output of this test: As we can see from the output our code is not thread safe. We first get our Instance in thread A and decrement the card count down to 51 . Then when we get our Instance in thread B , the card count is back up to 52 , so we again decrement it down to 51 . After both A and B threads are complete, we check the card count of Instance in our main thread, and we find that it is at 51 . This is clearly not what was intended, since we decremented the count two times, once in each sub-thread, so we should expect the count in the main thread to be 50 . The reason for our trouble ‚Äî and thus why NonThreadSafeDeck is not a true singleton pattern class ‚Äî is because we had no checks in place within our class (and the Instance method specifically) to determine if our instance property was already defined in another thread. Since our A and B threads effectively executed simultaneously, they both checked (and confirmed) that instance was still null , and therefore they both create a new NonThreadSafeDeck instance and returned it for us at the same time. To resolve this issue we can make a few simple changes in our design within the Deck class: Here we‚Äôre defining the LazyDeck property of our Deck class, which is a static readonly of the Lazy<T> class type. Lazy<T> allows us to create an object that uses lazy initialization , which means that the actual creation of the LazyDeck property is deferred until it is first used. Lazy initialization is commonly used for expensive operations within an object creation, so it can be delayed until a later time. However, in our case, we‚Äôre using it as a simpler (and thread safe) means of creating a unique, single instance of our Deck class. Lazy<T> is inherently thread safe, which we‚Äôll see in a moment. We set the LazyDeck property‚Äôs initial value to new Lazy<Deck> , then pass in a lambda to specify the function that will be called when LazyDeck.Value is first accessed. In this case, it is an anonymous function that simply creates a new Deck() instance and returns that to be assigned to the LazyDeck.Value property. Our Deck.Instance property is much the same as before, but we‚Äôre using that to return LazyDeck.Value , which behaves the same as our previous example, giving us the singleton instance of our class. From there, the constructor and Cards property are both the same as before, so we won‚Äôt go over those. The result is that we now have a thread safe version of our deck via the Deck class. To illustrate this we have a similar setup that we used before, creating two threads ( A and B ), retrieving the Deck.Instance value within each, decrementing the card count, then checking the final counts afterward and in the main thread at the end: The output shows us that our underlying Deck object instance is a true singleton : Even though we had two threads running in parallel, we are able to decrement the card count within each thread and have the singleton instance of Deck retain it‚Äôs state and values. This results in the card count now being dropped down to the expected value of 50 in the main thread.", "date": "2017-05-16"},
{"website": "Airbrake", "title": "Creational Design Patterns: Prototype", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/prototype", "abstract": "Our next stop during our travels through the Guide to Software Design Patterns series has us exploring another Creational technique known as the prototype pattern. In the simplest terms, the prototype pattern allows for a new instance of an object to be created by duplicating or cloning an existing object, as opposed to creating a new object instance outright. In this article we‚Äôll explore the prototype pattern through both some real world instances and a functional C# code example, so let‚Äôs get started! A common example of prototyping , or cloning , which most computer users are familiar with, is when we copy a file on our hard drive. By selecting a text document on your desktop, then hitting Ctrl/Cmd+C then Ctrl/Cmd+V , you‚Äôre asking your computer to create a clone of that text document. In essence, your system is analyzing the existing document and duplicating of all the relevant bits and bytes that make up that entity. A rather complex process behind the scenes, but a very straightforward example of everyday cloning that most of us experience. To bring a bit more life into it, another real world example of cloning occurred back in 1996, when Dolly the Sheep was born, making her the first successful cloning of a mammal through a process known as nuclear transfer . This success has led to numerous other mammalian clones including deer, horses, bulls, and even four identical clones of the original Dolly as of July 2016. Wild stuff! To illustrate how prototyping works within actual C# code we‚Äôll stick to our tried-and-true topic of books . As usual, we‚Äôll start with the full working code example that you can copy and modify yourself, after which we‚Äôll walk through it step-by-step to see what‚Äôs going on and how prototyping is typically implemented: As usual we begin with a baseline object, which is our Book class in this case. Book uses the IBook interface, which just specifies a few simple properties our Book class must declare: Title , Author , and Pages . Pages is of particular note because we have a separate Pages class with its own PageCount property that tracks the actual number of pages. The reason for this abstraction of Pages as a separate class will become apparent shortly: It‚Äôs also worth noting that, in addition to the IBook interface, our Book class also inherits the ICloneable interface. ICloneable is an interface provided by the .NET API that contains only one member, the Clone method. By using this interface, we‚Äôre forcing our Book class to declare a Clone method, which we‚Äôve specified: This is a basic way of cloning an object in C# , through the use of the MemberwiseClone method. Using MemberwiseClone method to clone an object creates what is called a shallow clone. A shallow clone of an object copies all the nonstatic fields of the source object. This works fine for simple fields like Strings or Integers , but what happens when a field is just a reference type to another object (as in the case of the Book#Pages field, which is a reference to the Pages class object)? The shallow clone copies the reference to that object, but the actual referenced object is not copied. This means that our shallow clone, created via the MemberwiseClone method within our Clone instance method, will not retain the proper Pages object instance that has been created. This is why we also have added a DeepClone method to the Book class: While we begin with a MemberwiseClone call just as before, we then explicitly assign the property values of our clone object to be the same as the corresponding Book object properties. This is particularly important for the clone.Pages property assignment, where we explicitly generate a new instance of Pages with the appropriate PageCount property value passed into it. To see how this all comes together, we can call our Book class and create some clones. We start by creating a new instance of Book called book , then immediately create a shallow clone, after which we output the values of both our Base Book and Shallow Clone : The output shows that all properties are identical across both books, as expected: Now, let‚Äôs see what happens when we modify the Title and Pages.PageCount properties of our Base Book instance: The produced output: What‚Äôs particularly important to note here is which properties changed and which didn‚Äôt. Because we created a shallow clone, after we modified the Title property of book our shallowClone instance retained the original Title property it was given. However, changing the Pages.PageCount property of the base book instance also causes that same change to propagate to our shallowClone . As discussed above, this is because a shallow clone of an object retains all references to outside objects that it might have. In this case, the Pages property of our instances are simply a reference to the Pages class instance, which both the base book and shallowBook continue to share. This behavior may often be desired when using the prototype pattern, but in cases where separation is required we can use the DeepClone method of our Book class, like so: Again, we start with the same base book instance, and from that we create a deepClone instance. The output shows, as expected, that both contain the same properties at this point: However, now let‚Äôs see what happens when we make the same modifications to the base book instance by changing Title and Pages.PageCount : Unlike with the shallow clone technique, our deepClone instance does not copy the reference to the same Pages class instance of our base book instance. Therefore, deepClone has its own unique instance, retaining the original Pages.PageCount value of 694 :", "date": "2017-05-09"},
{"website": "Airbrake", "title": "Creational Design Patterns: Builder Method", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/builder-method", "abstract": "Today, our journey into the Guide to Software Design Patterns series takes us to yet another Creational design pattern: the builder method . In this article we‚Äôll cover what the builder method is using both real world examples and functional C# code, so let‚Äôs get to it! The simplest real world example of the builder pattern, which most of us are familiar with, is when we make (or order) a pizza. The pizza toppings cannot be added in any random order or the whole thing is likely to come out a mess. Instead, there is a step-by-step process that is followed. This usually begins by deciding on the size of the pizza, and therefore how much dough to use. Then the sauce is added, then cheese, then maybe some pepperoni and some olives, and so forth. Yet, as any pizza-maker will tell you, not all orders are the same, and therefore, not all pizzas are built in the same way. Each step in the process, and each topping that is added, can be thought of as a single step in the much larger builder pattern that is used to make that delicious pie you‚Äôre about to devour. We‚Äôll keep the pizza analogy going with our code example for this article ‚Äî maybe we‚Äôre planning on developing an online ordering application for that new local pizza joint! In any case, to explore just how the builder method can help us, we must first examine a different , more common design pattern that is often used when working with objects that contain many mutable (changeable) properties. A common technique in C# is to define our class and then define the constructor (the method with the same name as the class) with all the necessary parameters we might need to set properties for our class. For example, here we have defined our TelescopedPizza class that we‚Äôll use to make pizzas, which has a wide range of properties including type of cheese, size, whether to include sauce or pepperoni or ham, and so forth: Some keen observers may notice that while our TelescopedPizza class has properties for Olives and Mushrooms , we haven‚Äôt included a parameter for either in our constructor . This is because we‚Äôre trying to deal with the fundamental problem with this type of design pattern, which is indicated by our class name and is known as a telescoping constructor . To see what we mean by the telescoping constructor pattern, here‚Äôs our second constructor for our class: Now we‚Äôve added parameters to set both the Olives and Mushrooms properties, but immediately it becomes apparent that this practice could quickly spiral out of control. While C# allows us to add as many constructors to our class as we‚Äôd like, so long as their parameter signature (the list of parameter types) is the same, if we wish to allow for all possible combinations of toppings for our pizza, it will be difficult to account for all of these with this pattern. The list of parameters starts to expand or telescope outward with each new constructor that is defined, hence the name of this design (anti)pattern. One common solution to this issue with C# is to use default values. Here, we take our second constructor above, but add default values to each parameter: This works in practice, since we can now define just about any combination when creating a new instance of our TelescopedPizza class, but it‚Äôs rather cumbersome to use in practice. One issue is that we have to retain (and use) the correct parameter order when creating a new instance: In the above case, we‚Äôre able to make exactly the kind of pizza we want by using the constructor that contains default values, but we have to remember the order and specify values even where we don‚Äôt want that particular topping. Since every parameter is default, we have to indicate that ham should be false , just to ‚Äúget access to‚Äù the olives argument that we care about and set it to true . Newer versions of C# allow us to use named arguments , which means we don‚Äôt need to remember the positioning of parameters in the constructor list. Thus, we could also perform the same instantiation like so: While this pattern is the most user-friendly method when using a telescope-style method, it‚Äôs still not ideal. For example, we might want to create our pizza object in code much the same way we‚Äôd build it in real life: step-by-step, with a bit of order. After all, it (usually) doesn‚Äôt make sense to add the sauce after the cheese. Bizarre, although still probably tasty! This is where the builder method comes into play. The builder method allows us to create our pizza step-by-step, adding each appropriate topping in whatever order we wish. Best of all, as we‚Äôll see below, because each addition is separated from one another in the code, we can easily add unique logic to the step of adding cheese that is different from when we add olives, for example. To implement the builder method for our pizza example, we first start with our secondary builder class, which we‚Äôre calling PizzaBuilder : public enum Cheese { Cheddar, Mozzarella, Parmesan, Provolone } public enum Size { Small, Medium, Large, XLarge } We‚Äôre still using the same list of properties that we did before, but the magic comes in when we start to define some of our instance methods. First, our constructor is very basic. We‚Äôve decided that every pizza will have a size of some sort, so the one and only parameter in our constructor is size , which has a default value of Size.Large from our enum : Now we get to add the extra methods to our builder , which allows us to pick and choose which toppings we want, and in what order to add them. Most of them are quite similar, so we‚Äôll just take a look at two, AddCheese and AddSauce : These are quite similar to normal instance methods, but the key is that we‚Äôve defined the return type value to be the same as the parent class, PizzaBuilder . Then, after all logic is complete within the method, we return this , which returns the current instance of the PizzaBuilder class. You may also notice that for all our properties that are merely boolean values, we just assume that each will default to false and, therefore, we only set the property value to true when we call the appropriate Add... method. The last critical method in our PizzaBuilder is the Build method, which returns an instance of the Pizza class (that we‚Äôll define in a second), and which also accepts a single parameter: the current PizzaBuilder instance. From here, defining our actual Pizza class is quite simple. We just ensure the constructor expects a PizzaBuilder instance for the parameter, then we use the properties taken from that PizzaBuilder to assign values in our Pizza instance: With everything defined, we can now make use of our new PizzaBuilder class like so: Here we‚Äôve created a pizza with a specific set of toppings, and we‚Äôve added them in our desired order. This technique of using multiple dot method calls in a row is called method chaining , and is possible in this case because of how we defined all of our Add... methods inside the PizzaBuilder class. Since they each return the current PizzaBuilder instance, chaining them together like this simply executes the first call, then the next, then the next, each one using (and modifying) the current instance of the class. Once we‚Äôve added all our toppings as desired, we finally call the Build() method which, as we saw above, returns a new instance of Pizza that accepts our fully built PizzaBuilder and assigns all appropriate properties therein. The end result of our log output is a Pizza with exactly the property values we want: Best of all, since each Add... method is self-contained with its own parameters and logic, we can easily take advantage of our default values for cheese and pizza size by using the following call: Again, this builds a pizza just how we want it, including the default values of Large size and Mozzarella cheese:", "date": "2017-04-24"},
{"website": "Airbrake", "title": "Creational Design Patterns: Abstract Factory", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/abstract-factory", "abstract": "Moving right along through our Guide to Software Design Patterns , today we‚Äôre going to take a deeper dive into the next Creational design pattern on the list: the abstract factory . The abstract factory is the final factory pattern we‚Äôll be exploring in this series and, perhaps unsurprisingly, it is the most robust and detailed of all three factory patterns we‚Äôll be covering. Simply put, the abstract factory allows you to create a factory of factories ‚Äî a way to group similar factories together, without knowledge of their underlying classes or behavior. Throughout this article we‚Äôll examine what the abstract factory design pattern is by using a real world illustration, along with a functional C# code example, so let‚Äôs get started! As with other factory pattern types, the abstract factory relies heavily on the concept of a real world factory in order to rapidly recreate similar objects, without any knowledge (nor understanding) of what precise steps go into creating a particular product. Sticking with our theme of writing, books, and publication, the real world example of an abstract factory pattern expands on these concepts even further. For example, imagine we have two authors, Edgar Allan Poe and Charles Darwin, both looking to publish their (arguably) most famous works, The Raven and On the Origin of Species , respectively. Since one is a poet and the other a scientist, the types of work they‚Äôve created are quite different ( poem and research paper ). Moreover, given those disparate types of writings, it‚Äôs unlikely that they‚Äôll both be using the same publisher. As it happens, The Raven was first published in 1845 by a periodical called The American Review , while On the Origin of Species was published in 1859 by John Murray , an eclectic English publishing firm. Since different types of authors produces different kinds of writing ‚Äî which are likely to be published by dramatically different publishers ‚Äî this is a great use of the abstract factory method. To simplify our comparison, we‚Äôll modernize the publisher types a bit and use a blog for publishing poems and a scientific journal for publishing research papers . If we have a poem like The Raven ready to be published, we need an appropriate type of publisher for it, such as a Blog . Similarly, a scientific paper , like On the Origin of Species , might require a scientific journal for publication. We‚Äôve now created a relationship, which is the heart of the abstract factory design pattern. Poems now require a blog to publish, while a scientific paper requires a scientific journal to publish. This dependency is what defines the abstract factory , as we‚Äôll see in our code below. To illustrate the abstract factory pattern in code, for your convenience, we‚Äôll begin by showing the full code example right away. Afterward, we‚Äôll dissect the code to see how the abstract factory was created. The first part of our abstract factory is the creation of two unique types of objects; in this case: Books and Publishers . Thus, we begin by defining our unique types of Books : Nothing fancy going on here. We‚Äôve created the IBook interface with a few properties, then we create two unique classes that inherit IBook , Poem and ResearchPaper . Both simply assign values for the Author and Title properties, then output the name of the class when initialized. Note: Since we‚Äôve used it in a few different articles already, I‚Äôve excluded the Utility namespace and Logging class code, as it‚Äôs just a convenience for generating output. Next, we‚Äôll follow a similar pattern to create our IPublisher interface, along with two unique classes that inherit from it: This pattern is exactly the same as when creating our Book type classes, but now we have two unique types of Publishers , Blog and ScientificJournal . Now we can get to the juicy bits of actually implementing our abstract factory . The key is to create a factory that makes use of both our IBook and IPublisher interfaces. That is accomplished with the IBookFactory interface that is immediately below:] Once our IBookFactory is defined, we then expand on that to create two unique factory classes, the PoemFactory and the ResearchPaperFactory . We‚Äôve given ourselves the option of initializing either an empty version of PoemFactory , or passing parameters to immediately call the MakeBook and MakePublisher methods that were inherited from our IBookFactory interface. What makes this abstract is that each unique type of factory is able to independently generate and return an appropriate Book type class and Publisher type class, but the factory itself is none the wiser. For example, notice in the PoemFactory.MakeBook() method we‚Äôre creating a new instance of the Poem class, while the ResearchPaperFactory.MakeBook() method returns a new ResearchPaper instance. This abstraction allows us to use our factories as follows: We‚Äôre able to instantiate a PoemFactory (and pass in some values) without any underlying knowledge of what Book or Publisher classes are used under the hood, nor how their respective logic works. This is the abstract part of the abstract factory pattern, and the output confirms that we‚Äôre creating the appropriate types of objects:", "date": "2017-04-14"},
{"website": "Airbrake", "title": "Ruby Exception Handling: KeyError", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/keyerror", "abstract": "Next up in our deep dive through the Ruby Exception Handling series we‚Äôll be dog-paddling our way around the KeyError. The KeyError is a descendant of the IndexError. Unlike the IndexError, which deals with Arrays, the KeyError deals with Hashes instead. Specifically, a KeyError occurs when a reference to a key within a hash is invalid or missing. Throughout today‚Äôs article we‚Äôll examine exactly what the KeyError means, see where it fits within the Ruby Exception class hierarchy, and analyze how to handle KeyErrors when they‚Äôre raised, so let‚Äôs get to it! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. IndexError is a direct descendant of the StandardError class, and is a superclass to a few descendants of its own. KeyError is a direct descendant of the IndexError . Unlike the IndexError that is associated with improper use of Arrays, the KeyError is associated with improper use of Hashes. A Ruby Hash is effectively a dictionary object that contains a series of key/value pairs. This data structure is also commonly referred to as an associative array. Just as with Arrays, a Hash can be created in a number of ways: Also like Arrays, there are many methods that can be used to manipulate our Hash once initialized. We can use similar syntax to that of assignment to also retrieve values: As with the Array.fetch method, we can also call the Hash.fetch method to retrieve a value from our Hash by passing the key value as the first argument, as seen above. However, if we pass an invalid key to Hash.fetch, let‚Äôs see what happens: As expected, we raised a KeyError, since :published was not specified as a key in our Hash: As a workaround, we can pass a second argument to Hash.fetch, which specifies a default value to return if the Hash doesn‚Äôt contain a matching key for the value we provided: Now, rather than raising a KeyError, our call to Hash.fetch notices a default value of Time.now.to_s, and returns that as our output instead: Finally, just as with Array.fetch, we can also initialize our call to Hash.fetch with an associated block, which forces Ruby to execute the block code if, and only if, the passed key value is invalid: Now, instead of raising a KeyError, our output shows we gracefully failed out of that Hash.fetch method call: To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-04-10"},
{"website": "Airbrake", "title": "Kanban Methodology: What is it and how do you use it?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/kanban", "abstract": "Kanban (or ÁúãÊùø, literally meaning a sign in Japanese), is used today to signify a form of manufacturing in which all necessary components are managed through the use of a card that indicates missing components. The purpose of kanban is to control inventory throughout the supply chain, within a manufacturing setting, via a practice known as just-in-time (JIT) manufacturing. This ensures that the supply and demand of manufacturing components are perfectly balanced with one another, largely eliminating wasted materials and time. In modern software development, kanban (or the kanban methodology) expands on those same just-in-time concepts by ensuring that the level of required work at any given time roughly equates to the work capabilities of the team. Thus, development work is performed in a just-in-time fashion, with similarly minimal waste. In this article we‚Äôll further explore what the kanban methodology is, how it is most commonly implemented in the software development life cycle, as well as any advantages and disadvantages you might experience when trying to implement kanban yourself. Let‚Äôs get to it! Just as with the kaizen model that we explored in a previous article, the kanban method was originally developed inside Toyota Motor Corporation, by an industrial engineer named Taiichi Ohno. The goal was to drastically reduce waste across the manufacturing floor at Toyota, and kanban methods proved to do exactly that. Toyota‚Äôs Six Rules, as described by Taiichi Ohno in his 1998 book Toyota Production System: Beyond Large-Scale Production, describe the company‚Äôs methods for applying kanban principles: Later process picks up the number of items indicated by the kanban at the earlier process. Earlier process produces items in the quantity and sequence indicated by the kanban. No items are made or transported without a kanban. Always attach a kanban to the goods. Defective products are not sent on to the subsequent process. The result is 100% defect-free goods. Reducing the number of kanban increases the sensitivity. A kanban card is a fundamental component of the kanban process. A kanban card is simply a written message that indicates the need to replenish a particular component using in the manufacturing process, such as parts or materials. In Toyota‚Äôs case, a kanban card delivered to one section of the factory may have indicated a depletion of wheels, for example. This would, in turn, trigger a replenishment process for a new batch of wheels to be sent (also through the use of a kanban card). To keep things running smoothly, there would typically already be a batch of wheels waiting for pickup when a depletion kanban card was being delivered. This would ensure that the process kept running smoothly across the entire factory, and further guaranteed that the consumption of one component (such as wheels) was always the driving force and clear indicator for more of that product. Moving into the realm of modern software development, kanban has been adapted to fit the needs of most development life cycles. As previously discussed, the kanban methodology aims to balance the level of active or in progress work with the capabilities of the team to handle said work. If your team is handling all current work in progress with ease, more tasks can be added to that in progress list, to hopefully ensure there‚Äôs a constant balance of efficiency. If executed properly, the kanban methodology can make planning and adapting to changes easier for your team. This will also result in producing better code and at a faster rate, ensuring a focused agenda, and providing organization-wide transparency throughout the entire software development life cycle. When applied to a software development life cycle, the kanban methodology has a few different styles of implementation, depending on the particular needs of your project or organization. A kanban board is a workflow management and visualization tool, on which kanban cards are placed and moved around to indicate where in the process those cards reside. For older implementations, a kanban board would‚Äôve been a physical board, but most modern implementations use a virtual board, through their own project management software, such as Trello. Obviously, modern software development teams can still opt for a physical board, but the benefits of a virtual board are tough to beat, so it‚Äôs highly recommended you go that route if you‚Äôre giving kanban a try. Functionally, the kanban board serves one simple purpose: To visualize and standardize the workflow throughout the project into easy-to-use categories. The actual categories that kanban cards can be placed inside your board are up to you and dependent on the needs of your team, but at the most basic level, these categories should consist of: To Do: Tasks that have yet to be worked on. In Progress: Tasks that are actively being worked on. Complete: Tasks that are complete. Thus, the path of a particular task (or kanban card) is from left to right, always beginning in the To Do category, then to In Progress, before finally ending at Complete. Of course, many projects will require additional categories. For software development, we might also want to slip in phases such as Planned, In Development, and In Testing, but the same principles apply, moving from one side to the other. A kanban card, like the board, can be physical or virtual, but it always represents a task to be worked on. Different implementations of kanban will include different fields within the card, but at the simplest level you‚Äôll want: ID: The unique identifier of this particular card. Assignees: People working on the task. Description: What the task is. Type: Type of task, such as feature, defect, user story, etc. Timeframe: Estimated time to complete the task (either this phase or in total). Blocked Indicator: Whether or not this is a blocked card (see below). The freedom of kanban is that cards can (and should) be created and managed by anyone and everyone on the team. Cards are often color-coded to indicate the type of task. That color coordination, along with their placement in the relative columns or categories on the board, provides a clear, visual way to evaluate the progress of individual tasks or the entire project as a whole. Kanban also typically includes an indicator for blocked cards, usually with a red marker at the corner of the card. A blocked card is a card that cannot be progressed until some other action is taken. Often, this blockage is due to the lack of progress on a different card. For example, the testing user login card will likely remain blocked until the develop user login functionality card is finished. Reduces Waste: Even the original implementation of kanban was focused on eliminating waste during the manufacturing process, and those same practices apply to its use throughout the software development life cycle. Kanban promotes transparency and an agile workflow, allowing the whole team to stay abreast of the progress of everything in the project, and therefore what any one individual can jump onto and focus on for the next day or week. Forces Event-Driven Workflow: Since everything in kanban is based on tasks (cards), and their relative progress throughout the stages of development on the board, kanban is entirely event-driven. This allows the team to constantly shift and adapt, as some cards become prominent while others are completed and can be ignored. Allows for Flexibility: Aside from the basic concepts of using boards and cards, actual implementation of the kanban methodology is very flexible. Unlike some SDLC methods, which are strict in their implementation, kanban allows your team to modify the boards, cards, and the fields therein, to best meet the needs of your project. Encourages Adaptive Workloads: Since cards can always be shifted to different categories, there‚Äôs always a simple way to adjust the workload whenever required. If work capacity is available, more cards can be added, whereas if capacity is limited, cards can be removed or adjusted. Required Constant Board Monitoring: While many teams may consider this a benefit, it cannot be denied that a kanban board must be constantly surveilled, to ensure that the cards do not become outdated, thus causing more harm than good. Potential for Complexity: Since kanban is such a flexible methodology, it‚Äôs entirely possible for a board to be created that is dangerously over-engineered and complicated. Perhaps there are too many category types or card types, or simply an excess of cards, but no matter the cause, the result can often be that the system is too confusing to easily parse and make use of. Possible Bottlenecks: If your team doesn‚Äôt plan for and deal with blocked cards well, it‚Äôs also possible to be ‚Äústuck‚Äù for a long time, waiting on one particular card or component to be completed. While this could arguably occur using other methodologies, kanban presents a particular danger since its focus on cards makes scheduling and milestoning rather difficult.", "date": "2017-04-05"},
{"website": "Airbrake", "title": "Creational Design Patterns: Factory Method", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/factory", "abstract": "Today, as we continue our journey through our Guide to Software Design Patterns , we‚Äôll keep on the path of Creational design by taking a closer look at the factory method pattern. The factory method is similar to the simple factory pattern that we explored previously, except the factory method provides a simple way to further abstract the underlying class (and associated logic) from the client that is making use of our factory. In this article we‚Äôll cover what the factory method is, using both real world examples and functional C# code, so let‚Äôs get going! Just as with the simple factory article we published previously, the factory method pattern hinges on that core concept of a factory . Like real world factories, our code should be able to make use of an intermediary factory class of some sort, which eases the rapid production of objects for the client (i.e. the developer making use of our classes). If setup correctly, the client can easily use of code without knowing (or caring) about how everything works behind the scenes; the factory should take care of the work for us. To continue with my love of books, for our real world example of implementing the factory method we‚Äôll explore the relationships between authors and publishers . There are many different types of authors , including those that specialize in fiction and those that prefer nonfiction . And, just like authors , different publishers may opt to focus on publishing the works of authors that specialize in particular fields or writing styles. For example, a newspaper is a type of publisher that primarily focuses on publishing nonfiction authors . Similarly, a blog that wants funny cat gifs and articles with titles like Top 10 Zaniest Things You Never Knew Were So Zany! is likely to publish stuff from fiction authors . The publication process may not only differ from one publisher to the other, but also the types of authors working for them will be dramatically different. However, some things will remain the same. For example, a publisher will always perform a few basic tasks, such as hiring an appropriate author and publishing . Therefore, the baseline concept of a publisher acts as the factory method for this process, abstracting and separating the types of publishers from the types of authors . Our code example continues with the publisher and author analogy. First, here‚Äôs the code example in full, after which we‚Äôll break down the components to illustrate what is going on: The basic goal here of our factory method is to separate the logic of hiring an appropriate type of author from the particular type of publisher . Therefore, we start with a basic IAuthor interface, which contains the baseline of what our Author sub-classes must include: the method to Write() . From there, we create two unique types of Authors , the FictionAuthor and the NonfictionAuthor , both of which must include the Write() method: Now we create our Publisher class, which contains the core component of our factory method pattern, and is where the crossover between Author and Publisher takes place: abstract class Publisher In this case, we don‚Äôt want the client to be able to create an instance of a basic Publisher class, so we make it abstract . We then include a HireAuthor() method, which returns our IAuthor interface. Finally, the fundamental purpose of a publisher is to publish work, so we add the Publish() method, inside which we instantiate a generic IAuthor using the HireAuthor() method, before forcing our author to Write() . The last part of our structure is to create some non-abstract publications , in this case Blog and Newspaper . Since both inherit from Publisher , we must include (and override ) the HireAuthor() method. These HireAuthor() methods each return an appropriate type of Author : the FictionAuthor and NonfictionAuthor , respectively: What‚Äôs cool about this factory method pattern is that the implementation (and logic) of Blog.HireAuthor() and Newspaper.HireAuthor() can be different. However, since Publisher.Publish() simply accepts whatever IAuthor is provided, and issues a Write() method command, the client doesn‚Äôt need to know what‚Äôs going on behind the scenes here. For example, here‚Äôs a bit of our example code that makes use of both types of Publishers : The client is able to freely create a Blog and a Newspaper , issuing the Publish() command for both, without knowing how the factory method logic works in the background. The result, as expected, is that our output shows that appropriate types of IAuthors were generated for each, in accordance with the type of author each type of publication expects: While this is just a simple example of the factory method in action, it hopefully illustrates the purpose and power of this pattern. Our Publisher class could easily be further expanded and improved, and so long as it still makes use of the IAuthor's ability to Write() somewhere, any inherited classes from Publisher can continue to be referenced as in our above example, without ever knowing how the authorship or writing process works behind the scenes.", "date": "2017-03-31"},
{"website": "Airbrake", "title": "Scrum ‚Äì What is it and how do you use it?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/scrum-what-is-it-and-how-do-you-use-it", "abstract": "Scrum is easily one of the most well-known and commonly implemented software development frameworks in the world. At its core, scrum is actually an Agile framework. However, scrum is also technically a subset of Agile , since scrum adheres to a rather strict set of processes and practices. In this article we‚Äôll dive deeper into the origins of scrum , what the framework is in the realm of software development, how it is typically implemented, and a few potential advantages and disadvantages you may experience while using scrum on your next project, so let‚Äôs get started! The word \"scrum\" is most commonly used in the sport of rugby football. In rugby, a scrum is a method of restarting play after a minor rule infringement has occurred, specifically in a situation where no advantage would be gained for the team that obeyed the rules. A scrum is formed with eight players from each team linking together into three tight rows on each side, before facing one another with heads down and attempting to push the opposing team out of position. The ball is thrown into the tunnel (the gap under the players), and the as the scrum begins, both teams attempt to move the ball using their legs and by repositioning themselves, such that the ball emerges behind their team‚Äôs formation and can be taken into possession. I‚Äôm no expert and this is a very rudimentary explanation compared to the full rules of a scrum , which are far more in-depth and interesting, but this origin of scrum from rugby transitions well into the use of the word within software development. In the January 1986 issue of Harvard Business Review, two professors at Hitotsubashi University in Tokyo Japan, Hirotaka Takeuchi and Ikujiro Nonaka, published an article titled The New New Product Development Game , which emphasizes the importance of speed and flexibility when developing new products. In the article, Takeuchi and Nonaka detail the lessons learned from manufacturing practices, which they refer to as the \"rugby approach,\" in which the team ‚Äútries to go the distance as a unit, passing the ball back and forth.‚Äù The article even goes on to explicitly make use of the term scrum to define these practices of pushing the team forward, which is considered the introduction of the term to modern software and project development. A few years later, a software developer named Ken Schwaber began implementing the scrum framework into software development practices within his company. Over the next few decades, the scrum framework began to take shape, with the publication of books and guides outlining its use, including the definitive book by Schwaber and colleague Jeff Sutherland, The Scrum Guide . As it happens, the Guide provides us with a definition of what scrum is: ‚ÄúA framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.‚Äù The theory of scrum is focused on being an empirical process: a framework that attempts to gain experienced-based knowledge, then make decisions based on that learned knowledge. To meet that goal, scrum is founded on three core pillars: Transparency : All relevant aspects of the project must be well-defined and visible to everyone on the team that shares in the responsibility for said aspects. Inspection : Scrum Artifacts must be frequently inspected, to measure progress toward Sprint Goals (both of which we‚Äôll discuss shortly). Adaptation : If an inspector decides that an aspect of the project is failing to meet its intended goals, that aspect should be adjusted as quickly as possible. The Scrum Guide also lays out the five key scrum values : Commitment : Team members individually commit to achieving their team goals, each and every Sprint . Courage : Team members know they have the courage to work through conflict and challenges together so that they can do the right thing. Focus : Team members focus exclusively on their team goals and the Sprint Backlog ; there should be no work done other than through their Backlog . Openness : Team members and their stakeholders agree to be transparent about their work and any challenges they face. Respect : Team members respect each other to be technically capable and to work with good intent. A scrum artifact is simply a representation of value or work to be completed, which is well-defined and should be transparently visible to all team members. There are three main types of scrum artifacts : Product Backlog : This is the scrum equivalent of a work in progress list. The Product Backlog is simply an ordered list of all items that are (or may be) necessary throughout the entirety of the software development life cycle. The Backlog acts as the definitive requirements documentation for the project. The Product Backlog is maintained by the Product Owner . Sprint Backlog : A Sprint Backlog is a subset of items from the Product Backlog that have been explicitly selected to be part of a Sprint . Increment : The Increment is the summation of all Product Backlog items that were successfully completed during a particular Sprint , added to the value of all previous Increments . There are three primary roles within the whole of the scrum team : Product Owner : This individual can best be thought of as the project lead or producer, and his or her aim is to maximize the value of the product by ensuring the Development Team produces the best possible work. The Product Owner largely focuses on maintaining the Product Backlog Development Team : The group of developers that actually produce the work defined in the Product Backlog into a functional and releasable iteration. The Development Team should be self-organizing and fully independent from the Scrum Master . Scrum Master : Acts as both the referee and coach for the whole team when it comes to the proper use and implementation of scrum practices and processes. Day-to-day activities within the scrum framework are all based around particular scrum events . All events are ‚Äútime-boxed‚Äù, meaning they each have a maximum duration. This helps to ensure that the development life cycle remains constantly adaptive and properly Agile . The scrum framework defines five types of events: Sprint Planning : During this event, the entire team collaborates to define what the Sprint Goal will be for the upcoming Sprint . This is accomplished by answering two simple questions: 1) What work should be accomplished within the next month? 2) How can that work be completed? The Sprint Planning session should be kept to a maximum of eight hours per month. Sprint : The bread and butter of scrum practices, a Sprint is a one-month period in which a potentially releasable iteration is created (commonly referred to as a ‚ÄúDone‚Äù). In spite of the name, a Sprint is not anything like ‚Äúcrunch time.‚Äù Instead, a Sprint is always active: when one Sprint ends, the next immediately begins. Daily Scrum : Every day, the Development Team meets for a maximum of 15 minutes to discuss the planned work for the next day. Sprint Review : Following the completion of a Sprint , the Sprint Review is an event with a maximum duration of four hours, in which the entire team discusses the Increment results and makes any necessary changes to the Product Backlog . Sprint Retrospective : At a maximum of three hours, the Sprint Retrospective occurs after the Sprint Review , but prior to the next Sprint , and is a meeting for the entire team to decide on potential improvements that can be made general to practices or procedures for the next Sprint . Allows for Rapid Prototyping : With a maximum of only one month to devote to any particular Sprint Goal , scrum allows for rapid coding and development of ideas or components that may be experimental or may even fail, without severe worry or potential downsides. Keeps Customers in the Loop : Since scrum is an Agile framework and is highly iterative, customers are able to quickly assess progress and provide feedback throughout the entirety of the development life cycle. Encourages Consistent Productivity : The daily meetings of Daily Scrums are a guaranteed way to get insight from all team members about their progress, so suggestions and guidance can be provided where necessary to keep development on track. Abundance of Meetings : Many people, particularly developers trying to maintain that sweet flow state, are unlikely to appreciate the need for numerous meetings, particularly the Daily Scrums . Potential Difficulty With Estimations : As with other Agile frameworks, it‚Äôs quite easy to simply jump into a project and begin development without much in the way of planning. While this is often a benefit, it also means that scrum can often obfuscate the actual time and monetary costs of a project (or even aspects of said project), often until a few months down the line. Requires Lenient Leadership : Since proper scrum practices emphasize the importance of separating the management of Development Teams from roles like Scrum Master and Product Owner , successful implementation of scrum requires that managers and leadership are able to trust the Development Team and give them the freedom they need to work independently.", "date": "2017-03-27"},
{"website": "Airbrake", "title": "Creational Design Patterns: Simple Factory", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/simple-factory", "abstract": "Our first leg of the journey through our Guide to Software Design Patterns takes us into the world of creational design patterns, specifically the simple factory pattern. At its core, the simple factory design pattern is a form of abstraction, which hides the actual logic of implementation of an object so the initialization code can focus on usage, rather than the inner workings. Throughout this article we‚Äôll explain, in real world terms, what a simple factory design pattern attempts to do, and then move onto a functional code example in the C# language (though, as with all patterns, this idea can be translated to most any language or platform). Let‚Äôs get to it! The keyword of the simple factory pattern is, of course, factory . It‚Äôs no mistake that this design pattern is named as such, because the core concept is based on the real world of assembly lines and factory work in general. A giant machine that presses metal into cogs is just one component of the factory, and when a customer orders a batch of cogs, he or she is not concerned with how those cogs are made. Instead, the request is merely, ‚ÄúMake me some cogs.‚Äù The factory then does the work, and unbeknownst to the customer, out comes a batch of ordered cogs. The printing press is an obvious real world example of the simple factory design pattern in action. Think about the plates, ink, and huge rollers that all work together to create each print of your local newspaper. Prior to the invention of the printing press, if you wanted to create your own newspaper, you‚Äôd need to painstakingly craft each character, line, and page, across dozens of double-sided pages. Every single copy would require the same insane level of work (in fact, you‚Äôd probably never finish since the next morning might roll around before one copy is completed). Yet, for modern newspapers, once the plates are made and everything is configured, creating a second copy of that daily edition is no more difficult than creating the first. Hundreds or thousands of copies can be printed with no additional effort, without having to deal with anything beyond the initial creation. This is a common, easy example of the simple factory design pattern in action. Sticking with the printing press analogy a bit, our code sample for the simple factory pattern focuses on books . We‚Äôll start with the full code, then we‚Äôll explain the components that make up the simple factory pattern, and how they work together: The goal here of our simple factory pattern is to be able to easily create new copies and types of books, without the need to know how those particular underlying classes are implemented. Thus, the beginning of our simple factory pattern starts with an interface (and an enumeration for simplicity): In most object oriented programming languages, an interface is simply a means of describing the behavior or capabilities of an object, without specifying how it executes that behavior. For our IBook interface here, we‚Äôve created a number of basic members and indicated the default get and set behavior for Author , Title , and PageCount . This informs C# that this interface allows the values of those three members to be both changed ( set ) and retrieved ( get ). To make our later code a bit more interesting, we‚Äôve also added a CoverType member, using the CoverType enum above, which is only gettable . This means that the CoverType value cannot be set by classes which inherit this interface (by default). With the basic structure of what our Book looks like, we next want to create a unique Book class that uses our IBook interface, but expands on it in some way. For our purpose, we‚Äôve created a type of Book called the PaperbackBook : We‚Äôre able to then use all the members of our IBook interface, but we‚Äôve specified that, since this is a paperback book, we want our PaperbackBook class to be able to privately set the CoverType member. While not relevant to this example, this allows our other classes that inherit IBook , such as HardcoverBook or DigitalBook , to set their own unique value for the CoverType member, just as we‚Äôve done here in the constructor for PaperbackBook , setting it to CoverType.Paperback . Now comes the meat of our simple factory , in which we create a BookFactory class, which returns an instance of our IBook interface through the MakeBook() method: The magic is when we want to create a book, as shown in this example code: If we were using a normal class, we‚Äôd directly call and create a new instance of PaperbackBook : new PaperbackBook(\"The Stand\", \"Stephen King\", 823) . However, by using our BookFactory class in the simple factory pattern, we‚Äôve abstracted the process of creating our PaperbackBook class. All that logic and implementation can occur behind the scenes, as all we care about is that when we call BookFactory.MakeBook() , an appropriate book is made. Best of all, notice in the output, the book.ToString() method call shows that the inheritance functioned as expected, so we‚Äôre getting a PaperbackBook object like we wanted, even though there‚Äôs no direct knowledge of (or reference to) it in our initializing code: This is a basic example of the simple factory pattern in action. We could further add new book types, and perform some basic logic within MakeBook to ensure that the proper book type class is generated and returned, but no matter what, our initializing code through our BookFactory doesn‚Äôt know or care about how that works.", "date": "2017-03-22"},
{"website": "Airbrake", "title": "Airbrake's New C#/.NET Notifier", "author": "Unknown", "link": "https://airbrake.io/blog/dotnet/airbrakes-new-c-net-notifier", "abstract": "We‚Äôre excited to announce the new major release of our .NET notifier library! Airbrake has seen some serious feature improvements and upgrades during the last couple of years, but Sharpbrake hasn‚Äôt gotten the love it deserved. No more. With this new library, .NET teams can¬†enjoy all the benefits of Airbrake‚Äôs error detection and monitoring, like real-time error alerts, deploy tracking, detailed error analysis and more. The new Sharpbrake library (v3) is a complete overhaul, with the library rewritten from scratch. We¬†strived for simplicity, minimalism and ease of use, while also adding access to the broader set of Airbrake‚Äôs most valuable features. We think you‚Äôll be happy with the results! Here‚Äôs the TL;DR: Supports .NET versions 3.5 and 4.5 as well as¬†the latest .NET Core platforms. Seamlessly integrates with ASP.NET and ASP.NET Core. Introduces custom parameters, nested exceptions and JSON exchange format. Gives you total¬†control of sensitive error data with blacklists and whitelists. Sends all exceptions to Airbrake asynchronously. Or, if you want more details: The library uses the new Airbrake API (v3). With this API we can introduce our .NET customers to favorite features like custom parameters, nested exceptions, and JSON exchange format, just to name a few. Sharpbrake supports .NET 3.5, 4.5 and the latest .NET Core platforms. We have an extensive test suite with good code coverage, so we can ship secure and stable code with confidence. Support for .NET Core platforms is a brand new feature. With Sharpbrake v3 all exceptions are now sent to Airbrake asynchronously. This is the API the library exposes: The Notify method is responsible for sending exceptions to the Airbrake dashboard. It also logs responses from our server. This method is consistent across all .NET runtimes. If you want more control over the logged response object, we expose a more powerful method called NotifyAsync . It‚Äôs API is dependent on the .NET runtime you use. For example, for .NET 4.5 we use a task-based programming model with continuations and support for async / await keywords: One of our most requested features was to provide a way to filter out sensitive data. Sharpbrake v3 provides access to both blacklists and whitelists, giving you complete control of your error data. The library seamlessly integrates with ASP.NET via the bundled HTTP module and with ASP.NET Core via the bundled middleware. There‚Äôs absolutely no reason to stay with v2 and we¬†encourage you to¬†migrate to v3 as soon as possible. Sharpbrake v2 is no longer supported. We encourage you to try out the new library. Sign up to start capturing exceptions in your .NET apps now! Get in touch if you have any questions, problems, feature ideas, or bug reports, we look forward to hearing from you! file an issue send us an email tweet at us chat with us (visit airbrake.io and click on the chat icon in the bottom right corner) New to Airbrake? Start your 30-day free trial today and you‚Äôll be organizing and tracking all your application‚Äôs errors in just a few minutes.", "date": "2017-03-16"},
{"website": "Airbrake", "title": "Software Design Patterns: A Guide", "author": "Unknown", "link": "https://airbrake.io/blog/design-patterns/software-design-patterns-guide", "abstract": "Working with design patterns during software development can be tricky at times.  Their purpose is to provide guidelines for dealing with particular problems that might arise during development.  However, the sheer quantity of potential design patterns, combined with the intricacies of each pattern‚Äôs inner workings, can often make it challenging to select the correct pattern for your particular project, component, or programming language. This article will attempt to provide a brief overview of what design patterns are in the realm of software development, and serve as a jumping-off point for future articles, which will further detail each design pattern, including code examples using C# . The groundbreaking book Design Patterns: Elements of Reusable Object-Oriented Software , published in 1995, has sold hundreds of thousands of copies to date, and is largely considered one of the foremost authorities on object-oriented theory and software development practices.  In fact, the contents of the book was so influential that the four authors have since been given the nickname: The Gang of Four ( GoF ). The book is roughly split into two parts.  Whereas Chapter 1 deals with general object-oriented design techniques, Chapter 2 introduces a total of 23 different software design patterns, split into three basic categories: Creational , Structural , and Behavioral .  Spanning across seven different example design problems, the various design patterns are shown to be applicable across these seven scenarios, resulting in one of the first published examples of modern software design patterns. Some criticism was directed at the book shortly after publication.  Much of this criticism focused on the belief that many of the proposed design patterns, which were originally written using the C++ language, were merely workarounds to deal with missing features of the originating language they were written in.  Counterarguments were made that other languages at the time (Lisp, Dylan, AspectJ, etc), were able to eliminate the need for the majority of the 23 patterns, on account of the syntax and components presented by these other languages. In the decades since the initial publication of Design Patterns , most modern languages have adopted techniques and syntax for built-in support for many of these design patterns, while others remain largely unnecessary.  To provide the most applicable and real-world information possible, we‚Äôll briefly define each of the original patterns in the sections below.  Then, in future articles that explore the patterns in more detail, using C# code examples, we‚Äôll focus on the most relevant patterns that are likely to be used in modern development. Creational patterns emphasize the automatic creation of objects within code, rather than requiring you to instantiate objects directly.  In most cases, this means that a function or method can call the code necessary to instantiate new objects on your behalf, so you only need to explicitly modify that object creation when it is necessary, and allow default behaviors to take over otherwise. Abstract Factory : Encapsulates groups of factories based on common themes.  Often uses polymorphism , the concept in object-oriented programming that allows one interface to serve as a basis for multiple functions of different types . Builder : Splits up the construction of an object from its representation .  This is usually done by defining a Builder object that presents methods to update the object, without directly interacting with the object itself. Factory : Creates objects without the need to specify the exact class or type of object to be created.  As the name suggests, this object instantiation is performed through a secondary Factory class, again using polymorphism . Prototype : Creates new objects by prototyping or cloning a prototypical instance of an object.  Effectively, an abstract Prototype class is created, and from that base prototype, new secondary inherited classes are defined. Singleton : Restricts the total number of instances of a particular class to only one at a time.  This is commonly used when global access to the object is required across the system, and any changes or queries to the object must be consistent and identical. Structural patterns focus on the composition of classes and objects.  By using inheritance and interfaces , these patterns allow objects to be composed in a manner that provides new functionality.  In most cases, an interface in object-oriented programming is an abstract type or class which has no logical code, but instead is used to define method signatures and behaviors for other classes that will implement the interface . Adapter : Allows for an interface , which is otherwise incompatible, to be adapted to fit a new class.  Typically, this is performed by creating a new ClassNameAdapter class that implements the interface , allowing for compatibility across the system. Bridge : Distinguishes between implementation and abstraction.  Or, put another way, it‚Äôs a pattern that separates the ‚Äúlook and feel‚Äù of code from the ‚Äúlogical behavior‚Äù of it, which we often see in websites and other visual applications. Composite : Groups of objects should behave the same as individual objects from within that group.  Primarily useful when creating a collection of objects that inherit from the same type, yet are uniquely different types themselves.  Since they are of the same composition type, their behavior should be identical when combined into a collective group. Decorator : Dynamically modifies the behavior of an object at run time, typically by wrapping the object in a decorator class.  This pattern is commonly used when an object is instantiated, but as code execution progresses, modifications must be made to the object before it is finalized. Facade : Creates a front-end ( facade ) object that obfuscates and simplifies interactions between it and the more complicated interface behind it.  Commonly used when a complex series of actions must take place to perform a task, where executing each and every task, in order, is too complicated.  Instead, a simple facade replaces that series of tasks with a single task to be executed. Flyweight : Reduces memory and resource usage by sharing data with other, similar objects.  Often relies heavily on Factory -style patterns to access and store already generated data during future executions. Proxy : Defines a wrapper class for an object, which acts as an interface for the wrapped object.  Typically, the proxy class attaches additional behavior onto the wrapped object, without the need to modify the base object class behavior. Behavioral patterns are concerned with communication and assignment between objects. Chain of Responsibility : Forces execution to follow a specific chain of command during execution, such that the first object is used, then the second, and so on.  Often used as a failsafe in applications, checking the validity of the primary object, before moving onto the secondary object if the primary fails, and so forth. Command : Decouples the actions of the client from the behavior of the receiver.  Often through the use of an interface , an object can specify individual behavior when a particular command is invoked, while a different object type can use that same command, but invoke its own unique behavior instead. Interpreter : Defines a series of classes used to interpret language syntax from a provided sentence.  Typically, each symbol is defined by one class, and then a syntax tree is used to parse ( interpret ) the overall sentence. Iterator : Allows access to underlying elements of an object, without exposing those elements or their respective logic.  A very commonly used pattern, often as a simple means of fetching the next item in a list or array of objects. Mediator : Generates a third party object ( mediator ) that acts as a go-between for interactions between two other similar objects ( colleagues ).  Commonly, this is used when multiple objects need to communicate, but do not (or should not) be aware of the others respective implementation or behavior. Memento : Stores the state of an object, allowing for restoration (rollback) of the object to a previous state.  This behavior is well-known when using word processors that implement the undo feature. Observer : Creates an event-based dependency between objects, such that an update to the observed object causes the observer objects to be notified.  Typically, this is found in many languages that utilize asynchronous functionality, which requires events to be observed and responded to outside of typical execution order. State : Allows for the behavior of a class to change based on the current state .  While these states are often changed throughout execution, the implementation of each possible state is typically defined by a unique class interface . Strategy : Defines a pattern where logical strategy changes based on the current situation.  This is merely an object-oriented extension of common if-else statements, by altering the execution of code based on the outcome of previous code. Template : Allows for a skeletal template to be used as the basis for execution, without defining the inner-workings of any individual class or object.  This is commonly seen in web applications, where the visual interface of the application is generated using templates , which are created using underlying data, but neither the template nor the underlying data are aware of the implementation of the other. Visitor : Allows for new operations to be added to objects without modifying their original implementation structures.  Typically, the visitor class defines unique methods that are shared between it and other objects, without the need for the other object to be aware of the additional functionality. While this is just a brief description of each design pattern, we hope this serves as a good basis for understanding just how varied design patterns can be, and how useful as well.  In future articles, we‚Äôll dive deeper into specific design patterns, and examine how they might be implemented in real-world scenarios, using actual code examples.", "date": "2017-03-07"},
{"website": "Airbrake", "title": "Ruby Exception Handling: EOF Error", "author": "Unknown", "link": "https://airbrake.io/blog/ruby-exception-handling/eof-error", "abstract": "Next on the docket in our Ruby Exception Handling series, today we‚Äôre going to examine the EOFError in Ruby. EOFErrors are a descendants of the IOError class, and consequently, occur only in the specific scenario that an IO method is called for a file stream , in which that stream has already reached the end of the file. In this article we‚Äôll explore just what might cause an EOFError , see where it sits within the overall Ruby Exception class hierarchy, and take a peak at how you might avoid running into EOFErrors of your own, so let‚Äôs get to it! All Ruby exceptions are descendants of the Exception class, or a subclass therein. StandardError is a direct descendant of the Exception class, and is also a superclass with many descendants of its own. IOError is a direct descendant of the StandardError class, and is a superclass to one descendant of its own. EOFError is a direct descendant of the IOError class. Most commonly, EOFErrors will occur when a further attempt to read from a file stream is made, after the end of that file stream has already been reached. Ruby‚Äôs built-in IO class features a slew of methods and related classes that allow for significant manipulation of file objects. Rather than cover them all here, we‚Äôll just take a brief look at some example code and how it ends up producing an EOFError , along with how to solve it. In this example, our goal is to create a comma-separated value ( CSV ) file with a list of names and their respective IDs. Nothing fancy, but this will be helpful when we read the file later. To create our csv file, we‚Äôve included a simple append_data function that loops through the data in our provided array, then writes each element (and associated index ) to a new line in our truncated names.csv file. Within the begin-rescue block, our actual examination code takes place. Here we‚Äôre first creating our new csv file and populating it, then we reopen the file and call the .read() method, which (by default) grabs a string of the full file stream, which we‚Äôre outputting to the console. Finally, before we‚Äôve issued a .close() command on our file stream , we lastly attempt one more read attempt using the .readline() method. Initially, the first call to file.read() works fine, and our output displays the contents of our names.csv file. However, this has forced the file stream to read the entire file and thus is sitting at the end of the stream . When our next call to file.readline() is made, sure enough, we throw (and must rescue ) an EOFError : The challenge is that this isn‚Äôt really a ‚Äúfixable‚Äù error in the normal sense. That is to say, Ruby is kind enough to report that we‚Äôve reached the end of the file, and throws an EOFError for our troubles, but the production of such an error typically means there‚Äôs a fundamental flaw in the structure of the code, since reaching the end of a file that‚Äôs being read isn‚Äôt inherently a bad thing. In most cases (as with our example) the culprit is our non-idiomatic use of File.open , in which we assign the resulting file object to a variable, rather than using an inclusive block following the File.open method call. By assigning it to a variable, it leaves us open to forgetting to manage our file stream status manually. This typically requires calling the .close() method on our file, which closes the file and flushes any pending write operations before doing so. The advantage to using a File.open code block to handle the file object we just created, is that once the block concludes, .close() is called for us automatically. Thus, in our example above, we could change our begin-rescue-end block to something like this: Admittedly, this isn‚Äôt pretty code, particularly because we‚Äôd almost never want to actually perform the actions we‚Äôre taking on this file (reading it all, then reading the first line of it immediately afterward). However, for our example, it serves the purpose: We never manipulate our file object outside of a File.open() method code block, so our handling of .close() is done for us. Thus, our output no longer shows an EOFError , and instead displays the entirety of the file ( file.read() ), then the first line ( file.readline() ): To get the most out of your own applications and to fully manage any and all Ruby Exceptions, check out the Airbrake Ruby exception handling tool, offering real-time alerts and instantaneous insight into what went wrong with your Ruby code, including integrated support for a variety of popular Ruby gems and frameworks.", "date": "2017-03-06"},
{"website": "Airbrake", "title": "Jenkins Pipeline Updates That May Help Your Software Pipeline", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/jenkins-pipeline-software-pipeline", "abstract": "A new feature in the increasingly popular Jenkins automation server may affect how you implement DevOps ‚Äì in a good way. Companies that are looking to create continuous delivery and continuous integration solutions are looking more and more to Jenkins because of its fast moving improvements. 54% of companies practicing continuous delivery are now using Jenkins, with that number expected to rise over the coming years. The Jenkins Project Announcement The Jenkins project, the ‚Äúofficial‚Äù community that is behind Jenkins, recently announced an entirely new way for companies to automate their continuous delivery pipelines. The team has currently put an update to Jenkins on the market that is designed primarily for the following: Improve the usability of Jenkins ‚Äì The functionality of the pipeline is now more accessible to newbies as well as Jenkins experts. You no longer need to be a coding genius to understand what is going on. Accelerate continuous delivery adoption ‚Äì The ease of use and the reduction of the learning curve vastly improves the ability of the standard to be extended across departments and into non-technical disciplines. Increase the productivity of DevOps teams ‚Äì Users now have the ability to quickly create continuous delivery pipelines that are increasingly complex. Multi branch pipelines can be more easily modified, shared and advanced between departments. The new release features a number of new graphical interfaces that allow teams to build continuous delivery pipelines visually as well as textually. A new graphical editor, shared libraries for pipelines and a declarative syntax are the major upgrades that users will now enjoy. Notes from the Founder Kohsuke Kawaguchi himself, founder of Jenkins, took to the airwaves to announce the updates. He declared that the new Jenkins pipeline allows for easier and more convenient definitions of CD pipelines. Now that multi branch pipelines can be built and maintained graphically, coders can easily share advancements with non-coders, and non-programmers can initiate new branches and even formats. The new Declarative Pipeline Syntax gives every department the ability to construct pipelines with a format that comes predefined. With the smaller pieces already defined, putting together the puzzle pieces becomes a snap with a little training. The Jenkins workflow is now much more straightforward, and full pipeline creation is accessible to all of a company‚Äôs users. Getting in Ahead of the Curve Jenkins is currently the most popular automation server on the market today that is open source. There are over 133,000 active installations with over one million total users. The Jenkins 2 update has been even more quickly adopted than its predecessor. Just under half of active Jenkins users were¬†using the 2.0 update at the end of 2016. The plugin ecosystem also continues to expand, and is currently the most extensive for CD pipelines. In short: If you are not on this train, it is time to get on, whether or not your in house staff has any coding genius!", "date": "2017-02-17"},
{"website": "Airbrake", "title": "JavaScript Error Handling: SyntaxError: \"use strict\" not allowed in function with non-simple parameters", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/syntaxerror-use-strict-not-allowed-non-simple-parameters", "abstract": "Delving deeper into the misty (and mysterious) mountains of¬†JavaScript Error Handling, we‚Äôve come upon the frightening and dangerous lair of the beast known as the¬†Invalid Strict with Complex Parameters¬†error! [INSERT TERRIFIED SCREAMS]. The¬†Invalid Strict with Complex Parameters¬†error rears its ugly head anytime¬†strict mode¬†is enabled within a function that contains any sort of¬†complex parameter. Below we‚Äôll take a look at a few examples to show when¬†Invalid Strict with Complex Parameters¬†errors may appear, then take a deeper dive into dealing with such errors if they should pop up. Let‚Äôs get to it! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The SyntaxError object is inherited from the¬†Error¬†object. The¬†Invalid Strict with Complex Parameters¬†error is a specific type of¬†SyntaxError¬†object. Since the appearance of an¬†Invalid Strict with Complex Parameters¬†error in the first place indicates that we‚Äôve enabled the use of¬†strict mode, we should first take a few moments to examine what¬†strict mode¬†actually is. In short,¬†strict mode¬†is a toggled directive that forces JavaScript to behave in a slightly altered manner, usually by opting into less secure limitations placed upon the code, and thereby opening up execution to more dangers and exploits. While¬†strict mode¬†can lessen overall security, it can also be a requirement in certain coding situations, and in such cases, it‚Äôs entirely possible to produce a¬†Invalid Strict with Complex Parameters¬†error. The¬†Invalid Strict with Complex Parameters¬†error itself will appear when¬†strict mode¬†is enabled within a function that has one of the following¬†parameter types: Default Parameters Rest Parameters Destructuring Parameters A default parameter is when a parameter definition includes a default value, in the form of¬†paramName = defaultValue. For example, here we‚Äôre defining a default value of¬†99¬†for the¬†age¬†parameter in our¬†addUser()¬†function: A rest parameter is the JavaScript term for what‚Äôs also known as a variadic function parameter ‚Äî a parameter that represents an indefinite number of arguments. In many languages, and JavaScript is no different, this variable number of parameters is represented by an ellipsis (‚Ä¶) prior to the variable name. For example, here our¬†addUsers()¬†function accepts an indeterminate number of parameters, which we defined as the argument¬†names, each representing the name of a new user to add: We can then pass any number of¬†names¬†to the calling of our¬†addUsers()¬†function. As expected, these passed names will be automatically converted into an array of values, which are then output to the console as specified in our¬†addUsers()¬†function: Lastly, the third type of parameter that can cause an¬†Invalid Strict with Complex Parameters¬†error is a destructuring parameter , or¬†destructuring assignment.¬†Destructuring¬†is a syntax by which we can extract data from arrays or other objects into distinct variables. For example, rather than looping through each of our provided¬†names¬†from our last¬†addUsers()example, maybe we just want to extract the first two names in the array, and assign them to unique variables: By utilizing the¬†[enclosing brackets]¬†syntax to indicate our¬†destructuring¬†variables, we are expecting to extract the first and second values in the¬†names¬†array, and assign them to the¬†first¬†and¬†second¬†variables, respectively. Sure enough, the output matches: Now that we know what constitutes a type of¬†complex parameter¬†in JavaScript we can test it out by enabling¬†strict mode and see how the engine reacts. Let‚Äôs try it with our first example above: While we‚Äôve surrounded the important code with a bit of extra fluff to make it easier to catch any errors, as expected, simply by adding the¬†use strict¬†declaration to our¬†addUser()¬†function, which contains a¬†default parameter¬†specification, we produce an¬†Invalid Strict with Complex Parameters¬†error: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-02-15"},
{"website": "Airbrake", "title": "Open Source Development: A Viable Supplement to In House Dev?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/open-source-development-supplement", "abstract": "Sometimes the bane of management is letting go. Imagine that ‚Äì working your entire career to gain the authority to outsource, then having trouble implementing that very policy! However, outsourcing in its many forms is sometimes the preferable business strategy. You may have an in house staff that is quite capable, but unable to scale with success. There is only so much volume that a core staff can take on, especially if your priority is quality coding. That‚Äôs where open source development can come in handy. Here are some of the issues that you may want to consider if your in-house dev staff needs a bit of supplementation. Why NOT to Consider Open Source Development ‚ÄúGetting free labor‚Äù is the elephant in the room when it comes to open source development. However, this is absolutely the last reason that you should give up your proprietary code in hopes of free expansions and bug fixes. For one, your product may not catch on in the open source community. There is nothing worse then depending on free labor and having to report to investors that you through a party and no one showed up. Open source is also no compensation for a tight budget. Not only do you insult the open source community by asking them to finish a selfishly for-profit venture, but you lose any notion of a solid release date (if this was your goal). Keep in mind that you are basically giving up the¬†rights to your own proprietary information in the hard work of your in-house dev team. It only takes one unscrupulous outside developer to reengineer your process with a few cosmetic changes and create a modified version of your work. If you are going open source, do it for the right reasons. Most importantly, have your profit centers properly organized. Why Open Source Development is a Viable Supplement Now that we have all of the caveats out of the way, we can talk about why open source development is definitely viable in most cases. The open source community is an incredibly flexible, insightful and knowledgeable place that helps companies deliver products all the time. However, those companies understand the rules of the game and engender a similar culture of flexibility in house as well. When does open source supplementation work? Let‚Äôs take a look at some of its most successful applications. Feature Specific Changes Open source supplementation is great for build or feature specific changes that do not require ongoing maintenance. If the community sees that you have a solid build on your hand save one or two bugs, they will be happy to help you figure them out. In many cases, white hat hackers will actually reverse engineer a useful program to gift a feature specific change to the developer of origin. The secret here is to provide value before asking for value. User Submitted Bugs In some cases, bugs that affect the user experience slip through the cracks. If users report bugs that limit the productivity of the program, you may have leverage to open the development up to the community. You do not need to feign incompetence, as many companies new to the open source development community may do. Simply tell the truth about your process and congratulate your community on finding bugs that you didn‚Äôt. This is a great starting place for a relationship with developers who see promise in your product. Platform Specific Bugs/Platform Compatibility You may have a product that works swimmingly on iOS that is in high demand within a specific audience. Not all members of this audience use iOS devices; some of them use Android. In this case, you have a great deal of leverage to ask for help in moving your product over to Android. There are many open source developers who specialize in platform specific fixes and can probably port your product more quickly than you can. Millennial Ethics If you have a product that is truly in line with the new social morays of ethical consumption, you may be able to get a great deal of help from the Millennial crowd. After all, this is the audience that will likely be in greatest contact with your product if it is digital. Millennials are also overwhelmingly the majority of¬†the open source community. If your product is seen as an alternative to corporate monopoly, or if your product is viewed as an ethical purchase, you go into the open source community with points on the board. Make sure that you follow up on the stated purpose of your product if this is the angle that you want to play. If you do not, you will soon find out just how quickly giving up your proprietary code can hurt you. The open source community is a wealth of experience and knowledge that you should definitely consider as a supplementary¬†force if your in-house staff is overworked. However, what you are giving up and how your company must change when doing business with ‚Äúfree labor.‚Äù There are costs, even if those costs are not monetary.", "date": "2017-02-10"},
{"website": "Airbrake", "title": "Defect Tracking: Getting the Right Data at the Right Time", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/defect-tracking-get-right-data-right-time", "abstract": "Software executives constantly play the game of balancing extra detail with extra overhead. Most software efforts eventually trend towards the latter, as budgets dwindle and deadlines loom. Eventually, a company may adopt a policy that is too far in line with the finance department and not enough with quality control. However, defect tracking, if properly implemented, has the ability to benefit development rather than slow it down. Tracking in Preproduction One of the best ways to completely avoid the friction between financing and quality is to bolster the defect tracking process in preproduction. The defects¬†that occur upstream are usually the easiest to fix for many reasons, including the following: Early defects¬†(that are caught) cannot affect later programming, which will undoubtedly be more complex They are the easiest to find, because there is less overall code They provide the greatest ROI ‚Äì finding small defects¬†early limits large amounts of technical debt and fatal errors later on Use Defects¬†to Compare Performance? There is one fatal mistake many companies make when they decide to track defects¬†in preproduction: ¬†using this standard as a comparison benchmark. Coders who are knowingly judged by that standard will likely seek out easier defects¬†to look better in front of management. You can also get into some very technical and useless arguments about what constitutes a defect, especially with people who feel their jobs may be on the line. Management must be personally involved in defect¬†tracking from the beginning of the process. The company must not give into the temptation to manage by spreadsheet, creating a false comparison baseline that will slow down production instead of improve the¬†build. The Right Data at the Right Time Combining defect¬†testing with exploratory testing is the more successful way of providing for additional defect¬†testing while preserving and improving team efficiency and time-to-market. Coders should focus on the defects¬†that are actually reducing productivity in the build. Management should focus on prioritizing the removal of the defects¬†that are most important to the project. A great compromise is to reduce the tracking of some of the feature level defects¬†if time is short, especially if there are not a great deal of release testing defects. Understanding the patterns in defect tracking is the most important aspect of retaining efficiency while improving quality. Ideally, defects that will weigh on the final product should be prevented rather than tracked. If tracking begins in preproduction, and all aspects of production are coordinated through management, patterns should emerge that can be addressed. Following the Fundamentals of Successful Defect Tracking It is essential to ensure that everyone is on the same page when tracking defects. Although methodologies will differ based on product, team skill set and available resources, the basics are usually the same: Defining a defect through information capture¬†‚Äì In preproduction, management should sit down with the dev team and determine the amount of information that defines a defect. This process should be simple enough that its use is not limited. However, it cannot be so simple that it glosses over important information. Determining when a defect¬†fix is a priority ‚Äì If a user can reproduce a defect, this usually verifies that it has been fixed. Defects that cannot be reproduced usually take a lower priority. They may be addressed if there is extra time in the schedule. Environmental concerns ‚Äì One of the more frustrating aspects of passing defects through departments is determining whether that defect can be reproduced in different environments. Before the quality assurance team passes along a defect to be fixed, they should be completely sure whether the defect is Android-specific, only occurs on iOS, etc. Scheduling defect tracking ‚Äì Prioritizing the severity of a defect is an important part of managing future defects. Team members may be less likely to follow-up on certain leads if that information is routinely dismissed by management as a priority. This is why management and the dev team must work together so closely in preproduction to define what is most important to track. Open lines of communication ‚Äì Those who are responsible for fixing defects should be able to report back and suggest improvements to those who find defects. A one-way line of communication is a quick way to a less successful defect removal process. Best Practices for Quality Assurance Make sure that your developers are following the same defect tracking methodology as your testers. All groups deserve the right to express feedback. User should be able to report defects easily, but criteria should be set up from the beginning to focus their efforts on the product components that have been prioritized by the company. A caveat: Do not be so blind to user feedback that you are not willing to reprioritize if a certain defect is found to overwhelmingly affect the user experience. Finally, make sure that input screens for each stage of the defect reporting procedure reflect only the relevant aspects for that person or department. Simplicity is never wrong when it comes to getting the right data at the right time.", "date": "2017-02-07"},
{"website": "Airbrake", "title": "Revision Development Systems: What Should You Look For?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/revision-development-system-what-to-look-for", "abstract": "The way that you handle the revisions process with clients will determine if your customer services can be deployed in a timely fashion. Some clients will take up your time just because you show that you have it, and this is no way to do business. Instead of dumping the customer or delivering an unfinished product that can be later¬†used against you, cultivating a good revision development system creates an understanding between parties that serves both sides well. Here are some of the ¬†most important characteristics to look for in a revision development system. Flexibility for Change Throughout the Product Life Cycle For the most part, the earlier that you can make changes in a software product, the less time those changes will take to implement and test. Changes in earlier iterations affect fewer aspects of the overall project, giving you less bugs and technical debt to deal with down the line. Being able to revise the project early on also minimizes your deployment risk. Your revision development system should create avenues for you to identify potential problems early on, deliver that feedback to the appropriate parties and facilitate administration changes between parties. In this way, your revision development system will be part beta tester, part CRM and part scheduler. Identifying Project Milestones If milestones are properly marked within a project, a client will usually adhere to a stricter standard in terms of revisions. In short, do not present the project timeline to the client as a single, unified whole. Your revision development system should break the project down into milestones, or subprojects, that your client must sign off on in order to continue forward. Identifying Bottlenecks and Mission Critical Points Part of identifying milestones through a revision development system is to help a company identify bottlenecks and mission-critical points within a project. In order to keep a project on schedule, client should be informed that revisions should focus on the changes that are needed to ensure the functionality of the project. By identifying mission-critical points, you stay away from revisions that are based off of client opinions and assumptions, which tend to be driven by an uninformed technical perspective. If there are revisions that are mostly cosmetic, these can usually be made at the end of a project. However, your revision systems should also identify where¬†cosmetic fixes might overlap with functional code and bring up more problems than the fix is worth. Setting Revision Policy After User Feedback There are some revisions that simply cannot be made until the project has been deployed and taken into consideration by the end-user. As a matter of fact, your users will teach you a great deal about how to upgrade your revision development system moving forward. Your system should make it clear which elements of your program rely upon user feedback, reducing the amount of open space that your client has to make revisions based on dubious assumptions. Marketing User Upgrades User feedback is true data that you can use to make improvements in your product. After rollout, your revision development system should also be able to incorporate an element of marketing into the revision process. If you come across a blog or upgrade that is truly warranted after deployment, your systems should account for the fact that many users enjoy following¬†iterations and may welcome a revision in the form of a new build. In this way, so-called mistakes can be marketed as upgrades, helping everyone to save face while providing the same level of service. This strategy also helps to extend the timeline of a project into a more tenable space. Creating a revision development system once helps a company‚Äôs project lifecycle for years after. Make sure that you present your clients with a strategic approach to your revisions. They will appreciate the professionalism, and you will save your company a great deal of time on the phone and behind your consoles that should be put elsewhere.", "date": "2017-02-06"},
{"website": "Airbrake", "title": "CMMI Maturity Levels: Why Are They So Important?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/cmmi-maturity-levels", "abstract": "Whether your productivity is resting comfortably in a profit bearing zone or you are actively looking for bottlenecks and time sinks, process improvement should be a priority within your company. The Capability Maturity Model Integration (CMMI) certification process is all the rage this season, and with good reason. Created and administered through Carnegie Mellon University, CMMI certification is currently required to obtain a growing number of government contracts, especially in the area of software development. Carnegie Mellon developed¬†CMMI as a process improvement standard on any company scale ‚Äì across an entire enterprise level corporation, a single division, or only one project. CMMI was originally adopted and brought to prominence by high ranking officials in the US defense sector. Currently, 5000 companies in more than seven countries use¬†CMMI as a standard for process improvement. What does everybody see in¬†CMMI? CMMI bases itself on a much more precise hierarchy than most other process improvement standards. It is also internationally accepted. A company that adheres to the maturity levels of CMMI will find itself in much better position to run in a compatible supply chain or partner vendorship. Companies that are looking for international contracts are also being held to certain CMMI certification standards before they are even considered. For the inevitable problems that slip through even this painstaking standard, Airbrake is ready to wipe the slate clean, but the best route is to clear as much as possible up front. What are the CMMI Maturity Levels? To fully understand Maturity Levels, we must first define a Constellation within the CMMI framework. CMMI defines three Constellations ‚Äì Development, Acquisition and Services ‚Äì that function as the core of business. Development ‚Äì Meaning solutions development. Acquisition ‚Äì Meaning the improvement of solution purchasing. Services ‚Äì Meaning the improvement of service delivery and service systems creation. Within these three Constellations, CMMI assigns one of five maturity levels, describing how effective that Constellation is working within the company. The following five maturity levels apply to Acquisition and Services: Initial ‚Äì A company on this level has unpredictable processes and tends to react to situations instead of proactively seeking effective processes. Managed ‚Äì Companies on this level are still reactive, but they at least have outlines for projects. Defined ‚Äì The organization has an overall standard process and is proactive about characterizing project processes from that vision. Quantitatively Managed ‚Äì All processes within the company, large and small, are controlled and measured. Optimizing ‚Äì In this stage, the company is running smoothly and fully focused on improving its processes even more. In the Development Constellation, the second Maturity Level is defined as Repeatable, meaning that the process is something that could be duplicated if necessary. All other Maturity Levels are the same as they are in Acquisition and Services. Why are CMMI Maturity Levels so important? CMMI cut its teeth in the world, the United States military. It‚Äôs proven approach in that arena expanded quite nicely into the diverse organizations it serves today. Corporations relying on CMMI gain a dramatically improved consistency within their projects, especially in solutions delivery. Consistency means less money spent on detecting errors, less remediation and less manpower spent reworking old solutions to remove bugs. As a company better defines where it‚Äôs manpower will be utilized over an entire process, cost predictability goes up. Companies that boast high CMMI Maturity Levels are able to quantify their self-improvement metrics, differentiating themselves from local competitors. There is a high B2B market demand for companies with top Maturity Levels.¬†Although these rankings do not translate in the same way to the consumer market, partners and distributors can better discern the capabilities of a business from them and are more likely to choose providers based on those metrics. Additionally, companies that adopt CMMI by definition must improve over their past product cycles. CMMI is a great way to make sure that staying on the cutting edge is built into a company while maintaining a consistent capability on these new performance levels. Finally, CMMI defines a standard process framework, helping to ensure that the best practices of your company and industry are not only adopted once, but captured over the long term. Fully adopting CMMI also helps to reduce the impact of employee turnover. Because your processes are embedded within the company rather than within individual employees and skill sets, one monkey won‚Äôt stop the show.", "date": "2017-02-02"},
{"website": "Airbrake", "title": "Using \"Planning Poker\" to Avoid Bias in Estimation", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/planning-poker-avoid-bias-estimation", "abstract": "When estimating the effort of a project, the planning fallacy often causes a build-up of process overrun. Put simply, people always underestimate the amount of time they will take to complete work. Add to this the natural inclination to claim a better production standard than your lateral colleagues in front of top brass, and you have a recipe for a problem. How does the planning fallacy show itself? Fallacies usually occur because of bias, and the software dev industry is no exception. When managers are given the decision making power to estimate schedules, (s)he is usually going to underestimate ground level work for two reasons: 1. There is definite incentive for management to make underlings work fast, and 2. People who are not on the ground level usually cannot relate to the nuances that slow down ground level work. When individuals are given their own scheduling powers, everyone starts playing politics. No one is going to estimate a week when everyone else is saying three days. Those who do appear inefficient; however, less time usually means lower quality and backend excuses. What is planning poker? Planning poker is a literal deck of cards with numbers on them. Each person involved in the project chooses a card to estimate the amount of time that a specific task will take. Everyone shows their card at the same time, and discussion is had about the differences in the estimates. In this way, everyone can explain his or her perspective without feeling the need to outproduce the guy in the next chair. In group planning poker sessions, high and low estimates tend to cancel each other out. People without a direct responsibility for the task can also offer a completely unbiased third party opinion. This is especially helpful when people with past experience performing the task at hand weigh in based on their knowledge, without the need to understate their own schedule because they feel their job is on the line. The Politics of Planning Poker Planning poker is meant to reduce bias as much as possible; however, there are always office politics to deal with. Here are a few rules to ensure the best round of poker with your colleagues. Play the game in a room with plenty of space, around a circular table. This lets people look each other in the eye, and the hierarchy of the company does not unduly influence ground level workers. Create a baseline from the easiest tasks. Bias is much easier to reduce when you have a standard from which to set the rest of your processes. The task with the least amount of effort assigned to it is usually the best baseline. It will ground the estimates of more complex tasks, making them more realistic. Start the poker session with high priority items. You want to baseline mission critical processes to make sure they get done. Avoid anchor bias. An ‚Äúanchor‚Äù is a biased estimate that is based on irrelevant outside information. For instance, a management level employee may yell out an estimate before the planning poker game has been played for a particular task. People will naturally base their estimates during the game on the unsubstantiated anchor that was blurted out ahead of time. Do not allow anyone, no matter their rank in the company, the privilege of speaking before the game starts. The planning fallacy often overlooks software errors that will pop up because of an incompatible library or an unexpected operating system upgrade. You can definitely reduce your bias by using vetted software error reduction packages like Airbrake . Use Planning Poker and the right supplemental tools to create the most effective process for your company.", "date": "2017-01-31"},
{"website": "Airbrake", "title": "How Effective is the MoSCoW Method for Prioritizing Delivery Standards?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/moscow-method-delivery-standards", "abstract": "As agile as we all want to be, projects invariably face time and budget constraints that must be worked around. Outside of the world of idealism and theory, the way that we prioritize solutions is essential to building deliverables that satisfy the requirements and the expectations of stakeholders. Since the Moscow method was integrated into the DSDM Consortium, savvy companies have been using it to reorganize thinking within a time boxed process. However, Moscow can be used in other contexts as well. Time is not the only constraining value in terms of project success. Depending on the company, there may be more prevalent limiting factors such as funding or even pleasing the idiosyncrasies of an individual investor or distributor to secure future support. Dealing with overlapping constraints is the primary reason for a more robust prioritization schedule. Segmenting and quantifying different levels of priority instead of trying to eyeball a feature set leads to a much more predictable result, one that can be included in projection reports to stabilize the expectations of customers and investors. Moscow stands for ‚ÄúMust, Should, Could and Won‚Äôt.‚Äù The ‚Äúo‚Äôs‚Äù are just to make the acronym pretty and give the technique a recognizable name. Here is the basic concept of the Moscow Method: Must or Must Have These are top priority items that the project needs in order to move forward. If there is a way to continue forward on the project without an item on this list, then that item does not belong on this list. DsDNA defines a ‚ÄúMust Have‚Äù item as 1. an item that completely stops delivery of a project, 2. a¬†deliverable that makes deployment pointless, 3. a¬†deliverable that is required to keep a project within legal compliance of some sort, or 4. a¬†deliverable that, if left out, makes the product unsafe. Should or Should Have Should or Should Have items are very important items that are nonetheless not critical. These items, when left out, cause visible discomfort in one or more departments. The company may have to reconstruct expectations concerning the product, and the description of deliverables may even need to be changed in press releases or other paperwork. In short, these are not items that you want to leave out if at all possible. Could or Could Have Could or Could Have items are desirable points that are less important than either of the two previous categories. These may be things that set a product apart from its competition, but exclusion would not in any way reduce the viability of the product or burden users. The items that belong in this category may be contentious, but merely the fact that there are varying opinions on them means that they belong here rather than in the Should or Must categories. Won‚Äôt or Won‚Äôt Have These items are not negative or bad; rather, they are desirable items that are identified as impossible to include within the constraints of the project. Perhaps the project will miss its delivery date if a Won‚Äôt¬†item is included, or the budget may not fit it. Won‚Äôt items can possibly be moved into another category in a future iteration of a project. As a matter of fact, the Could and Should item lists of future software builds usually begins from the Won‚Äôt list of the previous iteration. How effective is the Moscow Method? The Moscow method is quite effective because it requires companywide, interdepartmental agreement on project priorities. Because the Must category and the Won‚Äôt category are nonnegotiable, the project immediately has a more defined direction. The Could and Should categories, including items that are usually major points of contention, are worked out very early in the process and properly assigned resources and manpower according to their priority level. The major advantage of using the Moscow Method to prioritize is the ability to assign a certain percentage of resources to each category. Eliminating items in the Won‚Äôt category (and assigning them 0%, obviously) allows the company more resources to plan for the Could and Should categories. You can then split your resources by percentages. Not only does this ensure proper management of these resources, but it also allows for precise productivity analytics. You can reward departments that outperform and shore up efforts that underperform. Total effort can be divided up between the Must, Could and Should categories. Resources can be transferred once the Must items have been completed. Although most business analysts agree that the Moscow Method is only meaningful within a time constraint, the fact that most projects incur¬†this constraint means that it can usually be applied. When priorities are set before resources are committed to any particular process, they are more easily reviewed throughout the duration of the project. You can report successes and deal with failures more easily under the auspices of a quantified priority structure. If you have been winging it in terms of your latest product feature sets, then the Moscow Method may provide your company with the structure it needs to more effectively meet your deadlines and improve product quality.", "date": "2017-01-30"},
{"website": "Airbrake", "title": "How Does a Work Breakdown Structure Improve Productivity?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/work-breakdown-structure-improve-productivity", "abstract": "If you are trying to compete anywhere near the common man‚Äôs B2C¬†product retail industry, the efficiency of your product management system should be a priority. The complexity of software development means that you have¬†virtually endless potential for confusion without a proper system in place to ensure maximum efficiency and timely task completion. As any successful investor will tell you, you ‚Äúmake your money on the buy, not on the sell.‚Äù In terms of software development, this means that you solidify your profits through a more effective supply chain. If you are experiencing bloat within your company because of an outdated or constantly expansive process, the only way to counter is to increase prices. Your customer will only except this excuse for so long. What is a work breakdown structure (WBS)? One of the newer and more effective buzzwords that is making its way through the software development community is ‚Äúwork breakdown structure.‚Äù Unlike most buzzwords, however, the WBS comes with proven results. Its core mandate requires that highly involved processes are broken down into smaller sections of more manageable processes that can be properly tracked. The secret of the WBS is that it is created before you move forward with any time or cost estimation figures. As a matter of fact, your WBS should actually help to create these time and cost estimates for you. Although this may seem like nothing more than an extra step between your next round of funding and your next product build, a WBS may actually improve efficiency so much that you can direct resources in a way that will actually make investors happy, not just your vendors and banner ad partners. What exactly does a WBS accomplish for a software development company? Created at the inception of your projects, a WBS plans out each deliverable on a timeline before any labor begins on any project element. Drilling down into each function of a project, the WBS will help to identify the tasks within each deliverable that can be finished in mutual exclusion to other tasks. Finding these tasks helps to limit the number of bottlenecks that your project faces, as you will quickly be able to identify tasks that must be done in conjunction with each other. Once you are able to locate tasks that are critical to another task, you can more properly assign people with more experience working with each other to those tasks, increasing the likelihood of their synchronicity. The WBS also creates a viable plan for the big picture thinkers the top of the food chain who always seem to have a problem with any issue that requires drilling down into a procedure. Ground-level taskmasters can easily see what their day today goals are, while the 3000 foot thinkers won‚Äôt be left out of the loop. Resources can be more easily and properly diverted¬†without the decision-maker constantly asking, ‚ÄúNow what is this for again?‚Äù How does a WBS work? One of the reasons that the WBS has been so successful for savvy companies is that it imitates the hierarchical structure of most of those companies. Although the components of a WBS may have different details depending on the individual company, its basic components are always the same four elements: Work statement Work phases Mutually exclusive deliverables that can be completed before the project‚Äôs end Tasks within deliverables You may find a better way to present each component semantically depending on the lingo that your company is using at the time. For instance, ‚Äúphases‚Äù may be ‚Äúwork packages‚Äù in templates that you research. In order to properly execute a WBS, your company should begin with the work statement and move down through the critical deliverables of the project. Within each deliverable, you outline the tasks that are necessary for its completion, matching those tasks to the people best suited for the job. Resource allocation is essential to a working WBS. At the top of the pyramid, resource allocation should be a group activity. Once individual teams are assigned to deliverables and individual tasks, the resources that have been allocated to each division are then divvied up between those people. In short, the entire team is active at the top. As tasks break off, the appropriate parties make the decisions. The benefits of a WBS are far too plentiful to consider saving the relatively small amount of time that you save in skipping it. You can bet that any competition that is suddenly meeting its deadlines and beating your time to market is employing at least a part of this philosophy clandestinely. Make sure that you take a good look at the WBS strategy, applying as much of it as is relevant to your company.", "date": "2017-01-27"},
{"website": "Airbrake", "title": "JavaScript ‚Äì ReferenceError: invalid assignment left-hand side", "author": "Unknown", "link": "https://airbrake.io/blog/javascript-error-handling/invalid-assignment-left-hand-side", "abstract": "Next on the list in our extensive¬†JavaScript Error Handling¬†series we‚Äôre going to examine the¬†Invalid Left-Hand Assignment error in greater detail. The¬†Invalid Left-Hand Assignment¬†error is a sub-object of¬†ReferenceError¬†and is thrown, as the name implies, when code attempts to perform an invalid assignment somewhere. In this post we‚Äôll look at a few code examples to illustrate some common methods of producing an¬†Invalid Left-Hand Assignment¬†error, as well as examine how to handle this error when it rears its ugly head. Let the party begin! All JavaScript error objects are descendants of the Error object, or an inherited object therein. The ReferenceError object is inherited from the Error object. The¬†Invalid Left-Hand Assignment¬†error is a specific type of¬†ReferenceError¬†object. As one of the simplest JavaScript errors to understand, the¬†Invalid Left-Hand Assignment¬†error appears in only a handful of situations in which code is attempting to pass an assignment incorrectly. While this is generally thought of as a syntactic issue, JavaScript defines this particular assignment error as a¬†ReferenceError, since the engine effectively assumes an assignment to a non-referenced variable is being attempted. The most common example of an¬†Invalid Left-Hand Assignment¬†error is when attempting to compare a value using a assignment operator (=), rather than using a proper comparison operator (==¬†or¬†===). For example, here we‚Äôre attempting to perform a basic comparison of the variable¬†name¬†with the values¬†John¬†or¬†Fred. Unfortunately, we‚Äôve made the mistake of using the assignment operator¬†=, instead of a comparison operator such as¬†==¬†or¬†===: Sure enough, rather than giving us an output, the JavaScript engine produces the expected¬†Invalid Left-Hand Assignment error: It‚Äôs worth noting that¬†catching¬†an¬†Invalid Left-Hand Assignment¬†error with a typical¬†try-catch¬†block is particular difficult, because the engine parses the code from inside out, meaning inner code blocks are parsed and executed before outer blocks. Since the issue of using a¬†=¬†assignment operator instead of a¬†==¬†comparison operator means the actual structure of the code is changed from the expected, the outer¬†try-catch¬†fails to be parsed and properly executed. In short, this means¬†Invalid Left-Hand Assignment¬†errors are always ‚Äúraw‚Äù, without any simple means of¬†catching¬†them. Another common method for producing an¬†Invalid Left-Hand Assignment¬†error is when attempting to concatenate a¬†string¬†value onto a variable using the addition assignment¬†+=¬†operator, instead of the concatenation operator¬†+. For example, below we‚Äôre attempting to perform concatenation on the¬†name¬†variable on multiple lines, but we‚Äôve accidentally used the¬†+=¬†operator: This isn‚Äôt the syntax JavaScript expects when concatenating multiple values onto a string, so an¬†Invalid Left-Hand Assignment¬†error is thrown: To resolve this, we simply need to replace¬†+=¬†with the concatenation operator¬†+: Now we skip the¬†Invalid Left-Hand Assignment¬†error entirely and get our expected output indicating the full name stored in the¬†name¬†variable: To dive even deeper into understanding how your applications deal with JavaScript Errors, check out the revolutionary Airbrake JavaScript error tracking tool for real-time alerts and instantaneous insight into what went wrong with your JavaScript code.", "date": "2017-01-26"},
{"website": "Airbrake", "title": "Agile Metrics that Translate into Real Results", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/agile-metrics-results", "abstract": "Agile is the buzzword that everyone is talking about, and dev teams may¬†get too caught up in replacing agile activities for hard results. Agile itself is continually improving its metrics, and companies have more opportunity than ever to apply only the metrics that achieve transformative results. When a dev team dedicates itself to results over simply applying the latest so-called agile metric to say¬†‚ÄúWe‚Äôre¬†agile,‚Äù great things happen. Here are vetted KPMs that translate into real results. Setting a Level of Quality for Stories You Commit To Committing to a story without delivering at a consistent level of quality is bad for business, At the very least, it will cause needless slowdown in your process and frustrate your team. The first step in setting any metric is setting a quality standard for it, and agile development metrics are¬†no different. Each department should dedicate itself to delivering results that are aligned to the quality standard of the wider team. Quantifying the level of usability for stories that you commit to will not only translate into more immediate results, but it will also weed out bottlenecks in your process. Committing to the Most Relevant Forms of Testing Depending on your industry and product, you may already employ different forms of testing: security, function, automation or performance. Are you committing yourself to the most relevant forms of testing? What are you actually quantifying if you are putting more emphasis on automation rather than performance? Perhaps you need to combine certain aspects of testing department processes to give your overall product a better quality and higher timeline. You will never know unless you take a look at what your tests are actually focused on. It is likely that you do not have the time to test every build manually. Nor should you overlook or push forward possible defects only to find them later on ‚Äì you will have to deal with them at some point! The answer for many companies is a developer desktop that you can test through an automated process, manually testing only the builds that make it through your initial automated tests. Production Incidents There are two types of production incident KPMs that should be on your radar: 1. minimizing production incidents within each department, and 2. comparing the performance of teams against each other over time. This should help to improve the total quality of your product over time as well as reducing the time to market. Setting a percentage standard for build purity is a great way to normalize results between departments. This quality metric will also help to identify the slow-moving teams in your company. User Feedback or Sentiment User feedback¬†has been highly relevant before agile became the go to corporate buzzword; however, your journey into agile should lead you to quantify user sentiment more specifically. Capturing user feedback is a simple thing these days; the value add from this generation is to create a percentage quality metric, perhaps¬†similar to your production incidents metric, that gives you a standard to meet in every new build. Many companies go one step farther and find the correlation between levels of user feedback and the profitability of the build. Perhaps a 96% positive feedback rate leads to a 5% higher level of subscriber retention. The earlier you begin collecting this data, the more accurate your statistics will be. In any case, you will be in a much better position to develop plans for future builds that respond to the concerns your customers put before you in social media conversations, emails and other communications. Continuous Improvement Prioritizing your continuous improvement stories gives your departments the ability to self organize and hold themselves accountable. Different departments or teams can also be held accountable against each other, which usually comes out better for the product and the end-user. Perhaps you will find certain processes that are better off under a shared department umbrella. Because continuous improvement is such a hot buzzword, you can also use it to get your investors more interested in your future proposals. Make sure, however, that you are not using the power of that phrasing¬†for the¬†semantics alone. If your product is underperforming, being disingenuous will obviously get you in deep trouble. Make the cultural as well as the technical changes that are necessary to fully implement the philosophy of continuous improvement at a core level. Committing to a process just because it is deemed agile for semantic purposes means very little for business. Make sure that part of your process is checking for metrics that are most relevant to your brand and end user. Keep your ear to the latest agile processes, but dedicate your resources to delivering on your commitments regardless of how a process is categorized.", "date": "2017-01-25"},
{"website": "Airbrake", "title": "The 3 Most Relevant Software Metrics in 2017", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/software-metrics-2017", "abstract": "The standalone metrics of past business generations are not relevant to most results oriented companies these days. End users do not concern themselves with scripts executed, errors discovered or total code lines written. These traditional metrics¬†may mean something to the dev team, but it has no direct effect on customer facing quality. In an age where continuous integration is becoming par for the course, upgrading the sophistication of your software metrics is just as important as changing the process itself. As a matter of fact, changing metrics that you prioritize is a huge part of a process upgrade. Here are three of the most relevant software metrics to consider moving forward into 2017. Number of Commitments to User Stories Has the company really worked out what kind of customer its product attracts? Does the company have a buyer profile for each of its main constituent types? Matching different user stories to buyer profiles is a good way to focus the agile development process in a specific direction. Even if product iterations theoretically never end, they must still be directed in a productive fashion. If you have committed yourself to too many user stories, it is likely that you are also committing yourself to a bloated development process that deserves a more concise vision before you commit money and manpower to a Build. Although virtualization and multivariate testing can give you many concurrent build lines, why devote more resources than is necessary towards building out approximations of a usable product? Your customers will only send you back to the drawing board, complaining of lower usability. Take the time to match your user stories to your buyer profiles from the beginning of the process and reduce the number of stories that you commit to as much as possible. End User Delivery How many of the stories that earned your commitment were delivered at¬†standard to the buyer profiles they matched to? Is your quality standard specific and driven by budget metrics that will keep the company profitable and set-aside enough resources to continue development at the same pace moving forward? This is the development metric that your end-user most closely associates your brand with, and it is also the metric that will drive continuous improvement efforts. One of the cultural shifts that a newly agile company will need to make is learning to snapshot your progress while aiming at a¬†moving target. The entire idea of continuous integration is built upon the ideal that the second you deliver, improvements can immediately be made. The delivery point is more like a checkmark in a never-ending race. For the first few days (or maybe shorter), the end user compares the quality of your feature delivery to the last iteration of your product. However, this quality standard will soon shift forward to expectation for the next iteration, using your current deliverable as the new standard. Creating an ongoing¬†metric for a feature quality standard as a¬†satisfaction percentage or something similar will give you the ability to keep up with the moving target. Time to Market Just as your end users will continuously compare feature sets from your last iteration to this one, they will also become gradually more impatient with future improvements. However, as your product moves forward, the depth of resources and manpower that is required to implement changes should become smaller. In short, continuous improvement should move your product closer to perfection. Although you may never achieve perfection, the distance should close at every checkpoint. The metric most closely associated with this general end-user story is time to market. How much time did your company take to fulfill a product delivery from concept to end of production? Was your delivery time in keeping with distribution deadlines and market expectations? Unless your end-users are told differently, smaller iterations should take less time. In many cases, companies will forget to forewarn their customer base before build overhauls, leading to overbearing expectations. Having the time-to-market metric at the forefront also serves as a great reminder to market big changes beforehand, because larger overhauls tend to cause weird spikes in the metric. (Hopefully you have created a culture in which you actively investigate weird spikes in your metric graphs or spreadsheets!) Although you may need to tweak these metrics depending on your audience or industry, they will work generally across all types of companies. As you learn to implement these as your overarching benchmarks, you should be able to identify more process specific, smaller metrics in keeping with these themes. Keep in mind that the end-user should always be at the center of your software metrics. The final question that you should always ask yourself is if your end-user is getting what they asked for. If they are, then you know that your metrics are helping your company move in the direction that people are expecting.", "date": "2017-01-23"},
{"website": "Airbrake", "title": "Increasing Efficiency Through Continuous Integration in the Cloud", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/efficiency-continuous-integration-cloud", "abstract": "Great news for IT¬†consultants: Agile is everywhere, and continuous integration may actually prove itself to be the media buzzword that actually increases efficiency when taken seriously! Recommend away. Moving forward into the fifth generation of computing led by AI and virtualization, Platform as a Service (PaaS) technology along with new ways of app packaging and scaling provide even the smallest companies with the ability to continuously integrate in the cloud. What will separate winners from losers in this era of business is a¬†company‚Äôs ability to efficiently upgrade its efficiency through continuous integration. Using Cloud BaaS A relatively new but useful cloud-based methodology, Backend as a Service (BaaS) is helping to keep dev¬†teams on schedule with apps, especially apps that demand a high iterative rollover. Putting backend in the cloud can help to shorten a product development cycle by several months, giving a dev team more time and brainpower to spend in creative. Cloud BaaS also gives developers the opportunity to create an ultra smooth delivery funnel¬†through continuous delivery and continuous integration concepts. Bugs are fixed more quickly, and the entire development process is exponentially more agile. You may certainly substitute SaaS, PaaS and IaaS into your thought process here as necessary. We are just making sure that if BaaS might provide positive results as well, that it is not forgotten¬†among all of the cute little acronyms you‚Äôll be sifting through this quarter! Reducing Cost In many ways, the upfront cost of properly developing a continuous integration process is good for the growth of any company. Moving company culture and process forward into a new era beyond closed end iteration based programming is essential to keeping pace with the speed of communications. In short, your dev team is now in lockstep with your marketing, which has many positive benefits on your cost structure. First of all, you will never be caught behind the eight ball in terms of a hard deadline or delivery date. An example of the shortcomings of traditional scheduling: The gaming industry as a whole is suffering from a lack of continuous delivery. Dev teams were often pushed by distributors to deliver unfinished products to consumers, ruining that studio‚Äôs reputation when the product was deemed unfinished by its market. No Man‚Äôs Sky, Street Fighter V, and the Assassin‚Äôs Creed and Call of Duty franchises are just a few of the gaming brands that took huge hits in 2016, some of which may be unrecoverable. Continuous integration reduces the pressure on your creatives and potentially brings your customers into the development process as the least expensive group of beta testers ever. Secondly, continuous integration specifically in the cloud adds another level of agility to the development process. You reduce the number of physical bottlenecks if you are working on a contract basis and someone comes up missing, sick or late¬†on delivery of a product component. The company saves money by outsourcing personal logistics to each individual member of the dev team as his responsibility. Unless you absolutely have to house central operations, you save on overhead. Finally, harkening back to the first heading above, a cloud BaaS structure can handle a lot of the architectural legwork, reducing your costs there as well. Virtualization¬†and Continuous Integration Bringing the concept of continuous integration into the cloud allows you to take advantage of virtualization as a time and cost saver. The relative ease of creating virtual instances in the cloud means your dev team may¬†simultaneously conduct multivariate experiments on a build with no customer facing sprawl. Because you are saving time with remote access to resources anyway, changes can be made that much more quickly and applied to the active build exponentially faster. Continuous resource reclamation helps to control the use of your resources in a pinch; however, there are so few instances of resource crunch in fifth-generation networks that this should never be a problem in the cloud. However, it is always an eloquent practice to clean up VM sprawl to reduce the instances of configuration drifts. It is also much easier to apply an error reporting software too many instances at once so that bugs can be more quickly reported down all build lines. Devs will be able to take this information into consideration during the next round of updates and cleanup. Spending the time and resources to invoke¬†continuous integration in the cloud upfront will pay off in spades down the road. As customers and distributors demand product at an ever accelerating pace, the companies that succeed in the future will be the ones that take the time today to modernize their development process.", "date": "2017-01-19"},
{"website": "Airbrake", "title": "Does the Agile Manifesto Ironically Rigidify the Agile Software Process?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/agile-manifesto-rigidify-agile-process", "abstract": "The four tenants of the Agile Manifesto are certainly a sexy quartet. Difficult to properly harmonize at times, but certainly helpful to companies looking to move forward in an accelerating technological environment. However, too many agile developers forget the sentence that the 2001 Utah ski lodge group placed right after the Big Four: That is, while there is value in the items on the right, we value the items on the left more. This is definitely not as sexy, but it is necessary to understand the true agenda the Manifesto puts forth. Rigid adherence to the four tenants of the Manifesto without acknowledgement of the flexibility that its less famous continuation gives your process may increase your bottlenecks and rigidity. Let‚Äôs take a look at how the Agile Manifesto needs its own agility in order to work. Individuals and interactions over processes and tools. If your company can afford the best talent and the time necessary to cultivate synergy between individuals (and their inevitable egos), then certainly, allowing for complete freedom of process can be advantageous. Talent, however, can be too abundant for its own good. Plucking a great library of newly automated functions from the ‚ÄúSDK tree‚Äù is no crime, especially if the creative juices of your team would be better spent dealing with mission critical points within the software! Your team will have enough purely intellectual exercise reducing the risk of the dependencies that naturally build within a process as more procedures are implemented into a software package. You may have a whale of a client that insists upon compliance with ISO 9000 processes. This might be inefficient for your team, but too much individuality here might cost you your business. Perhaps it is best to keep some industry standard tools on hand to quickly comply with clients who have a particular process in mind, suggesting improvements once you have gained trust? Working software over comprehensive documentation. On its face, this statement is obvious. Getting to the point in today‚Äôs lightning fast world of technology improves your chances of getting business and keeping a schedule of deliverables on time. However, there is nothing worse than that client who can‚Äôt decide what he wants until your team has already spent hours upon hours streamlining a software iteration that you thought was thisclose to perfect, by the client‚Äôs own words. With extremely large projects, it also benefits everyone involved to agree contractually to a deliverable over a technical outlay so that the valuable time of your developers is not wasted. Customer collaboration over contract negotiation. Reading this tenant literally assumes the worst of tech companies ‚Äì that coders are actually those unsociable trolls typing away computer code endlessly in the shadows of a dark basement! A successful client to company relationship is built on a two way stream of communication that may occur best over a set of initial terms. Contracts can be made quite vague, as any lawyer can tell you. Once the general terms are set, programmers have a set of parameters to start with. This greatly reduces time to market and makes errors easier to find . Also, contrary to popular belief, setting a standard actually increases room for creativity rather than decreasing it. An analogy: If someone asked you to write a piece of music, you might stay at the piano for years before you actually composed something agreeable to that person. However, if composer and patron contractually agree that the piece of music should suffice for a Renaissance Halloween party, and thus be composed in waltz time in A/B format lasting for 15 minutes, the composer will likely finish an acceptable piece much more quickly! Responding to change over following a plan. How about responding to changes in a plan? Technology moves, and disruptive technology moves with even more volatility. Clients will also change their minds as much as you let them, which will eat away at your time and patience. Fundamentally, customers are coming to you for your expertise. They want you to have an initial plan. This plan can account for future contingencies, however, and list alternative paths should a certain instance take place. Agile is great in theory. We need to make it work in the real world. The real world has customers who are unsure, need guidance and may prefer rigid plans and contracts. The real world has programmers who will work ad infinitum to perfect the elegance on a non-critical point and make everyone miss the deadline. Agility without a structure to be agile from is just wobbling around. Don‚Äôt be a used car salesman balloon thingy and wobble in the wind. Those things are scary, and you know it. The original writers¬†knew that the Agile Manifesto itself needed agility. The line after the four tenants, the one that no one pays attention to, is the line that actually puts the agility in the agile development idea. Give it the respect that it deserves, and you will find the right agile balance instead of trying to adhere to an intellectual standard that was never meant to be embossed in stone!", "date": "2017-01-17"},
{"website": "Airbrake", "title": "Agile Model: What Is It And How Do You Use It?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/agile-model", "abstract": "Back in February of 2001, a small group of seventeen software developers met in the high elevations of Snowbird, Utah to discuss software development methodologies. Out of this assemblage emerged the Manifesto for Agile Software Development , a publication that outlined the group‚Äôs vision for lightweight software development, and which would go on to dramatically shape the landscape of modern software development for years to come, up to the present day. From the four fundamental values this group of developers set forth emerged one of the most widely adopted software development methodologies in modern history ‚Äì agile model. At its core, the¬†agile model¬†emphasizes the need for every project to be handled differently, based on the individual needs of the project, the schedule, and the team behind it. Unlike other SDLC models,¬†Agile¬†focuses less on specific requirements or guidelines, and far more on abstraction of these best practices to allow for greater flexibility, or agility , during the development process. Throughout this article we‚Äôll dive deep into what the¬†agile model¬†is, the values and principles that make up the core structure, and the overall advantages and disadvantages of utilizing it during modern software development life cycles. Some more specific takes on SDLC include: Within the original¬†Manifesto for Agile Software Development¬†the authors focused on four fundamental, core values that underpin solid software development. Individuals and interactions: Rather than solely emphasizing systems and tools, the focus should be on the people within the team and the interactions they have while working together on the project. For a project to be successful, it should adapt to not just the systems or budget available, but most importantly to the people working on it. If team members are efficient and effective at working together, the end result will be a polished and optimized product. Working software: While documentation can certainly be very beneficial during development, it is far better to produce a working product, or even a simple prototype, that illustrates the design goals or the components used throughout the application. This is beneficial not only to other team members working on development, management, and marketing, but especially to clients or testers who would otherwise be forced to rely on a handful of documents and photoshopped illustrations to understand how the application is expected to function. Customer collaboration: As with Rapid Application Development , or any other development model born from the roots of the¬†agile model, it is critical that the project be constantly open, willing, and able to respond to customer feedback and behavior. By keeping customers or clients in the loop throughout the entire life cycle, everyone involved will be on the same page and there will not be any surprises at the end or massive rewrites necessary because a module or integration wasn‚Äôt clear for all parties involved. Responding to change: Perhaps the most critical principle across the entirety of the¬†agile model¬†is the ability for the project to adapt and respond to the ever-changing needs of everyone and everything involved. As development progresses, software technologies will change, the team will shift, clients will hem and haw, and throughout it all, the project should remain malleable and remain capable of adapting along with these needs. As further outlined in the¬†Manifesto, the¬†agile model¬†is described using twelve key principles, atop which the development life cycle should take place. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. Welcome changing requirements, even late in development. Agile processes harness change for the customer‚Äôs competitive advantage. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. Business people and developers must work together daily throughout the project. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. Working software is the primary measure of progress. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. Continuous attention to technical excellence and good design enhances agility. Simplicity‚Äìthe art of maximizing the amount of work not done‚Äìis essential. The best architectures, requirements, and designs emerge from self-organizing teams. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. Emphasis of Modern Techniques: While a core value of the¬†agile model¬†places emphasis on people over technologies, stepping outside the realm of technologies themselves and into a pure focus on techniques brings about powerful, agile practices such as test-driven development, automated unit testing, refactoring, and iterative development. Highly Adaptive: As one of the fundamental agile values states, a key component to the¬†agile model, and which partially makes it such a good launching pad for the entire software development life cycle, is the capability of the project to rapidly adapt to any necessary changes. Whether this is from rapid iterations informing the changing needs within the code or client feedback forcing a reshaping of the sign-up procedures, a properly¬†Agile¬†project is able to quickly and effectively change course as needed. Constant Customer Feedback: Although the constant communication with customers and clients requires a dedicated team member to take on this responsibility, it is a critical component to ensuring the success of the product from both a development perspective as well as from that of the client. Allows for Iterative Development: Common models like the¬†Iterative Model¬†are based on the fundamentals of the¬†agile model, and for good reason: It allows the project to be started with relatively little upfront planning or cost. From these early components the project can evolve over time as new incremental iterations are made, constantly learning from past iterations and improving on them for future updates. Potential for Increased Technical Debt: The concept of¬†technical debt¬†describes the act of implementing a solution that is easier to complete right now, in favor of the solution that may be better overall in the long run. Within the scope of the¬†agile model, it is not uncommon for technical debt to begin to run rampant, as rapid development techniques and frequent iterations often mean developers feel hurried and thus forced to implement faster but generally less-than-ideal band-aids. This issue can largely be reduced by ensuring the team properly integrates refactoring, pair programming, and other techniques which emphasize collaboration amongst team members. Difficult to Make Additions Within an Iteration: Often referred to as use cases in other development models, a¬†story¬†in the¬†agile model¬†simply refers to a description of some new project requirements. When actively utilizing the¬†agile model¬†for an ongoing project, it can sometimes be difficult to implement a new story into the current iteration, since it forces backtracking and heavy mental overhead on how to implement the new requirements of this story into the existing iteration that has largely already being developed. In such cases, it is often necessary to delay the implementation of the new story until the next iteration comes about. Minimal Emphasis on Documentation: Unlike more traditional models like the¬†Waterfall Model, the¬†agile model largely forgoes initial efforts to heavily design and document the project requirements or scope, in favor of getting into the meat of the project and beginning that iterative process. This can be a challenge for some projects, particularly within development teams which may not be accustomed to this style of agile development and which may have more traditional experience instead.", "date": "2017-01-16"},
{"website": "Airbrake", "title": "Hiring Developers: Moving Past Traditional Employee Acquisition", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/finding-best-developers", "abstract": "Media¬†can report¬†that employee acquisitions are ‚Äúbullish,‚Äù but¬†HR knows the truth. Hiring¬†developers (especially the good ones) is going to be a slog using traditional methods. The best devs seem to be purposefully hiding from recruiters who employ a traditional process, and with good reason: A traditional process is usually linked to a traditional company. Young, vibrant, bleeding edge developers have been showing their disdain towards these companies for quite a few years now. LinkedIn¬†and online job profiles are no longer supplements to the resume; most hiring processes have already acclimated to¬†digital¬†as the¬†primary vetting space. However, the digital hiring model has farther to go, according to HR experts and top hiring managers. Here is a look at some of the trends that will play an increasing role in the developer recruiting process. Skills Over Education Deliverables are the new accreditation. By the time that a full-scale technical program graduates a new class, the technology that class is using is obsolete. Savvy recruiters are finding a much shorter path to quality dev work through open source boards, checking to see if devs are using up-to-date tech. Community leaders in these environments are often tapped for institutional jobs. Top employers still keep an eye on liberal arts programs, but not for the reasons that you may think. Elite schools understand the importance of showcasing student work as a practical deliverable. Schools now¬†partner with local companies on commercial projects as course requirements, giving¬†students their first portfolio entry before graduation. Recruiters also vet potential devs by following their trail of work around the Internet, including participation in relevant conferences, business incubators and municipally funded tech initiatives. Seeing the same name pop up in a few different places means that individual already has a body of work and a reputation, quite a step up from a few good marks on a possibly antiquated IT skills test. Video Interviews Most devs that have kept themselves up to date understand they need to employ¬†cutting-edge technology in every aspect of their job search. This includes a digital portfolio and a video introduction, and possibly even a working beta (at least) of a current project. Why all the extra work? Leading companies will not even consider a dev without the foresight to simply use the technology he claims to have mastered and can also modify. Moving past the traditional employee acquisition process means reducing your own candidate pool and creating a more exclusive pot to pick from. Your HR department may feel as though this narrows the field too much. The truth is that exclusivity directs acquisition efforts more precisely into the narrow communities where elite devs hide. Think of it this way: No elite restaurant keeps a ‚Äúno shirt, no shoes, no service‚Äù sign on its front door. The best establishments assume its constituents will consider this by default. By default, the best devs have already updated their job search strategy to include these web 2.0 components. There is no need to look beyond them. Employer¬†Branding Like it or not, your company is being interviewed by top devs just as much as you are interviewing them. Aside from digital multimedia infused resumes, elite potential employees have¬†embraced the 1099 lifestyle as a default. It is likely that the people you want are already generating at least a part time income from freelance and vanity brand work. They are perfectly willing to take a more traditional job, but they must be enticed by more than a paycheck. The best devs are self-starters; you can automatically vet for this character trait by appealing specifically to the more exclusive set of candidates described in this article. As such, you can bet they are not fans of traditional cubicle culture. Allowing remote work or telecommuting is a big thing among the current generation of elite devs. Make sure that they know you prioritize performance over proximity. If you equate youthfulness with bleeding edge as most companies do, then you must also face down the trend that Millennials and Gen Zers automatically see any corporate space as part of a hegemony straight out of Orwell‚Äôs 1984 . These young candidates value authenticity and social responsibility almost as much as they value a great benefits package (almost, not quite). Google and Apple are trying to keep this under wraps, but the word is out: One of the rewards they offer for a great month on the job is the freedom to go out and volunteer on behalf of the company. The benefits package that your company offers is also essentially important. Today‚Äôs young candidates may have acclimated themselves to the 1099 lifestyle, but the echoes of the good old Baby Boomer days of corporate family structure still linger in their ears ‚Äì the last bit of their parents‚Äô waning influence. Younger devs may view a great health insurance, 401(k) and stock options package as a status symbol, which means you may be able to get away with a smaller paycheck for the same amount of work. Recruiting employees is the same as playing the stock market: Do not try to time whether the wind is blowing in the favor of buyers or sellers. Fundamentally change your perspective on how employees are won, and you should perform¬†ably in the continuously more competitive world of elite dev procurement.", "date": "2017-01-11"},
{"website": "Airbrake", "title": "Big Bang Model: What Is It And How Do You Use It?", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/big-bang-model", "abstract": "Today we‚Äôll be taking a closer look at a unique, yet rather popular, software development model, colloquially known as the¬†Big Bang model. While the tenets of the¬†Big Bang model, such as they are, are almost excessively simple, use of the model should not be wholly discarded or ignored, as it can be a powerful tool to manage the software development life cycle ( SDLC ) of a wide range of projects. Loosely based on the cosmological model and theory of the same name, the¬†Big Bang model¬†of software development is designed around the notion that, beginning with nothing, a rapid growth and expansion of code will quickly emerge, thus producing a finished product in a mere instant (relatively speaking). In this article, we‚Äôll take a closer look at what exactly the¬†Big Bang model¬†is within the context of software development, how it is typically implemented, some cautions for using it as a deployment method, and both the advantages and disadvantages of the method overall. Some more specific takes on SDLC include: Unlike nearly all other popular SDLC models, the¬†Big Bang model¬†is unique in that it requires virtually no planning, organization, best practices, or typical procedures. Instead, the¬†Big Bang model¬†is fundamentally about simply starting the project¬†right now, at this instant, with no formal development structure or organization. It is typical that very few if any team members, let alone the customer, are completely familiar with what the requirements are for the project, nor what is necessary to meet those goals, and thus every single aspect of the project is developed and implemented on the fly. Day-to-day development occurs at the whim of the team members and is loosely based on the requirements that are generally known and accepted at that present moment, without much regard for consequences or future requirements that may arise. Everything about the project is completed with a laissez-faire attitude, with little regard or care for what may come next, and instead simply enjoying the work that is being performed at that very moment. In short, the¬†Big Bang model¬†is the heavy metal of software development methodologies. As a lesser component of software development, the¬†deployment¬†phase of a product or release is typically one of the final and most critical steps in the software development life cycle. While most projects will opt for a typical, incremental rollout for a new deployment, in some instances it can be infeasible to slowly introduce a new system, particularly when creating a dramatically new version of a product or release. In such cases, the only logical solution is a deployment that occurs instantly, like flipping a switch. This method is often referred to as big bang adoption , which requires that all users of a system are moved to the new system at a specific date and time. It should come as no surprise that implementing any system via big bang deployment ‚Äî in particular a new software system ‚Äî is fraught with numerous risks. In many cases, unforeseen issues can cause quirks in the system or failures to properly handle migrated information that may exist when coming from a previous version of the system. In the worst cases, such instantaneous deployment can lead to bugs in the code that are so severe, the system virtually fails to function on all fronts. One such real-world example of a big bang deployment that went terribly wrong was in 1992 with the Computer Aided Dispatch program for the¬†London Ambulance Service. The software was intended to facilitate the rapid allocation of responding ambulances to emergency services calls. Unfortunately, within just a few hours of the system going live, numerous problems arose, such as the software sending multiple units to one location while other locations were completely ignored. The application began producing such as massive number of error messages on dispatchers‚Äô terminals that incoming emergency calls were completely lost. A mere eight days after the system was launched, it was completely shut down in favor of the old, manual system. No Planning Requirements: Perhaps the biggest advantage to the¬†Big Bang model¬†of software development is the ability to¬†just start coding. With no formal need to write out tons of requirements, story cards, or specification documents, developers can simply sit down, open their favorite editor, and begin hacking away at the code itself, potentially producing something tangible and functional in a relatively short period time. No Management Requirements: With no planning documentation or formalized requirements, there‚Äôs also very little need for managerial staff. In most cases with a¬†Big Bang model¬†project, everyone on the team will effectively be peers, with no formal management hierarchy. Well-Suited for Small Projects: Given the chaotic nature of a project implemented using the¬†Big Bang model, it should come as no surprise that the kind of application most suited to this method is that of a particularly small venture. The¬†Big Bang model¬†is actually quite common, whether developers know or acknowledge they‚Äôre using it or not, within small teams of just a handful of developers. Hackathons , where collaborators get together over the course of a few days to rapidly develop a piece of functional software, are a great example of where the¬†Big Bang model¬†really shines. Great Introduction to Software Development: While certainly not always relevant to most projects, the¬†Big Bang modelis particularly great at introducing newcomers to the core concepts of software development, as it allows them to get straight into the code and focus on the development aspects, without being bogged down in the minutiae of most typical¬†SDLC¬†models, like documentation, testing, and so forth. Ideal of Multi-Disciplined Developers: Since everyone involved in the project is likely to be a developer,¬†Big Bang modelprojects are ideal at catering to the skills of multi-disciplined or full-stack developers, who are capable of working with a wide range of technologies. Extremely Risky: Perhaps it goes without saying, but the use of the¬†Big Bang model¬†for all but the simplest of projects comes with some very real and very dangerous risks. Without proper planning, formal leadership, or even standard coding practices and procedures, it is all too easy to run into a potentially serious problem later down the line once deep into the project, which may require a massive if not total rewrite of the entire code base up to that point. Still, if you want to code like a rock star, there‚Äôs no better way to do it! Too Simple for Complex Projects: While the¬†Big Bang model¬†works fairly well with smaller projects and tiny teams, on the flip side, it is categorically disastrous for larger or long-term projects. Even in the best case for a lengthy project, problems would be discovered frequently but relatively soon after they were created, which would already require hours if not days of necessary refactoring and alterations to existing components. In the worst case, as illustrated earlier with the¬†London Ambulance Service‚Äôs¬†debacle, the entire system can come crashing down. Potentially Expensive: While the¬†Big Bang model¬†is about as inexpensive a model as it gets when the project first gets out of the gates, it also comes with some risks, which can cause it to unintentionally become one of the most expensive¬†SDLC¬†models in the long run. While initial funds and budget will be spent on a whim for whatever is necessary to get the ball rolling, such lack of planning can quickly spiral out of control when requirements of the project dramatically change without notice.", "date": "2017-01-09"},
{"website": "Airbrake", "title": "Technical Debt: Can It Be Used Strategically, or Should It Be Eliminated?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/technical-debt-strategic-or-eliminated", "abstract": "All technical debt should ideally be eliminated; however, product iteration cycles END. Executives demand certain things on certain dates. These deadlines are a part of the coding process ‚Äì there is a time component that works right alongside syntax, form, elegance and function, like it or not. No matter how agile you want to be, in order to make a realistic living as a tech pro, you are going to have to make some technical debt compromises! The question is how to minimize and strategically locate this debt so that it actually works in your favor. Identifying Mission Critical Points The first step to a strategic use of technical debt is to identify the places in which technical debt will cause an unacceptable problem. Prioritizing mission critical points allows your team to reduce or eliminate technical debt in the places where it is most relevant. In these prioritized¬†areas, your programmers can go crazy with ideas to improve upon the efficiency of your default function libraries, reduce dependencies left and right, and create the most elegant code possible. In other less important areas, you save time by reducing the effect that inefficiency in that section has on the performance of the product as a whole. Improving your project backbones will likely reduce the redundancies and¬†dependencies that you face in ancillary functions, especially if you have to build additional features from SDKs because of a time crunch. You can also identify which sections of your project are in most need of creative customization efforts and which can be put¬†together, at least partially, by pre-built assets. Good Debt vs. Bad Debt Programming is like finance: There is good debt and bad debt. In the world of money, debt that leads to an income stream is good debt. Bad debt is consumer debt that you incur on a depreciating asset like a car or a dress. Are you buying something that pays you back with your technical debt? For instance, you may be able to buy your team¬†some time by incurring some technical debt on the front end if a client is requiring a proof or a build too early. The gaming industry is full (perhaps too full) of 1.0 releases with day one patches. The dev team is usually under the thumb of the distributor in that instance, and in the AAA world,¬†on the hook for tens of millions of dollars. The worldwide marketing campaign has been hyping the September 15th release date for a year or more. The game is coming out on September 15th, technical debt and all. This is good debt, because if the release date gets skipped, there won‚Äôt be any audience to create the day one patch for (No Man‚Äôs Sky, anyone?). Do not begin accumulating small technical debts that have no ‚Äúrepayment plan.‚Äù This is the equivalent of the high interest credit card in finance. Make sure that any debt you leave has a plan for optimization and a timeline to completion. Yes, everyone wants to be agile and never stop improving ‚Äì ‚Äúcompleting‚Äù something is an antiquated concept. We know. Back in the real world, your competition will be putting hard dates in their process outlines. Product Design Debt vs. Technical Debt Make sure that you are not creating product design debt instead of technical debt that you can reduce over time. Product design debt is debt that occurs when you maximize your feature set to its limit. Eventually, the design becomes antiquated, and you have to retool the entire design instead of incrementally improving your program by reducing technical debt. After MySpace was bought by NewsCorp (before its current¬†Viant deal ), one might say that it lost its audience because it refused to pay down its product design debt. Facebook introduced a setup that was less conducive to spam, and people responded by moving. By definition, technical debt is debt that remains agile. Iterations are created with an eye to the future while optimizing for the present. Trends must be taken into account well before they become mainstream. As a matter of fact, technical debt becomes an advantage in this instance because you spend less time on functions and features that you know will become antiquated in a few months. The time that you save here is spent creating that feature‚Äôs replacement. Embracing Technical Debt Your engineers are not creating technical debt from lazy programming . Stop blaming them for it! Make sure they have a plan for reducing the debt that naturally gets created because of timelines and deadlines. As long as your team has a way to increase the efficiency and performance of a program so that your client consistently remains competitive, people will keep giving you the time that you need. Technical debt gives you a chance to take full advantage of the time and talent that you have. You can expand on ideas with less pressure and create ongoing business for your team. Keep in mind the ways to use technical debt strategically, and you will soon find that there is no need to eliminate such a good friend!", "date": "2017-01-05"},
{"website": "Airbrake", "title": "How Much of Lean Software Development is a Cultural Shift?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/lean-software-development-cultural-shift", "abstract": "A truly agile development team refines how work is managed as well as how it gets done. The literal concept of¬†agile development means working through iterations rather than through sequences.However, the¬†spirit of agile is cultural as well as procedural ‚Äì if your company does not make lean software development a lifestyle, your teams will lose time and efficiency constantly redeveloping methods that should become automatic very quickly. We can take a look at how different corporate cultures invoke lean principles through different mindsets and end up with completely different results. Lean Platforms Do Not Make Your Company Agile The number one concern of agile software development is the removal of barriers that are normally in the way of developer talent. Every company attracting top talent is already signed up with Microsoft Azure or one of its competitors from IBM or GE. However, developers who run these tools devoid of an authentic culture of lean management within a company will soon find that clunky tradition may limit the usefulness of these powerful platforms. Some companies, especially enterprise-level companies, would much rather deal with the devil they know than the angel they don‚Äôt. There is very little that Azure can do if a company does not allow its developers the freedom to utilize its robust development or deployment options remotely, for instance. Lean software development principles are based around the notion that everyone is working within the auspices of the psychologies and egos of everyone else. If the biggest ego in the room belongs to a traditionalist C-suite executive with final say over development options, you are going to have a problem. Starting Small, Moving on Data A smaller startup may have a much easier time shifting its entire culture at once into a lean methodology. However, if your company has more than one bona fide department, someone is going to have to employ the agile iterative mindset to convincing decision-makers that lean software development tenants are meant to be more than the weekly meeting‚Äôs intellectual exercise. Leaders within the company who are moving the culture towards lean software development should start small. Begin with one department or one project, hopefully one that is controlled by forward thinking team members¬†with a bit of autonomy. Base your results on hard data so that the true advantages of lean software development can be quantified and presented to skeptical department heads across the company. If you are trying to move into lean, you can certainly convince your counterparts more readily with metrics and KPIs that are common within the company. You can then translate these results into the lingo of lean software development. KPIs Everyone Can Understand Measuring the results that come from lean software development can take many forms. Here are some of the benefits that everyone will understand. Response time ‚Äì Once your decision-makers see that your clients are receiving software¬†with shorter lead times, they are much more likely to give you the freedom that you need to cut away the fat in your processes. Beginning with a bloated process that you know you can easily trim is a great way to increase your leverage in other processes. Decreased costs ‚Äì If you can minimize the number of software¬†iterations between rollouts, you have a good chance of decreasing costs within the company. If you have a bit of leverage, you may be able to redirect these funds into your other lien efforts. Higher customer loyalty ‚Äì Lean software development tends to create a culture of lower customer service requests and less resource waste. Employees also have a higher morale because they are not wasting time in bloated meetings or needless bureaucracy. All of these things eventually lead to higher customer retention rates, which can shave anywhere from 80 to 90% off of your marketing spend. The Lean Software Development Endgame Being able to address your software in the¬†context of a stream of value helps everyone involved do better business. Your development team is more relaxed, knowing they will have the time they need to create elegant processes. Your clients are happier, understanding that your processes take future contingencies into account while providing practical, on time releases. These are noble goals; just realize that other traditions may have accomplished the same thing in previous business generations.¬†These traditions and¬†the people who saw them work die hard. Take it upon yourself to prove the mettle¬†of lean software development through hard data.¬†Do not let corporate get away with simply buying the latest cloud service tool expecting a productivity miracle two hours after the first subscription payment goes through. Make them understand that lean software development is a corporate lifestyle, not a quick fix or a Band-Aid that you take off after it heals your wound. This is definitely a long journey, but it is one that you and your colleagues will share quite a few beers and high-fives over after you have won the day (and the month, and the quarter, and the year).", "date": "2016-12-29"},
{"website": "Airbrake", "title": "Python Best Practices: 5 Tips For Better Code", "author": "Unknown", "link": "https://airbrake.io/blog/python/python-best-practices", "abstract": "Like most programming languages, Python offers an extremely powerful development platform to create some of the most useful and robust applications imaginable. However, as Spider-Man and Winston Churchill have taught us, with great power comes great responsibility. Here are our thoughts on Python best practices to help you harness everything Python has to offer. Today we‚Äôll examine a few of the critical Python best practices used to create more professional, cleaner code. Most developers, no matter the language, will begin a new project by settings up a code repository and some form of version control. While endless debates can (and do) take place arguing about which version control system is best or where to host your project repositories, no matter what you decide to use, it‚Äôs critical to focus on structuring your project and subsequent repository in a suitable fashion. For Python, in particular, there are a few key components that should exist within your repository, and you should take the time to generate each of these, at least in a basic skeletal form, before actual coding begins. License ‚Äì¬†[root]: This file should be the first thing you add to your project. If you‚Äôre uncertain, sites like choosealicense.com can help you decide. README ‚Äì¬†[root]: Whether you choose Markdown, reStructuredText, or even just plain text as your format, getting a basic¬†README¬†file in place can help you describe your project, define its purpose, and outline the basic functionality. Module Code ‚Äì¬†[root]¬†or¬†[/module]: Of course this is all for naught if you don‚Äôt have any new or worthwhile code to create. That said, be sure to place your actual code inside a properly-named sub-directory (e.g.¬†/module), or for a single-file project, within¬†root¬†itself. setup.py ‚Äì¬†[root]: A basic¬†setup.py¬†script is very common in Python projects, allowing¬†Distutils¬†to properly build and distribute the modules your project needs. See the official documentation for more information on¬†setup.py. requirements.txt ‚Äì¬†[root]: While not all projects utilize a¬†requirements.txt¬†file, it can be used to specify development modules and other dependencies that are required to work on the project properly. See the official PIP page for details. Documentation ‚Äì¬†[/docs]: Documentation is a key component to a well-structured project, and typically it is placed in the¬†/docs¬†directory. Tests ‚Äì¬†[/tests]: Just like documentation, tests also typically exist in most projects, and should be placed in their own respective directory. All told, this means a basic Python repository structure might look something like this: Python has a system of community-generated proposals known as Python Enhancement Proposals (PEPs) which attempt to provide a basic set of guidelines and standards for a wide variety of topics when it comes to proper Python development. Perhaps one of the most widely known and referenced PEPs ever created is PEP8 , which is the ‚ÄúPython community Bible‚Äù for properly styling your code. While there are far too many specific styling guidelines to give examples here, most Python developers make a concerted effort to follow the guidelines set forth in¬†PEP8, so all code across the community has a similar look and feel. Perhaps you‚Äôve heard of the broken windows theory , which is a criminological theory that states that the proper maintenance and monitoring of urban environments in cities, in order to prevent lesser crimes, creates a more positive atmosphere that thereby prevents greater crimes from occurring. While this theory, as it relates to crime prevention, is highly criticized and contested, it has some merit when it comes to the world of coding and application development. Specifically, when creating a Python application (or any language for that matter), it is almost always more beneficial in the long-term to quickly acknowledge and repair broken windows (i.e. broken code) immediately. Putting it off to finish a new component or module can and will often lead to further, more complex problems down the line. It has even been stated that Microsoft, after a terrible production cycle with the original version of Microsoft Word, adopted a¬†‚Äúzero defects methodology‚Äù¬†to their great benefit, always focusing on fixing bugs and defects before new production code. While this accounting may be apocryphal, there is a certain logic to applying this model during development. As much as it can feel like a burden at times, proper documentation throughout the lifecycle of a project is a cornerstone to clean code. Thankfully, the Python community has made this process fairly painless, and it involves the use of three simple tools and concepts: reStructredText , Docstrings , and Sphinx . reStructredText is a simple plain text markup syntax. It is commonly used for in-line documentation, which in the case of Python, allows for documentation to be generated on-the-fly. The Quickstart Guide provides a few simple examples of¬†reStructuredText¬†in action. While using¬†reStructuredText¬†is the first step to proper documentation, it‚Äôs critical to understand how to properly generate¬†Docstrings. A¬†Docstring¬†is simply a documentation string that appears prior to every module, class, or method within your Python code. Once every component of your code contains a properly formatted¬†Docstring¬†using¬†reStructuredText¬†markdown, you can move onto using¬†Sphinx, which is the go-to tool to generate Python documentation from existing¬†reStructuredText.Sphinx¬†allows documentation to easily be exported into a variety of formats, including beautiful HTML, for near-automatic online documentation pages. With virtually no effort, your project documentation can even be added to the prominent ReadTheDocs documentation repository after every code commit. While using proper syntax and documentation methods will always produce solid, clean code, perhaps one of the best tools to improving your use of Python is the epic module repository known as PyPI: The Python Package Index. . As a collective repository for thousands of Python projects, including nearly every open or public Python project created,¬†PyPI¬†is an undeniably useful resource, no matter your Python experience level or project scope. There are two primary uses for¬†PyPI: Using existing modules, or adding your own project to¬†PyPI. Most projects will initially begin by utilizing existing projects on¬†PyPI, and with nearly¬†100,000¬†at the time of writing to choose from, there‚Äôs almost certainly some code that fits your project‚Äôs needs. Once you‚Äôve located a module you‚Äôre interested in using within your own project, the fun can begin. Next, you‚Äôll want to utilize the¬†Python Packaging Authority recommendations for installing a package from¬†PyPI. Typically this entails using pip , the go-to package installation software. If you‚Äôre using¬†Python 2 >=2.7.9¬†or¬†Python 3 >=3.4,¬†pipcomes pre-installed with Python. Once¬†pip¬†is installed, simply run the appropriate command, as suggested by the module documentation within¬†PyPI. For example, to install requests , a common module to handle HTTP requests, you‚Äôd simply use the following command from the¬†root¬†directory of your project: pip¬†will then take care of the rest and install the package. Now you can keep adding more modules to help your code shine! Down the road, if you‚Äôve got a decent module of your own created and wish to share it with the rest of the Python community, you‚Äôll want to take a look at the Python Distribution documentation, which handles the finer details of packaging your project, as discussed earlier. Most importantly, look over the simple steps to Upload Your Project to PyPI , which requires you to: Signup for a¬†PyPIaccount, register your project, and then upload it to¬†PyPI¬†for others to view and add to their own projects!", "date": "2016-12-21"},
{"website": "Airbrake", "title": "Java Blogs You Should Be Reading", "author": "Unknown", "link": "https://airbrake.io/blog/java/java-blogs", "abstract": "Among programmers and Computer Science experts , Java¬†is recognized as a market leader and the number one programming language in the enterprise development arena. So today we bring you a list of some of our favorite Java Blogs from around the world focusing on different aspects of Java. We hope you‚Äôll enjoy our recommendations. Program Creek is a blog developed by Xiaoran Wang, a PhD candidate at the University of Delaware. This site is all about Java, including Java Core, Java Tutorials, Java Frameworks, Eclipse RCP, Eclipse JDT, and Java Design Patterns. Some of the most popularly referenced blog posts on this site include: The Top 10 Algorithms for Coding , FAQs regarding Simple Java; and LeetCode ‚Äì Binary Tree Paths Jonathon lives in New Zealand and is a Sun-certified Java Programmer who is also the Tech Lead at Oracle in the Java FX UI controls team. Jonathon writes mainly about Java FX and updates his blog regularly. Antonio is the author of two books on Java entitled Beginning Java EE 7 and Beginning Java EE 6 with Glassfish 3 . He is a former BEA consultant who shares his knowledge on many aspects of Java including using application servers such as Weblogic, JBoss and Glassfish. Antonio also writes passionately about his support of open source software. Java Deep¬†is a technical Java oriented blog written by Hungarian Peter Verhas. He writes about Pure Java, JSON, XML, PHP, VCF and QR. He also maintains and develops open source projects, like ScriptBasic Classic, ScriptBasic for Java, and License3j. His blog is usually updated regularly, with most new posts released on Wednesday afternoons (GMT time zone). Java Code Geeks is¬†a blog we recommend to all Java developers. Java Code Geeks is an independent online community with over 500 authors that contribute to the site. The blog receives over 1,200,000 views each month and with good reason. If you subscribe to the site‚Äôs newsletter you gain access to five of their bestselling Java ebooks. Although Java Code Geeks blog extensively about Java, other programming tools and computing concepts are also discussed. Some of their most popular blog posts of all time include: Java Best Practices: Vector vs ArrayList vs HashSet , Android Full Application Tutorial , and this list of Great Online Learning Websites for Aspiring Coders is probably the most extensive resource on the internet for Java users outside of Oracle. Some of the world‚Äôs leading Java experts write for JavaWorld and share tips, tricks, commentary and solutions on all matters of Java programming for both the novice Java programmer and experienced professionals. Posts are all about the practical application of Java, not theoretical concepts. This is a go-to resource for many Java programmers due to the handy library that allows users to write database queries based on classes that are generated from a database schema. The blog also provides useful hacks to helps users modify and improve their Java coding for increased performance. Oracle‚Äôs official in-house blog relating to Java. If you want to keep up-to-date on the changes relating to new versions of Java or be the first to try out early access builds, this is the site for you. The Java Source also often posts inspirational stories of Java practitioners and how they are using Java technology in their businesses. This site features a mashup of the latest posts published by Java blogs across the internet. You can search blog posts by latest published or by the top-rated blog posts of the week or month. You can further refine your search to filter results by Java for beginners, advanced Java concepts or Java blog posts related to agile development and testing. We hope you have enjoyed this list. Once you try out our recommendations we‚Äôd love to hear from you and know which blogs you have found to be most useful.", "date": "2016-12-19"},
{"website": "Airbrake", "title": "Java Best Practices: 3 Tips For Writing Cleaner Code", "author": "Unknown", "link": "https://airbrake.io/blog/java/java-best-practices", "abstract": "Are you looking for one simple way to make Java code easier to maintain, debug, and develop? If so, you should simply adhere to Java best practices in order to produce great code. Great code doesn‚Äôt just work well; it is also readable, maintainable, and often, reusable. When you get confronted by a deadline and just needs to get the thing to work, it‚Äôs tempting to toss in some hacks. However, these shortcuts are likely to punish you later when you need to debug or upgrade your scripts. If you get into the habit of writing code well, you will save yourself time and money in the end. With this in mind consider these tested Java best practices to produce maintainable code: 1. Keep Java Classes Focused In a perfect world, each Java class should just represent a specific concept. There‚Äôs not a magic number that specifies how many lines of code or how many methods each class should contain, but when classes start growing larger than a couple of hundred lines of code, it‚Äôs time to reconsider the program‚Äôs design. Smaller classes will make the code easier to understand. They will also increase the likelihood that the classes can be plugged into other scripts to help with specific tasks. A focus on clean and reusable code will help save money and speed up development for this project and perhaps, future projects. 2. Consider the One-Screen Rule for Java Methods Ideally, a method should contain one specific function or set of functions. You should be able to see the code for each method on one screen or printed page, so it‚Äôs easy to grasp what the function is and how the method gets the job done. As with classes, if your methods start growing much larger than a page, it‚Äôs time to evaluate how your script has been designed. You can write the most complex Java scripts by using short, focused classes and methods. If you have to upgrade or debug your script later, you will thank yourself for following this practice. Also, short and focused methods are much more likely to be reusable. 3. Adhere to a Standard Coding Style If you adhere to style standards, you should be able to tell where a block of code begins and ends and what that code does. As a simple example, consider this standard style for producing readable code: Notice that the first brace ends the line of code with the method declaration. The last brace is on a line by itself on the end. Also note that the method gets documented in English with comments. The comments aren‚Äôt part of the code; however, they explain what the code is supposed to do. Finally, the name of the method actually describes what the method does. This might just seem like the standards from Computer Science 101, and that‚Äôs actually what they are. At the same time, these standards often get violated by experienced programmers. When code adheres to tested standards, less experienced programmers will be able to maintain it and be able to learn from it. This cuts costs and keeps all levels of developers more productive. It‚Äôs fine to develop your own in-house standards that deviate from the basics, but they should actually be documented and enforced standards. Most programmers learn to develop clean and readable code in school. In the real world with its deadlines and much more complex requirements, it‚Äôs actually moderately experienced programmers who tend to break the rules in the interest of fixing a bug or meeting a tight deadline. Sadly, some programmers may even write unreadable and complex scripts with the misguided thought that they can make themselves more valuable. It‚Äôs obvious that truly valuable programmers write Java that is as easy as possible to debug and maintain. When you can operate in real-life business situations and still maintain the habit of producing clean code that adheres to set standards, you can pat yourself on the back. You will benefit yourself and your company by saving time, money, and resources.", "date": "2016-12-05"},
{"website": "Airbrake", "title": "Technical Debt: How Much (If Any) Is Acceptable?", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/acceptable-technical-debt", "abstract": "Technical debt is an ever-present issue in software creation that becomes bigger as a project scales. Although you may not be able to see technical debt, you are paying it all the time if you are not looking for it! Is it ever acceptable, and how should you work to reduce it as much as possible? Where does technical debt come from? We should start with what technical debt is not in order to determine where it actually comes from; otherwise, we may mistakenly identify things that are not technical debt as technical debt, eliminating our ability to control it. Technical debt is not lazy programming, and these two concepts are not synonyms in any way. Huge, unsophisticated modules and overly verbose executables that run inefficiently are problems that can be virtually eliminated by inspiring or changing up your team. In most cases, technical debt comes from a conscious decision and choice that is made by a fully competent team ‚Äì do we have time to research and test a more efficient solution, or do we have to go with the less efficient but more easily implemented obvious programming choice? Can we get rid of all technical debt? Hypothetically, yes. Functionally, no. If a great group of programmers had an unlimited amount of time to work on a project, they could probably eliminate all of the technical debt in that project. However, there is no company with this unlimited reserve of time. At some point, you are going to have to prioritize the functionality of the code over its artistic merit and even its efficiency. The secret to technical debt is its management ‚Äì determining the amount that can be eliminated and properly holding the rest to only an incremental effect on the final product. Technical Debt and Agile Development Everyone is looking for more agile development because it is the hottest new term on the market, not because it is necessarily the best process for a project. Agile development creates a more efficient product at the end of the coding, but the process itself is anything but agile. Agile development is all about breaking down a project into component parts. Each of those parts is then optimized, of course, bringing the entire project to a higher level of efficiency. However, as you employ DSDM , FDD, or XP, you are actually extending your timeline to completion. Some projects simply do not have the time for this intermediate process, not to mention the money that it takes for the extra man hours. When the deadline and the total budget numbers are¬†creeping up, sometimes a project must find its end in a less efficient final effort. The Amount of Debt that is Acceptable As with any debt/credit transaction, simply having debt is not a bad thing. Many people have become rich holding debt over commercial properties. The trick in the real estate industry is to maintain an income that pays for the debt, and this is the same mindset that can be applied to technical debt. Have your programmers identify the areas of the project that weigh upon the rest of the project the least. You may have a relatively large amount of technical debt in a single module or function, but that module or function may not be used throughout the rest of the program very much. If the technical debt from one of these modules turns into a bonafide error, that error is at least manageable and non-critical. The one critique of this ‚Äúsnowball programming‚Äù methodology is that¬†this effort leads to more efficiency in the least important parts of the project. The team can fix this by identifying mission critical functions and modules as early in the process as possible, and looking for ways to employ these functions throughout the programming. This may require an extra layer of strategizing before actually sitting down to code, but it is well worth it at the start of the project, when you have the most time available to the team. Estimate the percentage of bulk that can be allowed into mission critical functions and less important functions. Give this benchmark to your programmers from the beginning of the process, so they will have a quantifiable number to work towards. As time winds down, they will naturally include this productivity benchmark alongside their other key performance metrics instead of trying to include efficiency as a last minute addition to the process. Stop worrying about the technical debt boogeyman in the shadows of your coding. If you set a precedent before the project begins, you will have a benchmark that will help you predict the efficiency of your programming efforts. You may not be able to get rid of technical debt completely, but you can control it while maintaining your schedule and budget!", "date": "2016-12-01"},
{"website": "Airbrake", "title": "Spiral Model: Software Development For Critical Projects", "author": "Unknown", "link": "https://airbrake.io/blog/sdlc/spiral-model", "abstract": "Some more specific takes on SDLC include: The Spiral Model ‚Äì first described by Barry Boehm in 1986 ‚Äì is a software development methodology¬†that¬†aids in choosing¬†the optimal process model for a given project. It combines aspects of the incremental build model, waterfall model and prototyping model, but is distinguished by a set of six invariant characteristics. The Spiral Model¬†is concerned primarily with risk awareness and management. The risk-driven approach of the spiral model ensures your team is highly flexible in its approach, but also highly aware of and prepared for the challenges they can expect to face down the road. The spiral model shines when stakes are highest and major setbacks¬†are not an option. 1. Define Artifacts Concurrently (AKA ‚ÄúPlan¬†everything, then re-plan those plans, then plan some more.‚Äù) In programming, an ‚Äòartifact‚Äô is¬†any thing produced by people involved in the software development process.¬†The spiral model suggests that all artifacts in a given¬†project lifecycle should be defined fully from the start. By planning each and every artifact¬†of a project, your team reduces the potential for technical debt and other mishaps. For example, what if your software is reliant on an unusual, expensive¬†or¬†nearly obsolete piece of hardware?¬†Or worse, what if after months of work you realize what¬†you‚Äôve been striving to build cannot actually be achieved? These types of issues¬†can be disastrous. Defining the scope of your entire project ensures you make the most of your time, and avoid potentially catastrophic scenarios. 2. Four Essential Spiral Tasks According to Boehm, every spiral model cycle consists of the following four tasks. Consider critical-stakeholder objectives and constraints. Elaborate and evaluate alternatives for achieving your¬†objectives. Identify and resolve¬†risks attendant on choices of alternative solutions. Stakeholders‚Äô review and agree to¬†proceed based on satisfaction of their critical objectives and constraints. The second characteristic of the Spiral Model¬†‚Äì just like the first ‚Äì is primarily concerned with mitigating¬†risk and reducing the potential for setbacks. In this case, focusing¬†on the wishes of critical stakeholders rises to the forefront. By performing these four activities, your team ensures it¬†won‚Äôt¬†pursue options that don‚Äôt satisfy the core needs of the project or present¬†a high potential for¬†risk. 3. Risk determines level of effort Invariant three suggests that the effort allocated to a component of your project should be determined by the severity of risk associated with¬†that¬†component. Take the following chart for example: We can see that after a certain point, the risk of losing market share far outweighs the gains made in testing. Yes, testing is important, and reduces the likelihood of releasing a buggy product, but speed in software development, speed is just as important (if not more important). Don‚Äôt let your aversion to one risk hinder your ability to¬†account for another. 4. Risk determines degree of details Invariant four says the potential for risk should determine how much attention you pay to the details of the project you‚Äôre working on. Let‚Äôs say you‚Äôre introducing a¬†new suite of features to your application. Seems like a no-brainer, right? More features = happier customers. Well‚Ä¶is that always the case? What if your existing customers become overwhelmed by a new interface, or miss the way your product behaved in the previous version? This situation could be pretty bad ‚Äì you might have some people jumping ship. It would have been best to gather more data and implemented your changes more carefully. On the other hand, let‚Äôs say it‚Äôs time to spruce up the language on your site to communicate your offering more clearly. Is this a critical component of your success? Yes. Is getting it wrong going to ruin you? Probably not. In this case, it‚Äôs probably safe to throw a few different¬†things up on your site, test them and see what sticks! Don‚Äôt sweat the small stuff. 5. Use the anchor point milestones The spiral model¬†consists of three ‚ÄúAnchor Point Milestones.‚Äù They are: Life Cycle Objectives (LCO) Life Cycle Architecture (LCA) Initial Operational Capability (IOC) These milestones serve as intermediate checkpoints¬†to keep the project moving full steam ahead in the right direction. The LCO¬†milestone checks to see if the technical approach to a project is well-defined enough to proceed, and that stakeholder conditions are met. If ‚ÄúYes‚Äù, continue. If no, abandon ship or commit to another lifecycle and try again. The LCA milestone checks that an optimal approach¬†has been¬†defined¬†and¬†that¬†all major risks are accounted for and planned for.¬†If ‚ÄúYes‚Äù, continue.¬†If no, abandon ship or commit to another lifecycle and try again. The ICO milestone checks that adequate¬†preparations have been made to satisfy stakeholders¬†prior to¬†launch. This includes the software, site, users, operators, and maintainers. If ‚ÄúYes‚Äù, its time for launch!¬†If no, abandon ship or commit to another lifecycle and try again. 6. Focus on the system and its life cycle (Or ‚ÄúSoftware Isn‚Äôt Everything‚Äù) Yes,¬†the Spiral Model is a software development process, but¬†that doesn‚Äôt mean you can ignore non-software aspects of your business, or that¬†every problem can be solved with a bit of code. If you‚Äôre experiencing troubles converting¬†leads, that doesn‚Äôt mean you need to build a sophisticated sales robot. Maybe it‚Äôs just time to¬†re-visit your sales tactics! More software is not always better, and you may find that throwing software at non-software problems only complicates them more.¬†Focus on the underlying goals of the project and see to it that the solution you employ is the one best suited for meeting your win conditions. So‚Ä¶what now? While the Spiral Model can be a bit odd to define, one thing is for sure ‚Äì it‚Äôs a great way to keep your eyes on the prize and minimize the risk you assume when building something new. The invariants are great to keep in mind, but we‚Äôve only just scratched the surface of this interesting software development life cycle tool. Check out Boehm & Hansen‚Äôs official write-up¬†below to learn even more about Spiral Model. Spiral Development: Experience, Principles & Refinements ‚Äì Boehm & Hansen", "date": "2016-09-29"},
{"website": "Airbrake", "title": "Awesome Airbraker: Venga", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/venga", "abstract": "We would like to welcome Venga as the 34th Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does Venga¬†bring to it‚Äôs customers? Venga is a CRM and business intelligence platform that revolutionizes how restaurants connect with their guests. What do you like about Airbrake? Being notified when an error occurs in production is invaluable. Instead of combing log files looking for things out of the ordinary, we get an email pinpointing the exact thing that went wrong. This lets us respond quickly and correct the problem, hopefully before our users even notice that something went wrong. How do you normally deal with Airbrake exception reports? We review exception reports as they come in. A quick scan is usually enough to know whether this is a critical problem or can be handled later. The number of occurrences of an error also helps us determine whether this is a one off situation or something that is happening repeatedly. Setup. Environment, Language, Tools, Etc. We use a mix of environments and languages at Venga. Our heavy data processing is done in C# while our front end is Ruby on Rails and Javascript How long have you been using Airbrake? Almost a year. Would you like to add anything else? Twitter: https://twitter.com/getvenga Instagram: https://instagram.com/getvenga Thank you Venga for being an awesome member of Airbrake¬†Bug Tracker family.", "date": "2015-08-26"},
{"website": "Airbrake", "title": "Awesome Airbraker: TheSquareFoot", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/thesquarefoot", "abstract": "We would like to welcome TheSquareFoot as the 33rd Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does TheSquareFoot¬†bring to it‚Äôs customers? We are a tech-enabled commercial real estate brokerage. Our brokers help get companies into office space and our tech team helps to automate and simplify the bulk of our broker‚Äôs workload, as well as clients the ability to browse space all over the country. What do you like about Airbrake? Airbrake makes staying top of our production errors an effortless affair. How do you normally deal with Airbrake exception reports? If they‚Äôre critical we address them immediately otherwise we open up a bug report and assign them to the developer best suited to address them. Setup. Environment, Language, Tools, Etc. Docker, AWS, Ruby on Rails, Haml, Coffeescript, Sass, Backbone.js, Airbrake üôÇ How long have you been using Airbrake? 2 years. Tell us how your company started? The company started in 2011 when our founder Aron Susman was looking for office space and noticed there wasn‚Äôt a single helpful web-based resource for doing so. What could Airbrake do better? Less pop ups, making it so you have to log in less often when there‚Äôs an error, maybe figuring out a way to make the call stack a little more digestable at a glance. Favorite Music to Hack to. Com Truise. Would you like to add anything else? Twitter Account: @TheSqFt Blog: http://www.thesquarefoot.com/blog Thank you TheSquareFoot for being an awesome member of Airbrake¬†Bug Tracker family.", "date": "2015-08-26"},
{"website": "Airbrake", "title": "Awesome Airbraker: Base Directory", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/base-directory", "abstract": "We would like to welcome Base Directory as the 32nd¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does Base Directory¬†provide? Base Directory makes it easier for service members and their families to find information on military bases around the world. We take publicly available information from difficult to navigate government websites and data sets and present it in a standardized and user-friendly way through our website and mobile apps. What do you like about Airbrake? We love how Airbrake lets us know immediately when an exception occurs. We hate for any of our users to have a poor experience with Base Directory, so we really try to stay on top of errors that are affecting user experience, and ensure any errors are resolved same day or as close to immediately as possible. How do you normally deal with Airbrake exception reports? We use the user agent, stack trace, and exception to identify where the problem occurred and quickly resolve it. Setup. Environment, Language, Tools, Etc. Ruby, Rails, Backbone.js, JavaScript, Coffeescript. How long have you been using Airbrake? Nearly a year. Tell us how your company started? The cofounders met on an Arabian Gulf Deployment in 2010. Tony Hatala, a MarineCorps Pilot, asked Billy Griffin, a Naval Surface Warfare Officer, to help him with a project intended to boost morale on the ship and raise money for the Semper Fi Fund. We hosted the first ever (to our knowledge) half-marathon and 5K on the flight deck of USS Peleliu (LHA 5), in the middle of the Pacific Ocean. That was the first time we worked together, and it spawned a great partnership. We also recently had the opportunity to demo Base Directory to President Obama at White House Demo Day. What could Airbrake do better? It has been outstanding for us Favorite Music to Hack to. 90s of course. Would you like to add anything else? Twitter Account: @billygriffin22 , @anthonyhatala Blog: https://www.basedirectory.com/blog . Thank you Base Directory for being an awesome member of Airbrake¬†Bug Tracker family.", "date": "2015-08-11"},
{"website": "Airbrake", "title": "Awesome Airbraker: Laurel & Wolf", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/laurel-wolf", "abstract": "We would like to welcome Laurel & Wolf as the 31st¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does Laurel & Wolf provide? We believe in the power of great design and how it can transform the way we live, work, and love! If you think about it, the way furniture is placed in a space will dictate the way people interact with one another. However, since the creation of interior design as a profession, interior designers have only been accessible to the very wealthy. Homes and businesses all over the world have suffered in drab silence as they waited wistfully to be improved. They watched their swankier counterparts remodel, renovate, and redecorate, wishing desperately that their time would come. What do you like about Airbrake? Airbrake helps building better product by allowing us to know what issues our customers are experiencing before they even tell us about it. Early on in our company, Engineering would handle support issues directly with customers, since we didn‚Äôt have the amazing Client Services team that we do now. I think a big part of our early success as a company is due to us emailing customers acknowledging the error they‚Äôve just seen, and letting them know that we are either handling it manually for them, or pushing up a fix to production as we speak. How do you normally deal with Airbrake exception reports? When an Airbrake Exception report comes in, we create a bug ticket in Pivotal Tracker using the integration. This helps us to triage and prioritize the issue appropriately, as well escalate it to the appropriate place in the organization. Setup. Environment, Language, Tools, Etc. Rails,¬†Heroku,¬†SCSS,¬†Postgres,¬†React,¬†Flux,¬†RSpec, and¬†Redis. How long have you been using Airbrake? 1 year. Tell us how your company started? Leura Fine is a professional interior designer turned entrepreneur. After working as the senior designer for one of the world‚Äôs top interior design firms (Architectural Digest Top 100, International Interior Designer of the Year, and as seen on Bravo‚Äôs ‚ÄúMillion Dollar Decorators‚Äù), Leura launched her own interior design business, Leura Fine Interiors (also featured on HGTV). Frustrated by the archaic business model of the interior design world, Leura decided it was time to democratize the industry by establishing a better way for clients and designers to get connected and work together. Laurel & Wolf was born from this idea and makes interior design easy and affordable to all. Through a marketplace platform, Laurel and Wolf offers customers multiple designs for their space from professional interior designers for a flat fee. Leura believes in the power of great design and how it can transform the way you work, live, and love. Favorite Music to Hack to. I personally like the ambient noise of regular office distractions, i.e. no music, but other engineers prefer Beethoven and Spa Music. Would you like to add anything else? Twitter Account: @ _kulte @laurelandwolf Favorite food: Anything made where the kitchen holds itself to the same standards as I do in my craft. Thank you¬†Laurel & Wolf for being an awesome member of Airbrake¬†Bug Tracker family.", "date": "2015-08-10"},
{"website": "Airbrake", "title": "Awesome Airbraker: Your Computer Genius", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/your-computer-genius", "abstract": "We would like to welcome Your Computer Genius as the 30th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does Your Computer Genius¬†provide? We manage all aspects of software development for medium-size businesses that need custom software, from helping with CIO tasks and budgeting to running blended agile teams. What do you like about Airbrake? Airbrake is great as a console for monitoring exceptions. We use it in both the Dev and Prod environments ‚Äî it‚Äôs really cool that Airbrake automatically sorts that out. How do you normally deal with Airbrake exception reports? We look at the screen and grunt. Then we open a support ticket, or if it‚Äôs small, fix it. We also use the email notifications in our DevOps. Setup. Environment, Language, Tools, Etc. We are using Airbrake on a project that runs both IIS and Apache on Windows 2008 Server R2. The project has some Classic ASP components (Agh, Legacy code!) but is primarily running in a Symfony2 PHP environment (which we love). How long have you been using Airbrake? 3 months. What could Airbrake do better? Airbrake baseball hats? Tell us shortly how your company started? Donal Turrentine, our founder, started out as a janitor, working for a small business, at age 13. He was there, after hours, cleaning the toilets and counters when the staff was staying late one day trying to solve a computer problem‚Ä¶ this piqued his interest ‚Äî he solved the problem, started working for the company, and eventually went on to found his own company, Your Computer Genius! Favorite Music to Hack to. Oh boy, a wide variety‚Ä¶ Right now Chromeo‚Äôs Jealous (playingon SoundCloud). Thank you Your Computer Genius for being an awesome member of Airbrake¬†Bug Tracker family.", "date": "2015-07-15"},
{"website": "Airbrake", "title": "Awesome Airbraker: MyFitnessPal", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/myfitnesspal", "abstract": "We would like to welcome MyFitnessPal as the 29th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your company¬†provide? Millions of people have lost weight with MyFitnessPal‚Äôs FREE calorie counter. What do you like about Airbrake? Easy to implement. Easy to integrate with Slack. Email reports. Useful info to troubleshoot errors. How do you normally deal with Airbrake exception reports? Find the most critical ones, and try to resolve them asap. Setup. Environment, Language, Tools, Etc. Rails, Scala, JavaScript, Ember.js. How long have you been using Airbrake? 3+ years. What could Airbrake do better? Send weekly reports of our errors and website performance. Tell us shortly how your company started? Founder and CEO Mike Lee was getting married, and he and his wife planned beach wedding. They realized they should get in shape, so they hired a trainer. He gave them book and asked them to count calories and write everything on the paper. Mike then realized there was no good product on the market that helps with this, so he went ahead and build MyFitnessPal from his bedroom. Years later, more than 80MM people use MyFitnessPal. Anything Else? Check out our blog: blog.myfitnesspal.com Thank you MyFitnessPal for being an awesome member of Airbrake¬†Bug Tracker family.", "date": "2015-07-14"},
{"website": "Airbrake", "title": "Awesome Airbraker: Coride", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/coride", "abstract": "We would like to welcome Coride as the 28th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your company¬†provide? We help people share rides between cities. That means passengers can find fun and cheap rides and drivers get paid to drive where you are already going. What do you like about Airbrake? Airbrake saves my butt! How do you normally deal with Airbrake exception reports? Work them like a work list. Setup. Environment, Language, Tools, Etc. RoR with AngularJS and Ionic. How long have you been using Airbrake? 4 years. What could Airbrake do better? I want to provide personalized apologies and explanations to every user who experienced an error. Please provide me all the effected user_id‚Äôs of an error. I can use those ID‚Äôs to send an apology and explanation. Tell us shortly how your company started? The company started as a collaboration of folks out of a rag-tag coworking space is Madison WI called 100state. Favorite Music to Hack to. Capital Cities. Anything Else? Follow us on Twitter: @ajbraus Thank you Coride for being an awesome member of Airbrake¬†Bug Tracker family.", "date": "2015-07-10"},
{"website": "Airbrake", "title": "Awesome Airbraker: Citrusbyte", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/citrusbyte", "abstract": "We would like to welcome Citrusbyte as the 27th¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What value does your company¬†provide? Citrusbyte works with you to build your startup, modernize and rebuild your technology, and help you enter new markets with new products. We advise you on all facets of the product lifecycle ‚Äî from engineering and design to marketing and sales ‚Äî helping you make informed decisions along the way. What do you like about Airbrake? We really like the visibility that Airbrake gives over unexpected errors that otherwise will be buried among huge piles of logs. It is a great tool to provide context information about each occurrence of an error making it an easy job to reproduce it and fix it ASAP. It is also great that it allows us to set a different project pear each environment so we can even report errors from our development environments and use the UI to better analyze them. How do you normally deal with Airbrake exception reports? We usually receive the notification via email and analyze its level of importance. If the error is critical we fix it and deploy it right away, marking it as resolved. If the fix can wait (or has to) we usually open a GitHub issue to track it down. Opening Airbrake after each deploy is a common task to make sure everything goes smoothly. Setup. Environment, Language, Tools, Etc. We use small, focused tools that favor speed and explicitness. We don‚Äôt believe in a one-size fits all hammer, instead we work with multiple specific tools for each job. We love Ruby and use small libraries like Cuba and Protest to build our products, we also use Redis a lot and are always trying to find the best tool available for a specific objective. How long have you been using Airbrake? More than two years. What could Airbrake do better? The latest UI change was a great improvement, we are currently experiencing some minor problems logging in, like short-lived sessions and the post-login redirect not always taking you where you wanted to go, but those are just minor issues. Tell us shortly how your company started? Citrusbyte was founded by a team of engineers and product designers that believed simple tools could be used to solve complex problems. We started in a garage in Los Angeles and now have team members on four continents! Favorite Music to Hack to. Depends on the day, it can go from classic music to heavy metal within a matter of minutes! Anything Else? Follow us on Twitter: twitter.com/citrusbyte twitter.com/fedesaraviab Thank you¬†Citrusbyte for being an awesome member of Airbrake¬†Bug Tracker family, you rock!", "date": "2015-07-09"},
{"website": "Airbrake", "title": "How to Overcome Test Automation Challenges? Interview with Jenendra Jain, Amazon", "author": "Unknown", "link": "https://airbrake.io/blog/interview/how-to-overcome-test-automation-challenges", "abstract": "W e are happy to welcome Jenendra Jain to Airbrake Interviews. Jenendra is a software development engineer ‚Äì test, at Amazon, and a former senior test engineer at Microsoft, and we are going to talk about test automation challenges¬†and how to overcome them. Hi Jenendra. Could you tell us about you and how you started your career? Before joining Amazon India in 2011, I started my career in mid 2008 with the ERP division of Microsoft. They use SAP platform with all the development focused towards how their business is handled in real world. Being right out of college I had no idea what SAP, or for that matter, any ERP Software is. I was given an option to be either SDET or SDE. Being an SDET was my choice and for the 3.5 years I spent with MS-SAP division, I learned a lot about business processes ‚Äì after all, to test something you need to know the heart of the module. As an SDET I picked up the foundation of automation and so far have worked with QTP, VU-Gen, QC, Selenium, TestNG and Appium automation tools. In talking about Test Automation challenges, many software engineers believe it‚Äôs difficult to implement, do you agree with that and why? It definitely seems a lot difficult than it is. A person who is starting afresh in this area would feel intimidated by the ever changing scope of automation. Software development will never stop, any software will be evolving continuously. As the software evolves, the test automation has to evolve too. One way to overcome that threat is to plan your Test Automation by considering the modules that have been stabilized to a greater extent. When developing the test automation framework, what are the most important aspects that should be taken into consideration by software engineers? There are two aspects to Test-Automation. First is the Automation Framework. Simply put, Framework ties up all the logic that orchestrates the execution of test cases. What that means is that the framework should be designed to manage all the resources that any of the potential test cases could need. Depending upon the approach and end-goal of Test Automation for a particular Software, there are multiple strategies (e.g. Data-Driven, Action Driven, Hybrid Frameworks, and many more) to design a Test Framework. Second aspect is the Scope of Automation. Essentially, scope can be discovered by answering a few simple questions. The two most important questions are: What to automate? When to automate? It is absolutely necessary to seek correct answers to these question to streamline the automation. Any wrong answers here would only cause delays and add re-work for the engineer. Unfortunately, a lot of young engineers move forward without spending sufficient time on these questions and end up in difficult situation. What are the biggest challenges a software engineer may face when implementing automation testing in Agile environment? Agile environment essentially allows development cycle to deliver smaller chunks over multiple sprints. At times, this could mean that engineers will not have anything tangible to test initially and everything will be ‚Äútestable‚Äù only at the end of later sprints. This situation is difficult but is still manageable by enforcing the design of the entire software to be finalized during the early stages. That gives test engineer a confidence to what he needs to design. While development team is churning out untestable smaller chunks, Test engineers could use the finalized design to develop their Automation Framework and add test cases/data when the software is in testable shape. Of-course if the design/architecture is still evolving, it‚Äôs a bad idea to go for automation at that stage. What are your recommendations to those who are new to test automation and striving to learn more and advance in their career? Any books and references out there that can provide them with the required knowledge? Quoting from movie Shooter, ‚ÄúSlow is smooth, Smooth is fast!!‚Äù In the world of Test Automation this means that engineers should not jump at the first opportunity to automate. That wouldn‚Äôt be as productive as when automation is done at the right stage of the software‚Äôs life cycle. Manual testing will tell engineers about the stability and readiness of the software to be automated. Apart from timing of automation, an engineer also needs to focus on the design of the Test-Framework. A good test frameworks handles all the complexity of the testing and makes adding new test cases a matter of minutes. I would suggest the engineers to abstract out the test-features and implement the test-definitions accordingly at the test-component level. The field of automation is ever evolving. It has moved from back end to client front end to mobile devices, and now on to the cloud. The art of testing a software is half knowledge and half exploratory intuitions. There is no single resource that can prepare someone to be a good automation engineer. Having said that if someone is aspiring to grow higher in this discipline, they should always keep an eye for the new tools that makes it simple to create complex frameworks and explore those tools in their free time. Exploring is slow, Slow is smooth and Smooth is Fast!! See also: Test Automation Benefits and Challenges ; Interview with Bernardo Rivas, Microsoft.", "date": "2015-05-07"},
{"website": "Airbrake", "title": "Test Automation Benefits and Challenges; Interview with Bernardo Rivas, Microsoft", "author": "Unknown", "link": "https://airbrake.io/blog/interview/test-automation-benefits-challenges-interview-bernardo-rivas-microsoft", "abstract": "What is Software Test Automation? and how would a software engineer at Microsoft¬†describe it? We had the pleasure to meet Bernardo Rivas, who works at Microsoft as a software engineer with a solid experience in C#, testing, test planning and automation. Hi Bernardo and welcome to Airbrake Interviews! First, we‚Äôd like to know, how did you start your career? I started working in 2007 in Mexico City when I was still in college for a company called Stream Nova. They are a Microsoft partner which means that all their development is done in C# using SQL Server and, at the time, The Official Microsoft ASP.NET Site on IIS. I joined the company not knowing much about any of those technologies. I didn‚Äôt even know what a stored procedure was. I worked there for two years until I got my B.S. in Computer Science and had worked two big projects where I learned all the basics. That year I moved to Seattle to work with Microsoft as an SDET. I‚Äôve worked with the Dynamics, Photosynth, Customer Support and Service, Bing and SQL Server teams where I focused mostly on virtualization, development of test tools and test automation. Software test automation is a trending concept with many definitions, what does test automation mean ? In my experience, every organization defines a set of measurable benchmarks of quality for their product and it‚Äôs their job to make sure that it never fails below them. Those benchmarks of quality can be related to many aspects of the product like usability, performance, functionality, integration, etc. Test automation is the tool or set of tools that allows the organization to measure the quality of the product in a consistent and timely way. In your opinion, when should companies consider adopting test automation? and why should engineers automate the software testing process? I think developers on any company at the very least should write unit tests right from the beginning. Unit tests executed as part of a gated check-ins are industry standard because they can catch basic issues like regressions or dependency breaks before even committing the code into the product‚Äôs source. In my experience, writing unit tests automatically improves the quality of the code. It forces the developer to consider corner case scenarios from the get go, simplify their code with single-purpose methods that are easier to test and maintain and use interfaces to allow hermetic testing techniques like mocking (substituting an external dependency with a local test version it). Writing functionality, integration and end-to-end automated tests is also very important. Companies rely on this type of testing to certify the quality of their products. It is so important that, in the past, companies would have a 1 to 1 ratio of dedicated testers and developers. As automation frameworks evolved, test automation became easier and cheaper to write, reducing the need for manual testing and thus dedicated testers. Automated tests also ensure that the key scenarios supported by your product are always functional no matter what changes are made to the source. For this, the engineers need to be aware of all the types of tests that should be performed against their product. Testing their API, their UI, the integration between them, the backend, the database, dependencies, etc. From what you‚Äôve just mentioned; automation in general seems challenging, what are the main obstacles that may face developers in software test automation and what‚Äôs the best way to overcome them? There are many challenges in test automation that companies have to overcome. Infrastructure, maintenance of the automation code, limitations in the test framework etc. I‚Äôve personally dedicated most of my career to solve the infrastructure obstacle. In order to get a reliable result, you need a clean test environment every time you execute a test. In the past, test automation usually included steps to take a group of machines and ‚Äúpave‚Äù them by reinstalling the operating system and any dependencies like applications, database clients and browsers. This process alone would take days and didn‚Äôt allow to reuse machines without repaving them. Virtualization has been traditionally the answer to this issue. By using virtual machines, and lately, machines in the cloud, we can create tests environments on demand, and reuse them as many times as we want by taking advantage of features like snapshots and pre-setup Virtual Hard Disks. Companies invest a lot of resources to develop their own test-machine delivery systems because it allows developers to focus on development rather than allocating test machines to run their tests. Other obstacles that come to mind are related to the test framework itself, which should expose the necessary tools and functionality to concentrate testing the product rather than working around the framework‚Äôs limitations. I found UI test automation to be particularly tricky in this area, especially for mobile devices. Even after defining a good test case and the automation to execute it in a mobile device, actually measuring the quality of the result in terms of graphics is still something that is mostly done manually. We now understand software testing has many ways and methodologies, how would automation help testing engineers in creating / pursuing a better career? For me personally, writing automation has helped me write better, more reliable code. As a team member, submitting a code change along with a set of unit and functional tests sends the message to the team that I care about the quality of the product and that I‚Äôm protecting the integrity of the source and not introducing regressions. When reviewing other people‚Äôs code, I can tell when something has been overlooked and should be tested because that‚Äôs what I would test. And in general, I have a deeper understanding of the source code because I‚Äôve written tests for it that had made me read it and analyze it. These are all traits that are very useful to any team in any company.", "date": "2015-04-06"},
{"website": "Airbrake", "title": "Top 10 Programming Comics (Cartoons) Selected By StackOverflow Users", "author": "Unknown", "link": "https://airbrake.io/blog/comics/top-10-programming-comics-cartoons-selected-by-stackoverflow-users", "abstract": "Do you love¬†programming comics? Are you a fan of XKCD comics ? Here are the top 10 programmers comics that stackoverflow users voted for! Programming Comic #10 Programming Comic #9 Programming Comic #8 Programming Comic #7 Programming Comic #6 Programming Comic #5 Programming Comic #4 Programming Comic #3 Programming Comic #2 Programming Comic #1 Source:¬†http://stackoverflow.com/questions/84556/whats-your-favorite-programmer-cartoon See also: The Definitive Collection of XKCD Comics for Programmers", "date": "2015-03-31"},
{"website": "Airbrake", "title": "What I Learned as a Junior Developer Writing Tests for Legacy Code", "author": "Unknown", "link": "https://airbrake.io/blog/report/what-i-learned-as-a-junior-developer-writing-tests-for-legacy-code", "abstract": "I go to the gym and lift weights because I like the feeling of getting stronger and better. Two months ago, I started to feel a throbbing pain in my knees, yet I continued to go to the gym. I wanted so badly to keep getting stronger that I neglected my health and pushed myself to keep lifting weights. As you can imagine, my knee pain didn‚Äôt improve, and more and more of my body needed to recover after each grueling workout session. As a junior developer at Rackspace (as part of the Airbrake team), at times I feel a similar drive to continue pushing out code that I think will make the product stronger. But just like my knees would complain each time I squatted, untested legacy features would buckle and sometimes break under the weight of my new features. Eventually my physical therapist convinced me to focus on rehabilitation and prevention before continuing to lift weights. When I was healthy and had more stabilizing muscle strength, he said, I could progress faster and less painfully because I‚Äôd be less likely to hurt myself. Taking his advice to heart, I saw a connection to my job. I felt obliged to write tests for legacy features in my product so I could progress quickly and have more confidence that I wasn‚Äôt destroying any other features along the way. Here are some key takeaways I learned during that process: Tools are important I use RSpec, Capybara, FactoryGirl and Selenium for testing my Rails app. Before you write tests, be sure you research the right tools. You don‚Äôt want to spend more time wrestling with new tests than fixing broken code. Even simple tasks like cleaning your database before and after the tests run are important to get right if you want to keep tests fast and repeatable. To do this, I use the database_cleaner gem. If you‚Äôre the first developer on your team to catch the testing bug, it‚Äôs important to also consider that tools are important because a poor choice here can lead to others on your team neglecting to test. The whole team has to commit to testing, which means you have to make it as easy as possible to begin testing, starting with powerful, flexible tools. Specs tell you how code should work and not how it does work When I began testing other people‚Äôs code, I noticed I was getting in the habit of writing tests that passed first and then assessing whether the code was actually supposed to work that way. Sometimes it worked, other times I ended up writing tests that passed only because I was overfitting to my examples. It can be tempting to take the easy way out and assume all up-to-date code works as desired and then write tests to confirm that assumption. This can lead to a strange pattern of reverse-test-driven-development: the code becomes the spec for the tests. Focusing on the original intent of the code is a safer option, and senior developers will most likely be willing to clarify code if you can‚Äôt figure it out on your own. You can‚Äôt test it all, so don‚Äôt try Writing tests for an entire production app can be a full-time job. Of course, we all want 100%(+) test coverage, just like we want to have a sink free of dirty dishes. But instead of arduously cleaning the whole sink once in a while, another alternative is cleaning and putting away your dishes away as you use them. I took this strategy and now write tests to go with any new code and any legacy code I may have touched in the process. I recommend testing as a useful procrastination for junior developers, since it forces you to learn about the code base and gets good muscle memory ingrained. But do make sure you follow these guidelines when you test. PS: My knee feels great, thanks for asking.", "date": "2013-09-24"},
{"website": "Airbrake", "title": "How Digg and Sprint.ly Build Software: An Interview with Joe Stump", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/how-digg-and-sprint-ly-build-software-an-interview-with-joe-stump", "abstract": "I interviewed Joe Stump , former Digg lead architect, founder of SimpleGeo and now the founder of project management tool Sprintly . We covered how he built software at Digg, how that changed as he transitioned to SimpleGeo, what he‚Äôs learned about building and managing software teams, and why he chose Sprintly as his next project to focus on. Justin: Thanks for doing the interview. I‚Äôm really interested in A) how you guys build software at Sprint.ly , and B) how you came up with the idea. I‚Äôm assuming part of the reason is that you didn‚Äôt love the way you built stuff at previous companies, so you decided to start Sprint.ly. Is that a reasonable guess? Joe: Sort of. I‚Äôve always been proud of the way that both my teams and myself have built software. At SimpleGeo we had a phenomenal team, we had a phenomenal process in place. And as far as the actual building and distributing of software went‚Ä¶ the development cycle at Geo was very different than anywhere else I‚Äôve worked at since. We literally had one queue. Everybody was capable of doing everything. So we had senior engineers who said ‚ÄúI don‚Äôt really care if you were a dev ops person in your last company, you‚Äôre an engineer now and you‚Äôre going to code. I don‚Äôt really care if you didn‚Äôt write scripts as an engineer at your last company, you‚Äôre going to write them at this company.‚Äù¬†So we just had one queue that was literally a big board. That was the way we developed at Geo. I built Sprint.ly because is every company I worked at consistently had a problem communicating the software development process to the rest of the business. A lot of the tools in this space (I think largely by design) are very esoteric and are built in a way to obfuscate what‚Äôs going on inside the software development black box. I‚Äôm kind of a genetic freak on the development side. I have a business degree, not a computer science degree. So I‚Äôd often go into these product meetings where the business and software development comes together to talk about how things are going.¬†There would always be intense frustration on the business side. You had people saying ‚ÄúI have no idea what‚Äôs going on. I‚Äôve got $500,000 in an advertising and marketing budget that‚Äôs lined up on this release and you literally can‚Äôt tell me whether it‚Äôs going to be ready this quarter or next quarter?‚Äù So we built Sprint.ly, and have been trying really hard to create a tool that demystifies the software development process. It gives businesses a single place for both the business and software development teams to participate in the product development process. Justin: That makes a lot of sense. You mentioned at SimpleGeo, you guys had a queue system for managing software development. Can you talk a little more about that? How did you arrive at that process? How well did it work? What were some pitfalls? Joe: It works great. We had, as far as I can remember, one late release. 30 minutes late. And the only reason it was 30 minutes late was because we didn‚Äôt have a design asset. We built some pretty groundbreaking database technology while we were at SimpleGeo. I don‚Äôt remember any fights amongst development. There was no us versus them when it came to the business or operations. A lot of times, operations and development can be at odds with one another. My major takeaway from the SimpleGeo experience was the [task] queue we had on the big board. Everybody knew what everyone was working on at all times. We never had the BD guy never came up and said ‚Äúhey, what‚Äôs Malone working on?‚Äù It was on the big board. He walked past it every time he walked into his office. So I think that transparency works really well. Then the other thing that I think worked really well was this notion of calling everyone an engineer. I pushed very hard on the tech side to make this happen. You can have areas where you‚Äôre stronger than others, but at the end of the day we‚Äôre all responsible for this piece of technology. By calling everybody an engineer, instead of saying ‚Äúyou‚Äôre ops and you‚Äôre an engineer and you‚Äôre a frontend guy‚Äù, it really broke down barriers you normally see. On any given day at Sprint.ly you‚Äôll see a DevOps-ish person working with somebody that has a mapping backend, writing shell scripts.¬†Then, you‚Äôd see guys that normally were coding help some DevOps people work through some Python things they wanted to build or needed to patch or whatever. So those were the two things I took away as really being positive. One is that we need to get over this notion that as developers, we need to insulate ourselves from the rest of the business. We‚Äôre all adults and perfectly capable of understanding the business if you take a little bit of time to explain and give developers access to the data. And the other big takeaway is that really, everybody has to own product. I really don‚Äôt care if you‚Äôre writing JavaScript or writing Puppet scripts, we all have the same responsibility. I think this approach led to a really good culture. Like I said, there wasn‚Äôt a lot of infighting or problems on the tech side about who should own what. Justin: You mentioned engineering guys, devops guys, were all engineers. Is there any downside to that approach, where you have people that are more talented at one thing maybe spending their time on stuff they may not be as good at? Joe: You can probably make an argument for that, but I look at those downsides as being far outweighed by the benefits of building people up. One of the senior DevOps people at SimpleGeo is now a lead architect and senior engineer. He said by the time he left SimpleGeo he realized he liked the whole coding thing. It‚Äôs fun. And that wouldn‚Äôt have happened if we hadn‚Äôt encouraged everybody to code. The downside of pigeonholing people is what I call the buddy rule. We had a guy there, Schuyler Erle. He wrote mapping hacks before Google Maps existed. He literally works with the World Bank to do disaster mapping. He went to Haiti when they had that big earthquake. So he became an expert in mapping and geospatial technologies, right? And because Schuyler was coding, and because I forced him to work with the other engineers and stuff, he was exposed to technologies he otherwise wouldn‚Äôt have known about. In fact, in the conversations I‚Äôve had with him afterwards, he mentioned that he really learned how to build software correctly at SimpleGeo. I forced them to do unit tests, write management scripts, and all this other stuff. On top of that, if Schuyler had left the company towards the end, we would‚Äôve had the knowledge to continue. Now it would‚Äôve been a blow and it would‚Äôve sucked because Schuyler is probably one of the top five people in the world at what he does so it sucks to lose somebody like that. But because I forced people to work together in this structure and everybody had to have ownership of what they were doing, I think slightly less productivity from Schuyler was well worth it. We actually built up a team of experts with expertise in that area [mapping] as opposed to just having one person that did it all. Justin: That makes sense. So at Simple Geo, you guys had this queue system. Everyone was an engineer. Can you talk a bit about how you guys built software at Digg? What was that process like? Joe: Yeah, I was there for about two and a half years. When I started there were 7 engineers and 18 or 19 people. When I left there were 35 people in the tech department and probably close to 100 people in the company. When I started there, it was chaos. We had Bugzilla but nobody really used it. Most product tracking stuff was done in Excel spreadsheets that weren‚Äôt shared with the team. Most products were structured at a milestone level rather than at an implementation level. We had no coding standards. We weren‚Äôt using any frameworks. Everybody had their own styling. It was chaos. So we hacked on whatever we were told to hack on. We ended up getting a new VP of engineering and a new director of product, and it really brought what I would call traditional agile methodology into Digg. By the time I left, we had basically rewritten Digg on top of frameworks that myself and an application architect had put together. We had coding standards implemented, and we broke everybody up into teams. Depending on the team, there were anywhere from three to five people. We had an app team; they were responsible for the application layer at Digg. We had what we called an admin and data team, and basically what they did is they built internal tools and worked with Digg R&D to push out some of the cooler features we had, like Digg suggest and stuff like that. Their job was to take those harebrained experiments that were slapped together with glue and twigs and make a production-ready process. We had a backend infrastructure team that worked closely with ops. I was on that team. Then we had an API team. The API was a hugely successful API for its time. We had thousands of people that were working with it. Each of those teams had their own sprints, which were 4-week iterations at Digg. And we also had a Scrum where all the Scrum assets were put together and coordinated across all the different things that were going on. Our release process was to cut a major version into minor versions like 7.5, 7.6, and that would be an integration branch. We had QA and a build-and-release, a release person that would basically handle merging all of those sprints in and then shuttling that out. So at any given time we had probably two or three major versions of Digg in development at any given time. One of those is what most people would call stable, so it was out in production. It was a separate branch and whenever we needed to fix things we would either fix it in the branch and port it back to master or fix it in master and port it to the branch and deploy it from there. And then the other branches were usually one for each team, and consisted of whatever major feature they were working on. Justin: So you‚Äôve been doing Sprint.ly now for a few years. How do you guys build software now and how does it compare to when you started? Joe: So the software development process at Sprint.ly hasn‚Äôt changed as far as what gets built and how. Justin: How many developers do you have? Joe: Three, so we‚Äôre a real small team. I‚Äôve kept up with the queues. I really like how the queues work. What we do is we have a Someday list, which is stuff we‚Äôd like to do someday. Then we have a backlog, which is usually high priority live bugs, and things we‚Äôve all agreed we‚Äôre going to work on next. From there I like the developers to pick and choose. Personally, I like working on two or three things at a time because I tend to get bored with one thing. There‚Äôs a rough priority to the backlog, but if you want to skip one and do an easy ticket today because you went for a long run last night, that‚Äôs fine. I don‚Äôt really care. We‚Äôre pretty loosey-goosey on that. We don‚Äôt do sprints. We coordinate major milestones, but that‚Äôs usually for marketing purposes. It‚Äôs not really for the tech or anything. Justin: Do you coordinate them based on date or priority? How do you do that? Joe: It really depends. So we don‚Äôt really believe in dates. I‚Äôm a firm believer that you‚Äôre either date-driven or you‚Äôre feature-driven. Justin: I happen to agree. Joe: We‚Äôll always be feature-driven. It doesn‚Äôt matter if we release Sprint.ly 2.0 on September 1stor September 5th. That doesn‚Äôt really matter. So really the way that we develop is basically we develop in future branches, put them in pull requests and what we‚Äôll do is if it‚Äôs a major release and we want to do some press or write a blog post about it, we‚Äôll group them up into a staging branch basically. And from there, everything is automated: automated tests, frontend, backend. We have a build and deploy process. So every time something is merged into master or staging, in ten minutes, with the push of a button, you‚Äôre out on production. I have a part of the brain that is I don‚Äôt want to hear about your cool idea. Just send me your pull request. That‚Äôs where a lot of our development activity actually happens is in the pull requests. Justin: What tools do you guys use to manage all of this? Joe: Well, we of course use Sprint.ly. Sprint.ly is really our idea repository. That‚Äôs where we collaborate around thinking through ideas, posting mock-ups and wireframes, stubbing out the general requirements for different features, or whatever it is. Sprint.ly is very tightly integrated with Github. We use Github to store code and whatnot. As far as the build and deploy process, we use Jenkins for our CI server. We use Sauce Labs and Mocha Chai¬†for frontend tests. Everything is deployed on top of AWS and we use Fabric to glue everything together. Justin: Can you talk me through how you guys deal with errors when they crop up and your code review process? Joe: Sure. When errors pop up, we use a number of tools to get that data. That can be everything from an exception logger to Tracelytics. I can‚Äôt say enough good things about Tracelytics; it‚Äôs an amazing product. They‚Äôre called TraceView now. Justin: Do you guys use like New Relic or anything like that? Joe: Tracelytics is a competitor to New Relic. It‚Äôs in my opinion a superior product. It‚Äôs very well done. We‚Äôve been dabbling with another product called Caliper , and Caliper is effectively a New Relic or Tracelytics for frontend frameworks. We‚Äôre a very heavy backbone app. We have that, and usually what will happen is we‚Äôll get either a bug report from the customer or one of those systems will say something‚Äôs wrong. Our process depends greatly whether it‚Äôs a super edge case that‚Äôs, say, only affecting people running old versions of Opera. If so, probably not going to worry about that. If it‚Äôs a high priority big bug, basically what I‚Äôll do is create a ticket and send it to the people I think need to work on it. We will cut a quick branch and write a regression test first. We‚Äôre really big on doing test-driven development, so we‚Äôre always writing regression tests to fix a bug. If it‚Äôs a pants-on-fire thing we may not even do a pull request. At that time it‚Äôs pure firefighting. And then it goes out during a normal build deploy process. Justin: What does that deployment process look like? Roughly how often do you guys deploy? Joe: It really depends. Right now we‚Äôre kind of log jammed and have a bunch of pull requests with some pretty major refactoring stuff, so we‚Äôre only deploying a couple times a week. Otherwise, we‚Äôre deploying anywhere from once a day to six times a day. It really depends. The build and deploy process at Sprint.ly is 100% automated. You push a button to deploy. So the tool chain that we have, you use AWS with Chef and Fabric. So I can literally do ‚Äúmake app server‚Äù and 15 minutes later I have a fully functional, production-ready app server. For the build process, any commits to master is run through a full build of full back-end testing. After that‚Äôs done, we build a Debian package out of the code including all the migrations and everything. We then use a tool called RepoMan that was built by a colleague of mine at Digg. It‚Äôs a RESTful JSON API to Debian repositories. So Jenkins actually does an HTTP POST to our app repo that says hey, staging app repo, here‚Äôs a new package. Then the next build stuff is deployed at the staging. So everything‚Äôs fully automated up to that point, then once you check the staging,¬†there‚Äôs two Fabric commands. One is to promote the package from a staging repository into a production repository and the next one does an apt-get update, apt-get install to deploy it. Justin: So, last question, since you have so much going on, how do you guys prioritize different features and product feedback that you get from customers? Joe: So the way we prioritize customer feedback, right now anyway, is solely focused on churn. The way I decide what major feature to build next is I go into our exit surveys and I look through the ‚ÄúWhat could we have done to keep you?‚Äù answers. I look for themes. I put those in a spreadsheet, so each theme goes at the top of a column. I go through every single exit survey and put a 1 under each column that gets a message and then I roll those up. When I did that for version 1.0, 27% of people in our exit survey said that the UI degraded as you added more and more items and it became difficult to manage them all. So, we drilled down on that and majorly improved it. Justin: I see. So you guys basically have one major business metric you‚Äôre trying to improve, and then filter product feedback and features through that metric. Well that is pretty much all I have. Is there anything else you want to discuss? Joe: No. If anybody out there wants to try Sprint.ly, just let me know. I‚Äôm Joe@sprint.ly , happy to give you a demo. How Digg and Sprint.ly Build Software | Leanstack Blog - The official Leanstack blog says: October 8, 2013 at 4:08 pm [‚Ä¶] How Digg and Sprint.ly Build Software [‚Ä¶]", "date": "2013-09-13"},
{"website": "Airbrake", "title": "Open Source: Why Your Company Should Contribute and What You Should Expect to Get Back", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/open-source-why-your-company-should-contribute-and-what-you-should-expect-to-get-back-2", "abstract": "The concept of open source has allowed software development to evolve in very different ways than many other industries. It‚Äôs common practice for even the largest tech companies to regularly rely on open source software. Even Google relies on open source software to keep running, from using languages like Python to libraries like OpenSSL and OpenSSH. But it‚Äôs very easy to take help from the open source community without giving back. That‚Äôs a dangerous habit to get into, if only because a company can find itself relying heavily on an open source project that is no longer being maintained. But helping maintain the projects you use is just a starting point. There‚Äôs a value in dedicating some of your company‚Äôs resources to open source software development, beyond just making sure that you have the software you need, when you need it. Netflix has released many internal libraries and tools under an open source license, posting the code to GitHub for anyone to use. Part of the logic behind doing so is that the company has benefited from use open source software internally, but Netflix has some bigger goals in mind. There‚Äôs a clear benefit to Netflix if other companies working in the cloud (particularly on AWS) all belong to the same ecosystem, with the same expectations and tools. Vendors can offer better tools if they don‚Äôt constantly have to think about yet another exception. Netflix‚Äôs libraries are rapidly becoming industry standards, which lets the company have an outsized impact on how the cloud ecosystem evolves. Most developers actively want to avoid showing poorly written code to the world. Knowing that code will likely be open sourced gives developers an immediate incentive to write better code, as well as to document and test the code in question. But an open source project can have contributors outside of your own company ‚Äî developers who you might not otherwise be able to bring in on a project. Resque, created by GitHub and then released, grew dramatically , far beyond how GitHub could have driven the project. More than a hundred contributors have improved Resque and hundreds more developers created third-party plugins to extend what Resque is capable of. For a company without the resources to push a project to its full potential, releasing the code under an open source license is an opportunity to get the best possible end product. GitHub has seen direct results from their efforts, as Tom Preston-Werner points out : it‚Äôs provided great advertising, helped build the code faster, attract new talent, sort through prospective applicants, retain talent and improve the code at the heart of the matter. What if you knew that you could hire developers who are already familiar with your company‚Äôs workflow, including the internal tools you‚Äôve developed? Rackspace may be in precisely that position, as it open sources tools like Openstack , which the company built to better provide cloud computing infrastructure . Being active in open source gives your company other benefits as an employer: you‚Äôll be able to see how developers work with your code long before you have an opening, letting you recruit people who you know have the chops to work on your projects. A few minutes on GitHub can be enough to let you decide exactly who you want to hire and let you skip the technical interview entirely. Your company will also be more appealing to work for, at least for those developers who have a strong commitment to working on open source projects themselves. Contributing to open source is a good strategy for tech companies: it improves your own code base, expands the pool of developers you may eventually hire and even shows your company‚Äôs commitment to doing good things. You don‚Äôt have to start big: just sending patches back to the projects you rely on is a good place to start. The important thing is to actually make a contribution. Your company will reap the benefits.", "date": "2013-09-04"},
{"website": "Airbrake", "title": "No More Rails 2.3.x ‚Äì How Does This Impact Me?", "author": "Unknown", "link": "https://airbrake.io/blog/rails/no-more-rails-2-3-x-how-does-this-impact-me", "abstract": "I‚Äôm sure many of you have heard, but Ruby on Rails version 2.3.x is no longer supported by the core Rails development team. This change is going to have drastic consequences for the many organizations still using 2.3.x. Rails version 2.3.x will no longer receive security patches and maintenance updates. The decision to stop supporting 2.3.x comes not too long after two major security breaches that occurred earlier in January. These vulnerabilities allowed attackers to execute arbitrary code on practically every application run on Ruby on Rails, with the applications only needing to be connected to the Internet. Patrick McKenzie of Kalzumeus Software had an excellent writeup about the issue .¬†These security issues were caused by a vulnerability with a serialization format known as YAML, which is able to ‚Äòdeserialize‚Äô into arbitrary objects, which can result in the execution of arbitrary code. With the release of Rails 4, the core Rails team no longer see it necessary to support it with the better options available. If you have been affected by this change in any way, you can‚Äôt close your eyes and pray that everything will be OK. That will probably end poorly. Libraries will quickly become out of date, causing errors and incompatibilities with your current systems. You basically have three options: The best solution is to upgrade your applications to Rails 3 or 4. However, this can be a time consuming task. Plugins and gems used for 2.3.x are not always compatible with Rails 3, and they need to be upgraded manually or with a compatible fork. Applications which call private methods and deal with the Rails core will probably need to be rewritten. In addition, Rails 3 provides default HTML escaping, which helps prevent XSS attacks. Older applications that return HTML may need to be modified and marked as harmless. Provide your own support for 2.3.x. This option is only feasible for organizations with a great software development team that can dedicate a portion of their time to constantly address new security issues for Rails. This is made easier if you use an error-tracking tool (hint hint). Find and implement a commercial fork for Rails 2.3.x. A German company called Makandra has created such a fork, known as Rails LTS. This company supports 2.3.x in the same way that the Rails Core team used to, guaranteeing timely updates and the proper security patches when necessary. They also provide help with integrating Rails LTS into current systems. Rails LTS is free for the general community (with a patch delay of 10 days), about $195 per month for a startup license, $520 for a standard license, and $975 for an enterprise license. Without taking some countermeasures, the lack of support for Rails 2.3.x means that systems running it will soon be (or already are) vulnerable in highly critical areas. Make sure this isn‚Äôt you!", "date": "2013-09-04"},
{"website": "Airbrake", "title": "Extreme Programming for Extreme Programmers", "author": "Unknown", "link": "https://airbrake.io/blog/internet/extreme-programming-for-extreme-programmers", "abstract": "Many of our customers are interested in agile methodologies. Here‚Äôs a follow-on to our post about lean software development . Extreme programming (XP), a subgroup of the Agile programming methodology, emphasizes customer satisfaction by taking the voice of the consumer into account and improving overall quality. Like other processes within the Agile Development discipline, XP emphasizes short cycles of development and frequent software releases. Kent Beck, one of the key developers of Agile programming who has also co-written a book on extreme programming said ‚ÄúThe basic advantage of XP is that the whole process is visible and accountable. The developers will make concrete commitments about what they will accomplish, show concrete progress in the form of deployable software, and when a milestone is reached they will describe exactly what they did and how and why that differed from the plan. This allows business-oriented people to make their own business commitments with confidence, to take advantage of opportunities as they arise, and eliminate dead-ends quickly and cheaply.‚Äù The extreme programming methodology is designed to take the best aspects of traditional software development to extreme levels. When it comes to programming, it basically involves breaking up a coding project into small tasks that are simple enough to code , developing into a series of modules that need to be designed and created. This speeds up the software development cycle, lowers the error rate, and gives everyone involved a clear map of their collective progress. Some third-party programs, such as Airbrake , are offering their own error-catching and reducing services. So, what exactly makes Extreme programming so special? The Core Practices of Extreme Programming There are 12 practices, known as XpXtudes, organized into four general themes . Fine Scale Feedback ‚Äì Consists of the practices of Test Driven Development, the Planning Game, Whole Team, and Pair Programming. Test Driven Development refers to the constant testing of code as it is being written. The general principle is to write enough code to just fail a test, and then finish the code to pass the test. Next, remove duplicate processes within the code. The Planning Game consists of creating some emotional distance from the software development planning process by playing a game with it. It basically consists of creating pieces, called User Stories, which have their own value and cost. The goal is put the most total value into production at the lowest cost. Whole Team simply refers to getting as many developers working into one room as possible. Pair Programming refers to having two programmers work on the same program at once, on the same station. This lets them each be responsible for one aspect of the Extreme programming method ‚Äì one person works on the test, and the other can think about a program to pass the test. Continuous Processing (as opposed to batch) ‚Äì this consists of the principles of Continuous Integration, Design Improvement, and Small Releases. Continuous Integration means that whenever an individual developer improves the code, they send that improvement to the other people working on the project. Systems are designed to be able to quickly share code improvements between team members. Design Improvement refers to the continuous awareness that, at any time, the overall design of the project might be enhanced in some way. Small Releases maintain a quick coding cycle, in which each code module has only a small function. Shared Understanding ‚Äì within this category are Simple Design, System Metaphor, Collective Code Ownership, and Coding Standard. Simple Design means not coding anything that does not have business value. System Metaphor refers to creating a simple story to describe the architecture of a coding project and provide suitable labels. Collective Code Ownership is a perspective that the code being developed belongs to the entire project, rather than individual developers. Coding Standard means that people prefer to program in different ways, and a team needs to choose a standard way to code. This includes how to name things, whether or not to indent, and bracket locations. Programming Welfare ‚Äì this category contains the principle of Sustainable Pace. Sustainable Pace refers to giving programmers the time and space they need to work well. It means that productivity does not necessarily increase by increasing the number of hours worked per week, and it gives developers a chance to relax and actually have a life. A well-fed, well-rested programmer will work more efficiently with fewer errors than a tired programmer waiting to go home.", "date": "2013-08-27"},
{"website": "Airbrake", "title": "Lean Forward ‚Äì How Lean Software Development is Shaping Our Virtual World", "author": "Unknown", "link": "https://airbrake.io/blog/internet/lean-forward-how-lean-software-development-is-shaping-our-virtual-world", "abstract": "Lean software development is a movement dedicated to reducing errors and wasted time while maximizing education and efficiency. ¬†Its principles were originally used in IT and manufacturing, and it has since been adopted by the programming community. The guiding philosophy of lean development is a primary commitment to the value being created for the end user while intelligently conserving resources. ¬†It has large support among the Agile development community, which it has much in common with. Seven key principles compose the backbone of lean software development: waste elimination, encouraging learning, late decision-making, fast delivery, team empowerment, built-in integrity, and a vision of the big picture. Let‚Äôs go over these principles to see why lean programming is so popular today. Waste Elimination ‚Äì Waste should be seen as anything that fails to bring any additional value to the customer . ¬†This includes unnecessary code and functions and requirements that don‚Äôt make sense. ¬†It also means time, so software engineers should not be afraid to speak up when bureaucracy gets in the way of progress Encouraging Learning ‚Äì This may seem obvious, but there are often times during a project when certain people don‚Äôt know what they need to know, or the information they need isn‚Äôt available. There are several ways to help people understand their tasks ‚Äì comprehensive code reviews and documentation, creating a Wiki database, adequate commenting, training sessions, and group meetings. ¬†Pair programming is an interesting solution, in which two programmers team up at the same station and work on separate tasks. ¬†This is a good situation to help a less experienced programmer make progress by working with someone who knows what they are doing. Late Decision-Making ‚Äì This means deferring commitment for as long as possible, particularly when it comes to decisions that will be difficult or impossible to take back. It lets a programming team keep their options open for as long as possible , letting them think and gather information for as long as possible. ¬†Different options can be explored before deadlines come, and delaying the process like this makes sure that the appropriate product is deployed. ¬†It helps maintain flexibility within the code until decisions are finalized. Fast Delivery ‚Äì Despite this being a goal of every programmer (if you ask them about it) it is not always a reality. ¬†The fastest-moving companies are not always the most successful, but the most successful companies all move fast. ¬†A fast delivery also means that there is less time for managers and clients to change their minds. ¬†Software development can be as rapid as possible when the right team of people learn to communicate and are given the time and space they need to work efficiently. Team Empowerment ‚Äì A lean team should be motivated to do its best, and this means that managers need to respect their needs. ¬†Programmers should not be overloaded with tasks, and they should be able to establish their own reasonable workflow. ¬†Overall, the people who do the work should have a say in the decision making Built-In Integrity ‚Äì High-quality code should always be the goal. ¬†A few ways to ensure that bugs and error messages do not make it into the final cut are pair programming as mentioned above, continual test-driven development, creating small modules of code, and automating when possible. ¬†Products like Airbrake, a leading software tool for detecting errors in web and mobile apps, have taken this aspect of the lean philosophy to heart. ¬†This results in a product that is well-built and a pleasure to use. A Vision of the Big Picture ‚Äì Lean development teams need to be able to see their project as a whole system and not get caught up in individual parts. ¬†All goals and mini-goals need to be created with the entire concept of the project in mind. ¬†By focusing too much on something like an unreasonable goal from a customer, code can be written haphazardly and bugs creep in. These seven principles guide the software development process to be as efficient as possible while providing the maximum value to the customer. ¬†Nothing necessary is sacrificed ‚Äì instead, smart workflow design and the right attitude combine to produce high-quality results. Lean Forward ‚Äì How Lean Software Development is Shaping Our ‚Ä¶ | Alpha Channel says: August 4, 2013 at 1:36 am [‚Ä¶] Lean Forward ‚Äì How Lean Software Development is Shaping Our ‚Ä¶ [‚Ä¶] Extreme Programming for Extreme Programmers - Airbrake :: Airbrake says: August 27, 2013 at 6:56 pm [‚Ä¶] Many of our customers are interested in agile methodologies. Here‚Äôs a follow-on to our post about lean software development.¬† [‚Ä¶] Lean Software Development ‚Äì my Experience | Lean Software Development says: April 3, 2015 at 10:37 am [‚Ä¶] Lean Forward ‚Äì How Lean Software Development is Shaping Our Virtual World, https://airbrake.io/blog/internet/lean-forward-how-lean-software-development-is-shaping-our-virtual-&#8230 ; [‚Ä¶]", "date": "2013-07-31"},
{"website": "Airbrake", "title": "Production Monitoring and Continuous Delivery", "author": "Unknown", "link": "https://airbrake.io/blog/devops/production-monitoring-and-continuous-delivery", "abstract": "Two weeks ago we co-hosted a webinar with Assembla on continuous delivery, and the role of production monitoring in that process. Below are the slides for the webinar. If you have any questions, or want to see further material, email justin@airbrake.io or leave a question in the comments! July Pocket link collection with 27 links says: August 5, 2013 at 9:59 am [‚Ä¶] Production Monitoring and Continuous Delivery: Two weeks ago we co-hosted a webinar with Assembla¬†on continuous delivery, and the role of production monitoring in that process. Below are the slides for the webinar. If you have any questions, or want to see further material, email justin@airbrake.io or leave a question in the comments! ‚Äì by Justin Mares ‚Äì Tags: continuous delivery, monitoring ‚Äì http://blog.airbrake.io/devops/production-monitoring-and-continuous-delivery/ [‚Ä¶]", "date": "2013-06-03"},
{"website": "Airbrake", "title": "Airbrake Tips from Railsware", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/airbrake-tips-from", "abstract": "No software is complete without bugs and no Rails application is complete without proper exception tracking. In most cases we choose Airbrake to collect those exceptions for us.¬†Here‚Äôs a couple of tips to make Airbrake more useful. Here at the Playhem team we have multiple independent staging servers for testing multiple features simultaneously. If all the staging servers use the same Rails environment, Airbrake‚Äôs exception logging becomes messed up, because it categorises errors by Rails environments; it isn‚Äôt always clear as to which server and feature is the exception related to. We could use a separate Rails environment for each staging server, but since they are otherwise identical, there is a simpler solution. Airbrake has custom environment_name setting, which can be set manually to whatever you want. I chose to customize the environment name using server-specific configs and our wonderful multi-deploy tool, but you could also use the server name, or any environment variable. The best practice is to use a unique Airbrake environment_name for each server to avoid any confusion as to where did the exception happen. Another important benefit of using server-specific environment names is that the ‚Äúmark exceptions as resolved upon deploy‚Äù setting doesn‚Äôt make sense when the environment_name is not tied to the actual server. Capturing Javascript exceptions can prove to be useful over time to pinpoint browser-specific errors that the QA rounds have missed. Unfortunately, enabling Javascript error notification usually brings you an enormous number of errors (and a lot of them unfixable, such as when a user on a faulty connection gets a Script load error). These errors flood out Rails exceptions and make Airbrake tough to use, so most people turn Javascript error notification off and forget about it. Most, but not us! I added a separate js_api_key Airbrake configuration option that allows you to direct Javascript exceptions to a second Airbrake project. After that you can make use of the Airbrake error aggregation to see what exceptions are most common ‚Äî and then you can start fixing them. Have fun squashing those bugs out there!", "date": "2013-05-28"},
{"website": "Airbrake", "title": "How Does Environment Affect Developer Productivity?", "author": "Unknown", "link": "https://airbrake.io/blog/internet/how-does-environment-affect-developer-productivity", "abstract": "Increasing productivity is probably the thing you worry about the most, as a product manager. You have pressures from above, in the form of time and budget constraints, and, if you‚Äôre a youthful, optimistic startup, the ever-looming threat of everything just falling apart. Fun. There‚Äôs a lot of wisdom and a lot of conflicting Gospel Truth out there about how to make your developers the most productive. And it‚Äôs not easy to sort through when you only have one go at this.¬†Do you ascribe to the Google philosophy that everyone is striving to emulate? The wide open football fields of office space and chairs made out of rowboats and plants and free food and M&Ms and massage tables? Or do you agree with Joel Spolsky of Joel on Software (and his favorite book Peopleware ), in the belief that the best environment for programmers is a closed office and peace and quiet? The idea behind the Google format is that open space leads to open communication, and a freer, more organic flow of ideas and creativity. ‚ÄúWe believe that great, creative things are more likely to happen with the right company culture‚Äìand that doesn‚Äôt just mean lava lamps and rubber balls. There is an emphasis on team achievements and pride in individual accomplishments that contribute to our overall success,‚Äù says Google‚Äôs company page. But Joel Spolsky refers to this open-floor idea as ‚Äúfolk wisdom,‚Äù saying, ‚ÄúThere‚Äôs a strong culture in Silicon Valley that requires you to jam a lot of programmers into a big open space, despite a preponderance of evidence that private offices are far more productive.‚Äù He advocates for peace and quiet and closed doors for his developers, and ascribes the success of his company, Fog Creek Software, to this workplace philosophy. The Google formula goes back to Mel Conway‚Äôs seminal 1967 article ‚Äú How Do Committees Invent ‚Äù, in which he presented what later came to be known as Conway‚Äôs Law: ‚ÄúAny organization that designs a system will produce a design whose structure is a copy of the organization‚Äôs communication structure.‚Äù Google‚Äôs aim is a suite of products that are organic and seamlessly integrated with your daily life, so they‚Äôve created an organic workplace that‚Äôs intimately integrated with the daily lives of their employees. Find an organization structure that makes you feel good, and you will produce a product, a piece of software, that makes you feel good. That‚Äôs a philosophy that makes a lot of sense psychologically, and Google obviously has done well with it, so no wonder everyone is trying to copy that. But do the numbers back it up? Spolsky‚Äôs blog continuously affirms that they do not ( http://www.joelonsoftware.com/items/2005/10/16.html ). I think that, like most things, this requires balance. Conway is probably right, in that better communication leads to better forward progress towards a mutual goal.¬†Google is right in that an open, even-playing-field workplace without boundaries leads to an increased sense of mutual ownership over the project and the company as a whole. When you feel ownership over something, you want to make that thing great. Developers are creators, after all. Spolsky is also right, because, let‚Äôs face it: if your work is building software, you can‚Äôt possibly be productive if you‚Äôre listening to someone chat about the deep philosophical implications of open-source software while munching on free M&M‚Äôs. Yes, an appreciation for the greater impact of your work is important. But so is doing your work. Your job as a manager is to pay attention to everyone, to get inside their heads, understand how they work best, and facilitate that environment springing up in a way that seems organic. You can‚Äôt be too overbearing and mar the sense of control that your developers crave. You can‚Äôt be too laissez faire and risk people getting off-task. So, lighten up, read some books on psychology, talk to people about what they want, observe people‚Äôs behavior to figure out what they really need to be productive, and try things out until you find that sweet spot that works for your team.", "date": "2013-05-09"},
{"website": "Airbrake", "title": "Software Development and Pirates", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/software-development-and-pirates", "abstract": "This is a guest post from Nick Urban . Full bio at the bottom. One of the great discoveries of modern business is that even small decisions can be made empirically, by means of simple experiments. The act of starting a business is hence transformed from divination to navigation. Diviners who found water by ‚Äòsigns‚Äô may or may not have been frauds, but their methods were certainly not as robust as the compass and sextant. Similarly, web designers who change their sites based on gut feelings will not be as effective as those who use analytics to measure user behavior, and base their decisions on that. The recognition of the importance of empiricism in business is the basis for powerful practices such as A/B testing, and at a broader level for the whole philosophy of ‚Äúship early, ship often‚Äù. Both are ways of incorporating feedback into the decisionmaking process as soon and as frequently as possible. In deference to navigation, I call these techniques ‚Äúguiding stars‚Äù. Where guiding stars tell us if we‚Äôre going the right way, warning bells help us avoid dangerous obstacles. We say ‚Äúdue west‚Äù or ‚Äúrename column‚Äù and they cry ‚Äúhere be dragons!‚Äù. As developers, our most comprehensive warning bell is integration testing. It tells us whether our program works, almost as if someone were actually using it. If we‚Äôre very clever, we might use integration testing as part of a Behavior-Driven-Development process, which would help ensure not only that we arrive safely, but that we arrive at the right port. Integration testing encourages us to think at the level of use cases, and hence doubles as a guiding star. Unit testing, likewise, is mandatory for any sailor worth his salt. Unit testing checks the implementation details of a project and the edge cases that integration tests doesn‚Äôt reach. It makes us look at our interfaces as skeptical buyers rather than proud parents. From that perspective, it‚Äôs obvious where we tied a square knot and where a granny. It‚Äôs a sad fact, but the dragons of our lives do not always stay within the bounds marked for them on our painstakingly-drawn maps. Luckily, most ‚Äúdragons‚Äù are merely little drakes or pitiful whelps of a missing semicolon. The worst they do is cough sparks and rattle the china. Yet if we don‚Äôt notice them, they may still fire the ship. That makes the job of fire-watch an important one. Luckily for us, some clever tinkerers have invented a mechanical parrot that squawks when it smells smoke. It‚Äôs called an ‚Äúexception tracker‚Äù, and our hosts today are the purveyors of some of these fine talkers. I‚Äôve used Exceptional ‚Äòs tracker for several months, and their alerts have saved me on many occasions. Once you‚Äôve followed your guiding stars, heeded the warning bells, and fed your fire alarm, you‚Äôll be in pretty good shape. You‚Äôll know where you‚Äôre going and how to stay out of trouble. But if you‚Äôre still not sold, here‚Äôs a benefit you may not have thought about. From time to time, when you‚Äôre sailing the ocean of entrepreneurship, you‚Äôll get wind of a chest of doubloons buried in some nearby sandbar. All you have to do is sail over and dig it up. But what if there are pirates? What if you can‚Äôt make it to port? Or worse, what if there were tranquil seas and clear sailing, but you acted the coward and crept home when you could have been playing the Count of Monte Cristo? If the hatches are battened and your parrot‚Äôs been freshly oiled, then you‚Äôll likely have the confidence to seize that gold. And if there‚Äôs trouble, you‚Äôll be in good shape to handle it. As Seneca says, luck is the crossroads of preparation, opportunity, and havin‚Äô some powder in yer pistol. Build quality, feel confident, act boldly. That may not be the motto of the Queen‚Äôs Navy, but it works for me. Nick Urban is Chief Engineer at Bespoke Post , a philosope , and a baritone . Find him online at nickurban.com", "date": "2013-04-09"},
{"website": "Airbrake", "title": "The Definitive Collection of XKCD Comics for Programmers", "author": "Unknown", "link": "https://airbrake.io/blog/comics/best-programming-xkcd-comics", "abstract": "If you‚Äôre a geek (or a nerd) worth your salt, you‚Äôre definitely a fan of xkcd programming comics. The only legitimate reason for not liking it is jealousy that you can never be as clever as Randall Munroe, the genius behind xkcd. And even then, you know you secretly love it. And so, I present, for your reading enjoyment, the definitive collection of the best xkcd comics for programmers. Get Airbrake For Free It demonstrates how programming can be useful in everyday situations: And about how programming can cause problems in everyday life: It puts our work into a larger context: And plays anthropologist, exploring the complex issue of identity-formation in the culture of the programmer: And it tackles what we here at Airbrake care about the most: And, the best classic xkcd programming comic of all time: Here‚Äôs the rest of the catalog, in no particular order: X11 Workflow Wisdom of the Ancients Get Airbrake For Free Virus Venn Diagram Turtles Tech Support TCMP Tar Tags Supported Features Sharing Server Problem s/keyboard/leopard RTFM Permanence Old-Timers Perl Problems Password Strength Microsoft Manual Override Mac/PC ISO 8601 Identity Hotels Geohashing Game AIs Crowdsourcing Context Bot Binary Heart Get Airbrake For Free See also: Top 10 Programming Comics (Cartoons) Selected By StackOverflow Users", "date": "2013-03-11"},
{"website": "Airbrake", "title": "How Stripe Builds Software, with Greg Brockman", "author": "Unknown", "link": "https://airbrake.io/blog/devops/how-stripe-builds-software-an-interview-with-cto-greg-brockman", "abstract": "I talked with Greg Brockman , one of Stripe ‚Äòs founding engineers, about how they build software, team management, how to scale a development team and lots more. If you haven‚Äôt seen it, check out Greg‚Äôs presentation about how Stripe built one of Silicon Valley‚Äôs best engineering teams. Justin: How many developers does Stripe have? Greg: We have about 20 developers. Justin: When did you join the team? Greg: I‚Äôve been at Stripe for about two and a half years. I joined when we were about four people. Justin: How has the way that Stripe has developed software changed between the early days and now? Greg: Many things have actually remained similar. We try to hire people who are able to figure out what they should be working on, who can evaluate things from their own perspective. We make sure that people have enough of a global view to be able to make informed decisions about that. Some things have changed though. Now that we have more people, you just have to make sure that everyone is moving in the right direction, and communication becomes a lot harder. Having internal debates becomes significantly more difficult, but something that‚Äôs good to maintain. When Stripe only had four team members, one person would work on different pieces. There weren‚Äôt formal assignments. Each person would end up working on the piece he or she was most comfortable with. I ended up working mostly on infrastructure and Darragh worked mostly on financial operations, which involves actually moving money. John and Patrick worked on more of the product. As we hired our first few people, we started to realize that there were some scaling issues with everyone sitting down and having a technical debate at the same time. There‚Äôs an answer on Quora about how the Stripe API was designed. We started off with a JSON-RPC protocol. We didn‚Äôt use any of the features of REST: you‚Äôd just curl to one endpoint. We didn‚Äôt use status codes, we didn‚Äôt use headers for anything. It was really just JSON. After Ross and Saikat joined, they looked at this, and they argued that we should have a RESTful API. We spent three weeks going back and forth on this every day. There were two big camps, and a few additional opinions within those larger camps, so we would debate back and forth. Needless to say, we weren‚Äôt making any progress. In the end, we came up with an API that was better designed, so from that perspective it was a success, but it was also hugely painful to get there. Unfortunately, it was really inefficient because we spent a lot of time debating tiny details, rather than thinking about the overarching design. After that, we decided that we will never have technical debates with more than three people. Even four is really pushing it. The second important result was coming up with the idea that, for any particular piece of Stripe, there should be one person who is clearly responsible for it. However, it‚Äôs really easy to end up in a world where one person believes they own the system, which can block others who want to work with it. That‚Äôs not what we aim for. We want someone who is thinking through all of the issues, has a say on why those decisions are made, and is thinking about how the pieces fit together. For our API, we determined that Ross would be the point person. If you want to make a change to it, he‚Äôs the person to talk to and determine what changes make the most sense. It‚Äôs also Ross‚Äôs responsibility to take out the garbage: if there are bugs, he makes sure those are taken care of. As we started to grow, people began to come up with ideas for projects. For example, the management interface that we have right now was written as a result of this. Someone determined we weren‚Äôt executing it well and recruited a few others to work on the project. With the management interface, about four people took a month to rewrite the entire web interface from scratch and rearchitect it to be on top of the API instead of just talking to the database. As we grew, we found that it was better to have smaller teams form and work on self-contained projects. There are many other evolutions similar to that, where we needed to change our processes as we grew. This often occurred at distinct tiers, such as from 4 to 8 people, to 20 people and up to 40 people. Our launch in Canada is another example. It involved software engineering that touched a lot of different pieces of the organization. When working with US dollars and Canadian dollars, you need to build a lot of code to support that across different tools and projects. We needed to work with different back-ends, ensure that all the business relationships were in place, and that everything was integrated properly. This is another arena where having a point person is particularly important. The point person ensures that all of the pieces of the puzzle fit together for a very large project. Sheena, an engineer on our team, was the point person for Canada, so she was actually building a lot of the pieces and also keeping track of the work that others were contributing to the launch. This worked out really well for us because she wasn‚Äôt waiting for others to fix parts of her own project‚Äîshe would simply take care of it herself. We found that combining project management and engineering into a role held by one person cuts down on a lot of communication overhead. It‚Äôs always the case that the person who understands exactly what we‚Äôre trying to build is someone who also understands all of the technical details of how exactly it‚Äôs built. Justin: Does Sheena just say, ‚ÄúI want to own this project,‚Äù and she gets to choose it?¬† How does that whole assignment process work? Greg: Much of our project management is organic, in that we know that we want to build something, and usually, someone steps up to the plate and wants to run it. We‚Äôve never really had an issue where there were multiple people who really wanted to manage a project or, conversely, that there was no one who wanted to do it. Usually, it just works out. Justin: How do you coordinate that at the level of 40 people? Greg: It‚Äôs a tough problem. I don‚Äôt think we‚Äôve completely solved it yet. I think that a lot of it tends to come from the fact that we all come up with the direction we want to go in. Every two weeks, we sit down and have an all-hands meeting. The most useful piece of all-hands is not the actual meeting, but more that we have to think about what we have been doing and how it fits into the bigger picture of where Stripe is going. There is usually some time for reflection there just to discern what our goals are and where we‚Äôre going. That brings us onto the same page. The details of what we do and how we do it generally involve some discussion. After the discussion, a point person typically emerges. Justin: What if two people want to own the same project? Does that ever occur? Greg: That hasn‚Äôt happened yet. I can‚Äôt think of a single incident where we‚Äôve had that kind of conflict. I think our team tends to be pretty good about this. There‚Äôs also an infinite list of things that we want to do ‚Äì there isn‚Äôt one glamorous project that everyone is vying for. A lot of that actually comes down to making sure people have the right working relationships. We spend a lot of time thinking about building the right culture and making sure that people know each other really well, even at the level of just having good social events. I don‚Äôt think that we have as many as we‚Äôd like to, in that people really like each other and they would like to spend even more time together than they do. I think that it‚Äôs amazing how much the actual work that you produce changes when you really know the people that you‚Äôre working with, and you really like interacting with them. We made a bet that hiring people you want to be around would pay off. It is something that has really contributed to being able to scale the workflow we have. Justin: Can you talk a little bit about some of the tools that you use to manage everything going on in the organization? Greg: Different teams at Stripe tend to track their work differently. We use a couple of SaaS services. We use GitHub and Asana pretty heavily. Asana is really useful for things that are not code, and some code tasks even end up there. For example, infrastructure stuff tends to end up in Asana partially because it‚Äôs larger than any one repo. E-mail is very heavily used (see my blog post from a few weeks ago), and we‚Äôve built some tools on top of the Google APIs in order to help manage a heavy flow of email. We use UserVoice for ticket tracking, and we build a lot of tools for grabbing data from our internal management interface and correlating it to tickets in UserVoice. This enables us to correlate a lot of different tickets and issues and track data across various internal and external systems. Justin: So that leads me to another point. Right now, how do you work with errors or problems that you see from UserVoice? How do those get assigned and fixed? Greg: It depends on the issue. Most of the things that come out of that are product issues. We‚Äôre still actively experimenting and trying different things. For example, each week, someone from the support team will collect the most important issues from the week, summarize those and forward them on to the rest of the team. It‚Äôs useful for these bigger systemic issues that aren‚Äôt really a bug, per se, but can help cut down the number of inquiries about a particular feature or how we do our messaging. For more immediate issues, like bugs, we‚Äôll file them on GitHub, and each week the people working on product go through those, triage them and respond. For potential security issues, we specifically put a hard guarantee of a response within 24 hours. For system infrastructure, those are things that you can‚Äôt just put on the backburner, so we respond to them in real time. Justin: You brought up the concept of teams. Do you mind talking a little bit more about that? Greg: Our internal team structure evolved organically, like many things at Stripe, where we started out with people who worked on different projects. For example, I would be working on infrastructure, someone else would be working on product, and an issue that was in the middle of the two would often fall through the cracks. Often, I ended up working on many of these but they piled up and became too much for any one person to deal with. At that point, we thought about how we were going to evolve because the status quo wasn‚Äôt working any longer. I think that that was actually a success of the system. We often do unscalable things for as long as possible and then figure out how to fix them later. The abstraction we came up with is to have a concept of teams. We now have a systems team, a product team and a financial operations team. Each of these serves as buckets for work. So when an incoming task enters the system, it‚Äôs picked up by one of these teams and we don‚Äôt really end up with things that fall through the cracks anymore. It‚Äôs important to make sure that these teams are very dynamic and that people are able to move around. Preserving that ability is tough and, in practice, people end up moving but not nearly as frequently as we‚Äôd like. We‚Äôve been thinking about playing around with different models in order to make sure that people do end up moving. Justin: So how often do you guys deploy, and do you have any code review type practices? Greg: We have continuous integration. We don‚Äôt have continuous deployment, though we‚Äôd like to, and our test suite is a pretty good state these days. I think we‚Äôd be ready for that; it‚Äôs just a tool issue at this point. We deploy a number of times a day. I don‚Äôt have the exact figure, but usually people just commit code and end up deploying it. The workflow for code review depends on the patch. For small issues, you usually just write your code, you deploy it, and then someone will typically look at it post-deploy. We found that‚Äôs a useful mechanism for making sure people are familiar with all the code going in without slowing down development. For bigger issues, people will usually open a pull request on GitHub and pull in reviews explicitly. We leave that to the discretion of the person writing the code. The person can determine how comfortable they are with their code versus getting opinions and feedback from others. There is a body of code, which is just very small stuff that doesn‚Äôt get reviewed, and again, that‚Äôs just left up to the discretion of the person who‚Äôs committing. Justin: Do you guys do anything with Scrum or Kanban or anything like that? Greg: We don‚Äôt do any formal development methodologies. I think methodologies are useful as tools rather than ends in themselves . Usually, when people are working on smaller projects, they come up with whatever workflow works best for them. As an example, I‚Äôm currently working on a project with one or two other people. We physically moved our desks closer together and we passively communicate with each other throughout the day. Justin: Since you work in these teams and have all these different things going on, how do you guys prioritize different features and product feedback from customers? Greg: That‚Äôs usually handled on a per-team basis. For larger items, like what project we should be working on, we handle that at the highest levels. But for things that can be bucketed into a single team, that‚Äôs just handled by the people within that team. Typically, there‚Äôs one person who is keeping track of all tasks within the team, and that person usually helps with the prioritization. For example, Systems tends to meet once per month, and Evan keeps track of a lot of the bigger issues that are going on. We sit down and think about what we want to get done this month and each person works on the piece they decided to take on. For Product, again, there‚Äôs that weekly meeting where bugs are triaged and decisions are made on what our priorities are. Again, it‚Äôs decisions by people who are directly building. Justin: Is most of your time spent managing now or do you go back and forth? Greg: No, I think what I do really depends on the day. Over the past 24 hours, I spent probably 80% of my time coding, and I end up getting involved in a lot of different things. One aspect that I really like about what we do here is that I also work on things that aren‚Äôt just code. There are a lot of different pieces of the business that people end up working on. I do a lot of recruiting, watch for how things are done on various teams, and try and figure out how we can do better. Thanks Greg for a great interview! If you enjoyed it, send Greg a tweet ! Also, if you‚Äôre interested in building better software, sign up for a free trial of Airbrake‚Äôs exception tracker . 053 JSJ Software Team Dynamics says: March 29, 2013 at 4:40 pm [‚Ä¶] How Stripe Builds Software, with Greg Brockman [‚Ä¶] Issue 54 ‚Äì We Are Made of Starstuff | TLN says: July 21, 2013 at 4:56 pm [‚Ä¶] How Stripe Builds Software, with Greg Brockman I always love hearing about products that I actually like to use. And Stripe is special because they have some of the best API documentation around. Based on this interview, it sounds like a big part of that is because as engineers, they are their own customers. Not sure all of the practices would extend well to a customer base less like the employees. [‚Ä¶] –ò—é–ª—å—Å–∫–∞—è –ª–µ–Ω—Ç–∞: –ª—É—á—à–µ–µ –∑–∞ –º–µ—Å—è—Ü says: August 1, 2013 at 11:04 pm [‚Ä¶] ‚Ä¢¬†Greg Brockman, –≤–µ–¥—É—â–∏–π –∏–Ω–∂–µ–Ω–µ—Ä –≤ Stripe, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ —Ç–æ–º, –∫–∞–∫ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è. [‚Ä¶] Window 7 Tech | How Stripe Builds Software, with Greg Brockman | Airbrake says: October 7, 2013 at 1:51 am [‚Ä¶] View original post here: How Stripe Builds Software, with Greg Brockman | Airbrake [‚Ä¶] What the Non-Technical Need to Know About Tech | Justin Mares says: February 3, 2015 at 1:06 am [‚Ä¶] goes smoothly and is consistent.¬†To get a better understanding of this process, check out an interview I did with a lead engineer at Stripe¬†and another with¬†Digg‚Äôs former lead architect, Joe [‚Ä¶]", "date": "2013-03-07"},
{"website": "Airbrake", "title": "404 : A Coming of Age", "author": "Unknown", "link": "https://airbrake.io/blog/internet/popular-404-pages", "abstract": "Like the Internet itself, 404 pages are kind of in the high school of their existence. Just hear me out. The crusty old 404s of our youth are slowly being replaced by unique error messages custom-built by each website. They‚Äôre not just about telling you something‚Äôs wrong anymore. Interacting with a website has become a much more holistic experience. They‚Äôve grown up past the basic functionality of an error page into something with personality and a sense of identity. And it‚Äôs time to recognize the accomplishment of coming of age. Like high school seniors, some are more mature than others. Most Profane goes to South Park: On the other hand, facebook and Yahoo! are customized but pretty straightforward or ¬†even boring. I guess when even /404 links to something, and you‚Äôre assured of a billion users, a cute error page is not your top priority. Most Likely to Succeed goes to Facebook. Because, like, they already have: And then there are the un-cute error pages that make you worry. The idea that Google could not find something is a little odd, if you think about it too much (or reassuring, depending on how paranoid you are). And so, Most Understated goes to Google: Some have developed maybe a little too much personality, to make up for shortcomings. The Tumbeasts of Tumblr are, some misguided people might argue, overkill. But, it adds entertainment value to effectively diffuse the disgruntledness at Tumblr crashing all the time. Most Popular goes to Tumblr, hands down: [Tumblr appears to have changed their error page, so this is stolen from google images] Some are truly unique, and deliver just as much value as the page you were looking for. I would definitely try to get to an error page if I knew it was always going to be this awesome. Most Entertaining goes to Home Star Runner [click on the image for the full effect]: Many people come of age philosophically in high school, and apparently some 404 pages have, too. Smartest : And then there are those who just refuse to be adults in the way their teachers and principals want them too, and rub it in your face all the time, but you can‚Äôt really hate them for it, because secretly you want to be them, or at least be near them: Most Unapologetically Badass goes to the Rolling Stones: Some might say that these funny error pages are just cute gimmicks. But is that all it is? A creative page not found adds to the overall impression of the site, of the company. In the past, you‚Äôd pull back the curtain to find the wizard running the machine and discover that actually, this website isn‚Äôt as intuitive and simple as it‚Äôs trying to make you believe it is. But now, you find the same goofy, good-natured site you‚Äôve come to trust, going ‚Äúaw shucks‚Äù and apologizing cutely. The website is a friend, a person you can forgive, not a service that only fills a small niche in your wide array of needs. In a world where social media is king, even websites are getting social. If you build a site that‚Äôs easy to use and understand in all ways, more people are more likely to come back to it, to use it on a regular basis, to incorporate it into their daily lives.", "date": "2013-02-19"},
{"website": "Airbrake", "title": "Django Error Notifier with Airbrake", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/django-error-notifier", "abstract": "This week, one of our newer customers (the guys behind Forge ) sent in some feedback about how they were loving the Django-Airbrake project for getting Airbrake to play nicely with Django. The project was written by Digg‚Äôs former lead architect, Joe Stump , who‚Äôs now doing other cool things with his startup Sprint.ly .¬†One of the perks of being a part of a developer tools company is getting to see the all the cool things our users are working on. Sprintly definitely qualifies here. We at Airbrake actually have a distributed team ourselves, with team members in Portland, San Francisco, Las Vegas, Italy, Poland and Spain. Keeping tabs on what everyone is working on (and pulling such workflows together in one place) can definitely be a challenge, especially as the team keeps growing. Many of the tools out there are focused on coordinating developer activities, and spend less time focusing on coordinating the activities of other folks in the company: those in marketing, sales and support. What‚Äôs cool about Sprintly is how they specifically focus on bringing other members of a company into the software development process. As they say in their Non-Blocking Development blog post, competing in this rapidly iterative software environment means bringing principles of agile development to all aspects of the team: It also means we‚Äôll need to take the notion of cross-functional teams to the extreme. Salespeople, business development, marketing, and PR will need to be more closely embedded into the software development process. It means us software developers will need to learn a lot more about how the business functions and how software can enable the business to operate more effectively. The team over there has a cool vision that we were happy to come across this week. We‚Äôre thankful for the Django-Airbrake notifier and wish the guys at Sprintly the best of luck!", "date": "2013-02-15"},
{"website": "Airbrake", "title": "Exploring Everyday Things with R and Ruby.", "author": "Unknown", "link": "https://airbrake.io/blog/software-development/exploring-everything", "abstract": "This is an invited guest post from Sau Sheong Chang. After meeting Sau we fell in love with his creative love of Ruby and R. We have an exclusive preview of his new book, Exploring Everyday Things with R and Ruby: Learning About Everyday Things [Paperback]. The heart rate, or the rate at which your heart beats, is one of the measurements you‚Äôve probably heard most about in relation to exercise. It‚Äôs also often a good indication of your health, because a heart rate that is too high or low couldÔøºindicate an underlying health issue. The heart rate is usually measured in beats per minute (bpm) and varies from 40 to 220 bpm. An average healthy person at rest has a heart rate of 60‚Äì90 bpm, while conditioned atheletes have a resting heart rate of 40‚Äì 60 bpm. A popular and fast way to effectively get the heart rate is pulse oximetry. A pulse oximeter is a device placed on a thin part of a person‚Äôs body, often a fingertip or earlobe. Light of different wavelengths (usually red and infrared) is then passed through that part of the body to a photodetector. The oximeter works by measuring the amounts of red and infrared light absorbed by the hemoglobin and oxyhemoglobin in the blood to determine how oxygenated the blood is. Because this absorption happens in pulses as the heart pumps oxygenated blood throughout the body, the heart rate can also be determined. We are not going to build an oximeter, but in this post we‚Äôll use the same concepts used in oximetry to determine the heart rate. We will record a video as we pass light through our finger for a short duration of time. With each beat of the heart, more or less blood flows through our body, including our finger. The blood flowing through our finger will block different amounts of the light accordingly. If we calculate the light intensity of each frame of the video we captured, we can chart the amount of blood flowing through our finger at different points in time, therefore getting the heart rate. Creating a homemade oximeter is really simple. You can use any of the following techniques, or even try your own methods. It doesn‚Äôt really matter, as long as you can capture the video. Record for about 30 seconds. (Recording for a longer time can be more accurate, but not significantly so.) Place your finger directly on your computer‚Äôs webcam (I used the iSight on my Mac). Shine a small light (penlight or table lamp; it doesn‚Äôt matter much) through your finger. Then use any video recording software to record what‚Äôs on the web¬≠ cam (I used QuickTime video recording). Place your finger directly on your phone camera. Turn on the flash or use a small light and shine it through your finger. Then use your phone‚Äôs video recording software to record what‚Äôs on the phone camera. This is slightly harder because the camera lens is normally larger than your finger. The parts that aren‚Äôt covered don‚Äôt really matter, but you need to position your finger so that the image captured is consistent throughout your recording. A trick is to use a lamp as the background, so you can have the light shining through your finger and maintain a consistent background at the same time. In the following example, I used the phone camera method with my iPhone. That‚Äôs the easiest for me, because the flash on the phone is very effective. If you did things right, you‚Äôll end up with a video filled with a red blotch that‚Äôs your finger. Assuming that you have a nice video file now (it doesn‚Äôt really matter what format it is in; you‚Äôll see why soon), let‚Äôs dig in a bit deeper to see how we can extract infor¬≠ mation from it. For the sake of convenience, I‚Äôll assume the file is called heart beat.mov. Next we‚Äôll be using FFmpeg, a popular free video library and utility, to convert the video into a series of individual image files. Let‚Äôs take a look at some Ruby code. It doesn‚Äôt look complicated, does it? The most complex part you‚Äôll probably have to tackle is installing the necessary Ruby libraries. In the case of both RMagick and RVideo, described next, you need native developer tools support in order to compile the native components of the gem for your platform. We start off the code by inspecting the video and getting some attributes from it. These will be useful later on in the code. Specifically, we will need the number of frames per second, the duration of the video, and the height and width of the video. You can obtain these through RVideo, but if you didn‚Äôt succeed in getting it installed, you can still find the information by simply opening up the video with any player and viewing its properties. Next, we use the system method to issue a command to the underlying shell, and return either true or false depending on whether it succeeds or not: This runs ffmpeg, taking in the input file heartbeat.mov and converting it frame by frame into a set of images ordered by number. This is the reason why the video format is unimportant. As long as FFmpeg has the correct library to support the codecs, it will convert the video file to a series of PNG image files, numbered sequentially. In this example, we specify that there are three digits to this series of numbers. How do we know this? In my case, I have a 30-second video with a frame rate of 30 frames per second, so the number of still frames that will be created by FFmpeg is 30√ó30, or 900 frames. Slightly more frames could be created‚Äîsome video players round off the duration‚Äîbut the total would not be more than 999 frames. If the command runs successfully, we will get a set of frames in the frames folder, each named framennn.png, where nnn runs from 001 to 900 or so. Next, we create a CSV file to store the data and enter the column names, which are the frame number and the average frame intensity: Then, for every frame image, we create the RMagick Image object that represents that frame and extract the red channel (the file uses the RGB colorspace): We iterate through each pixel in the red channel and add up their intensities, then divide the sum of pixel intensities by the total number of pixels: This is the value we consider to be the average frame intensity. Finally, we store the frame number and intensity in the CSV file. Once we have done this, we will end up with a data file with two columns. The first is the frame number, and the second is the corresponding frame‚Äôs average intensity. Generating the heartbeat waveform is trivial, so we‚Äôll combine both creating the waveform and calculating the heart rate into a single R script. All it takes to generate the waveform is a single line that calls qplot with the frame and the intensity and uses the line geom. As you can see from the chart, the light intensity changes over time. Each pulse corresponds with a heartbeat. To find the heart rate, we need to find the number of frames between two peaks of the wave. We know that there are 30 frames in one second. Once we know the number of frames between the two peaks, we‚Äôll know how much time it takes to go from peak to peak, and therefore can calculate the number of beats per minute. To calculate the distance from peak to peak, we need to first determine where the peaks are in the chart. For this, we will be using an R package that was originally designed to process protein mass spectrometry data, found in the Bioconductor li¬≠ brary. The Bioconductor library is a free/open source project that provides tools for analyzing genomic data. It‚Äôs based primarily on R, and most of the Bioconductor components are R packages. The package we will be using is called PROcess. Once we include the library in our script, we can start using the peaks() function, which, true to its name, determines which values are peaks in data. The input parameter to the peaks() function is the intensity data and a span value. This span value determines how many of its neighboring values it must exceed before it can be considered a peak. This is useful to filter off noise, though not perfectly. ÔøºÔøºÔøº The returned result is a logical vector that is the same length as the data. This means we have a vector of TRUEs and FALSEs, where the TRUEs indicate a peak: While this vector is informative, it‚Äôs not really the answer we want, so we pass it through the which() function, and it returns a vector of the indices where the element is TRUE: As before, we want to find the distance between the two peaks, so we take two con¬≠ secutive elements and subtract the first from the second. This gives us a new vector that contains the differences: The final two steps are the same as in the previous section. First, we find the average distance using the mean() function. Then, from that, we know that there are 23 frames between two peaks, meaning each heartbeat takes 23 frames or 23/30 seconds (since each second has 30 frames). From that, we calculate that the heart rate is 78 bpm. If you enjoyed this blog post we recommend picking up Exploring Everyday Things with R and Ruby: Learning About Everyday Things . Exploring Everyday Things with R and Ruby. ¬´ The Blog of Anthony Diaz says: August 1, 2012 at 2:25 am [‚Ä¶] http://blog.airbrake.io/guest-post/exploring-everything/ Share this:Like this:LikeBe the first to like this. [‚Ä¶] A Mega Ruby News and Release Roundup for July 2012 in 97 Links says: August 3, 2012 at 1:06 pm [‚Ä¶] Getting Your Heart Rate Using R and Ruby A fun post looking at marrying up R and Ruby to tell your heart rate from a small bit of video. [‚Ä¶] State of Data #113 ¬´ Dr Data's Blog says: August 25, 2012 at 10:59 am [‚Ä¶] Measuring your Heart Rate using R and Ruby [‚Ä¶] Wednesday Nerd Fun: Oximetry with Ruby and R | You Study Politics, Right? says: September 5, 2012 at 2:39 pm [‚Ä¶] here. Share this:EmailTwitterMoreFacebookPrintLike this:LikeBe the first to like [‚Ä¶] A year of the Bastards Book: 140,000 unique visitors and 470,000 pageviews | Dan Nguyen's blog says: December 3, 2012 at 2:31 pm [‚Ä¶] Other resources: Who knows when I‚Äôll actually finish. In the meantime, a lot of great programming resources have come out this past year, too many to list so I‚Äôll just point out the Ruby ones. Free resources include Zed Shaw‚Äôs Ruby version of his Learn to Code the Hard Way and Codecademy‚Äôs Ruby track. Sau Sheong Chang‚Äôs Exploring Everyday Things with R and Ruby is one of my favorite books I‚Äôve bought this year and it follows a philosophy similar to mine: use code to do creative, real-world problem solving. [‚Ä¶]", "date": "2012-07-31"},
{"website": "Airbrake", "title": "Sticker Mule", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/sticker-mule", "abstract": "We love sticker mule, but while trying to order some stickers I encountered the default error page. I sent them a quick tweet, and a few weeks later we saw them pop up in the app. We‚Äôre really excited to help support Sticker mule ¬†and we HIGHLY recommend using their service. We‚Äôve got a bunch of die-cut stickers, they are both kick-ass and well priced with a fast turn around time. @ airbrakeapp thanks! just created an account ‚Äî Sticker Mule (@stickermule) May 17, 2012 What does your App do? We make it fast & easy to order custom stickers. Setup. Environment, Language, Tools, Etc. Rails 3.1 MySQL Spree (eCommerce platform) What do you like about Airbrake? Prior to Airbrake, we fixed errors based on complaints either from customers or our customer service rep. As a result, we did not have a good feel for the frequency of errors and how they were affecting customer satisfaction and sales. After sending a month fixing the most common errors our conversion rate seems to have permanently improved ny 3% How long have you been using Airbrake? 2 Months. How do you normally deal with Airbrake Exception reports? We focus fixing on the most common errors and errors that affect key parts of our user experience. Favorite Music to Hack to. It‚Äôs odd, but I havent listened to much lately. Anything Else? Get a sneak peek at our forthcoming sticker gallery here: http://www.stickermule.com/gallery It‚Äôs not officially done yet, but we thought it‚Äôd be fun to create a way for customers to show off their stickers and get a little exposure. So what are you waiting for.. your app needs stickers üòâ https://www.stickermule.com/signup", "date": "2012-07-10"},
{"website": "Airbrake", "title": "Wheelmap", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/wheelmap", "abstract": "Wheelmap is the tenth Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series! What does your App do? It shows wheelchair accessible places and lets users tag locations as wheelchair accessible. Then it sends the data off to openstreetmap.org , which is the Wikipedia for geodata. Setup. Environment, Language, Tools, Etc. What do you like about Airbrake? It shows my bugs, groups them, and lets me trace errors. How long have you been using Airbrake? 4 years. How do you normally deal with Airbrake Exception reports? Long ago, I was using Exception Notifier‚Ä¶til I found Hoptoad. üôÇ What could Airbrake do better? Don‚Äôt know if it works, but js bug tracking is a pain. Error is anonymous(){} line 1 does not help, but I reckon it is IE‚Äôs fault. Favorite Music to Hack to. Reggae, man. Reggae. Anything Else? Follow @chris_can_do Thank you, Wheelmap. We love it when technology meets community!", "date": "2012-06-27"},
{"website": "Airbrake", "title": "Causes", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/causes", "abstract": "We welcome Causes as the ninth Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What does your App do? We‚Äôre a platform for online activism, from raising awareness on issues to helping nonprofits raise money. We were a Facebook Platform launch partner and have 180 million users and have helped raise over 41 million dollars for nonprofits. Setup. Environment, Language, Tools, Etc. What do you like about Airbrake? Airbrake is such an immediate value add. Just aggregating and counting exceptions provide immense value right out of the gates. How long have you been using Airbrake? Since it was Hoptoad. How do you normally deal with Airbrake Exception reports? After risky deploys, we check the dashboard to see if there are any exceptions that look suspicious. All the engineers get email reports for the exceptions and have different Gmail filters set up to their likings. What could Airbrake do better? At one point we were getting throttled ‚Äî not sure if that‚Äôs still an issue. Favorite Music to Hack to. Dubstep had been an office favorite, but that might be a little behind the times right now. Anything Else? Thank you Causes, and keep doing what you‚Äôre doing!", "date": "2012-06-18"},
{"website": "Airbrake", "title": "NYC Airbrake Cribs. Kickstarter", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/nyc-airbrake-cribs-kickstarter", "abstract": "For the¬†second¬†in our Airbrake Cribs, we were lucky enough to get a tour of the Kickstarter office thanks to Lance @cainlevy . ¬†Kickstarter has been using Airbrake since 2010, and have¬†slowly¬†taken over this East Village office¬†building¬†as Kickstarter grew. Have a cool office? We would love to come check it out and feature it on Airbrake Cribs. E-mail ben@airbrake.io for more details. Airbrake in Seattle. Cornhole with TaskRabbit. - Airbrake :: Airbrake says: July 12, 2012 at 4:36 am [‚Ä¶] @benarent will be representing Airbrake, and I‚Äôm looking forward to being back in Seattle and meeting some of our awesome Pacific Northwest Airbrakers. I will be hitting up your office, and love checking out of office spaces. [‚Ä¶] Win a ticket to eurucamp! - Airbrake :: Airbrake says: August 9, 2012 at 7:23 pm [‚Ä¶] the trend of great technology offices we are asking people to take a photo of them in there own habitat and tweet or instagram [‚Ä¶] URL says: February 15, 2021 at 3:50 am ‚Ä¶ [Trackback] [‚Ä¶] Read More: airbrake.io/blog/awesome-airbrakers/nyc-airbrake-cribs-kickstarter [‚Ä¶]", "date": "2012-06-15"},
{"website": "Airbrake", "title": "Krakow & Railsberry | Airbrake Report", "author": "Unknown", "link": "https://airbrake.io/blog/report/krakow-railsberry-airbrake-report", "abstract": "After leaving San Francisco at 9pm, I finally¬†arrived¬†in Krakow at 11pm the next day. ¬†This was my first trip to Poland, and I was excited to meet the people and take¬†advantage¬†of the strong dollar vs¬†Zloty (the local currency). A traditional Polish Breakfast Cheese, Ham, Cucumber, Bread and Fried eggs. This was an excellent way to start a day in Krakow. On my first day, I visited a few Airbrake customers; using the wonders of Intercom , I found 25 users, and after morning coffee I was chilling in their offices. Afterwards I made it to the Railsberry hackathon. Railsberry is ‚Äòa sweet European Rails Conference‚Äô in Krakow, Poland. ¬†It is put on by the crazy kids at Applicake and they have a passion for unicorns, rainbows, love and rails. It‚Äôs a two day conference with an¬†eclectic¬†range of talks. ¬†Talks ranged from crowd funding, ruby project stats, coffeescript, NoSQL databases, and Enterprise SaaS to being a VIM ninja! ¬†All talks were recorded and will be posted online. ¬† My personal favorites were Eric Redmond‚Äôs NoSQL talk (as we switch to Riak) , Linda Liuka‚Äôs ‚ÄòRails Girls‚Äô talk for reminding¬†everyone¬†how awesome rails programming is, and Zach‚Äôs insight into rails stats . There were a few awesome moments, such as 200 ballons going in the air , a 7ft unicorn, and some¬†hilarious¬†lighting talks. ¬†I‚Äôm going to highlight all the awesomeness in another blog post, with 8 tips to throwing an exceptional conference. The¬†chill out¬†room was much¬†appreciated. I wasn‚Äôt expecting such great weather‚Ä¶ but we saw 22degree heat. The art of conversation is still alive as we share ¬†best app stories. @elamadej Railsberry ring leader, myself and @PHenriettaK of RailsGirls. One of the uber hip cafes in the Old Jewish neighbourhood. For the hipness, I spotted very few hipsters. Someone put a¬†sausage¬†in my soup; it was delicious. @EmiliaMaj + [gh]mislav Extras . Metal cutlery and glass bottles with Lufthansa! If you‚Äôre flying through San Francisco Airport, I highly recommend checking out the Moto Bellissima exhibit. This above motorcycle is 50cc!", "date": "2012-05-03"},
{"website": "Airbrake", "title": "Krak√≥w Cribs. CloudVertical  & Lunar Logic Polska", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/krakow-cribs-cloudvertical-lunar-logic-polska", "abstract": "WAZUP! It‚Äôs ya boy 50Cent here for the first Awesome Airbrake Cribs. ¬†This new series ¬†lets us visit¬†and get a sneak peak into the coolest offices, hacker dens and brogrammers bedrooms. ¬†We¬†visited¬†two awesome companies based in Krak√≥w, Poland . CloudVertical have their feet solidly in the ground, in a luxurious¬†office in the old town of Krakow. The cloudvertical crew cranking out awesomeness. The end result is CloudVertical a product that gives you greater insight into your cloud spending. Ed Byne, Doing his CEO thing. The CloudVertical kitchen comes with all the mod-cons. A fridge, espresso machine, two bins and oven. ¬†CloudVertical eat 4 at a time until they scale their dinning table. Lunar Logic Polska delivers agile Ruby on Rails development services and they have the fastest football table in the East. Friendly non-blocking setup. The Lunar Logic Polska¬†also makes http://kanbanery.com/ . A meetup¬†discussing¬†the future of the IDE. (in Polish) Hand painted OctoKitty . Sweet blackboard action. These guys were good. Multiple¬†monitors¬†represent. Krakow & Railsberry | Airbrake Report :: Airbrake says: May 3, 2012 at 5:35 am [‚Ä¶] Fried eggs. This was an excellent way to start a day in Krakow. On my first day, I visited a few Airbrake customers; using the wonders of Intercom, I found 25 users, and after morning coffee I was chilling in their [‚Ä¶] URL says: May 9, 2021 at 9:00 pm ‚Ä¶ [Trackback] [‚Ä¶] Informations on that Topic: airbrake.io/blog/awesome-airbrakers/krakow-cribs-cloudvertical-lunar-logic-polska [‚Ä¶]", "date": "2012-04-25"},
{"website": "Airbrake", "title": "Grub with us.", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/grub-with-us", "abstract": "We welcome GrubWithUs to the eighth Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What does your App do? We are taking social networking offline! Users can have a fun time eating with new people in their favorite restaurants. They can browse users and meals on the site and find interesting people to Grub with! Never eat alone! Setup. Environment, Language, Tools, Etc. Rails Heroku Mongo Postgres Redis iphone What do you like about Airbrake? All exceptions in one place, figures out what errors belong to what deploy etc. Allows us to spend less time looking through our log files and more time coding our app. How long have you been using Airbrake? Since August 2011 How do you normally deal with Airbrake Exception reports? Fix the bugs. What could Airbrake do better? Some of the JS errors have no backtrace and can be quite hard to figure out, also we can quickly fire out 1000s of JS errors from one dodgy ajax request that gets left running in a browser.. Favorite Music to Hack to. Die Antwoord ‚Äì Enter the Ninja Anything Else? Coffee lots of coffee. @grubwithus http://blog.grubwithus .com", "date": "2012-04-16"},
{"website": "Airbrake", "title": "Treehouse", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/treehouse", "abstract": "We welcome Alan from Treehouse to the seventh¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What does your App do? We‚Äôre changing the world by teaching people how to do web development, web design, and iOS development. Setup. Environment, Language, Tools, Etc. Most of Treehouse is a Rails app, but we‚Äôve also got some node.js in the mix. We do our front end scripting with CoffeeScript. We use MySQL for our data, and are just starting to play with redis for some features as well. We‚Äôre hosted at Rackspace right now, but are in the process of transitioning to EC2. What do you like about Airbrake? Airbrake‚Äôs super easy to work with. We get an email, we take a look at what happened, and we fix it. We haven‚Äôt checked out the javascript error reporting yet, but I‚Äôd really like to get that pulled into Treehouse. How long have you been using Airbrake? Since August 2011 How do you normally deal with Airbrake Exception reports? Airbrake‚Äôs super easy to work with. We get an email, we take a look at what happened, and we fix it. We haven‚Äôt checked out the javascript error reporting yet, but I‚Äôd really like to get that pulled into Treehouse. What could Airbrake do better? I‚Äôd love to see more information about what parts of our code are causing the most exceptions over time. It‚Äôd also be great to be able to check and resolve multiple exceptions at once. We see some duplicates sometimes when the same code is causing exceptions in different spots. Favorite Music to Hack to. Right now I‚Äôve been listening a ton to Rubber Soul by the Beatles, Broken Bells , and Rockin‚Äô the Suburbs by Ben Folds. Anything Else? Our two developers are on Twitter as @commondream and @duwanis . We like coffee.", "date": "2012-04-09"},
{"website": "Airbrake", "title": "HotelTonight", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/hoteltonight", "abstract": "We welcome @ Chris Bailey from HotelTonight to the sixth¬†Airbraker in our ‚ÄúAwesome Airbrakers‚Äù series. What does your App do? HotelTonight is a mobile last-minute/same-day hotel booking service. We have iOS and Android apps, as well as mobile web, that allow customers to book awesome hotels, at great rates, for check-in tonight. The apps are beautiful, and have top ratings on both platforms. Setup. Environment, Language, Tools, Etc. The backend management system (used by our employees, as well as hotels) is a Rails 3 application plus some JavaScript/CoffeeScript mobile web apps. The iOS and Android apps are fully native (Objective-C and Java respectively). We use Airbrake across all our apps (including mobile apps) Android + iOS¬†library . We also make use of things like git, GitHub, CoffeeScript, Haml, MySQL, AWS, HipChat, SendGrid, and various third party web services and industry systems. What do you like about Airbrake? Airbrake is a great way to be alerted to, and catalog exceptions across the team. It is easy to set up, and also easy to use for additional exception or error reporting needs that aren‚Äôt purely based on exceptions. We find the backtrace, and environment tabs particularly useful, as well as the integration with deploys. How long have you been using Airbrake? Since it was first available (and prior to HotelTonight) How do you normally deal with Airbrake Exception reports? These are emailed to the entire dev team, as well as some of us receive them via SMS. We‚Äôe worked hard to eliminate exceptions and errors, so generally have a fairly light volume of these. We don‚Äôt have a specific way we assign these to developers to be dealt with, but usually I (CTO) will do that, or when developers see one that is in an area of their expertise, they‚Äôll jump on it, notifying others via HipChat or other appropriate means that it‚Äôs being investigated. What could Airbrake do better? We‚Äôd like more control over notifications and how that‚Äôs organized. Would like to enable team members to be part of a given project, but not get notifications, or in general be able to select how they‚Äôre notified. We set up separate users in order to have exceptions sent via SMS, but would really like to see this as simply an additional notification destination for a given user. Would like a way to silence a given exception, but not ignore it ‚Äì i.e. catalog that it is occurring, but not send notifications about it. Favorite Music to Hack to. Much of our dev team likes various electronic and related music, and one of our devs is a DJ. But there‚Äôs a wide range across the team, and the office music system will see lots of different choices depending on who‚Äôs at the con. Anything Else? We love food, and have really been enjoying the various food trucks near our office and all around San Francisco. I wrote a little script for Hubot (Campfire/HipChat bot) that will tell you today‚Äôs food trucks at our closest spot. We‚Äôre also into coffee, and continue to build up various coffee brewing methods for our office coffee bar. And finally, we regularly rotate a few beers on tap at the office.", "date": "2012-03-22"},
{"website": "Airbrake", "title": "Pints with Pusher, Airbrake and Exceptional | London Report.", "author": "Unknown", "link": "https://airbrake.io/blog/report/pints-with-pusher-airbrake-and-exceptional-london-report", "abstract": "Pints with Pusher, Airbrake and Exceptional was our¬†second¬†official¬†drinkup. ¬†Close on the news of the¬†acquisition, the event was changed at the last¬†minute to invite all the Exceptional users. I arrived in London on the day of the event. Being English, and having studied in London it‚Äôs always a pleasure. It‚Äôs an amazing¬†capital¬†that is constantly changing. Shoreditch and Old Street are some of my favorite spots. You can‚Äôt beat Old Street for an Indian, and you can‚Äôt beat Shoreditch for a¬†Vietnamese. ¬†Shoreditch is a ¬†hub of hipsters and startups. Moo and Last.Fm being¬†among the ¬†big hitters. I spent an afternoon in the Pusher office, which is directly above Last.Fm office. The same office building houses several other startups including our friends at Trigger .io. After ‚Äòselling‚Äô 50 invites, we were pretty¬†excited¬†to see who would turn out on a cold Thursday evening. Lina had sorted out a venue at the Bar Music Hall ; the event went really well with a real cross section of the London developer community. With devs from ThreeDeePixel.co.uk , Pandastream.com , intercom.io , blackboxav.co.uk , @mitchellcamp , @adamamosdesignr . Apologies to J. Pablio Fernadez who was turned away, after a mix up at the bar. We will have better signage and make things clearer next time. Thanks to everyone for turning out. I hope to be back soon. ¬†Report by @benarent . A big thanks to @pusher for¬†organising¬†and splitting the bar tab. Pints and Banter at the Bar Music Hall. The Pusher crew can be spotted on the right. Lisa and Mary-Anne are working on a stealth fashion startup. Mary-Anne (right) is a JS ninja! Dave Barrett of Intercom, and Myself Ben Arent of Airbrake + Exceptional. A home / pub made Steak and Ale pie. It was delicious! An English woodland road. A wine and cheese evening with the Lads. A typical Friday night activity in England.", "date": "2012-02-24"},
{"website": "Airbrake", "title": "Wunderkit", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/wunderkit", "abstract": "We welcome Matthew Bostock from Wunderkit to be the fifth Airbrake user in our ‚ÄúAwesome Airbrakers‚Äù series. What does your App do? Wunderkit is a place that lets you organize and accomplish all of life‚Äôs projects, however big or small, with the help of your friends, family and colleagues. Whether it‚Äôs a family reunion, a vacation or something for the office, Wunderkit will make it happen. Setup. Environment, Language, Tools, Etc. Rails, mongo, redis, objective-c What do you like about Airbrake? Makes everyone in the development team aware that our software is not perfect : ) How long have you been using Airbrake? 3 months at 6Wunderkinder, around a year from previous jobs How do you normally deal with Airbrake Exception reports? Analyse the crash reports every morning and try to find a pattern. Mark everything as resolved when a new version is shipped (and disable previous versions from reporting errors). What could Airbrake do better? Filtering of configurations (release/debug). Favorite Music to Hack to. Mostly electronic, perhaps some golden age hip-hop , minimal or anything with as few words as possible : )", "date": "2012-02-15"},
{"website": "Airbrake", "title": "Bier Mit Airbrake | Berlin Report", "author": "Unknown", "link": "https://airbrake.io/blog/report/bier-mit-airbrake-berlin-report", "abstract": "‚ÄòBier mit Airbrake‚Äô was our first official drinkup. ¬†Being the first it went with a few bumps, but it was a good event with developers venturing out in freezing -12c ( 10 in Fahrenheit) conditions. I arrived in Berlin on Monday 6th, and stayed in an AirBnB apartment in the¬†Kreuzberg¬†district with @Gr2m from Minutes.io . Kreuzberg has¬†historically¬†been a poorer part of Berlin, even though it was in West Berlin. ¬†If it was in San Francisco it would be called Turkish town. The kebabs are phenomenal. @Gr2m and myself worked at Co-Up .¬†An intimate¬†co-working space in the¬†Kreuzberg¬†district. ¬†Co-Up is ran by upStream , a rails consultancy and makers of cobot.me . ¬†Working at Co-Up was a pleasure, it had a great buzz and it was great to see everyone going for lunch together. @janl has some great coffee making skills and Voos barrista outshone¬†himself. This was my first time drinking Club-Mate a high¬†caffeine¬†low sugar energy drink; it takes a little like fermented tea. Delicious. Bier Mit Airbrake was hosted at C-Base a non-profit with the purpose of ¬†increasing knowledge and skills pertaining to¬†computer software,¬†hardware¬†and¬†data networks.¬† It‚Äôs a bit like walking into a Red Dwarf set. ¬†The meetup went well, with a small turn of ¬†out of Airbrake users. ¬†Due to some confusion with the bar-bot some Airbrakers got turned away; we‚Äôre really sorry to these guys. We‚Äôll make it much clearer next time. ¬†I‚Äôll be featuring a few of the attenedes on the Awesome Airbraker blog in the coming weeks; a short rundown was Wunderlist Wheelmap minitues.io Payango Soundcloud Thanks to everyone for turning out in freezing conditons. I hope to be back soon. ¬†Report by @benarent . ¬†A big thanks to @gr2m and @co-up. German hipsters. Yes. You can buy cigarettes¬†at the checkout! Greogors CouchDB talk at Co-Up.", "date": "2012-02-15"},
{"website": "Airbrake", "title": "UserVoice", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/uservoice", "abstract": "We welcome UserVoice to be the fourth Airbrake user in our ‚ÄúAwesome Airbrakers‚Äù series. What does your App do? UserVoice creates simple customer engagement tools that help companies understand and interact with their customers and build customer relationships that last. We offer a Feedback and Helpdesk solution that are designed to make engaging with your customers fun and easy. Setup. Environment, Language, Tools, Etc. UserVoice runs on the Ruby on Rails platform at Softlayer. Most of our data is backed by MySQL, but we use a host of other NoSQL technologies such as MongoDB for analytics, Redis/Resque for our asynchronous processing, and Sphinx for search. What do you like about Airbrake? Airbrake helps us minimize the amount of errors our customers see. It has a simple but effective UI and a good notifying gem to report back to the airbrake servers. It lets us focus on fixing bugs. How long have you been using Airbrake? Since 2008. How do you normally deal with Airbrake Exception reports? We have a zero tolerance policy for Exceptions at UserVoice. All exceptions are dumped into chat, and the responsible engineer works on fixing the issue right away. What could Airbrake do better? More granular notification settings, granular notification channels (chat vs email), and tagging of exceptions from within our app (plus the ability to search and report on those tags) would be great. Favorite Music to Hack to. Jonathan Coulton , Vienna Teng . Tiesto . Bach .", "date": "2012-01-27"},
{"website": "Airbrake", "title": "MediaPiston", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/mediapiston", "abstract": "We welcome Joe from @mediapiston to be the¬†second¬†Airbrake user ¬†in our ‚ÄúAwesome Airbrakers‚Äù series. Awesome Airbrakers is a series highlighting Airbrake users. We‚Äôll be hand selecting Airbrake users, along with taking submissions. What does your App do? MediaPiston is the easiest way to get high quality, original content. ¬†We connect savvy freelance writers with web publishers and manage the editorial process with streamlined tools to make the process easy for both sides. Setup. Environment, Language, Tools, Etc. We‚Äôre a Ruby on Rails shop making extensive use of Heroku and EC2 . ¬†We use TDD and continuous deployments so we can iterate new functionality quickly with customers and our writing community. What do you like about Airbrake? The bread and butter like dupe detection and auto resolve on deploy‚Ä¶errors and bad enough, so getting things neatly organized so we can quickly assess and fix vs. getting bombarded with 798 SMS texts for the same thing is pretty nice. How long have you been using Airbrake? 18 months How do you normally deal with Airbrake Exception reports? Depending on severity and impact, we‚Äôll fix them right away. Favorite Music to Hack to. Rdio doesn‚Äôt lie: Gold Panda , Bibio , The Shins , Thievery Corporation , Prince Other Favourites Coffee: Stumptown Espresso", "date": "2012-01-10"},
{"website": "Airbrake", "title": "Zenbilling", "author": "Unknown", "link": "https://airbrake.io/blog/awesome-airbrakers/zenbilling", "abstract": "We welcome @larspind from ZenBilling , to be the first Airbrake user ¬†in our ‚ÄúAwesome Airbrakers‚Äù series. Awesome Airbrakers is a series highlighting Airbrake users. We‚Äôll be hand selecting Airbrake users, along with taking submissions. To be featured simply fill this form or contact ben@airbrake.io . What does your App do? Manage everything about your online training/teaching/coaching/consulting business, soup to nuts ‚Äì lead generation, sales/invoicing/refunds, and delivery of ebooks/downloads/online courses. Setup. Environment, Language, Tools, Etc. Very soon: Rails 3.2, Ruby 1.9.3-p0, app is in Danish and English, I use Airbrake , zencoder , sendgrid , nexmo , and soon Twilio in the back-end. How do you normally deal with Airbrake Exception reports? I get them by email and usually fix right away. How long have you been using Airbrake? A Month. How do you normally deal with Airbrake Exception reports? I get them by email and usually fix right away. What could Airbrake do better? iOS notifications, but I can work around that with boxcar . Favorite Music to Hack to. Not much of a music hacker. I like hacking to Don Grolnick or Lady Gaga , though. Other Favourites Favorite food is a cheeseburger, my own lasagne, or a good red curry. Favorite blog is daringfireball . Favorite drink is champagne or fresh juiced ginger.", "date": "2011-12-31"}
]