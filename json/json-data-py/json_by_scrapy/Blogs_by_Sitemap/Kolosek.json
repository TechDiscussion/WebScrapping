[
{"website": "Kolosek", "title": "Snapshot Tests in React Using Jest", "author": ["Aleksandar M."], "link": "https://kolosek.com/react-jest-snapshot/", "abstract": "Writing tests might not have been the most enjoyable thing for you in the past but we for sure hope that after reading this article, you'll be able to increase the test coverage. Today we're talking about snapshot tests using Jest . They're easy to write, they're fast, and most importantly, we'll for sure know if something is not right if we use them correctly. These snapshots will warn us for every change we make that affects the rendering: whether we're doing something simple, or more advanced rendering that includes conditions or looping . Configure Jest First, you need to setup jest in the project. For that install few packages: npm install --save-dev jest babel-jest babel-core regenerator-runtime babel-preset-es2015 babel-preset-react You don't need to install regenerator-runtime if you use npm 3 or 4 or Yarn. You'll have to add .babelrc file in project root next: {\n  \"presets\": [\"env\", \"es2015\", \"react\"]\n} Also, you need to install react-test-renderer package. This package is isused to render react components to pure javascript objects. npm i react-test-renderer --save If you need some specific configuration for your tests, you can configure jest using package.json file . You're now ready to write your first snapshot test! Writing snapshot tests When writing snapshot tests using jest, you should basically just follow the next template: import renderer from 'react-test-renderer';\nimport Component from '../Component.react';\n\nit('renders correctly', () => {\n  const tree = renderer.create(\n    <Component \n        prop={propValue}\n    />\n  ).toJSON();\n  expect(tree).toMatchSnapshot();\n}); You use react-test-renderer to create a component with desired props , transform it to JSON and then check if it matches a snapshot. Easy, right? Here's a more concrete example - let's say we have a dummy component called Input , for which we want to write a snapshot test: function Input({ id, placeholder, label, onChange, value }) {\n    return (\n        <div>\n            <label htmlFor={id} >\n                { label }\n            </label>\n            <input\n                id={id}\n                placeholder={placeholder}\n                onChange={onChange}\n                value={value}\n            />\n        </div>\n    )\n} For our Input component, it can look something like this: import renderer from 'react-test-renderer';\nimport Input from '../Input.react';\n\nit('renders correctly', () => {\n  const tree = renderer.create(\n    <Input \n        id={'id'}\n        label={'label'}\n        placeholder={'Placeholder'}\n        onChange={() => {}}\n        value={''}\n    />\n  ).toJSON();\n  expect(tree).toMatchSnapshot();\n}); Running tests To run the test, you just need to type jest command in terminal. Output snapshot file will be created, and when running the test next time, jest will compare that output snapshot file to our updated component. If you make some changes to a component that affects it's rendering, ( for example add a new item to the list to be mapped ), the test will fail because the new object will be different from previous one. If changes were intended, you can update snapshot using the command jest --updateSnapshot . Keep in mind that all of these output snapshot files should be committed alongside the modules they are covering and their tests, as they are part of the test. Of course, while our snapshot tests cover things like if conditional rendering is working properly, they don't test whether clicking on that link will properly redirect to another page. You will still need to write tests that check if the functionality works as expected, but those we'll be covering in some future article. Thank you for your time reading! Did you enjoy this article? We're regularly publishing new React content, so make sure to subscribe so you don't miss anything out!", "date": "2018-03-05"},
{"website": "Kolosek", "title": "Sass Mixins", "author": ["Tijana D."], "link": "https://kolosek.com/sass-mixins/", "abstract": "This is the third post about specific Sass features and this one is about mixins. Previous were import feature and extend feature and there was one about nesting in general. This feature is used in specific situations, not too often but too necessary when you master it. @mixin To define this feature type @mixin and name of your creation. After that, in CSS style - within {} , type all you want to be defined with it. @mixin creation-name{\n    property1:value;\n    property2:value;\n    property3:value;\n } When it is defined, you should use it somewhere...To call the mixin feature, type @include followed by the mixin name inside of selector. selector{\n    @include creation-name;\n } After compiling this code into CSS, it will look like this: selector{\n    property1:value;\n    property2:value;\n    property3:value;    \n } Flexible Mixin A mixin lets you pass in an argument to make it flexible. This is defined by adding the value after the name of the mixin. That value can be used inside of mixin (as much time as you need it). @mixin creation-name($value){\n    property1:$value;\n    property2:value;\n    property3:value;\n } After mixin is defined this way when it's called after @include and the creation name you must forward that value to. selector{\n    @include creation-name(10px);\n } After compiling... selector{\n    property1:10px;\n    property2:value;\n    property3:value;    \n } You can add an infinite number of values inside of () separated with , Where to use it Now when you understand what it is about, you must feel that there are specific cases for it. Everyone who works with Sass (and uses it right) has his own collection and this is mine : Pseudo When using ::before and ::after you'll always need these three, so we're saving two lines of code every time you use this. @mixin pseudo{\n    content: '';\n    display: block;\n    position: absolute;\n} Position Center Block horizontal and vertical centering helper (Important: you must have a parent element with position: relative ). @mixin center {\n    position:absolute;\n    top:50%;\n    left:50%;\n    -webkit-transform: translate(-50%, -50%);\n    -ms-transform: translate(-50%, -50%);\n    transform: translate(-50%, -50%);\n } Placeholders I still believe that the mixin is invented for us to use it for browsers prefixes. This is just one example of that. @mixin input-placeholder {\n    &:-moz-placeholder { @content; }\n    &::-moz-placeholder { @content; }\n    &:-ms-input-placeholder { @content; }\n    &::-webkit-input-placeholder { @content; }\n } Breakpoints You can use breakpoints or media queries but either way, you're going to like this. In this example, @content mixin feature is used. You can understand from the example that this feature allows adding CSS inside of @include . @mixin bp-large {\n    @media only screen and (max-width: 60em) {\n        @content;\n    }\n}\n@mixin bp-medium {\n    @media only screen and (max-width: 40em) {\n        @content;\n    }\n}\n@mixin bp-small {\n    @media only screen and (max-width: 30em) {\n        @content;\n    }\n} How to use it: .sidebar {\n    width: 60%;\n    float: left;\n    @include bp-small {\n        width: 100%;\n        float: none;\n    }\n} Here's some other colections, you can find a lot of interesting things in: Andy.scss , bourbon , npm , and if you want the advanced option of the mixin feature check this post . Sum up Make your collection and mixin it up! (Actually, just copy/paste it into every new Sass project) For more fast courses through this kind of themes, subscribe to our newsletter.", "date": "2018-03-05"},
{"website": "Kolosek", "title": "React Guide to Props - Part III", "author": ["Kristina G."], "link": "https://kolosek.com/react-props-typechecking/", "abstract": "Previously we've learned how to pass props in react and also how to indirectly communicate between components using props . Today, we're getting to the finale of props guide series, where we'll talk about how to check whether we passed correct props. React props - Make sure you are typechecking As the application you're working on grows, you'll definitely want to add some kind of prop typechecking - you don't want bugs you'll work on for hours or days before you realize you just sent an empty array instead of an object! You can be a bit more extreme and use something like Typescript to cover your whole app with checks. While TypeScript can be quite useful and nice, there's no need for this - you don't need to enforce typechecking of every single function and variable. Defining PropTypes is not enough! Make sure you're also covering your code with tests ! React has built-in PropTypes so you can typecheck easily. Basically, the idea is that inside of propTypes you define the type for each of the props used in the component. Here's our example component we'll be defining PropTypes for: class Input extends Component {\n    ...\n    handleChange = (event) => {\n        const newValue = event.target.value;\n        this.props.updateParent(newValue);\n    }\n    ...\n    render() {\n        return (\n            <input\n                onChange={this.handleChange}\n                placeholder={this.props.placeholder}\n                type=\"text\"\n                value={this.props.value}\n            />\n        )\n    }\n} The propTypes will look like this: Input.propTypes = {\n        placeholder: PropTypes.string,\n        updateParent: PropTypes.func.isRequired,\n        value: PropTypes.string.isRequired,\n    }; You have probably noticed that for updateParent and value we are using isRequired after prop type definition. This is to specify that the prop must be passed to a component, and that something will probably break if it's not done so. If rendering a list sent as a prop , always make sure it's either required or default value is set! On the other hand, a placeholder is not required. For optional props like this one, you might want to define a default value when nothing is pressed. You can achieve that by defining defaultProps for a component: Input.defaultProps = {\n        placeholder: \"Default placeholder\",\n    }; Besides the standard types, you can also add a typecheck whether a prop is an instance or some class: Parent.propTypes = {\n        inputChild: PropTypes.instanceOf(Input),\n    }; You can, as well, specify that prop can be any data type, by using PropTypes.any : Parent.propTypes = {\n       anyValue: PropTypes.any,\n   }; Try to avoid any, it's like not defining prop types at all - if you pass an empty array instead of an actual false value, that conditional rendering won't work as you expect! PropTypes do not limit you to use just predefined type validators, you can also define your own . For more useful information on typechecking, take a look at the official guide , as it contains all the answers to questions you might have. For all of the issues found while typechecking you will get notified in a console. We strongly recommend that you configure eslint to require props validations for all components. This way you won't forget to define propTypes for your components, so you won't miss out some of the accidental issues you might have made during the coding. You can also configure eslint to enforce defining of default values for props that are not required if you prefer to. This, although nice to have for consistency over the component instances, is not of such a big importance. We hope you enjoyed this article and learned something new and useful, or at least freshened up your knowledge a bit! If you liked this article, subscribe for more reactive content from us!", "date": "2018-03-05"},
{"website": "Kolosek", "title": "What Makes a Good Development Company?", "author": ["Aleksandra M."], "link": "https://kolosek.com/what-makes-a-good-development-company/", "abstract": "It may seem surprising that web development companies are on the uprise in 2018. It’s not news to us, though, as when Kolosek was originally created, everybody onboard was aware of both the risks and the competition from day one. After all this time, there’s still one question that has been present ever since the web development niche was born: how do you differentiate good web development companies from the bad ones? In other words, what is it that makes a web development company, team, or even individual, good and desirable for a business founder with a bright idea? As a business owner, or any C-level man, have you ever thought about establishing an online presence for your own creation? If your business is on a lookout for a complete package, including an SEO-ready website with reliability, security, and responsiveness in mind, then you’re most certainly on the right way towards getting the most out of your potential customer reach! That’s when the Google searches kick in. You start by pinpointing your search terms, you get focused on good web development companies in your area, and if that set of results does not satisfy you, then you look for web developers who work for a global clientele, and eventually, you get to a shortlist of 4-5 companies that look attractive to you. Even so, you can’t really be sure whether or not either of those shortlisted companies are reliable , and that’s a big key word right there. Contacting the head developers themselves and asking to see their portfolios at a glance is just not going to cut it. It’s a well-known fact that the IT market is packed with a lot of options, and we at Kolosek realize how difficult it might be to hire the best one. For that reason, we understand the most basic need to know what makes a good and professional company, well, good and professional . That is why we curated a very straightforward list of traits, through which you will be able to find your ideal web development company with ease. Here are some of the most wanted traits: Good Web Development Companies Have Rich Portfolios You must have seen at least a few websites with their own portfolio sections by now. By now, it has become the norm for all professional and good website development companies to have a dedicated Portfolio section with quality content, including a simple list of their best projects. This is crucial to understand, as the opposite practice of attaching every single project made is not really desirable. The best projects are the ones where the whole team was involved in as many areas of development possible, so you basically want to see complete products for all sorts of various niches . Four to six big projects should be more than enough for a portfolio of a good web development company. Remember that a top-quality portfolio page will ensure that your next great idea is delivered with great care and attention. Technical Support/Customer Support Service Is Of Top Quality It’s very simple to create a plain blog post in which somebody criticizes a web development company just because of poor, post-production technical support . The Internet is a huge place, and that can happen to anyone out there. You know you have found a good and professional web development company when you see for yourself how their technical support service is being offered to their own customers—even after their assigned project was completed long ago. The point here is this: nobody can brag enough about how important having a good and reliable technical team is when people are actively using your products . All teams behind those products need to be ready to help out their users, which implies that your chosen web development company needs to be ready to help you whenever you face technical issues or something else on your website—no matter when! Their Knowledgebase Is Spot-on We know there’s neither a person nor a company out there that knows it all, and says they’ll work day and night to get your product built using only the framework you desire. What we do know is that a very common trait of good web development companies and their individuals is to work hard on keeping themselves, their colleagues and employees, and their clientele up-to-date with the latest trends regarding web design and development. Knowing when e.g. Google pushed its last algorithm change, or what the last Android SDK update added and/or removed is not a necessity, by all means. It is, instead, something developers know and read about instinctively, and if applicable, share that information to everyone around them. There is nothing wrong about seeing employees brush up on their skills from time to time by finding solutions to even the most basic programming issues on Google, because that is a good sign of their dedication towards your product idea, you as a business owner, and their own workplace. After all, web development companies are there to make you satisfied with the offered service. Good Web Development Companies Nurture The Timeline It’s understandable for all web development companies to ask for an extra week or two to get the entire project or its sections completely implemented and tested to perfection. As mentioned previously, satisfaction is the end result both parties are looking for, which is why professional web development companies value their time. Their employees are punctual, serious when it comes to testing, and hard-working, which is icing on the cake for business owners looking for people who value time . An abundance of books has been written on effective time management, but not a single one of them will help if employees are not willing to put their effort into the end product and its release. Good web developers complete their tasks within the given and stated timeline, and they always inform you of any possible delays. Some of them are predictable, others aren’t, so a bit of compassion is also expected from both sides. Being kept updated with how the project is progressing each step of the way is also very crucial, and professionals know that! Conclusion There is not a single perfect web development company out there, but with these four most common traits, you will be able to differentiate a good software development provider from a bad one in no time! We at Kolosek work hard on keeping our clients and our team members happy with our work ethic , and since it is our mission to be strict when it comes to respecting deadlines and keeping all parties happy with the end product, we expect nothing less from our global, world-wide competitors.", "date": "2018-03-05"},
{"website": "Kolosek", "title": "CSS Selectors - The Ultimate List", "author": ["Tijana D."], "link": "https://kolosek.com/css-selectors/", "abstract": "As a front-end developer who writes approximately 238 lines of CSS every day I needed this. Nothing in the following text is really mine (even though they said that I always added something special...), it is just collected from sources which are available to everyone (not just w3schools ). At the bottom, you have this ULTIMATE LIST image which you can easily download, no welcome! Pay attention to spaces! Absolute Evergreens * All elements are selected. .banana All elements with class banana are selected. #banana The element with id banana is selected. p All <p> elements are selected. Relative Evergreens div, p All <p> and <div> elements are selected. div p - descendent selector All <p> elements inside <div> elements are selected. div > p - direct children All <p> elements whose direct parent is <div> are selected. It works backwords too (p < div) div + p All <p> elements places immediately after <div> element are selected. div ~ p All <p> elements that are preceded by a <div> element are selected. Specific Category This class is often used for attributes :target, title, lang and href . [title] All elements with the title attribute are selected. [title=banana] All elements which have the 'banana' value of the title attribute. [title~=banana] All elements which contain 'banana' in the value of the title attribute. [title|=banana] All elements which value of the title attribute starts with 'banana'. [title^=banana] All elements which value of the title attribute begins with 'banana'. [title$=banana] All elements which value of the title attribute ends with 'banana'. [title*=banana] All elements which value of the title attribute contains the substring 'banana'. Quasi-Evergreens These selectors are called pseudo classes and they must stay with other selector and describe it's state or property :hover Selects elements when it is in the hover state. :link Selects elements if they are links (once with href attribute). :visited Selects elements if they have been visited. :active Selects elements when they are active (clicked). :focus Selects elements when they are focused. :checked Selects elements when they are checked. :required Selects elements with the required attribute. :optional Selects elements without the required attribute. :first-child Selects the first element within a parent. :nth-child(number) Selects the child element based on a number (if it's 2 then selects second child, if it's 2n then selects all the children in steam positions). :only-child Selects element only if it's the only child. :first-of-type Selects the first element of the type. :nth-of-type(number) Selects the child element of the type based on a number (if it's 2 then selects second of the type, if it's 2n then selects all children of the type in steam positions). :only-of-type Selects element only if it's only of the type. :empty Selects elements which contain no text or child elements. For more pseudo classes check this post The next few selectors are called Pseudo Elements and they select just parts of elements ::before: Add content before the element (e.g. an opening quote, icon, image...). ::after Add content after the element (e.g. a closing quote, clearfix...). ::first-letter Selects the first letter of the element. ::first-line Selects the first line of the element. ::selection Selects a part of the element which is selected. Indie Hit * + * - lobotomized owl All elements that procede other elements. For more posts about CSS, subscribe to our newsletter.", "date": "2018-04-05"},
{"website": "Kolosek", "title": "CSS blend mode", "author": ["Tatjana B."], "link": "https://kolosek.com/css-blend-mode/", "abstract": "Usually, when adding an image to a website, the first thing we do is edit the image in an external software, such as Photoshop. Does the blend mode eliminate the need to use this kind of software? Not really. But, it in a lot of cases you will be able to add effects to the image directly with CSS . When creating your design, you should follow some best practice advice . Background Blend Mode and Mix Blend Mode When using the background-blend-mode property, you can blend the background color or image of an element. Blend modes are defined as a value and they specify how to blend or mix the colors of the background image with the color, or other background images, behind it. On the other hand, the mix-blend-mode property specifies how the content of an element blends with its background and the content of its direct parent. Elements on overlapping layers will blend with those beneath it. In this case, it's important to mention the isolation property. It stops the elements with mix-blend-property from blending with the backdrop. Background-Blend-Mode Let’s show the basic usage of the background-blend-mode by blending the background image with the background color. CSS .image-blend{\n  background: url(‘beach.png’);\n  background-color: blue;\n  background-blend-mode: multiply;\n} On the top, we see the original image, while the bottom shows the image with blend mode applied to it. First, a background image URL needs to be specified, and afterward a background color that the image will be blended with. There are many blend modes available to choose from, here the multiply blend mode is added to demonstrate how it will affect the image. Along with a solid background color, a background gradient can also be used for blending. Now, let's look at how we can use background-blend-mode for blending two images together . We are going to blend the following two images together: CSS .two-images-blend {\n  background: url(‘beach.png’), url(‘house.png’);\n  background-color: blue;\n  background-blend-mode: lighten;\n} CSS .two-images-blend {\n  background: url(‘beach.png’), url(‘house.png’);\n  background-blend-mode: lighten;\n} In this case, we have two examples, where the first one has a background color added to it, while the second has no background color. We have demonstrated two possible values for the background-blend-mode, but there are many of them: screen, overlay, darken, lighten, color-dodge, color-burn, hard-light, soft-light, difference, exclusion, hue, saturation, color and luminosity. Mix-Blend-Mode A popular usage of this effect is creating cut out text . When doing this, it is useful to keep in mind usage of the line-height property. HTML <div class=”container”>\n  <h1 class=”header-text”>Hello world</h1>\n</div> CSS .container {\n  background-image: url(‘beach.png’);\n  background-size: cover;\n}\n\n.header-text {\n  font-size: 7rem;\n  text-transform: uppercase;\n  color: #fff;\n  text-align: center;\n  background-color: darkcyan;\n  mix-blend-mode: multiply;\n} Support Before using this property, make sure you check out Can I Use for more details on its support for these properties. Currently, the background-blend-mode property has a slightly better support, hopefully, mix-blend-mode will catch up soon. Summary We have explained the basics of these two properties, now it’s up to you to play with the properties and create beautiful and interesting visuals for your website. If you liked this article be sure to subscribe to our newsletter - there are much more to come!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "Qualities of Top Mobile App Developers", "author": ["Aleksandra M."], "link": "https://kolosek.com/qualities-of-top-mobile-app-developers/", "abstract": "It's no secret that mobile technology has become a significant part of our everyday lives and that it's affecting all of us more than we'd like to admit. Doubt it? Well, why not let facts speak for themselves: According to Statista , in January, 2018 there were 3.7 billion of unique mobile users . About 2.8 million apps on Google Play Store and 2.2 million on Apple App Store were available in March, 2017 . Zenith Media forecasted that the mobile usage proportion of the internet is going to reach 79% in the year 2018. As you can see, these are some serious statements which businesses all around the world keep in mind when it comes to expanding their consumer base. That being said, the demand for mobile app developers is constantly on the rise, but not just any developers— the best ones . What is it that makes them the best, though? How do they work? Which qualities do they have? Let’s find out! Product Development Process & Mobile Developers Developing a mobile app is a process that requires thorough planning and consists of several steps. The first step of the process is defining the problem a mobile app should solve. The second step is creating a clear profile of the user so all app features can strategically be put together in order to increase the success ratio . This step also requires paying attention to mobile platforms and devices an app should cover. In this step, when all the basic information is set, it is important to share the work with designers which can focus on the UI of the app, making it easy on the eye and easy to use. The final step is to let mobile app developers do their magic. This is the “make it or break it” moment. Now, imagine that you have done all the necessary planning, put your time and money into an app, and somehow ended up with not-so-satisfying results . What’s the reason for this? The fact that you didn’t choose the right professionals for the job. Hiring the best mobile app developers who know how to deliver the best possible solution is a must. But, who are these mysterious app developers? What are they like? What makes developers so qualified? Are the best developers the ones that can code fast or the ones that are skilled in developing for multiple platforms? Or maybe the ones that have UX/UI design skills? We are here to help you find answers to all these questions. For the past couple of years, we have gathered experience, not just in developing mobile apps but in employing quality developers. Now, we wanted to share our practical knowledge on this subject with you. We are familiar with the fact that searching for great developers can be as difficult as searching for the right development company and that is why we have created a list of seven qualities all top mobile app developers should have. Knowledge of Cross-platform Development According to Fueled , there are more users on the Google Play Store, but the App Store users spend more time actually using apps and being engaged. The chances of your target group using only one platform are pretty much non-existent. Hiring only Android app developers should not be your first option. By choosing a cross-platform development you are raising the chance of the product meeting the market faster . Why? Because this way, the speed of the development process increases. Along with the speed, cross-platform development offers several other benefits, as well; The cross-platform development allows you to reuse the code and easily sync it across multiple platforms. The team gets to spend less time (and money) on developing the app because there is no building an app for every platform separately. However, probably the biggest advantage with deciding to implement cross-platform development is the fact that uniformity of the app raises the level of user engagement. Remember, quality mobile app developers are the ones that recognize all the advantages of this type of development and won’t settle for either Android or iOS development. The Necessary Set of UX/UI Skills Do you know what the main goal of top mobile app developers is? It is to acquire the target market and engage as many users as they can . Mobile app developers can only achieve this by having a UX/UI skillset. Although a team of developers is probably going to work with a team of designers, they shouldn’t be just executioners and the ones that make sure an app “works”. Basic knowledge of UX/UI design and familiarity with front-end development is a must. Knowledge of the Most Popular Programming Languages There are several languages on the market that mobile app developers use—Java, Python, PHP, C#, JavaScript, Objective C, and Swift. No matter which one a developer chooses, it is imperative to know a couple of them and, preferably, the ones that are mostly in use. Just like with any profession, being up-to-date with news about programming languages is a day-to-day activity for top mobile app developers. Also, make no mistake—when it comes to searching for solutions online , you have to face the fact that everyone has done it and is doing it. Finding solutions for programming issues on Google is not a sign of incompetence. The Kolosek team is a team that consists of quality developers and we have to admit we sometimes ask Google to find a solution for our challenge, simply to verify our idea. The Ability to Work in a Team Good mobile app developers are always the ones that are team players. Why? Because mobile development requires teamwork in order to create an app that is going to make boom on the market. There are two important elements when it comes to teamwork— honesty in communication and organizational skills . If a team wants to reach its full potential and finish a project, open and honest communication has to exist at all times. We have to admit that working with people can sometimes be hard, so developers’ willingness to make an effort and put themselves in someone else’s shoes is a huge advantage. On the other hand, top mobile app developers are the ones that are able to face a challenge, knowing how to manage the time to solve it efficiently. They know how to get in the zone and give the best of themselves. Relevant Qualifications Top mobile app developers should always come with relevant qualifications. Nowadays, one of the preferable qualifications is a college degree, but there are more and more developers out there that are self-thought and took online courses. Keep in mind that a faculty degree is not the most important factor here—their experience is. An Impeccable Portfolio An impressive portfolio is a great proof of a developer’s excellence , experience , and commitment . A portfolio provides a glimpse into the developer’s world. It is there for a reason—to give you information about developer’s technical skills, their ability to communicate, and willingness to take risks and try something new. Remember, portfolios of the best mobile app developers you can find take more than a couple of minutes to read. A Development Team vs a Freelancer We can’t help but notice that we put an emphasis on working in a team of mobile app developers instead of hiring a freelancer to create an app. This is because, from our experience, working as a part of a team offers more opportunities for a developer’s personal and business growth. One of the biggest advantages of having a team of mobile app developers is that they are able to work closely with a team of graphic designers, photographers, content writers or copywriters. During the project, developers can pick up a few new skills and get familiar with every step of the development process . Freelancers, on the other hand, don’t have an insight into a true product development process, and what it is like to work eight hours a day and try to manage meeting all the deadlines. In short, freelancers can sometimes lack in structure. Another benefit is that development teams usually work with multiple clients for different industries. Here at Kolosek, we worked for several industries, all across the globe, and we learned that getting to know each industry can be valuable for our work. Conclusion In the end, we have to admit there isn’t a single perfect mobile app developer out there . There are just the ones who are committed to projects, interested in acquiring new knowledge and aren’t afraid of overcoming more difficult challenges. Thank you for taking the time to read this article, we hope you found it interesting and that it helped you understand better how top mobile app developers work. If you are interested in similar topics, be sure to hop to our article Why Don’t Developers in Large Companies Like Agile? . Until next time!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "CSS clear float", "author": ["Tatjana B."], "link": "https://kolosek.com/css-clear-float/", "abstract": "A little while ago we wrote about the float property. So, now is a good time to explain the clear property. The clear property is directly related to the float property. It specifies if an element should be next to the floated elements or if it should move below them. This property applies to both floated and non-floated elements. If an element can fit in the horizontal space next to the floated elements, it will . Unless you apply the clear property to that element in the same direction as the float . Then the element will move below the floated elements. Every element created in CSS needs to have the quality design added. The clear property can have following values: None - the element is not moved down to clear past floats. Left - the element is moved down to clear past left floats. Right - the element is moved down to clear past right floats. Both - the element is moved down to clear past both left and right floats. Support After consulting the Can I Use service, we see that the support is over 87% . Examples HTML <div class=”container”>\n  <div class=”left-segment”></div>\n  <div class=”left-segment”></div>\n  <p class=”text-clear”>Cardigan aesthetic direct trade, migas locavore shoreditch DIY bicycle rights lyft street art bitters.</p>\n</div> CSS .container {\n  border: solid thin #ccc;\n}\n\n.left-segment {\n  float: left;\n  background-color: #C98EED;\n  height: 200px;\n  width: 200px;\n  margin-right: 10px;\n}\n\n.text-clear {\n  clear: left;\n} Here we can see divs that have float: left applied to them. After we have set clear: left to the text paragraph, it moved below the floated elements. HTML <div class=”container”>\n  <div class=”right-segment”></div>\n  <div class=”right-segment”></div>\n  <p class=”text-clear”>Cardigan aesthetic direct trade, migas locavore shoreditch DIY bicycle rights lyft street art bitters.</p>\n</div> CSS .container {\n  border: solid thin #ccc;\n}\n\n.right-segment {\n  float: right;\n  background-color: #8FC9FF;\n  height: 200px;\n  width: 200px;\n  margin-left: 10px;\n}\n\n.text-clear {\n  clear: right;\n} Next, we see two divs with the float: right property and a paragraph with the clear: right property. By setting this, the paragraph gets moved below the floated elements . Now is the good time to add some formatting to the text. HTML <div class=”container”>\n  <div class=”left-segment”></div>\n  <div class=”right-segment”></div>\n  <p class=”text-clear”>Cardigan aesthetic direct trade, migas locavore shoreditch DIY bicycle rights lyft street art bitters.</p>\n</div> CSS .container {\n  border: solid thin #ccc;\n}\n\n.left-segment {\n  float: left;\n  background-color: #8FC9FF;\n  height: 200px;\n  width: 200px;\n}\n\n.right-segment {\n  float: right;\n  background-color: #8FC9FF;\n  height: 200px;\n  width: 200px;\n}\n\n.text-clear {\n  clear: both;\n} Finally, the last example shows the usage of the clear: both property. The two divs are floated left and right , while the paragraph has the clear property added to it. With this, it gets moved below both of the floated elements . It's good to mention that this is the most commonly used clear property. Summary Hope this article will help you in your projects. Be careful when using this property, it is known to have caused a lot of confusion in the past. But, we are sure that after reading this article, you are good to go! Happy coding! Want to read more about CSS? Subscribe to our newsletter!", "date": "2018-03-05"},
{"website": "Kolosek", "title": "CSS Transition", "author": ["Tijana D."], "link": "https://kolosek.com/css-transition/", "abstract": "So, we've moved from text and color in web design to unique, bombshell, explosions... OK, not that much, but we've moved. CSS follow and support those changes and because of that, we have the transition option. This post is closely related to the post that is currently being written and which is about transform (so check this blog on regular basis or just subscribe to our newsletter). About Transition The transition property allows changing the CSS property values smoothly. It is necessary to define a property that will be changed and the duration of the effect. button{\n    transition: background 1s;\n    -webkit-transition: background 1s; /* Safari */\n } These two values can be defined with the universal property transition or with individual properties transition-property and transition-duration . Some of the transition-property values I can remember at the moment are: width, height, color, background (color, image, position) , transform (in the next post), border (color, width), position (top, bottom, left, right ), text ( size , weight, shadow, word-spacing), margin, padding, opacity, visibility, z-index, all. If the value is defined with a property, defines a comma-separated list of CSS property names the transition effect is for. The value all is the default one and defines that all properties that can transition will transition. In this case, all changed properties will have a transition with the same duration (and delay and timing if defined). The transition-duration property is very simple, it defines how much time a transition effect takes to complete, and its value can be defined in seconds (s) or milliseconds (ms). More Transition Options Additional properties connected to transition are: transition-delay transition-timing-function Very similar to the duration property, transition-delay is defined with seconds (s) or milliseconds (ms) and specifies when the transition effect will start. This property can be negative, unlike the duration property, and if that so it will begin part-way through its play cycle. The transition-timing-function property is defined by the following functions: ease - slow start, fast middle, slow end, linear - constant speed, ease-in - slow start, fast end, ease-out - fast start, slow end, ease-in-out - more pronounced acceleration/deceleration curves that ease, cubic-bezier(n,n,n,n) - you can write your own function defined with 4 coordinates ( cubic bezier functions ). button{\n   transition: background 1s ease-in-out 2s;\n   -webkit-transition: background 1s ease-in-out 2s; /* Safari */\n } With the universal property transition you can define all four properties, just keep in mind that first time defined is always transition-duration . It's possible to make the multiple transitions set. To split different transitions use , . button{\n     transition: background 1s ease-in-out 2s, width 2s linear;\n     -webkit-transition: background 1s ease-in-out 2s, width 2s linear; /* Safari */\n   } Triggering The main thing to remember about the transition is that this property is defined before and it's going to happen only if it's triggered (if the property which is defined with transition-property is changed). You can trigger CSS transitions directly with pseudo-classes like :hover, :focus and :active or through JavaScript by adding or removing classes. Conclusion This property is widely supported so use it! If you need some inspiration, check out this example .", "date": "2018-04-05"},
{"website": "Kolosek", "title": "7 Traits That Make a Great Software Developer", "author": ["Aleksandra M."], "link": "https://kolosek.com/7-traits-that-make-a-great-software-developer/", "abstract": "Finding a truly great software developer nowadays is like looking for a needle in a haystack—all but impossible. Sure, there are a lot of good programmers out there who will do their job just, and most of the time, you will be satisfied with their work. Plus, you’ll definitely have an easier time pinning them down than you would a great developer. So, why would you go after this rare species, waste your valuable time and resources, when you can opt for an average developer instead? What’s so special about “the greats”? Well, one thing that comes to mind is that they are three times more productive than your average developer , and 10 times more than a bad one (Source: The Mythical Man-Month ). Sounds like quite a lot, doesn’t it? It actually is, once they start doing their magic. Something else to remember when it comes to developers is that great ones are able to not only write solid code, but also have certain traits which make them as desirable as they are. Now, if you don’t have a lot of experience with hiring programmers, you won’t know which qualities to pay attention to. Luckily, here at Kolosek, we do. After years and years of working with both good and bad programmers , we’ve managed to pinpoint the traits which you should always look for in developers. Today, we’ve decided to share with you seven traits which make a great software developer , in hopes of helping you find yours. It might take a while for you to stumble upon them, but once you do, you’ll be able to recognize them with more ease. Let’s get started, shall we? Curious/Loves Learning Here’s the thing about great developers: they never accept matters as they are . Whether their code works or doesn’t, they are always trying to dig deeper into what they’re doing and find the answers to every “why” they have to ask. Great programmers are not afraid to experiment , either—they are willing to approach projects from different points of view or learn new languages which will help them improve themselves. In short: they possess a strong love of learning and are curious by nature. If you come across a developer who’s not inquisitive and who’s scared to ask “why”, it usually means that they don’t have the knowledge they need to solve certain problems and probably can’t justify why they’re doing what they’re doing. Technical Mindset Developers’ main tool for work is their computer, so it’s only logical that they know how to navigate their devices from the technical point of view. Right? However, what sets great software developers apart from average ones when it comes to this is that they not only understand computers (and other related devices), but actually enjoy figuring out the logic behind them. It’s simple, really—a software developer needs to possess great technical skills and, more importantly, they need to be able to explain the technical parts to non-tech people they find themselves working with. Analytical Mindset Aside from a technical mindset, your perfect software developer needs to have an analytical mindset, too. What does this mean exactly? They need to be able to solve complex and simple problems alike, by making decisions based on the available information. Great developers have a solid set of thinking skills which they can use in different situations, and they can consider both the big picture and the smallest of details, if needed. Great at Managing Tasks and Time Here’s something a lot of people overlook, but that’s as equally important as the love of learning and technical mindset: great software developers are incredibly reliable . This means that they can always organize themselves in a way that will allow them to finish all of their tasks on time, and that they respect the given deadlines. “The greats” are known for their strong work ethic , and they never fail to show up at a meeting or for a call with their client. If you decide to hire a developer, then make sure that they can manage their time, tasks, and clients all by themselves, and that you don’t need to manage them while they’re working. Good Communication Skills Believe it or not, good communication skills are not just about speaking a high level of the English language and being able to talk to your clients and/or employers. No, having good communication skills means being able to convey an idea in an accurate and effective manner. It means being able to get your point across and understanding what others are trying to tell you. It means knowing how to communicate with the people you work with . And while it’s really difficult to figure out whether someone has supreme communication skills over the phone or email, a face-to-face meeting will tell you exactly what you need to know. If your potential developer’s communication skills are not as good as you’d want them to be, chances are that they won’t be able to do their job right. Flexible Code is unpredictable . That’s why great software developers need to be adaptable, no matter which programming language they specialize in. So, say, if the scope of a project changes unexpectedly, a developer needs to be able to deal with that change and continue working. A great programmer is constantly aware of the fact that anything could change , and they need to learn how to think on their feet. Team Player Whether you work as a developer, designer, or a content writer, chances are you’ll probably work with other developers, designers, and writers in your career, if not entire teams of them. If not flying solo, a developer will need to work closely with e.g. a marketing or sales team, or even their client’s team. That’s why, if they want to be successful in what they do, they need to be able to collaborate with their peers and be a fantastic team player. A great developer won’t hesitate to offer their teammates help when they get stuck, teach new skills to others, and even write tutorials that can help not only the other members of their team, but the entire developer community, as well. Conclusion It’s hard to attract great software developers, it really is. Not only are they in high demand (and, ironically, rarely “on the market”), but they are also after cool projects they can work on and won’t accept just any job. So, if you want to get the best of the best, you need to have an exciting offer ready for them, a serious job interview in place, and you might want to pay attention to the traits mentioned above . The latter might not be the deciding factor in who you get to hire, but it can certainly help you make your choice. We hope you found this post interesting and that it’ll help you out in your search! If you’ve got any traits you’d like to add to the list, let us know.", "date": "2018-04-05"},
{"website": "Kolosek", "title": "Rails 5 Change Database Column", "author": ["Nesha Z."], "link": "https://kolosek.com/rails-change-database-column/", "abstract": "While working on a Rails application, we all have had to change the database column in some way. You can change the column name and the column type , as well as changing the column with the type conversion . Changing the Column Name Before we can change a column, we have to create it. Let's start with creating a model for profiles. class CreateProfiles < ActiveRecord::Migration\n  def change\n    create_table :profiles do |t|\n      t.references :user\n      t.string :avatar\n      t.string :name, null: false\n    end\n  end\nend Once you run rake db:migrate the profiles data will be migrated to the database. Then we decided to change the column name . How can we do this? There are 3 different ways to achieve that: Making a new migration. Fixing the existing migration. Making a migration in order to change the table. Be sure to run rake db:migrate at the end of all the examples, so the changes will be saved in the database. Making a New Migration to Change the Column Name First, you need to create a new migration : rails g migration rename_profile_name_to_full_name Then, add a rename_column in the newly generated file, specifying which table and what column you want to change: class RenameProfileNameToFullName < ActiveRecord::Migration\n  def change\n    rename_column :profiles, :name, :full_name\n  end\nend And you are done! Fixing an Existing Migration Before we start, you should rollback the migration that you want to fix. Depending on when the migration was made you can do it in the following ways: The last migration: rake db:rollback . Calling the migration version: rake db:migrate:down VERSION=YOUR_MIGRATION_VERSION . Once the rollback has been completed you are free to edit the model. class CreateProfiles < ActiveRecord::Migration\n  def change\n    create_table :profiles do |t|\n      t.references :user\n      t.string :avatar\n      t.string :full_name, null: false\n    end\n  end\nend Making a New Migration to Change the Table You should only use this option when adding multiple changes to the table at once. Start by creating a new migration: rails g migration change_profiles After the file has been created, specifying which column you want to change by adding a rename type on its place: class ChangeProfiles < ActiveRecord::Migration\n  def change\n    change_table :profiles do |t|\n       t.references :user\n       t.string :avatar\n       t.rename :name, :full_name   # t.string -> t.rename\n    end\n  end\nend Always run your RSpec tests after each change to the database to make it sure everything is working as intended. Also, please be careful with reserved names in Rails or SQL when renaming a column. Here is a list of reserved words to help you. Changing the Column Type This is a common change that every programmer encounters - you start with a model having an attribute of one type and then you realize it needs to be another. At first, you might think that you should store a profile name as a text when it should actually be a string. Don't worry! You can easily fix this by generating a new migration : rails g migration change_name_to_be_string_in_profiles Now, open up the migration file and edit it in the following way: class ChangeNameToBeStringInProfiles < ActiveRecord::Migration\n  def change\n    change_column :profiles, :name, :string\n  end\nend Note that change_column is an irreversible migration . It will cause an error if you try to rollback. To prevent this, modify the usual change method in the migration to use two separate up and down methods like this: class ChangeNameToBeStringInProfiles < ActiveRecord::Migration\n  def up\n    change_column :profiles, :name, :string\n  end\n  \n  def down\n    change_column :profiles, :name, :text\n  end\nend Test this out! Start by creating a profile factory and change the name type to a string. Changing the Column Type - Errors There are times when simply changing the column type will not work. When you try to write a migration that converts a string column to an integer: change_column :profile, :age, :integer Your database will complain and raise an error: PG::DatatypeMismatch: ERROR:  column \"age\" cannot be cast automatically to type integer\nHINT:  Specify a USING expression to perform the conversion. To solve this, we will follow the hint and specify in our migration how data should be converted. There are two ways to do this: change_column :profile, :age, 'integer USING CAST(age AS integer)' , change_column :profile, :age, :integer, using: 'age::integer' . That's it! Hope these steps helped you to change the database columns to your liking. We CreateArticles every week, subscribe to stay up-to-date!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "React: First Steps", "author": ["Kolosek"], "link": "https://kolosek.com/react-first-steps/", "abstract": "ReactJS is a javascript library for building UIs. Although it's nowhere strictly defined, the idea with React is to follow the component-based ideology. Its declarative views make the code more predictable and easier to debug . We use ReactJS combined with Webpack as a bundle manager, Redux combined with ImmutableJS for app state management, and some other libraries that make the developers life easier, like Gulp for handling build and deployment (and some other) tasks. It can be used both as a simple static webpage, or it can be rendered on the server, for example, NodeJS . React applications rendered on servers are commonly called universal apps but are also sometimes referred as isomorphic. In this article, we'll focus on React solely, as Redux and ImmutableJS will be documented separately. React and JSX In React you'll widely see parts of code like these: const element = <h1>Hello, world!</h1>; This is neither a javascript string or HTML, but it's called JSX , a syntax extension for javascript. It's widely used inside render methods for React, to render dynamic parts of web pages. JSX produces React \"elements\" and is, for example, widely used when rendering something based on the condition . To use JSX inside render method, it needs to be wrapped inside {} : <img src={user.avatarUrl}></img> It's safe to use JSX, as it prevents injection attacks, so there's no worry there'll be some code injection. You'll also definitely want to render a list of items or loop through some object at a certain point when developing. This is also done using JSX, and like for conditions, we have a separate article that focuses on rendering lists solely . ALWAYS REMEMBER TO USE THE KEYS FOR LISTS! The keys help React identify which items have changed, are added, or are removed. The keys must be unique and shouldn't be changeable for proper rendering of React elements in the list. Component-based Organization and Props React recommends component-based organization of the code . All logically separable parts of the code, like input field, a button, a form, a list etc. should be written in separate components. All the simple parts of the code should be written as dummy components (often also called pure ), meaning that they will only render based on parameters passed to them, and won't have an idea on any app logic. Here are two examples of a dummy component: function Button({ onClick, text }) {\n        return (\n            <button\n                onClick={onClick}\n            >\n                {text}\n            </button>\n        );\n    } You can pass the whole object as props using {...objectName} syntax; this will pass every key-value from objectName as separate prop. function InputField(props) {\n        // props is an object containing keys like onChange, placeholder, etc...\n        // \n        return (\n            <input\n                {...props}\n            />\n        );\n    } If you want to extract only some of the props, you can do it like this: function InputField(props) {\n        const {\n            onChange,\n            placeholder,\n            value,\n        } = props;\n        return (\n            <input\n                onChange={onChange}\n                placeholder={placeholder}\n                value={value}\n            />\n        );\n    } Now, how can these dummy components be used? Basically, you can use them by importing them into the file (using a relative path to the file) and then calling them in the render method. Here's an example: import React, { Component } from 'react';\n    import InputField from '../components/InputField.js';\n    import Button from '../components/Button.js';\n    class Login extends Component {\n        ...\n        render() {\n            return (\n                <InputField\n                    onChange={this.handleChange('email')}\n                    placeholder={\"Email\"}\n                    type=\"text\"\n                    value={this.state.email}\n                />\n                <InputField\n                    onChange={this.handleChange('password')}\n                    placeholder={\"Password\"}\n                    type=\"password\"\n                    value={this.state.password}\n                />\n                <Button\n                    onClick={this.login}\n                >\n                    {'Login'}\n                </Button>\n            );\n        }\n        ...\n    } Did you notice that I wrote this component the other way than earlier ones? That's because it's not a dummy one but will contain some more logic in it. Components written this way are called smart components or classes and can have other methods bound to it besides render method. You can find out more about dummy and smart components here . Now, what exactly are props ? You can think of a component as a function (remember the dummy examples? They even use the standard function definition!). Basically, props are the parameters passed to that function when it's called . Anything can be a prop: a string, boolean, number, some other React element, undefined... The most important thing to keep in mind about the props is that they are read-only , meaning that they can't be changed in the component receiving them and shouldn't be mutated. You can read more on how to pass props in our series on how to properly use props in React . React State In the previous chapter we've learned that props are parameters passed to the component. State , on the other hand, is private and its main purpose is to manipulate it within the component. The state is available only to classes, and is used to handle some internal changes (like updating some text stored based on onChange event): import React, { Component } from 'react';\n    import InputField from '../components/InputField.js';\n    ...\n    class Login extends Component {\n        // We define initial component state in constructor function\n        constructor() {\n            super();\n            this.state = {\n                email: '',\n            }\n        }\n        // Handling state change is done by using this.setState function\n        handleChange = (event) => {\n            this.setState(() => {\n                return {\n                    email: event.target.value,\n                };\n            });\n        }\n        \n        ...\n        render() {\n            return (\n                <InputField\n                    onChange={this.handleChange}\n                    placeholder={\"Email\"}\n                    type=\"text\"\n                    value={this.state.email}\n                />\n                {\n                    ...\n                }\n            );\n        }\n        ...\n    } The state is initialized in the constructor , a special method called before initial component render. All the custom methods (like handleChange in the previous example) should be written using arrow function, so they're automatically bound to a component. You might notice that some other people use this.setState like this: this.setState({\n        email: event.target.value,\n    }); This is a bad way to update the state! The state is updated asynchronously, and if there's need to update the state multiple times in a row, it'll just batch all the setStates done this way. Use functional way to update the state instead, as described in other examples. Now, let's look at another example: import React, { Component } from 'react';\n    import InputField from '../components/InputField.js';\n    ...\n    class Login extends Component {\n        constructor() {\n            super();\n            this.state = {\n                email: '',\n                password: '',\n            }\n        }\n        \n        handleChange = (type) => (event) => {\n            this.setState(() => {\n                const stateUpdates = {};\n                stateUpdates[type] = event.target.value;\n                return stateUpdates;\n            });\n        }\n        \n        ...\n        render() {\n            return (\n                <InputField\n                    onChange={this.handleChange(\"email\")}\n                    placeholder={\"Email\"}\n                    type=\"text\"\n                    value={this.state.email}\n                />\n                <InputField\n                    onChange={this.handleChange(\"password\")}\n                    placeholder={\"Password\"}\n                    type=\"password\"\n                    value={this.state.password}\n                />\n                {\n                    ...\n                }\n            );\n        }\n        ...\n    } There's one rule when defining custom methods: never bind it in a render method . Above example shows a way how to do it correctly. If the method is bound in the render method, the new function will be created each time the component is rerendered. We have actually covered this in React Guide Props - Part I . Component Lifecycle Methods handling the component lifecycle are inherited from Component (yes, that Component you're importing at the top of the file). The most detailed description of lifecycle methods can be found here . An important thing to remember is that in the case of universal apps (apps rendered on the server) browser related global variables like a window, localStorage, etc. can only be used after the component was mounted (i.e. they'll only be available in componentDidMount ). Styling React Components Although React itself doesn't support directly using CSS for styling but is more oriented to inline jsx styles (passing style object prop to an HTML tag), this approach is not used that often. Many, if not all, of the real-life projects you'll ever see, some CSS/SCSS loader is set up, so you can use styling like CSS columns with ease. This is configured via Webpack. Routing in React For routing, we use React Router v4 . Its documentation is pretty straightforward and is pretty short, so it's a must-read. Basically, we use Router and Routes to define routes, Link component for linking pages and Redirect component to redirect to some other page on a certain action. MATERIALS Of course, don't forget to check React Documentation for a more detailed description of the framework. Check AirBnB JavaScript style guide for a bit more details on how to properly write React (and JavaScript in general) code. We don't use all the rules defined yet, but the more (meaningful) rules the better. Check Official React Tutorial . We have a series on how to use JSX . Learn more about props here . Practice ideas: Initiate a new react app using Create React App . Try creating few very simple components: wrapper around input tag with a label, a button that'll be gray and have its text changed once disabled, an avatar. Try creating a bit more complex component: a form that will have email, password, first and last name fields and a button (reuse dummy components you wrote in the previous step!) Validate the form: email, password, first and last name fields should be filled in before button becomes enabled. Email should also be of a valid format. Once the form is valid and login button is pressed, pop up an alert with values user filled in. Congratulations! You've written your first ever React component! Next, you'll learn to use React with Redux. Want to be able to React in time for each upcoming article? Subscribe and make it easy!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "Anatomy of Sails.js API with GraphQL", "author": ["Nesha Z."], "link": "https://kolosek.com/sails-graphql-guide/", "abstract": "If you're having troubles with organizing API for the Node.js app, using the Sails.js framework with the GraphQL , know that you're not the only one - we've been there too. Since this is not an every-day combination of technologies, it was challenging to define the anatomy of such app and its tests, but we did it! Are you asking yourself questions like these: How will I organize all the queries and mutations ? Where will the schema be defined? What should I do with the authorization and other utilities? If the answer is yes, this article has answers to all of your questions! Let's Start! First, we'll generate our sails app (I assume you have installed NodeJS and Sails , if not here's a little help how to get started ): $ sails new graphql-app If generated successfully, you should get a small app with a structure like this: First, we will go through api/ folder, what it and its subfolders contain: Controllers As the name says, this folder will contain our controllers, or, may I say, a controller since we are using GraphQL. This sentence really needs a text-decoration:underline - GraphQL needs only one controller to handle all the requests sent to the API. The purpose of the controller is to redirect requests to the right query or the mutation field and return the resolved value back to the client. Graphql This folder won't be created by default, so we'll need to create it ourselves. Here, we will store all of our GraphQL related files: queries, mutations, types, schema, etc. We created a folder for each entity in our app's model and stored the queries and mutations for it, and also defined type and utils regarding the entity in that folder. So, the user model will have it's own folder with UserQueries.js , UserMutations.js , UserType and UserUtils.js (if necessary), profile model we'll have its own related files and so on... Here's a visual representation: The root folder will contain the schema.js file, in which we'll combine all the queries and mutations into one big GraphQL schema . We initially chose SailsJS due to how similar it was to Rails . Model Once again, this is a self-explanatory directory which will contain all of our app models . A model represents a collection of structured data, usually corresponding to a single table or collection in a database. We will hold basic models in the root of the model/ folder, and all the models related to our basic models in a separate folder. For example, basic information about a user will be held in User.js model, but his details will be stored in Profile.js model, which will be contained in subfolder models/user/ : . Policies Policies in SailsJS are versatile tools for authorization and access control. The policy file is defined for a specific route and since we will have only one controller accessed through POST /graphql , we will have only one policy file. Through the policy, we will allow or deny clients' access to our GraphQL controller (our client is an universal ReactJS app!). Responses Sails comes with a handful of the most common response types by default and they can be found in api/responses directory. You are free to edit them, add new ones or remove them if you think they are unnecessary. Since all the traffic is going through one specific controller, we will keep only 2 of those responses and create a new one. We will keep ok.js and badRequest.js , since those are the only 2 responses our GraphQL controller can provide us, and we will create unauthorized.js which we will send if the request hasn't passed our policy mentioned above. Services Services are stateless libraries of functions ( helpers ) you can use from anywhere in your Sails app. For example, you might have an EmailService.js which tidily wraps up one or more helper functions so you can use them in more than one place within your application. Services and their helpers are the best and simplest way to build reusable code in a Sails app. The greatest thing about them is that they are globalized, which means you can use them without having to require() or import them. We use api/services/ for reusable tools like S3Upload.js, Honeybadger.js, PusherService.js etc. With the text above, we covered the structure for api/ and it's subfolders. I won't go through assets/ , config/ and tasks/ since they are the best organized as they initially are . Let's now take a look how the tests should look like. Test Sails does not automatically create test/ folder for us, so we'll go ahead and create one ourselves. The test folder should mimic the structure of our api folder which will lead to better DX , easier debugging of the code and resolving issues (everything a good programmer wants ). To create some quality tests, we will need an assets/ folder for holding the files we need in tests, we will need factories/ for a clean way to create our test data objects, graphql/ where we will put the tests dedicated to testing queries and mutations and models/ for unit testing. As said before, the anatomy of test/ folder is identical to api/ folder structure, except we have additional folders for factories and assets. This covers all the details regarding how we organize our code. We hope that this article will inspire you to write some great, well-structured Sails apps! Did you enjoy this article? Subscribe & stay tuned for more quality JavaScript content!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "CSS Bullet Style", "author": ["Tatjana B."], "link": "https://kolosek.com/css-bullet-style/", "abstract": "Are you a fan of making lots and lots of lists? Neither am I. But, here we are not talking about chore or shopping lists. We are talking about ordered and unordered lists that are inevitable when making modern websites and apps. As mentioned, when creating lists in HTML and CSS, there are two types: ordered and unordered . In the case of ordered lists numeration is present . On the other hand, in case of unordered lists, no numeration is present , that is why a common name for this type of lists is bulleted lists . When using lists, it is important to format the text properly. The focus of this article will be on unordered lists, and the types and properties of bullets. The unordered list uses the <ul></ul> tag. Let’s see a simple example. HTML <ul>\n  <li>First item</li>\n  <li>Second item</li>\n  <li>Third item</li>\n<ul> The Type Attribute The type attribute can be used to determine which type of bullet will be used on the list. This attribute can consist of three different values: Circle , Disc , Square . Bullet type can be set on either the <ul></ul> or <li></li> element, which means you can set the style on the overall list , or style each list item individually . A good thing to know is which font size to use when making lists. Bullet Style For changing the bullet style, two properties can be used. The list-style-type property or the list-style . The difference is by using the second one, we can change multiple properties at the same time. But we’ll get to that later. CSS .ul {\n  list-style-type: square;\n} Here we see the list style set to square. Using a Custom Image With the power of CSS, it is possible to use a custom image as a bullet . Usually, it is a simple small icon. For this purpose, we are using list-style-image . CSS ul {\n  list-style-image: url(‘images/sample-bullet.png’);\n} Bullet Position We can also set the position of the bullets by using the list-style-position property. It can have two values: outside and inside. CSS ul {\n  list-style-position: outside;\n} CSS ul {\n  list-style-position: inside;\n} The first image shows the value set to outside , and the second one has the value set to inside . When setting the value to outside it means the bullet will be outside the list item . And, when setting the value to inside, the bullet will be inside the list item . Don't forget to give the lists some styling . If this type of styling isn't enough, you can change the color of the bullets. Combining the Properties As we mentioned before, you can combine multiple properties by setting list-style . CSS ul {\n  list-style: square inside url(\"element.gif\");\n} With this shorthand we are simultaneously setting list-style-type, list-style-position and list-style-image . Summary Lists are used very often when developing websites and apps, so you should always know how to style them. I hope this brief explanation will help in your projects. Thank you for reading and be sure to subscribe to our newsletter!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "Learn jQuery with Rails", "author": ["Kolosek"], "link": "https://kolosek.com/learn-jquery-with-rails/", "abstract": "In order to learn jQuery fast, and use it within your Ruby on Rails project, we would advise following steps: Learn basics of JavaScript You can freely skip some steps here and there which you find that you already know. https://www.codecademy.com/learn/javascript Learn basics of jQuery https://www.codecademy.com/learn/jquery When you finish learning basics of JavaScript so you can move to their usage inside of Rails app. Basics of unobtrusive JavaScript in Rails The following tutorial will show you how to trigger JavaScript and usage on some basic actions in Rails. http://railscasts.com/episodes/205-unobtrusive-javascript jQuery with Rails The following video will teach you how to get around everything that you would need in order to master jQuery in Rails. https://www.youtube.com/watch?v=FBxVN7U1Qsk", "date": "2016-11-05"},
{"website": "Kolosek", "title": "Install Ruby on Rails on Ubuntu", "author": ["Kolosek"], "link": "https://kolosek.com/install-ruby-on-rails-on-ubuntu/", "abstract": "Instructions on how to install Ruby on Rails on Ubuntu are pretty easy . You can copy paste following code and save it in the script and execute it. This way it will install everything in one go. Full installation of Ruby on Ubuntu usually takes around 10-15 minutes . If you see something that would need updating, please let us know. echo \"Updates packages. Asks for your password.\"\nsudo apt-get update -y\necho \"Installs packages. Give your password when asked.\"\nsudo apt-get install -y curl nodejs libcurl4-gnutls-dev git-core libxslt1-dev     libxml2-dev libsqlite3-dev libmysqlclient-dev git git-doc libncurses5-dev build-    essential rake libqt4-dev libqtwebkit-dev openssl libreadline6 libreadline6-dev     curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3     libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison     subversion pkg-config libv8-dev libmagickwand-dev libreadline-dev libedit-dev     libgdbm-dev libffi-dev zlib1g-dev rake curl vim\n\necho \"Setting up mysql\"\n\n\nsudo apt-get install -y mysql-server mysql-client\n\necho \"Setting up postgres\"\nsudo apt-get install postgresql-9.3 pgadmin3 postgresql-contrib-9.3 postgresql-    server-dev-9.3\n\necho \"Installs RVM (Ruby Version Manager) for handling Ruby installation\"\necho insecure &gt;&gt; ~/.curlrc\ncurl -sSL https://rvm.io/mpapis.asc | gpg --import -\n\\curl -sSL https://get.rvm.io | bash -s stable\nsource ~/.rvm/scripts/rvm\n\necho \"Saving rvm function into bashrc\"\necho '[[ -s \"$HOME/.rvm/scripts/rvm\" ]] &amp;&amp; . \"$HOME/.rvm/scripts/rvm\" #         Load RVM function' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\necho \"Installs Ruby\"\nrvm install 2.1.2\nrvm use 2.1.2 --default\n\ngem install bundler --no-rdoc --no-ri\ngem install rails --no-rdoc --no-ri\n\n    echo \"Congrats! You are all set with Ruby and MySQL/Sqlite\"", "date": "2016-11-05"},
{"website": "Kolosek", "title": "Install NodeJS on Ubuntu", "author": ["Kolosek"], "link": "https://kolosek.com/install-nodejs-on-ubuntu/", "abstract": "Installing NodeJS on Ubuntu machine takes a few easy steps: sudo apt-get install python-software-properties python g++ make\nsudo add-apt-repository ppa:chris-lea/node.js\nsudo apt-get update\nsudo apt-get install nodejs Node Package Manager (npm) is installed along the way.", "date": "2016-11-05"},
{"website": "Kolosek", "title": "Live Reload for Rails", "author": ["Kolosek"], "link": "https://kolosek.com/live-reload-for-rails/", "abstract": "Have you ever wanted to make changes in your Rails app and immediately see the changes in Browser? If so, you can consider using Live Reload Rails feature . Install Live Reload Ubuntu sudo apt-get install python-livereload Install Chrome extension https://chrome.google.com/webstore/detail/livereload\n\nEnable http fecth in settings or Use rack https://github.com/johnbintz/rack-livereload Start live reload livereload ~/projects/project-name/app Add guard-livereload group :development do\n  gem 'guard-livereload', require: false\nend Initialize guard bungle exec guard init Add to Guardfile guard 'livereload' do\n  watch(%r{app/views/.+\\.(erb|haml|slim)$})\n  watch(%r{app/helpers/.+\\.rb})\n  watch(%r{public/.+\\.(css|js|html)})\n  watch(%r{config/locales/.+\\.yml})\n  # Rails Assets Pipeline\n  watch(%r{(app|vendor)(/assets/\\w+/(.+\\.(css|js|html|png|jpg|scss))).*}) { |m|     \"/assets/#{m[3]}\" }\nend Rub guard bundle exec guard", "date": "2016-11-05"},
{"website": "Kolosek", "title": "Elastic Search on Rails", "author": ["Kolosek"], "link": "https://kolosek.com/elastic-search-on-rails/", "abstract": "Elastic Search is a mirror DB with indexes of your existing DB, which is searchable trough JSON API. In order to perform the search you will need to have the data synced between your DB and Elastic Search. This can be done via rivers to pull data from your application or to push data to your ES node via _bulk operations. But let’s start from beginning: Download Elastic Search deb cd /usr/share/elasticsearch\n\n # To install Marvel inside development enviroment\nsudo bin/plugin -i elasticsearch/marvel/latest\n\n# In same directory run ES \nbin/elasticsearch -d\n\n#Check if it's working\nlocalhost:9200 Keeping data in sync The simple way: class Article\n  include Elasticsearch::Model\n  include Elasticsearch::Model::Callbacks\nend\n\nThe more complex way would be:\n\n# 1. Bind callbacks\n after_commit on: [:create] do\n  index_document if self.published?\n end\n\nafter_commit on: [:update] do\n update_document if self.published?\nend\n\nafter_commit on: [:destroy] do\n  delete_document if self.published?\nend Using async commands – a way to go Please refer to\nhttps://github.com/elasticsearch/elasticsearch-rails/tree/master/elasticsearch-     model JDBC plugin for Elastic Search The Java Database Connection (JDBC) plugin allows fetching data from JDBC sources for indexing into Elastic Search. https://github.com/jprante/elasticsearch-river-jdbc You can setup a script that pulls data from MySQL into ES. You will have to write custom SQL queries to do so. Marvel Plugin #Check Marvel plugin\nhttp://any-server-in-cluster:9200/_plugin/marvel/. Java versions We recommend installing the Java 8 update 20 or later, or Java 7 update 55 or later. Previous versions of Java 7 are known to have bugs that can cause index corruption and data loss. Hosted solutions https://qbox.io/ Some references: http://serverfault.com/questions/386557/how-to-index-mysql-from-elasticsearch", "date": "2016-11-05"},
{"website": "Kolosek", "title": "CSS Transform", "author": ["Tijana D."], "link": "https://kolosek.com/css-transform/", "abstract": "Without the transition , transform property is able just to turn over the object it is applied to. So, in the most real-life situations (real-life?), these two options are applied together. Just Transform Powers which this property posses are: rotate(angle) , skew(angle) , translate(x,y) , scale(x,y) , matrix(n,n,n,n,n,n) . All values are pretty self-explainable accept maybe the matrix. rotate and skew options use angle degree values (values can be negative and you can type more than 360, such as 1080deg, for three full rotations). The translate option uses px or % . The scale option uses just numbers and they define how much the object is going to increase/decrease according to parameters given to the width and height. All of these properties accept the matrix (which is still maybe not self-explained) have special options with X and Y added to syntax in which case, just one parameter is needed and property in rotate and skew cases, becomes relative to x or y-axis (e.g. translateX(), scaleY()...). The matrix option does EVERYTHING (did you expect less?). The exact syntax is matrix(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY()) . Even thought there is no rotate option inside, it is shown to me that it can rotate too. I can't say more that this (because it's math...something...function...something). Check this post for more. It's also possible to combine multiple transforms by defining them under one transform. div {\n     transform: rotate(90deg) scale(2) translateY(-50%) translateX(50%);\n } The most popular effect that this property is used for recently, is rotating navigation, social and other information on left side mostly, and making them vertical. For both examples down below is used transform: rotate(-90deg) property. 3D Transform 2D property values rotate , translate , scale and matrix have its parallel 3D values with z-axis added. Extra 3D property is perspective which defines a perspective view for a 3D transformed element. Perspective uses one value which defines how far the element is placed from the view. rotate3d(x,y,z,angle) , translate3d(x,y,z) , scale3d(x,y,z) , matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n) , perspective(n) . I believe that all those are really self-explained after we understood 2D options. Transition + Transform The transform property is used for defining the transition between two states of an element. With the transition , they make a powerful couple, as mentioned at the beginning. .box {\n     ...\n     background-color: #0000FF;\n     -webkit-transition:background-color 2s, -webkit-transform 2s;\n     transition:background-color 2s, transform 2s;\n}\n.box:hover {\n     background-color: #FFCCCC;\n     -webkit-transform: rotate(180deg);\n     transform: rotate(180deg);\n} This kind of combination is the most common usage of both, transform and transition property. It's important to remember to define transition in the first state with transform as value and to define transform in the second state. Final Word Shake those straight elements of yours! Subscribe for one more e-mail on Wednesday (and knowledge and blah blah blah).", "date": "2018-04-05"},
{"website": "Kolosek", "title": "Update Firefox on Ubuntu", "author": ["Nesha Z."], "link": "https://kolosek.com/update-firefox-on-ubuntu/", "abstract": "There is an easy way to update Firefox and there is a little bit more complex way to do it. We'll cover both of them. Easy way to update Firefox sudo apt-get update\nsudo apt-get install firefox And voila! You are done. Easy, wasn't it? If it wasn't it and it gave you an error that looks like: firefox is already the newest version Then you have to get to slightly different approach. Second way to do it Add following line to your sources list: deb http://ftp.de.debian.org/debian sid main by opening sources.list sudo gedit /etc/apt/sources.list Add to it and save. Then run commands from above: sudo apt-get update\nsudo apt-get install firefox And there it is. New fresh Firefox installed.", "date": "2017-08-05"},
{"website": "Kolosek", "title": "Setting up BrowserSync with Rails", "author": ["Kolosek"], "link": "https://kolosek.com/setting-up-browsersync-with-rails/", "abstract": "Have you ever worked on some front-end stuff and you had to refresh your web page every time you do some changes? Well, BrowserSync does that for you! To enable it in your rails app, you should: Install Node.js You can find installation instructions here . Install BrowserSync Open your terminal and type the following command: npm install -g browser-sync Start BrowserSync in your Rails app Go to your Rails app root folder and start your Rails server, then write the following command in new terminal tab: browser-sync start --proxy localhost:3000 --files           \"app/assets/stylesheets/**/*.scss, app/assets/javascripts/**/*.js, app/views/**/*.html.erb\" Of course, change this command accordingly to suit your needs. After that, you should get the following output: [BS] Proxying: http://localhost:3000\n[BS] Access URLs:\n ------------------------------------\nLocal: http://localhost:3001\nExternal: http://192.168.1.5:3001\n ------------------------------------\nUI: http://localhost:3002\nUI External: http://192.168.1.5:3002\n ------------------------------------ And that is it! Now every time you change HTML, CSS, or your JS files, the page will automatically refresh and you will see new changes! Also, this is a great way to test how your Rails app looks on phones or tablet. Just type in external http in your phone/tablet browser (of course, you should be connected to the same network as your computer). Happy coding!", "date": "2016-11-05"},
{"website": "Kolosek", "title": "What Are the Differences Between Good and Bad Programmers?", "author": ["Aleksandra M."], "link": "https://kolosek.com/differences-between-good-and-bad-programmers/", "abstract": "In one of our previous posts , we wrote about hiring an intern and an experienced developer, but we never got to this part. IT industry is full of stories about one team member who destroyed team's productivity and efficiency. \"Destroyed\" is maybe a harsh word but you know what we are trying to say. How is it possible that one person can affect the project so much and how can a bad programmer make that much influence? In order to find out, we are here to present you the differences between good and bad programmers. Types of Bad Programmers You know how they say it's easier to join the Dark Side ( insert Star Wars quote here ). Well, we think so too, especially in the programming world. Here are 2 types of bad programmers that joined the Dark Side: The Flash We are sure you have heard of the Flash, DC's superhero. A guy who was struck by a lighting which gave him the power of super speed. It resulted in him fighting the crime in NYC. However, our fellow programmer Flash doesn't fight the crime, he is the crime ( insert Breaking Bad quote here ). We named him Flash because he codes so fast. Flash's characteristics are: codes fast, writes unreadable and unusable code, works best by himself/herself, thinks high of himself/herself, thinks low of the others, if there is a possibility to skip task (or delegate it), he/she will do it, poor communication skills, never asking a question just explaining it. By naming these characteristics we entered the so-called \"gray area\". Coding fast is one of the characteristics of a good programmer but if it is done poorly, it becomes a flaw. We can positively say Flash is the worst . Another Flash's drawback is that he/she is either self-thought or didn't have any proper guidance. Their code is far from usable and understandable. In some cases, it is not even readable and - guess what - it's full of bugs . Hundreds, thousands, millions of bugs. The worst thing about the Flash is the fact that he/she has the confidence and think is one of the top programmers in the industry. This is all because Flash can meet the deadline anytime . We can't lie - having a developer that codes fast and, at the same time, creates a good quality code is a dream. We have just one tip for you: Let Flash work alone. Just let him/her be a freelancer. It will save you a lot of time, energy and money. The Garfield A good programmer is not just the one that sits for eight hours, writes semi-good code and goes home. However, that is what Garfield does. Life of a Garfield goes something like this: waking up, going to work, writing some code lines, going home, maybe doing something interesting or just watch TV. Don't get us wrong, Garfield does the job (poorly, but does it) . His biggest pit is that he is not interested in what he is doing. He hates change. There is only one thing that is constantly improving - his Google-ing skills since Google is his only consultant. Garfield has no clue about why the bug appeared or why it didn't appear . Having this type of a developer in-house is not as destructive as having Flash but Garfield has an effect on a team's productivity. Good Programmers Differences between good and bad programmers are so obvious. Having a good programmer in the company is like tasting a bar of your favorite chocolate and the good taste never goes away. It is always a pleasure to be acquainted with this type of programmer. However, we have to point out there is a difference between good and amazing programmer. A good programmer is like Robin - is very intuitive, trustworthy, acknowledges injustice and is ready to fight it. An amazing programmer is like Batman - he has been fighting the \"underground\" for quite some time and is always ready for a new challenge. For him, bugs are not just another time-consuming error that needs to be changed but a challenge that he/she needs to overcome. The main difference between these two is that amazing programmer always looks forward to a challenge. Challenging himself/herself and learning something new is his/her goal. Having good programmers and one or two amazing ones in a small team means living the dream. Here are some characteristics of a good programmer: writes readable and high-quality code, likes solving issues, likes learning new things, is open to criticism, is aware that he/she is not perfect, has good communication skills, the team gets along with him/her, needs little supervision. Working with these types of programmers means having quality staff from whom a CEO or a Project Leader can learn from. They always strive to do best. As you can see, differences between good and bad programmers can't be clearer. Just Good and Bad? Although our qualification is accurate you should be aware of the fact that programmers come in all shades of grey. Programming is definitely not all black and white. Thank you for taking the time to read about Flash, Garfield and the rest of them. And, yes, in case you were wondering - it was fun to categorize them like that. Have a good day!", "date": "2018-01-05"},
{"website": "Kolosek", "title": "Install Mongo DB", "author": ["Kolosek"], "link": "https://kolosek.com/install-mongo-db/", "abstract": "In order to install Mongo DB you should create a bash script and run following lines: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10\nsudo echo \"deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen\" | tee -a /etc/apt/sources.list.d/10gen.list\nsudo apt-get -y update\nsudo apt-get -y install mongodb-10gen Running: sudo service mongodb start Should start the service. If you encounter the error, you can check out the log at vim /var/log/mongodb/mongod.log If the issue that you are facing is ‘not enough space’ or 'ERROR: Insufficient free space for journal files2014-05-07T12:55:54.789+0200 [initandlisten] Please make at least 3379MB       available in /var/lib/mongodb/journal or use --smallfiles' you can add following line in mongodb config file /etc/mongod.conf or /etc/mongodb.conf. smallfiles=true When you restart the service everything should be in order. You will have Mongo DB installed on your machine.", "date": "2016-11-05"},
{"website": "Kolosek", "title": "10 New Year's Resolutions for Developers and Designers", "author": ["Aleksandra M."], "link": "https://kolosek.com/10-new-years-resolutions/", "abstract": "Uh oh, it's that time of the year again - time to make life-changing decisions that we will never put into practice. JK! During the holidays we had a chance to think more about professional New Year's Resolutions and what we can do better. Our approach consists of making small improvements that will, all together, make a huge step forward. Now, we are sharing with you 10 New Year's Resolutions For Developers and Designers, 5 for developers and 5 for designers . Our basic New Year's resolutions Before we start with the serious business, we have name 2 of our decision that can but don't have to be business related. These two resolutions are: recognizing when it's time to take a break and smiling more. Knowing your body will help you not burn-in in the working environment. If you feel that there is nothing that can motivate you, that leaving your cozy bed in the morning is torturing and everything looks blue, you need a break. On the other hand, we can't help but notice that say smiling is contagious . To us, there is nothing better than sharing stories and smiling during the lunch break. New Year's resolutions for developers Learning a new language or a framework By now, you already know we work with Ruby on Rails, Node.js, React.js, a little bit of Vue.js. However, no matter the technology, a good developer should always try to learn something new. Being on top of the game is a must. Strive for perfection Yes, just like you do in everyday life. This means getting better being the best at what you do. Working with Ruby on Rails? Be the best Ruby on Rails programmer there is! Existing in the community In the previous text , we wrote about how we contribute to different types of communities. Meetups, networking, open-source projects. There is always a way to help yourself and others. And, remember, GitHub is not the only place you can make a difference. Managing the most valuable resource You know what the most important resource is? Time. Do you ever feel that you 6-hour productive work led you to nowhere? You did so much that they but, considering the project, it doesn't seem enough. Don't beat yourself up, just learn how to manage the time. Taking care of yourself Cutting down coffee intake or (in our case sugar intake) is not an easy job. As you have probably seen on our Facebook page , we try to keep it healthy all time - eating organic and fresh food . However, we have to admit our spine does sometimes look like a sinusoid, in spite of the fact we have ergonomically good chairs. That why we paid attention to: our monitor being in the vision line, sitting properly, wearing headphones for noise canceling . New Year's resolutions for designers Learning something new and sharing knowledge Just like in the case of developers, designers, and everybody else, for that matter, should learn something new. Everyday. Designing is a creative job that has guidelines and testing the guidelines is always the fun thing to do. :) Updating portfolio TBH, no one likes to update their portfolio. It can be boring and time-consuming. However, we are sure you have done some pretty great designs. Why not show them off? Doing something just for you Designers often find themselves running around in the circle - designing becomes a routine, an everyday thing you are good at. If you ever feel that way, do something for yourself . Desing what you like, not someone told you to do. On the other hand, be sure to challenge yourself. Picking up a pencil doesn't make you a caveman. It makes you go back to the basics. Different approach to creativity As we previously mentioned, designing is creative work. Finding inspiration and being creative is not easy all the time. We suggest you put down the smartphone, buy a plant, take the dog out in a different dog park, go to an art show, meet new people. Everything can trigger creativity, you just have to recognize it being triggered. Helping others Helping others = Designing a logo, a print on T-shirts or something similar without expecting something in return. Get involved in these types of projects and make a difference in the world. You'll see - you'll get more than enough in return (even if it isn't money) . In the end... ... we all make our New Year's Resolutions. Some of them we keep, some of them we don't. We suggest you make a list of achievable goals and keep your chin up. Good luck and Happy New Year from Kolosek team!", "date": "2018-01-05"},
{"website": "Kolosek", "title": "Our Contribution to Communities", "author": ["Aleksandra M."], "link": "https://kolosek.com/our-contribution-to-communities/", "abstract": "During the Christmas season, people often tend to question what they had done in the past year and is there anything that could have been better. On the other hand, this is also the time when they spread love, share positive thoughts, and help someone in need . We have decided it is time to share our contribution to communities. Since Kolosek is a remote software development company, we have multiple communities to cover, but we will name just the two of them. First, there is a \"general\" community and then there is a community of developers . We will separate our actions into these two groups. Keep in mind that doing good makes you feel good. Most people do it because the more you put in, the more you'll get back. We do it because we can and not because we are supposed to. Giving back to the community of developers There are multiple ways to do this. We chose just a few. Reviewing software You might remember from our text about the new approach to blogging that we mentioned that there will be pages on our sites for submitting codes and designs. We are still in the process of creating them but that doesn't mean we are not reviewing projects. Reviewing the code and the design keeps us responsible. If we have all this knowledge, why wouldn't we share it and help others? Writing blog posts We have to come a realization that blog posts don't just help our readers , they help our new employees to solve the issue regarding the code. GitHub and open-source projects We are currently in the process of creating few open-source projects. And you know where we will be posting them, as soon as they are done. :) Meetups Meetups are a great way to learn something new and meet new people. They represent an example of great contribution to communities. Although most people consider meetups as business opportunities, we know great friendships that are born this way . Is there a better New Year's gift? We suggest you look around meetup.com and find a community you can become a member of or just attend their gatherings. Other events As a company, we like to participate as partners. As individuals, we like to volunteer at different events and conferences. Teaching a fellow developer If you have time, that is. Reaching out to someone that doesn't have the knowledge to solve a problem is a very colleague-ish thing to do. Note: Please keep in mind there are many ways you can help the community online. Sharing the knowledge on Stack Overflow, starting a discussion on Twitter, Facebook groups and Quora is a great thing as well. Giving back to the \"general\" community Making a contribution to communities is important and you should never neglect. By \"general\" community we mean a circle of people that are not developers but can use your help. Donating Donating is a huge trend in the Xmas season. Everyone wants to present themselves as kind, giving people. We say: Sure, why not? Find a charity you want to contribute to but, remember, it isn't all about the money . Those people need food, clothes, something to play with etc. Offering to help someone Holding a door for an elder person. Helping an older person with carrying groceries. Everything counts. Volunteering at a National Kitchen Providing a nutritious, healthy meal to the homeless. Also, if there are food leftovers from some party, you can just drop them off at a National Kitchen. It costs nothing and we guarantee it will put a smile on those people's faces. Not just during the holidays Contribution to communities isn't a one season job. If holiday guilt is something that drives you, your motivation is limited. Remembering to do these and even greater things should be your New Year resolution. Be someone's Santa. Appreciate what you have and give back to others because, sometimes, giving is the best present you can give to yourself.", "date": "2017-12-05"},
{"website": "Kolosek", "title": "Top 9 Sentences You Shouldn't Say to a Developer", "author": ["Aleksandra M."], "link": "https://kolosek.com/sentences-you-shouldnt-say-to-a-developer/", "abstract": "Over the years we have come to realize it's better to leave some things unsaid. However, these are not one of those things. Developers don't have to deal with just deadlines, working under pressure etc, they also have to deal with (most likely) good people that don't know the best way to explain the issue. We have all been there and that's why we present you with a list of top 10 sentences you shouldn't say to a developer. Before we start, you should know that we divided these sentences into 2 groups - the ones that the Boss is saying and the ones developers say to each other. Sentences you shouldn't say to a developer if you are the Boss This is a tricky situation because most of these sentences are the ones that are said in order to improve developer's productivity. However, maybe Boss' approach is inadequate . How much time do you think it will take you to...? This is a common question and completely fine if it isn't related to something a developer sees for the first time. It is hard to estimate the time needed for learning a new language and putting it into practice. Let's analyze why did it take so much time... Bugs, God damn bugs! It took a lot of time for numerous reasons . Analyzing the time spent on a task is a great way of improving efficiency but can annoy the person in question. Just these code lines? In how many days? It's about the quality, not quantity. Pushing a developer to write more code lines is like saying a turkey in the oven to roast itself faster. Mission impossible. Why haven't you asked for help? Probably what a developer should have done. Well, sometimes developers like to do things on their own because that is the best way they'll learn. Did you Google that? The answer is \"definitely\". Google is developers' best friend ! And if Google doesn't know, who does? It needs to be done right now. Some things can not be done immediately. In most cases, the Boss understands it cannot be done immediately but doesn't have the time to deal with it late. Sentences you shouldn't say to a developer if you are another developer The truth is no one can stab you in the back the way your mate can. Maybe that was a bit too harsh, but you'll read where we are getting at. She/he will do it faster! Nobody likes people who want to transfer responsibilities to another person. If you are in charge of the task, do it properly. Did you do it in HTML5? Do not be amazed if your colleague answers: \"Yes, I have been living under a rock for the past 10 years and am not familiar with other programming languages.\" My 15-year-old brother can do it better than you This is just low. No explanation needed. To sum up Developers are not all mighties. Some of these sentences can act like kryptonite for Superman. But, in most cases, they will just raise a developer's blood pressure and everything will be OK after a couple minutes. :) Are there any additional sentences we forgot to mention?", "date": "2017-12-05"},
{"website": "Kolosek", "title": "13 Remote Software Development Myths", "author": ["Aleksandra M."], "link": "https://kolosek.com/13-remote-development-myths/", "abstract": "As you might know by now, software development is our specialty and has been for a quite some time. As a remote team, we have had multiple clients that we build a great relationship with but, somehow, there were always myths regarding our work. So, today, we are going to bust all of these myths and share with you a list of 13 remote software development myths. Myth 1: A Client can only slow the software development process Good communication with the Client (or the Product Owner) can only benefit the software development process. Myth 2: Product Owner and Scrum Master have to be in the same location Nowadays, when there are so many collaborative project tools , Product Owner and Scrum Master can easily share tasks, calendars etc. Not to mention communication tools (like Slack) remote teams frequently use. Myth 3: It's better to have an in-house development team We pretty much covered this myth in our previous article Pros and Cons of Remote Development . What this says is, when it comes to updates and bugs, it's better to have your own team that will take care of the issues immediately. This is one of 13 remote software development myths that can't be further from the truth . The contract you sign with the remote development team should define all of these parameters. Myth 4: Hiring a remote software development team means having less product quality No, never! Just the opposite - if you find a good development team, it means that you can get a good quality code and the team that is capable of creating the product even better than an in-house team would. Myth 5: Software development team members don't really understand Product Owner's business needs We are not talking about ten-years-ago developers. Nowadays, it is completely normal for developers to work under different business models. They are not just coders and geeks. They know how the business is done. Myth 6: Adding more people to the team will speed up the development time On the contrary! Adding more people can only cause overtime . This creates stressful workplace and causes nothing but trouble. Myth 7: Waterfall is amazing for software development It is a well-known fact that Waterfall doesn't allow the team to adapt to changes in the project. On the other hand, Scrum framework is more efficient, flexible and, therefore, is our first and only choice. Myth 8: Adding new features and making changes after the project has been released is no big deal It is a big deal! Not because the remote development team is going to have to work more but because sometimes those changes can affect whole system architecture . We always advise the Product Owner to examine if users really want this changes to happen. Myth 9: Using newest technologies can speed up the delivery time We have to admit we try to be up-to-date when it comes to new programming languages and frameworks. Sure, using newest technology can be a plus, but if the delivery time is longer than it should be, it's on you and your team. Does a blacksmith blame his tools for not creating a word he wanted to create? No! On this 13 remote software development myths list, this is the most talked about. Don't mix myth with the truth. :) Myth 10: Designers are only there to design applications Designers can also learn how to code. Period. Myth 11: Releasing the project means that the project is finished This is directly related to Myth 3. The project isn't nearly done. The project is an ongoing process that requires making updates and fixing bugs. Myth 12: Software development is about coding and logic We wouldn't agree with this one. Software development is a mix of logic and art . If we mention the design of the app, you can see that the artistic eye of the designer is always needed. And please, for the love of God, don't consider the design to be an irrelevant part of the app. It is important what under the hood, for sure, but so is the design. Myth 13: Software is usually bug-free One of the greatest jokes we have ever heard! The software is NEVER bug-free. There always has to be even a small amount of bugs. Please note that Product Owner and Client don't have to be the same person. Simply put, a Product Owner can be a Client, but in most cases, it is the person that works with the Client and describes Client's wishes to the software development team. On the other hand, there are some cases in which a development team member can jump into the role of Product Owner and communicate with the team about client's needs. We hope we successfully busted some myths and gave you proper reasons why you shouldn't believe in them. Hearing myths is always fun, facing them, on the other hand, not so much. Let's fight together against stereotypes and be the best version of ourselves. Thank you for taking the time to read this article! Have a good day!", "date": "2017-12-05"},
{"website": "Kolosek", "title": "Rake DB Commands", "author": ["Kristina P."], "link": "https://kolosek.com/rake-db-commands/", "abstract": "Rake is a utility built into Ruby and Rails , which provides an efficient way for managing database changes. You can easily migrate database changes to servers by only using a command line! You might be asking yourself during your application development: What happens when using rake database commands ? When should I use them? Let’s take a look at how we can use these commands to change our database while developing an application! Creating $ rake db:create When you create your Rails application for the first time, it will not have a database yet. In order for it to start, you will need to make sure the database is up and running. Just like it's recommended to use different gems for each environment, you should also create three databases, each for development , testing , and production environment. You can configure them in your config/database.yml file. default: &default\n  adapter: postgresql\n  encoding: unicode\n  username: username\n  password: password\n  host: localhost\n  port: 5432\n\ndevelopment:\n  <<: *default\n  database: story_dev\n\ntest:\n  <<: *default\n  database: story_test\n\nproduction:\n  <<: *default\n  database: story Migrating rake db:migrate Migrations setup the tables in the database. When you run the migration command, it will look in db/migrate/ for any ruby files and execute them starting with the oldest. There is a timestamp at the beginning of each migration filename. Every time you migrate a database or make any change to it such as adding a row or a column, adding a table or changing the data type, you have to run this command for the changes to reflect in your database. List of Database Rake Tasks in a Rails Application Migrations are created when you run commands like rails generate scaffold , rails generate model , or rails generate migration . Here is an example how you can use rake db:migrate when uploading images . Be sure to not have data creation in the migration files! Initializing rake db:schema:load Unlike rake db:migrate that runs migrations that have not run yet, rake db:schema:load loads the schema that is already generated in db/schema.rb into the database. Always use this command when: You run the application for the first time . When you drop the database and you need to create it again. Beware ! If you run rake db:schema:load on a production server, you'll end up deleting all your production data. Seeding rake db:seed We always have default data that we want to have in our application for testing purposes. The seed command exists to automate this process. Example : Create an admin user and store its data in the db/seed.rb file. When you run rake db:seed it will load all the admin data into your application. Admin.create!(email: ' [email protected] ', \n              password: 'password', \n              password_confirmation: 'password') Rails seeding is generally for development and/or staging environments, there are only a few uses in production. You don't want your production application to seed dummy users! Rolling Back rake db:rollback Did you create a migration without wanting it or you simply changed your mind about it? Fear not! When you run this command, it will look at the last migration created and undo it! Example : Let’s start off by creating a new migration with :role as an integer and run the migration . Then we decided to make it a string instead. So, we will edit the newly created migration and run it again, but nothing happens and your tests and factories will fail. class CreateRoles < ActiveRecord::Migration\n  def change\n    create_table :roles do |t|\n      t.integer :role # we will change this to t.string :role\n      t.references :user\n      t.timestamps\n    end\n  end\nend Why isn’t this working? Only the last created migration is run with rake db:migrate command. This means that no changes will be made by editing an already existing migration. To make this work, you will need to run rake db:rollback instead. This will tell Rails to do two things: Undo the last changes you just made to the database. Update the migration timestamp. Dropping rake db:drop Sometimes we want to delete all of the data and tables and start from fresh. That's what rake db:drop is for. If you want to keep the data you have, be sure to back it up before running this command. Dropping the database will also remove any schema conflicts or bad data . Once the database is dropped, you'll want to start the process over again by re-creating the database, running migrations, and seeding the data. Be sure that your RSpec tests are passing after remaking your database! Make sure you don't have connections to the database or it won't drop. Resetting rake db:reset You might sometimes need to drop the local database and start fresh with data loaded from db/seeds.rb . This is a useful command when you are still figuring out your schema, and often need to add fields to existing models. Once the reset command is used it will do the following: Drop the database: rake db:drop Load the schema: rake db:schema:load Seed the data: rake db:seed Why db:schema:load and not db:migrate? rake db:schema:load is much faster than rake db:migrate , because it loads the schema that we’ve already generated from db/schema.rb instead of going through all the migrations again. Hope this helped you to understand the main difference between rake database commands! Do not forget to db:subscribe_today with your string :email!", "date": "2018-03-05"},
{"website": "Kolosek", "title": "Hiring an Intern Vs. Hiring a Full-time Developer", "author": ["Aleksandra M."], "link": "https://kolosek.com/hiring-an-intern-vs-hiring-a-developer/", "abstract": "As you can see from our landing page, we are a small development team. However, what you don't know is that we have had experience with hiring know-it-all and still-in-college developers . Here's our story on hiring an intern vs. hiring a full-time developer. Hiring an intern We have always admired intern's willingness to work hard and prove that he/she deserved to be here. Having an intern can benefit the organization in so many ways. But it's not all sunshine and rainbows. Let's start with the good news first . An intern is: willing to learn more, committed to doing the most, a potential who can turn into a great developer, respecting authority, questioning how things are done, someone you can rely on finishing a task you have trouble with. Let us explain all of the pros. You were an intern once, you remember how it goes. Entering into a working environment is a huge deal for an intern. He/she is given a chance to demonstrate the fresh-off-college knowledge and finally use it. One of the biggest pros is their proactive attitude. If the intern is brave enough, he/she is going to question how the things are done. Dear reader, don't panic, this is a good thing! Sometimes the company processes are not as efficient they should be and only someone from \"the outside\" can spot it. However, don't let him/her get cocky. Everyone needs boundaries. On the other hand, there is a couple of cons : not being able to work full-time, not having enough experience. Not being able to work full-time is an obvious drawback. What you should be worried about is the lack of experience. You can never expect intern's code to be as polished as a developer with 5 years of experience would do. And that's OK only if you have time to guide and teach an intern. For Kolosek, the best thing about hiring an intern is having to mentor someone who can potentially become a great developer. Interns need experience and they are willing to learn. If you have the time, this is a win-win situation. Current score: Hiring an intern vs. hiring a full-time developer - 1:0. Hiring a full-time developer Hiring a professional developer is great. It's just great. No one can argue with that. So, we'll get straight to the pros and cons. Pros: a quality developer with knowledge and (much needed) experience, almost perfect code, independent. Cons: more costs. Pros are obvious. Having a developer who is independent and knows how to write a great code is a must. On the other hand, the company should pay attention to costs. And this is the only con we have for you. Current score: Hiring an intern vs. hiring a full-time developer - 1:2. Two points for experience, which plays an important part in the professional skills department. Whom to hire? Battle called hiring an intern vs. hiring a full-time developer has come to an end. From what you have read so far, you probably guess that our answer is to hire a full-time developer. But we say hire them both! Hire an intern and an experienced developer. When we were first starting out, we stuck to one rule - hire a good developer, that is willing to make progress. In our team, you can find experienced and not so experienced developers. However, if you are first starting the business, be sure to have up to 3 full-time developers before hiring an intern . This way, all employees can share responsibilities for him/her. And remember, a chain is only as strong as its weakest link. Make sure there is no weakest link with teamwork. Thank you for coming this far in the text, we appreciate you reading the post all the way to the end! We hope you learned something new today. :) Until next time!", "date": "2017-12-05"},
{"website": "Kolosek", "title": "Why Don't Developers in Large Companies Like Agile?", "author": ["Aleksandra M."], "link": "https://kolosek.com/developers-dont-like-agile/", "abstract": "In one of our previous articles , we wrote about Agile, presenting it as the best philosophy and concept for startup companies. We haven't changed our minds - we still think Agile is pretty awesome but we have to admit it doesn't work for all companies and it certainly doesn't work for developers in large companies. Here's why. Large companies being Agile Yes, large companies like being Agile but without acknowledging it. In an article written by Steve Denning for Forbes Magazine, you can read how Apple is being Agile without calling the processes 'agile'. Denning used Adam Lashinsky's book, Inside Apple , as a guidance and here are the conclusions: Steve Jobs is the Product Owner Assigning major projects to small teams Clear and defined roles in the team Working in iterative periods of time No middlemen However, Apple doesn't mention \"Scrum\", \"TDD\" or any other up-to-date frameworks. Apple makes it work by not giving their philosophy and processes a name. So, why don't developers like Agile If you search a bit online about this problem, you'll see that developers in large companies stated several issues which can all be summed as one - they feel distrust in the working environment . To them, religiously following Scrum means the following: daily standups are a moment in which the team decides who they should blame and how little has recently been done, retrospective planning is here to help them decide who to blame overall, too much control, not enough time per Sprint. For developers in large companies, Scrum and all the other Agile frameworks mean two things: TOO MUCH CONTROL and NOT ENOUGH TIME . These are the reasons standups feel like going to the guillotine. These are the reasons developers are writing hacks to make their code pass the review. You can often hear that there is no time to gather documentation, to update stories, deliver iteratively and keeping up with the shipping. If the developers feel this way, Agile has not been implemented well. What's the solution? As you can see, we are true believers when it comes to being agile. Originally, Agile is a development process , but somehow it turned out to be a business process, that lost connection with the development part. If business and tech don't work together on the same problem, Agile doesn't have a chance to survive. Agile is a philosophy that should be adjusted to every company. Since large companies have large issues, they can always use some help. We are suggesting hiring real Agile experts. Or if the company is as huge as Apple, just keep doing what you are doing and not calling it Agile. :) Thank you for taking the time off your busy day to read this brief article. We hope you found it helpful. As you can see, developers are not haters, they are simply misunderstood and are trying to make a positive change.", "date": "2017-12-05"},
{"website": "Kolosek", "title": "Pros and Cons of Remote Development", "author": ["Aleksandra M."], "link": "https://kolosek.com/remote-development-pros-and-cons/", "abstract": "Kolosek is a remote development company . We can proudly say we know a thing or two about how challenging it is to be this type of company. Over the years, we have managed to overcome some obstacles of remote development, but that doesn't mean that there are no real cons of remote development. Before we begin with sharing our experience, it is important to emphasize that Kolosek is not a just remote development team, we are a company , an organization. Please keep in mind that we don't have similar issues with a group of developers which are a part of remote development team. We are going to give you a real perspective on what it's like to hire a remote development company . First, let's start with the bad news - the Cons . Product Updates and Bugs When it's time for the product update or a bug pops up in the application, having a development team under your roof is probably the best option. However, you can easily solve the problem by defining the terms of the contract . Remote development company should, periodically, do the application update. The same thing goes for bugs. Time Zones and Other Differences Different time zones can cause multiple problems. We can't lie - it is much easier to have an in-house team that you can easily talk to, whenever. On the other hand, the language barrier is a real thing. You have to be aware of the fact that English may be a second (or third, fourth?) language to the most remote development companies. The light at the end of the tunnel is the fact that English dominates in the IT industry and most of the developers know how to speak it well. Finding a Remote Development Company Finding a remote development company is time-consuming . You have to do multiple types of research, on and offline, in order to find the one organization that is right for your company. Jokes aside, having to go through interviews, visiting company's headquarters and assigning tests is definitely not the fun part. Now, let's get to the Pros . No Management Problems Remote development companies have a person that is in charge of managing the development team. Management issues solved! Hiring Professionals We don't want to brag, but most remote development companies hire only professionals . Keep in mind there is always a reason why a freelance developer is just a freelancer - the lack of professional or soft skills. Adjusting to the Projects You can hire a remote development company to work on multiple projects . Of course, there are some factors that should be considered, like how complex the project is, how many team members are in the company, what the goal of the project is etc. Lower Production Costs This is the most obvious advantage of all of them. No paying taxes, office maintenance, and insurance. The development company takes care of all that. Lowering production cost and still getting a quality team of professionals is a huge benefit of hiring a remote development company. More Pros Than Cons? When we put lowering the production cost aside, there is an equal number of Pros and Cons of remote development. However, we wouldn't call it a tie. The biggest advantage of remote development is not lowering the costs, but the fact that all of the Cons can easily be turned into Pros . Fixing product bugs and updating the product on time should be included in the contract , so there is no issue with that. The language barrier can be overcome by hiring a team that has good English knowledge. Trust us, you will be able to tell if they are right for the company after the first Skype call. We have to admit, finding a remote development company might be the biggest issue so far. There is a solution for this problem, as well. We say go with your gut and never forget about word-of-mouth marketing . Maybe someone you know knows a person who knows a good remote development company... you get the picture. Also, have you read our previous article on what the most important resource for the SaaS company is? Here's a hint: the one that create the greatest intangible resource. Thank you for taking the time to read our blog post! We hope it has helped you decide whether or not you like to try hiring the remote development company.", "date": "2017-12-05"},
{"website": "Kolosek", "title": "What Is the Most Valuable Resource for the Saas Company?", "author": ["Aleksandra M."], "link": "https://kolosek.com/most-valuable-resource-for-the-saas-company/", "abstract": "Every company consists of resources which contribute to functioning such a system. However, SaaS companies are very specific. That's why we wanted to find the answer to what the most valuable resource for the SaaS company is. Here's our take on this subject. But First, What Is a SaaS Company? An acronym SaaS stands for Software-as-a-Service. Simply put, SaaS organizations provide a software solution to some other company. According to Derek Singleton from softwaredevice.com , SaaS is a method of software delivery in which the user has the opportunity to access it from multiple devices, that have an Internet connection and a web browser. SaaS vendors (Kolosek is one of them) take care of code, databases, and application. SaaS Resources SaaS companies have different business models than most of the companies. However, just like any other company in the world, SaaS companies consist of the following resources: Financial resources Human resources Tangible resources Intangible resources It is important to remember that each of these resources is adding value to the company. Depending on the quality or quantity of them, the value can vary. In order to answer which of these is the most valuable resource in the SaaS company, we will go through each of them. Financial Resources Financial resources are measured by the company's ability to maintain the previously defined financial strategy . Depending on what the company does financial strategies are different. Furthermore, a huge impact on the financial strategy has how old the company is. According to a post on cloudstrategies.biz , the biggest problem with SaaS companies is delayed revenue, that directly impacts profitability. Financial strategy of SaaS company goes something like this: determinating the working capital requirements, making sure there is enough cash until the subscription fee can cover the operating costs, constantly measuring sales, revenues, investments. potentially having a contract that describes prepaid subscription revenues. Human Resources In SaaS companies, human resources directly affect competitive advantage. Relations with the clients are the key to profitable business. However, we don't like to look humans as resources. Seems a little bit too harsh. Instead, employees are the source of new knowledge and devotion. Human resources represent the people who, using their knowledge, experience, talent, and expertise, contribute to the company's mission. Not to mention, everything has to be documented. Tangible Resources Tangible resources are all things that surround the business space - infrastructure . Offices, IT systems, facilities, rent, electricity. There is no company without tangible resources. Intangible Resources When someone mentions intangible resources, usually the first thing that comes to mind is intellectual property . However, this is not the only intangible resource. Knowledge, company's culture, mission, vision, and values are just as important. What Is the Most Important Resource in SaaS Company? From our experience, equally paying attention to all the resources is going to bring a stable and profitable business that knows how to create competitive advantage. If we had to choose just one, we would go for human resources , the people. People are the ones that use their knowledge to solve the most complex issues and are not afraid of the challenges. Employees are the foundation of every company. What do you think? Which is the most valuable resource for your SaaS company? Thank you for taking the time to read this article. We know you are pretty busy and hope you found this article helpful. Remember, people are the ones that initiate and adapt to change . With their will and desire, they can create something extraordinary. Until next time!", "date": "2017-11-05"},
{"website": "Kolosek", "title": "Get in the Zone: Developers and Headphones", "author": ["Aleksandra M."], "link": "https://kolosek.com/programmers-and-headphones-getting-in-the-zone/", "abstract": "Here's the thing with developers - they come to work, say \"Hi\" to one another, chit-chat a bit and then put on headphones. Headphones had become a part of the mandatory equipment , just like the monitor or a keyboard are. Are headphones just a trend or do they help with getting in the zone? Listening to music while working is just one way to get in the zone . We wanted to find out does listening to music increase the productivity level and if so, which music genre creates \"the best mood\". Here's our point of view. What is \"the zone\"? The zone is described as a state of mind in which a person is hyper-focused and super productive. Kinda like turning into the Hulk but without all that anger issues. Analyzing it on a chemical level, being in the zone provides great pleasure. That pleasurable feeling has to do with Maslow's Hierarchy of Needs theory . Simply put, one of the human needs is the need for accomplishment and that is precisely what the zone provides. If you want to learn more about Maslow's theory, be sure to check out Leanne Butkovic's post on fastcompany.com . How to get in the zone? The focus is the main ingredient of the zone. No matter what you are doing - coding, designing or writing, being focused is a good starting point. However, we need to emphasize the fact that a person can be focused only when his/her energy is balanced. This means no stress, no interruptions and distractions , just you and your thoughts, seeing clearly the problem and using a creativity to solve it. So, what can you do to concentrate better? Here's our take on how to get in the zone: know that the goal of the task is, know when are you the most productive, shut down all communication channels except the ones you need (like Slack or Skype), wear headphones to minimize all the interruptions, take a break when you need it, openly say to your co-workers you are currently working and are not in the mood for chit-chatting. Headphones and the zone Like we had mentioned, more and more developers work the same, every day. They come to work, chit-chat a bit and then put on their headphones and listen to music. However, that's just one way to get in the zone. The ultimate goal of the zone is to concentrate and be focused on what you are doing. Music helps with that. There is no secret that listening to music can increase productivity level . Having a rhythm in the background makes you keep the pace. Here are the reasons music is so good for you: It can inspire - listening to epic, movie themes can lead to a more successful project creation. It can remove work dullness - sometimes, when you are testing and doing the same tasks over and over again, it's good to have something that can break that circle. It can decrease the level of stress - music is therapeutical. It eliminates all the other noises - chair creaking, a colleague's eating habits, or some other interruptions. What to listen to? You know how, when you were little, there was a study that has shown that while doing math task, you should listen to Mozart in order to solve the issues faster ? The same thing goes for developers and music. It would be wrong of us to tell you what music you should listen to. Music is an individual part and everyone has different taste. However, here's what proved to be a good practice for many developers. If you listen to 10-20 tracks that have vocals in them over and over again, your productivity level is probably not going to increase. The reason for this is the fact that you'll learn the text and most likely start signing in the middle of the task. We suggest you listen to music without vocals or lyrics . Also, avoid listening to new tunes since they require more attention - your brain automatically focuses on remembering the lyrics and melody. Against the zone? Not all of the developers love being in the zone. According to Kenneth Tryers from kenneth-tryers.net , this code is mostly too complex when he is in the zone. As Kenneth explains, creativity raises the will and motivation to solve problems which means that the code is usually more complex than it should be . When debugging such a code, the programmer has to be in the zone, as well. However, we must admit our developers have never experienced this type of problem. Final thoughts There is no reason you can't get in the zone. Listen to your natural balance and how the body works and then find out what is the easiest way for you to get in the zone. Thank you for taking the time to read our blog post. We hope that this article on how to get in the zone helped you to understand how important the zone is and what you can do to achieve this state of mind.", "date": "2017-12-05"},
{"website": "Kolosek", "title": "Why We Decided It's Time for the New Approach to Blogging", "author": ["Aleksandra M."], "link": "https://kolosek.com/new-approach-to-blogging/", "abstract": "Right now, we are going through something Britney Spears probably did, back in '07. Well, not that serious, but it's been a pretty bumpy road. Lately, we have been thinking more about our blogging approach and the content we provided for our readers. Make no mistake, blogging is a serious thing . Having a blog, whether you are a person or a company, can make you limitless and give your voice a chance to be heard. If HubSpot is writing about this then it must be true! On the other hand, blogging is like having a powerful magic wand - it can turn you into something you are not. More precisely, only YOU can turn yourself into something you are not. Unfortunately, that's what we did. What is this blog post about, you may ask? It's about us turning a new page in our book of blogging adventures. A new approach to blogging. Our previous approach to blogging had a few goals. Our primary goal was to help developers, the rock stars of our modern ages. Furthermore, we wanted to help startup companies to spread their wings - to inform and inspire them. Not to say we haven't had any success. We have had! The developers loved, among others, our posts about Cucumber cheat sheet and CarrierWave upload multiple images . But that's not good enough. We are all humans, we make mistakes. The important thing is to acknowledge them and make improvements. Don't worry, we are not quitters. We are going to work harder and smarter, in order to deliver quality content for you. A quality content about what we know best - software development challenges, working with the clients, solving day-to-day development issues and tech news. There is one more surprise. In order to help you start up your business, we are going to create pages where you can submit your code and design and we'll check it out and give you a review. It's all about giving back to the community. Thank you for sticking with us and being our reader! Here's to our new approach to blogging! raising a glass of water in the office", "date": "2017-11-05"},
{"website": "Kolosek", "title": "Agile and Scrum: Our Favorite Duo", "author": ["Aleksandra M."], "link": "https://kolosek.com/agile-and-scrum/", "abstract": "In our previous articles we wrote about Agile and Scrum , separately, and now we decided to mix them and bring together . If you want to know more, be sure to read those blog posts, and now, let's get to the the benefits of both of these productivity raisers. Agile and Scrum These two grew up in the same cocoon. Precisely, Agile is Scrum's older and wiser relative , similar to Rick and Morty. As you probably learned by now, Agile is a philosophy, a concept that explains how a team should do a project, on a theoretical level. Agile describes principles, while Scrum is all about implementing principles by following the rules. Agile is a philosophy and Scrum a methodology. Agile and Scrum - the similarities The similarities are: using an iterative approach of making a project, adapting to change, making improvements, delivering the product on time. Using Scrum Scrum is not for everybody. I mean, it is, but you don't need it all the time. Here are some cases in which Scrum can help: when you are about to do a large project, when there is no deadline for an app to be delivered to the client, when team members want more autonomy. Not to sound rude, but Scrum is amazing for clients that change their minds quickly and are not sure what exactly they want because development team can easily adapt to that change. Using Agile Every time you think you need a project management concept, think of Agile. No matter for which method you decide to go with, Agile, as a philosophy, is the way to go. In the end... ... Agile and Scrum are inseparable. They go like hamburger and french fries. Not from McDonald's. From some fancy restaurant that sells hamburgers. Delicious! If you want to know more about Agile, also check out our post on Agile and Lean . Hope you learned something new today. See you later, alligator!", "date": "2017-11-05"},
{"website": "Kolosek", "title": "Top 10 Most Popular Programming Languages", "author": ["Aleksandra M."], "link": "https://kolosek.com/most-popular-programming-languages/", "abstract": "Nowadays, being a developer is like being a rockstar . Everyone wants to see what you came up with and hear your professional opinion. Developers maybe don't have groupies (or do they?) but they still have fun - doing the job in multiple, most popular programming languages. On the more serious side, the market is constantly in a demand for programmers . The ones that are devoted wrote thousands of code lines and are not afraid to try new programming languages. The trends are constantly changing, especially thanks to IoT (Internet of Things) technology . However, the funny thing is that, according to Spectrum IEEE , no new languages made into the most popular programming languages list in the past 2 years. If you are thinking about hiring few engineers, you have to know what to look for. Most popular programming languages If you are someone who wants to learn more about programming languages before you read the rest of this post, make sure to answer a few questions: Why do you wanna learn programming languages? How much time are you willing to put in learning? Do you prefer backend or frontend? There are so many languages to choose from and we bring you top 10 most popular programming languages , in alphabetical order: C This is a general-purpose language, which is quite old - over 40 years old. It serves as a builder for devices, apps, and even 3D movies . In Serbia, this is the language that is primarily thought in college, because it is a great language to start with. C has more of an academic base and a lot of most popular programming languages are based on it. Also, this is an open-source language. C++ C and C++ are connected. If you are familiar with the previously mentioned one, you'll get a head start with C++. There are so many benefits of using C++: it's fast, it allows you to use different programming styles, it is object-oriented. C++ is used for making softwares, games and browsers. For example, Adobe products like Photoshop and Illustrator are C++ based products . C# It is pronounced C-sharp (not C hashtag) and you'll thank me later. This programme is similar to Java, they almost go together hand in hand. C# is mostly used for developing Microsoft apps, but can be used for Android and iOS apps with the help of Xamarin . According to Jake Widman, from newrelic.com , programmers use the most JavaScript, Python, and C# and actually like them. Java Would it really be a top 10 most popular programming languages list if we didn't mention Java? Probably not. According to GitHub and its Popularity of Programming Languages list , Java maintains championship as a still the most in-demanding programming language. Java is most connected to Android apps (as a part of backend team), but it can serve well for creating video games, softwares and web apps . LinkedIn , Amazon and eBay use Java. JavaScript Don't make a mistake, this programming language is not related in any way with the previously mentioned Java. In the Stack Overflow survey conducted last year, JavaScript appeared as the most used language by the programmers . This is definitely one of the most popular programming languages and it has been here for a long time, since 1995. Now, you can find JavaScript all over the web. It is considered to be a part of frontend team but can be a part of the backend. Objective C So many Cs, I know. This is the last one. Objective C is one of the popular programming languages that is general-purpose and object-oriented . It is formed for developing apps on iOS and OS X and its base is C. This means that objective C has syntax and flow control statements just like C and some other syntax for classes and methods. However, this programme's future is questionable since Swift (check the Honorable mention part) is taking charge. In 2017, this most popular programming language celebrates his 33rd birthday. PHP There is no way you haven't heard about PHP. If you are looking to be a backend developer, don't skip this programming language, since it is often used by junior developers . One of the biggest advantages of PHP is that it is open-source and easy - embed code within HTML and that's it. PHP is a part of Content Management System for WordPress . Python Don't worry, Python won't grab you with his teeth and eat you up. Actually, it is probably the easiest programming language outhere and the most popular, because of the IoT trend. Let's just say that Instagram and Pinterest are built on this language. The main reason why this is one of the most popular programming languages because it is so simple to use . Also, Python has so many frameworks that you can use it for anything. Ruby Oh, our loved one. We deal with creating web apps on Ruby, precisely Ruby on Rails (using Rails framework). According to blog.newrelic.com , there were 2,136 jobs posted for Ruby developers and that was in November 2016. If you want to know why we decided to use Ruby, check our previous blog post. SQL SQL stands for Standard Query Languages, but it always reminded me of the word school. Since you can't actually find this language on the GitHub most popular list, we questioned whether it was still popular and it is. According to stackyfi.com , it achieved a number of 85% of search volume in this month . SQL is the most popular programming language that is never used alone and it serves a purpose of being great if you have huge databases. Honorable mention Since this list is pretty short, we had to have an honorable mention and acknowledge Apple for trying (and succeeding) - the Swift . Not Taylor Swift. If you want to be an iOS developer any time soon, this is a must. Swift was released in 2014, and its popularity goes up each day. Final thoughts Tip of the day for developer newbies: One of the greatest tips we can give you is don't go overboard. If you want to do backend, you don't have to learn all of the most popular programming languages in that field, start with one. Do the research, find what you are interested and what the company you would like to apply searches for. Tip of the day for CEOs: Of course that you want to hire a good developer. It is up to you to decide whether to go with the full-stack developer or with one that is an expert in a couple of fields. Sometimes it's better to hire a developer that knows two or three things, while for the other task you need a person that will see a problem from multiple different points. Tasks require adjustiments. As the Grand Master Yoda says: \"Do. Or do not. There is no try.\" 'Till next time!", "date": "2017-11-05"},
{"website": "Kolosek", "title": "Scrum: Agile Put into Practice", "author": ["Aleksandra M."], "link": "https://kolosek.com/scrum-agile-put-into-practice/", "abstract": "In our previous blog post , we wrote about Agile, a philosophy for managing projects and teams. In that text, we mentioned Agile methods, one of them being Scrum. Scrum is, undoubtedly, one of the greatest Agile methods. It found its way into developer's hear and we can't get enough of it! Here's why we use it so much. What is Scrum? Ah, Scrum, Agile's child. Usually, project management tools and methods determine what needs to be done, when, by whom etc. With Scrum, it is also the case, but in an organized way. As you know by now, Scrum is a subset of Agile. Precisely, Scrum is a flexible and simple Agile process framework . This means that it consists of small processes that need to be followed . This Scrum feature directly affects team's productivity. What does Scrum mean? It is actually funny - the name was taken from rugby , aka the American football. At the beginning of every rugby game, teams stand across each other and when the ball is thrown in the middle, they have to fight for it and this is called Scrum. That means that all team members work together on getting the ball and achieving the goal. Why is Scrum so special? Because it makes a difference with these 3 things: there are 3 main roles, the project is divided into sprints, Scrum cares for team's stakeholders. When it comes to roles, the three main roles are the product owner, Scrum Master and team members. Product owner stands for the client or the one that orders a product from the team. Scrum Master is the person that manages the team, their communication, productivity, and the most important - takes care that everyone understands the goal of the project and tasks (Scrum Master is not your typical Project Manager). Teams are, most commonly, development teams that work on creating a product. The team usually consists of: developers, architects, analysts, QA analysts and testers, UX/UI designers. Sprints are iterations, that last about 1-3 weeks. After each iteration, the team sends a product to the product owner. Caring for stakeholders is one of the most important things in Scrum. Stakeholders , most likely clients, inform the team about the possibility of making improvements in features. Scrum in steps Since Agile is so popular in IT, Scrum found its way, as well. In order to conduct Scrum activities in the right way, Scrum Alliance wrote directions. There are several steps of Scrum: 1. Creating a product backlog 2. Sprint planning 3. Scrum daily and Scrum Master doing his job 4. Delivering a product 5. Sprint review 6. Repeat again Creating a product backlog Product owner , or the client, that team agreed to work with, has to create a product backlog . Basically, this is a list of features a product should have. This list should describe the product in details. Sprint planning After receiving the backlog, the team starts planning working iterations - sprints. In this period, the team should set the timeline in which project should be done. Scum daily Now, that sprint has started, sprints are conducted daily . Sprints usually last up to 2-3 weeks. Going through the backlog, features that are on the top of the list have the greatest priority. The importance of Scrum Master We made this a separate number on the list because of its importance. Scrum Master should daily manage the team and make sure that everyone is familiar with the project goals and that iteration's goal. Delivering a product After those two or three weeks, the iteration is done. This means that team should deliver the (unfinished) product to the client . It is probably not completely done just after one sprint, but the first top things that client required are implemented. Sprint review After every sprint, team needs to make an evaluation of that process . Simply going through the iteration as a form of retrospective meeting. What has been done, have there been any mistakes and what are the lessons. Replay The team should conduct sprints until the project is completed aka until the product doesn't need more improvements. Replay, all over again . Scrum benefits Scrum benefits are actually Agile benefits. Sooo many benefits and here are 4, the most important ones: increasing the productivity level, better coping with the change, more control, better estimates. Productivity raises so much! Everyone knows what their task is, when is the due date and what is the priority. Coping with the change is so important. Since Scrum is so flexible, if a client makes a few changes, it doesn't represent a problem. Scrum = success There is no secret that Scrum makes team members cooperate better while being focused on the goal. The best thing - it brings good for both sides - the client and the team. The Author has left the building. Buy!", "date": "2017-11-05"},
{"website": "Kolosek", "title": "Startup Interview Questions: The Personal Ones", "author": ["Aleksandra M."], "link": "https://kolosek.com/personal-startup-interview-questions/", "abstract": "In our previous post, we wrote about startup interview questions that are business/career related . Now, things are about to get personal. After you've met the candidate knowledge wise and everything is going O.K, try to find more about them, through these personal startup interview questions: What motivates you to get out of the bed in the morning? If the candidate says 'money', know that it is not the right answer. Yes, we all work to survive and provide ourselves and our families few nice things, but working just for the money is simply wrong . If a candidate is not interested in engaging in your company's mission and contribute to its goals, this is not the place for him/her. What is your dream job? You should ask this question in order to find out what are interviewee's goals in life. Maybe he/she wants to become a founder. Maybe he/she dreams of working in a large company and wants to help your startup get there. Additional tip: If the candidate says that this position is his/her dream job, dig a little bit deeper and try to find out if this is the truth or just a cliche. Why do you do what you do? This is a question that Joe Coleman , the CEO of Contently stated on the entrepreneur.com article as the one he always asks the candidate. Again, by asking similar startup interview questions to this one, you will understand candidate's background and motivation . What is your biggest advantage and what your biggest weakness? You see how we used singular - one advantage and one flaw . It's not an easy question and it requires a wise answer. For the people that are a bit full of themselves is hard to find the one advantage and for the people that don't have enough confidence is hard to find just one weakness. If you want to get to know the candidate better, go ahead and ask him/her to name at least three. Additional tip: Candidate should feel free enough to tell what's the thing that he is not familiar with or doesn't know. If there is a willingness to learn, you are all good. On the other hand, if the candidate says that he/she knows everything, for the love of God, hire another one. No one knows everything! What is your hobby?/What do you like to do outside of the work? This is a question that provides a glimpse into candidates personality and how he/she will fit in the company culture . You shouldn't hire someone who doesn't have some other interest except waking up in the morning, working, getting home and going to sleep. You can also ask the candidate to tell you more about their life story. You'd be surprised with some stories. What would be your startup idea? This is a demonstration of startup interview questions can be fun and imaginative. Explain to the candidate that he/she has all the money that is needed to develop a business idea. Then, ask what that idea would be and from where he/she would start . In the end, do you have to do all of this? Well, you don't actually need this startup interview questions (business and personal ones) . That is if you are prepared to improvise. You can just welcome the candidate and start a conversation like you would with the girl/boy at the bar. However, this is the harder way, because you have to make it seem like it is just a relaxed conversation. Be prepared and follow the course of the conversation. The candidate will be surprised, no doubt there. Hope you found these startup interview questions helpful and if you have any questions for us, let us know. Also, if you have a startup team already , be sure to check out our previous blog post on how to make a team work . Keep in mind the sentence \"If you think hiring professionals is expensive, try hiring amateurs\". Peace!", "date": "2017-11-05"},
{"website": "Kolosek", "title": "Top 10 Home-based Business Ideas", "author": ["Aleksandra M."], "link": "https://kolosek.com/home-based-business-ideas/", "abstract": "The Joker once said: \"If you're good at something never do it for free.\" And we totally agree! A lot of people nowadays are tired of working from nine to five, in a, what seems to be, a dead-end job. According to an article posted on entrepreneur.com , people are now expected to have two or three careers in a lifetime and this number just keeps getting up. That's why home-based business ideas are the ideal choice. Having a home-based business seems like a good idea but is not always the easiest thing to achieve. Starting a new business is a handful and you have to be prepared to work overtime, to get things started. If you have decided that you want to give a shot at this, here is the list of top 10 home-based business ideas. Before you start Having an idea is totally fine, but planning things around that idea s what is going to make the difference and bring you success. Start with the business plan . The ideas Here is our list of top 10 home-based business ideas: Become a Chef Well, not a Chef in a restaurant, but a Chef in your own kitchen , that cooks for others. Your clients can be households, small companies (up to 20 people) etc. With the healthy food being in trend, we are sure you'll find a way to the client's heart. Consulting This is one of the home-based business ideas that doesn't require changing the profession. If you have an experience in the specific field, offer your consulting services to other companies. Keep in mind that the consultant must have a lot of knowledge and experience and is able to keep track with the changes in the market. An Event planner People will always find time to celebrate and have fun. It's up to you to use this information. But first, you should learn how the business is done. Check out for the most important things with a Marketing manager and search for more info online. There are more than a few things to juggle , but you can do it if you organize well. If you are into weddings, you can also try being a wedding planner. Bicycle repair shop This is one of the home-based business ideas that are simple as the title says. Rent a warehouse or some space and start providing a service of repairing and storing bicycles. Don't worry about this being a seasonal job , it is definitely not. Race riders need a place where they can store a bike and have it ready when they want to use it. Chimney cleaning and repairing Become a chimney sweep! It would be great if you had a master to learn from him/her for a while. Then, you don't have to just clean chimneys , you can also repair them . Definitely one of the home-based business ideas that represent old crafts. Jewelry maker Mostly, women are in this business, but men are welcome too. There are so many materials to make jewelry from - metal, glass, plastic, different types of stones etc. Use your imagination and create something that the market will like. This is one of the most relaxing and inventive home-based business ideas. Content writer If you know how to write well and are a creative soul, you should try content writing. As a freelancer, you'll have to adjust the style to the target group, a group of people you are writing for. There are many sites you can apply as a freelancer and you can find a client on your own. The same thing goes for the photographer and resume writer. In these fields, the more experience you have, the better. Babysitting If you get along with children, use it as a job. So many people nowadays prefer to have someone taking care of their children at home, while they are working. Music teacher If your body is full of music, use the talent. Keep in mind that you have to be skilled enough to teach. You can also choose individual lessons or teach in a class. Web and app developer Of course, we are going to mention web and app developing. As Harley Quinn would say: \"We are bad guys, it's what we do.\" Therefore, we can't recommend web developing enough . Web and app developing is the same thing as content writing or being a photographer, except the fact that you need to learn a lot . If programming is not your primary field, get to work, things are about to get nasty. To sum up At the end, it all comes to what your preferences are and what you have been doing for the past period. Trust us, you won't have the problem with bringing an idea to life if you plan you home-based business ideas properly. \"All you need is the plan, the roadmap, and the courage to press on to your destination.\" Earl Nightingale 'Til next time!", "date": "2017-11-05"},
{"website": "Kolosek", "title": "Why You Shouldn't Use Startup Name Generators", "author": ["Aleksandra M."], "link": "https://kolosek.com/startup-name-generators/", "abstract": "Here at Kolosek, we have a theory about startups and founders. Since it takes a lot of courage to pursue an idea and start a business, we think that every founder is a Superman . That's why you don't need startup name generators. Did you know that, according to Max Garrone from ideas.ted.com , investors make up their minds in 2.5 minutes whether they'll write a check to you or not? Based on what? Based on the first impression. Knowing that you basically have a minute to introduce yourself, tell company's name and what it's all about probably means that you have to have a killer name. And you don't need any tools, startup name generators. Just a little bit of imagination. The name doesn't represent anything... except your company If you don't think that naming your company is a big deal, let us clear things up - IT IS. Company's name should represent its mission, values, and services in the best way possible. Not only that, the name reflects your devotion to the company and, therefore, creates an emotional connection with the customers . B2B and B2C names It doesn't matter if you are business or customer oriented, you should spend some time coming up with an idea. Usually, B2C oriented companies try much harder to find an appropriate name , since they have to find their place in a (most likely) huge market, while the sales-driven companies depend on their partners, clients, and a team behind it. There are so many startups that changed their names and did a rebranding. Some in order to save the company and some because they were changing company's focus . And, if you are wondering - yes, startup name generators can help you, but they limit your creativity in a way. That's why we think that naming should be a team's decision and a product of a brainstorming session. You should know that you can always change the name, but keep in mind that a powerful name does create new opportunities. Why is it so hard to name your startup company? It is hard because there are so many factors to consider. Just like with any task that needs to be done, the hardest step is to start. When you are naming a company, keep in mind these 3 things : right words, name's length, domain name. Choosing the words For a founder, a startup company is his/her child . A newborn that hasn't yet to be named. It has so many potentials and it represents the best values and virtues. It may sound ridiculous, 'cause it is a big responsibility, but naming a company is pretty simple. No startup name generators. The best thing that we can say is don't think about complicated words and focus on the service you provide . No matter how creative (or not creative) person you are, you can always ask for help , your employees, friends, and family. However, choosing the right word isn't always the easiest process and that's why we prepared 3 startup naming traps that you should be aware of. Trap no. 1 - Creativity Don't go overboard with the creativity! We suggest you be reasonably creative. This means that you shouldn't spell the words differently than people hear it . If a potential client doesn't know how to spell the company's name or domain, you are in big trouble. Trap no. 2 - Mystery Please, for the love of God, don't be so mysterious when you are choosing the name. Some of the names will keep curious people up at night. Not just that, there is no point in naming your company JJkxwyz (even if startup name generators told you so), because it clearly doesn't represent anything. Trap no. 3 - Mixing and matching You can't just put all the spices in the dinner you are cooking and hoping it would end up tasteful. It won't! You can't mix the words that you think go well together. Take your time and ask for an opinion. Be careful with the suffixes , as well. Name's length The whole story behind the length is that is shouldn't be too long. You want your startup name to be easily pronounced and remembered. The biggest advice we can give you is no more than 2 syllables and up to 10 characters . Why? Just look at Google, Facebook, Tumblr, and Twitter and you'll know why you should stick to this rule. If you are brave enough you can try with the one-syllable name. Domain name is NOT important In founder's head, the domain is something that should raise client's credibility in startup's product and make the service more convincing . The previously stated sentence is the truth, but you shouldn't worry about the domain name . There are so many startups that had different domains than the company names and worked out so well. It is a simple as that. If you don't believe us, check the Joel Gascoigne post on the Buffer Blog and everything will make sense. So, how to choose a name for your startup? Here are 5 steps that can help you with choosing the name: Get ideas - from your employees, friends or family. Write keywords - choose keywords from all the stated ideas. Use your imagination (or startup name generators' imagination). Check the availability of the name and name domain. Officially announce The Name (ask your co-workers to make finger drums in the time of the announcement). Ah, those startup name generators If you came to this point in the text, that means that we didn't encourage you enough to listen to your heart and the idea will come up. Oh, well, we don't mind. If you are truly having problems with the naming, here is the list of 10 startup name generators that can help you with that: brandroot.com Brand Root has a bit of advantage compared to the others. The first step is to type a keyword and the site offers you a branded version of that keyword. Then, you can choose a business category and list the branded keywords according to their price range. businessnamegenerator.com Just like with the previous one, you need to type one or two keywords and it will generate the name. Bonus thing is that it checks domain name availability with GoDaddy . coolnameideas.com This is one of the startup name generators we really like. For starters, you should type words that describe your business the best, then the benefits and the style of your business. Also, here you can check if the domain name is available. freshbooks.com It is important for startup name generators to know your industry . This name generator does exactly that and then goes the whole 'type your keyword' thing. getsocio.com Getsocio is a very simple tool. All you have to do is enter a query, a keyword that you taught of, and it will generate all the alternatives. namemesh.com This startup name generator has one advantage and that is that it can check if the domain is free. Again, all you have to is type keywords and that's pretty much it. names4brands.com Names 4 Brands is one of the best startup name generators. Not only does it show domain availability and the name, but it also is a name generator that offers you multiple languages . You can generate starting word and an ending word. naminum.com Basically, the same thing as the last one. The thing with this startup name generators is that you should already have in mind which words you'll use, which can be limiting. oneclickname.com This one is similar to brandroot.com. After typing a few keywords or industry field, the site will generate brand ideas. panabee.com Panabee's logo is a panda, which immediately caught our eye. :) However, Panabee is one of the good startup name generators, since it is a collection of startup name generators. Here you can find a company's name, the name of your app, social media and the domain . To sum things up Naming a startup company is hard. It is almost as hard as when you first fire an employee. Keep in mind that when you are meeting a client, an investor or potential customer, the first thing that'll come out of your mouth is the company's name. It has to sound believable, reliable and powerful. And yes, you can use startup name generators if you want to, but we bet that you already know how to name the company . However, if you are still not sure, check out Julian Shapiro's blog post on thenextweb.com , and you'll find the examples of weak and strong startup names. If you are not in the process of naming your company but are in the process of finding team members, check one of our previous posts - 4 steps that will make your startup team work . Until we meet again!", "date": "2017-10-05"},
{"website": "Kolosek", "title": "Healthcare Startups", "author": ["Nesha Z."], "link": "https://kolosek.com/health-care-startups/", "abstract": "The revolution of the tech era had to undoubtedly bring changes in the field of medicine. Whether we like it or not, we are constantly attached to our digital devices, smartphones, tablets… And whether we like it or not, we all at some time need medical help. So, why wouldn’t we use this technology to make it easier for us as patients? This is exactly what the healthcare startups are trying to do. We bring you a list of 8 healthcare startups we thought you would like to know about. 1.\tStartUp Health StartUp Health was founded in 2011 by Steven Krein and Unity Stoakes and is chaired by Jerry Levin. The organization is represented by a community of entrepreneurs who want to change the healthcare system and bring forward their new vision of healthcare. They state that they have the largest portfolio of digital health companies into which they plan to invest considerable amounts of money in order to support them. To get an investment, one needs to be a part of the StartUp Health Moonshot Academy and make a contribution to the “global army of Health Transformers.\" 2.\tMaven Maven was launched in 2015 by the CEO Kate Ryder and is located in New York. It functions as an online clinic for women and families by providing them with better heath care via their online platform. Patients can book a video appointment or send a message to a special medical team of that is always available. The ultimate goal of Maven is better maternity and family benefits for working parents. They want the female voice to be heard in the much needed reform of the health care system. Kate Ryder says: “While 96 percent of expecting mothers say that they are excited to go back to work after giving birth, fewer than 60 percent remain in the workforce after the first year.” Maven is planning to change that, by helping both the companies and their female employees. 3.\t23andme The company was founded in 2006 in California by Linda Avey, Paul Cusenza and Anne Wojcicki. Initially, 23andme were providing information about a person’s ancestry, all using the information written in 23 pairs of chromosomes. However, using their genetic testing , they can now also provide the costumer with information about inherited diseases, such as Parkinson's or Alzheimer's. The procedure for obtaining this information is quite simple. You order a DNA kit, register so your results can be processed, and send back the kit with your saliva sample to get the information about your family. 4.\tViome Viome is led by CEO Naveen Jain. It was founded by Jain and a group of entrepreneurs. What their organization does may be the best use of technology for the cause of health improvement. Viome identifies and quantifies the microorganisms in a person’s gut . By applying machine learning to analyze what the microorganisms are doing, VIOME then gives personalized nutritional recommendations in order to balance micro biome in the gut of the person. They state that many chronic illnesses can be prevented with this. 5.\tFreenome Since they have been founded in 2014, Freenome have been using biology, computer science and machine learning for cancer screening . Their mission is to have non-invasive disease screenings via the use of technology and knowledge. What helps them to achieve their goal is the fact that the human genome remains mostly unchanged during one’s lifetime, while the freenome of a person changes almost every day. At Freenome, they state: “Our freenome is composed of fragments of blood-borne DNA and RNA, shed by the cells in the body as they die, giving us a snapshot of your cellular health at any given time. By studying the freenome with machine learning, we’ve found novel signatures to detect diseases such as cancer in the very early stages at a time when they are most treatable and curable.” 6.\tBrainCheck BrainCheck was founded by Dr. David Eagleman in 2014 and is based in Houston. They make neurocognitive tests look like a game you play on your tablet, but the results are highly valuable. BrainCheck provides a battery of tests that use objective, standardized methods to get an image of your brain health in a few minutes. Scores can then be compared to your individual baseline and to the population average. The mission is to measure different cognitive functions , as well as balance and coordination, which is all possible with the use of modern technology. 7.\tXealth Xealth was launched in 2016 and is led by CEO Mike McSherry and COO Aaron Sheedy. They bring the new era of technology into heath care, using a cloud-based technology for specialists to prescribe customized digital healthcare content, such as useful exercises, educational apps and videos , and similar. Xealth helps modernize and improve the standard doctor-patient relationship, by engaging patients more into their therapies, via digital content. 8.\tBabylon Health Babylon Health was founded in 2013 in London by a British entrepreneur Ali Parsa. It is actually a personal online health service , where specialists are 24/7 at your disposal, so you can have a video or audio call, or text them when in need of medical advice. Also, you can get prescriptions, so that you can pick up your medicine at the nearest pharmacy or get them delivered to you. In a way, Babylon Health provides you with an online doctor that you can reach via the app. You don’t google your symptoms, but instead, send them to your doctor and get a quick response of what to do.", "date": "2017-08-05"},
{"website": "Kolosek", "title": "Startup Team – How to Make One Work in 4 Steps", "author": ["Kolosek"], "link": "https://kolosek.com/startup-team-how-to-make-one-work-in-4-steps/", "abstract": "In order to get any vision realized, you need people. The right people . The dream team is what makes the dreams come true. As a startup, you have started from scratch, being guided only by your ideas. It took a lot of effort to find the capital, the equipment, to attract clients; to prove to you and to the world that you are making a change. If you have found someone with similar vision and passion as you have, then you have made things a bit easier by finding a co-founder. And your duo will, in order to prospect, come to the stage where you will have to bring new people in. It comes down to knowing when to hire, whom to hire (and whom to let go), spreading your vision onto your team, and sharing both the positive and the negative outcomes of your work. 1.\tWhen to hire It is not the easiest task to let someone in your team, especially at the very beginning. Hiring the wrong person has a lot of consequences, and some may decide to leave things the way they are just in order to avoid the negative aftermath. But can you really advance if you go along that path? Probably not. When the workload becomes overload, and you and your co-founder realize that you don’t have the time or skills to do absolutely everything, it’s time to invite new players in. You will be amazed how much productivity will come from hiring someone to focus on, for example, sales and marketing. You and your co-founder will have more time to deal with things in your area of expertise. Moreover, you will have time to relax and realized when it’s time to welcome another employee. 2.\tWhom to hire The thing is: there won’t be a 100% perfect match for you. There is no ideal new-hire. But the process of hiring someone is much simpler if you know exactly what you are looking for. What is that you expect, but also what can you offer? Is good educational background enough for you to hire a candidate? A fresh out of college youth will share the same passion as you for proving themselves and will embrace all challenges. On the other hand, you might seek experience; someone who will serve as a sort of a mentor for you. A candidate who knows the rules of the game, what it takes for a business to be successful and what mistakes to avoid. What type of personality are you searching for? Someone who will follow what you had in mind and always be willing to compromise; or a fierce leader, who will be able to do their job without much assistance from you? Don’t hesitate to take time and sit down with you partner in order to elaborate on what characteristics are you looking for in a candidate. Prepare yourself for going through CVs and interviews. Whenever possible, ask for some recommendations from previous employers or professors from college the candidate went to. Seek out to find interested individuals, attend networking events. If unsure, try employing someone on a part-time contract, which will allow both you and the new-hire to see if there is a match, without wasting anybody’s time. What is quite important as well, is to know when to let someone go, and to be ready to do so. If things are not going as you planned, it’s better to split up on time . There is no reason to hold a grudge, and the separation is actually beneficial for both sides, because you will find a more suitable person who is out there waiting for their dream job, and the person let go will be able to find that dream job at another place. 3.\tVision Whether it’s just two people on the team, or twenty, everyone should share the same vision . Although it may seem obvious that everyone working at the same startup will know what the goals and mission of the firm are, research conducted show otherwise. People feel more motivated and are more productive if they know for what final result they are doing their job. This doesn’t mean simply stating to your employees – or just to yourself, for that matter – that “our mission is to create great products.” Why are you doing this? Is it just for the money, or do you want to make a change? What is that makes your work and projects different from others out there? In the end, what is that you want to achieve? You should know the answers to all of these questions and you should share them with your team. You are all in for the same cause and goals. 4.\tShare the good and the bad Everyone working at your firm should feel that they belong to a community . The community created at work is not artificial; it is a genuine team, group of people who celebrate together every success and deal together with every great obstacle that comes along the way. If you have managed to attract an important new client or have successfully launched a new app, make sure that everyone knows about it and that the team rejoices together. If you lost a client, share it with your coworkers. It’s not the best news, but it makes people realize that sometimes things don’t go as planned and that that is OK. Mistakes happen, but you need to keep on working and aspiring. Team building is a must. This doesn’t necessarily have to refer to expensive trips to fancy destinations; going for a couple of drinks to a local put counts as well. Counts very much! Enjoy your work and built a team that enjoys it as well.", "date": "2017-08-05"},
{"website": "Kolosek", "title": "Lean and Agile – Enemies or Friends?", "author": ["Kolosek"], "link": "https://kolosek.com/lean-agile-enemies-or-friends/", "abstract": "If you aren't an educated and/or experienced tech person, a lot of question marks may pop up in your mind while looking at these two terms: Lean and Agile . Even if you are technically proficient, you may wonder what the difference between these two really is. No worries, we are here to help you. Both Lean and Agile are methodologies. They are represented by sets of principles that used in order to guide the process of development (in this case, software development). Although usually described as two completely different approaches, by the end of this post, you will notice that they are actually complementary and that one doesn’t exclude the other. Lean We will dare to say that Lean, generally speaking, has the process in its focus. The methodology behind Lean software development comes from Lean manufacturing . Here, it’s all about reducing any kind of a waste . By eliminating all that is unnecessary, the value is added, and value is what the customer is paying for. Constant learning is a part of any process, and learning means improving. Without this, there is no quality, which is the final goal. Also, people are important, because without a good team, how can you deliver a high-quality product? In order to have a smoothly running workflow, every member of the team should do what they can do best , and the work should be distributed evenly. The work is done more efficiently and quickly when everyone is doing their job, without unnecessary tasks (this can be tricky, because in our era, changes happen quickly, and something that was considered unnecessary yesterday, may tomorrow be crucial for the project). There is a systematic, overall look at the work process when it comes to Lean methodology. Agile We will again be courageous enough to say that, generally speaking, in the focus of Agile is the product . Agile software development methodology is based on the Agile Manifesto . Four main values are in the center of the manifesto, and we quote them here: “ Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan. ” Communication among team members, both managers, and developers, is as important as the collaboration with the customer. A quality final product means a satisfied customer, and that is the goal. From interaction, one is enabled to get a feedback. The feedback is attained after each cycle of the process (the working process can be seen as a compilation of smaller projects). This is crucial in order to make any necessary changes along the way, and in order to deliver the product in the short period of time possible. Lean & Agile These two methodologies are best described as complementary . Through quality work organization and quality team, a product of high quality is made, which makes a satisfied customer. The suggestion is that you should apply both of these methodologies . Collaboration between team members, listening to your customer’s needs, improvement and implementation of changes when necessary, elimination of any kind of waste in order to achieve high-quality and deliver the product without any unnecessary delays. We hope that, after reading this post, you have managed to get a grasp of what both the terms Lean and Agile mean, and how they are applied in the process of software development. Our goal was to highlight the main points and deliver it in a way which is the easiest to read. However, there is definitely a lot more about these methodologies out there, and if interested, we strongly encourage you to dive into it and widen your knowledge.", "date": "2017-09-05"},
{"website": "Kolosek", "title": "Why Is Open Source Important (Even If You're Not a Developer)", "author": ["Jelena M."], "link": "https://kolosek.com/why-is-open-source-important/", "abstract": "If you’re not familiar with the world of open source software, this is a great intro. Especially if you’re not a very technical person. Open source software is the one whose source code is available to the public and can be altered for further use. That basically means the very build of a software is available to anyone - to c hange it, make it better, and solve various problems with it . Yes, it's basically the economy of sharing of the development world. Open source software comes with different levels of permissions. Some are completely open for further use and distribution. Some come with a license that obliges the developer to label the original source code that was used. And some forbid the developer from using the source code to make profits. And that's the gist of it. If you google open source, you’ll find three types of articles. The first ones explain the definition and technical aspects. The second group claims that this is a great concept that has potential to improve humankind in so many ways. And then there are the ones who claim it’s a bad thing that is not benefiting its creators and is potentially destroying the economy. On this spectrum, we are strongly pro open source . Our developers are devoted to the community, and here's exactly why. Benefits for the business Open source is not just great for the developers working on it (a bit more on that later on), it's amazing for the market in general. First of all, you get so many great tools that are free to use. Those pieces of software are usually of high quality since many talented developers are working on them. It's not a team effort, it's a community effort. That means bugs are fixed much easier and much faster. Also, it gives us space for solving problems that were not solved before . Content Management Systems, operating system, chat platforms... those have established mainstream solutions that serve billions. But where are the \"smaller\" problems that are bugging an entrepreneur in a specific niche? Open source serves all those meaningful areas that are currently underserved. No problem is too small and pretty much everything can be automated. The total cost of ownership is lower for open source software since you're not paying the cost of licensing. Of course, there are the costs of implementation, maintenance, and support if you don't have it in-house. Also, open source is free from the formal requirements of outdated software development processes. That means it develops and evolves much faster and easier . It's not constrained by procedures which allow both creativity. It also ensures keeping up with the latest technologies. Open source code is very flexible too. It's normally built as a modular piece of software which means that different developers are working on different parts of it. Firstly, that means real experts will be working on their areas of expertise. And second of all, you can use just a piece of the software if you don't need the entire robust thing. Quite convenient. There's one more advantage - open source projects are a great technical interview . If you're looking to hire a developer, you don't have to think of complex problems and simulations to check their knowledge. They can show you how they solved specific problems on a real example - with open source code! Why developers love open source? We could write an entire book on this topic, but we'll try to keep it short and snappy in this post. Open source gives developers both a sense of freedom and a sense of purpose . They're giving back to the community while being able to constantly learn new things with the support of their peers. They can get involved with the project they are passionate about since there are so many out there. Or they can start their own. Every bug is solved much faster and easier. As we mentioned above, open source is the best technical interview you can conduct. That also means this is a great way for a developer to showcase their skills and get hired by the organization they're targeting. Open source is not the future , it's definitely the present. And if you're not in on it, it's high time you got involved. Our library of open source projects is right here . Check it out and feel free to let us know what you think.", "date": "2017-07-05"},
{"website": "Kolosek", "title": "Top 10 Best Startup Interview Questions", "author": ["Aleksandra M."], "link": "https://kolosek.com/top-10-startup-interview-questions/", "abstract": "Having a startup is a handful as it is. You, as a founder, have so many things to juggle - all the projects, all the people, and, on top of that, employing a new co-worker. Not easy, mate. That's why we made a list of startup interview questions to help you. In this post, we focused only on business/career related startup interview questions . Have patience, my friend, in one of our next post, we will explain which questions you should ask in order to get to know the candidate better. For now, you have to make sure that the candidate has enough knowledge to fill in the blanks. You simply have to ask the right questions. Introduction and all that good stuff Shaking hands, saying \"Nice to meet you\", helping the candidate to feel more comfortable, smiling at him/her etc. All of the mentioned things are important, but let's get to the startup interview questions part. Here is a list of questions you should always ask: How did you hear about this job opportunity? If your company's promotion is done right, the candidate could have seen hat job opportunity on multiple channels. On your website, other websites, Facebook page, through a friend etc. The most passionate ones usually load the company's page to see if there is a job opening . This means that they are familiar with your company and that they have a desire to apply. If somebody told the candidate that the position he/she is interested in has just opened and the candidate decided to apply, don't be surprised if he/she doesn't even know what's the company's name. Just sayin'. Why do you want to work for us? When an interviewer asks this question, a common mistake is saying \"I would like to work in this field/in that position, because it is challenging and fun\". You should stop them right there. Insist on getting the answer on the question why they would like to work for YOUR company . Where do you see this industry going? This is not a typical question. However, you want for your candidate to know what he/she is getting into. Also, according to Angela Ruth, in the fastcompany.com post , this is a way you'll see how can the candidate can help you grow the business . Why is this position perfect for you? This is the time when you are going to hear something more about that person, that is career-related and see if he/she really fits in. If you can see the desire in the candidate's eyes, that is a good start. However, you should focus on the results, numbers, that the candidate made in his/her past company. Don't settle for a strategist and a good thinker. You need someone that is prepared to work hard and bring good results. This is one of the startup interview questions that can make a breaking point. What are you looking for in this position? Be aware that both sides have expectations and they need to be synced, in a way. Hear the candidate's side and see what he or she is up to. If the candidate asks for more than you can give, that is an issue (obviously). What is your work style? Keep in mind that a startup has a different environment than the company that has been going strong for the past 50 years. You, the founder, of all people, probably don't wear suits all day or at all. Therefore, you need someone similar to join the team. However, be careful. There are some people, especially in the IT, that have different working habits. They don't get up at 7 AM, get dressed and go to work. They are more of a night birds. If this is something you can look away from in order to get excellence, good for you. As you can see, these startup interview questions will help and in no time find the right person for the team. Have you had a chance to use our product? You should ask this question if your company has an app/platform/game or some sort of product that is widely available. If the product is available and the candidate hadn't had a chance to get to it, choose some other person. Do you have any new ideas you want to implement? This is an awesome question because you'll get to see how creative the candidate is. While he/she is talking, try not to interrupt and then politely say that the candidate was wrong, if that is the case. In our case, we like when the candidate is not prepared for the question . That's when the creativity, experience, and adrenaline make magic. If the candidate really knows your company and what you do, there will be no problem with these types of startup interview questions. Why do you want to work at a startup company? Startup company requires adjustments. Working with few people, in a limited environment, probably faster than other companies do. It is not for everyone. Do you have any questions for me? This is one of the greatest startup interview questions of them all :) If the candidate doesn't have anything to ask you, that probably means he/she is not interested and proactive enough to work in a such a challenging environment. To conclude Finding the person that you are going to delegate a responsibility is a big deal. We hope that this startup interview questions helped you figure out on who you can rely on. Be tough as the Rock, Dwayne Johnson himself is. You got this! See y'all later!", "date": "2017-11-05"},
{"website": "Kolosek", "title": "Boot Camp - Place Where We Build Developers", "author": ["Kolosek"], "link": "https://kolosek.com/bootcamp-2017/", "abstract": "We are excited to announce that our three-week-long boot camp is about to start. 22nd of August is just around the corner and we are fully preparing for it. We have chosen five developers from a group of 100 applicants, who will be trained to become rock solid full-stack developers in a matter of weeks. Focus is on preparing junior developers to write high-quality , fast , and tested code. We also want our recruits to learn how to be good team players, to produce quality, but at the same time to have fun doing it . Our work will be at everyone's disposal and we will give access to our final product. In order to get the access, stay tuned and receive notifications by signing up below. Get free access to our finished product by clicking right here If you are a junior developer or a student at a reputable university and are interested to take part in our next boot camp, please sign up for the internship . The idea for this boot camp comes from a good place. We want to make our contribution to the community in the same way as the open source public is making a contribution by helping developers all around the world.", "date": "2017-08-05"},
{"website": "Kolosek", "title": "Brainstorming Better Ideas", "author": ["Jelena M."], "link": "https://kolosek.com/how-to-brainstorm-better/", "abstract": "If you ever had a brainstorming session with your team, you know what an unproductive nightmare it can be. There’s always few people who do most of the talking, and the ideas that are talked about first influence the rest of the conversation. Focus is easily lost and structure of the meeting can disappear without close monitoring. Whether you’re going through this process on your own or with a group of people, there are ways to make it more efficient . Set specific expectations Before you begin the session, it is important that everyone involved knows exactly what’s expected of them, as a group and as an individual. What are the rules of this engagement? What are they expected to bring with them? Should they do some prior research and preparation? How exactly is the session going to work? If people know precisely what’s expected of them, they are more likely to follow the rules. Define the problem No business activity makes sense without a goal. By defining the problem you are aiming to solve, you will define the goal of your brainstorming session. This is the tricky part since so many people frame the problem either too wide or too narrow. It has to be something solvable that you can divide into logical pieces that can be considered separately. Defining the problem is especially important if you’re working on a challenging and complex project. By properly defining the core problem (or problems) you ensure that your team has the right set of questions to guide them through the process. No judgment This should be one of the most important expectations – no one is to judge anyone else’s ideas (including their own) . The brainstorming should be a judgment-free zone for all the participants. Only without any constraints can they give the best they’ve got. Keep in mind that most people take someone criticizing their ideas as a critique of their personality. If they feel attacked, they will be afraid to speak. This is one of the moments when you want a team who is capable of both giving and receiving constructive feedback. Generation is not evaluation The process of generating ideas should be completely separate from the evaluation process. In the first stage, no idea is a bad idea. Quantity is the key here, not quality. As we already mentioned in one of our articles , this stage should be filling a pit with sand to build castles in later. The more sand you have, the bigger castle you can build. Let’s take a closer look at this principle from the point of one of the most successful and creative businessman. The Walt Disney way It is said that Disney had three separate rooms for brainstorming and planning. It’s believed he created all of his most profitable concepts by using this 3-step technique. Ideas – the first room was the idea room. Disney would fantasize about all the things he could and would like to do. There were neither limits nor expectations. He would just let his brain run loose and create any concept. Evaluation – in the second room, he would ask: “How can I achieve this?” Then he would create detailed plans of activities needed to perform the crazy idea. Once again, without any evaluation of how practical the idea itself is. Critique – the third room was the idea killer. Here, Disney would be the toughest critic of his own concepts and plans. He would list out everything that is potentially wrong with the idea. Only the ones that survived the third room came to reality. The key here is not just separating the process into chunks, but also the physical separation . You don’t have to dedicate three different rooms for each task, but make sure it’s at least three different corners of your apartment or office. It’s important for your brain to be able to switch modes when necessary. Starbursting Eventually, this is a method you need if you’re working on a particularly complex project that is difficult to grasp. The point is to make the brainstorming session focused on asking questions instead of generating ideas on a specific topic . You have your defined problem, now ask why, how, what, when and who. This way, you and your team will be able to cover even the aspects that are often overlooked in the project planning and management stages. What’s your favorite brainstorming technique?", "date": "2017-07-05"},
{"website": "Kolosek", "title": "4 Best Startup Blogs for a Busy Entrepreneur", "author": ["Jelena M."], "link": "https://kolosek.com/best-startup-blogs-entrepreneur/", "abstract": "We know startup life can be quite hectic at times. Whether you’re a founder, a manager or an employee, you need to prioritize a lot if you want to keep up with this fast paced environment. So, let’s make that job much easier for you . Instead of getting flooded with information and countless “must-read” blog posts, we suggest these four blogs are just enough. SALES Unexpectedly, we’re sharing a “corporate” blog first. Close.io is a tool for sales optimization, and that’s exactly what their blog specializes in. The posts are packed with practical tips on various fields of sales. Negotiations, overcoming objections, creating a sales script, closing deals under various circumstances … It’s all there for you or your sales team to use. There’s basic stuff for beginners , but also some more advanced techniques. STRATEGY Andrew Chan writes long posts with a lot of insight and understanding of the current market, how we got here, and where we’re headed to. So, this one is great when you need a deeper understanding of the issues you’re facing . It can also be great for future-proofing your business. Apart from that, there are also some very practical topics. For example “How to create a profitable freemium startup” with a spreadsheet model included. Either way, when you’re reading this one, make sure you have enough time to focus . MARKETING Even though this is another blog run in order to sell a product, it offers a lot to any business owner who wants to invest time and money into developing marketing. For example, there’s “6 things I wish someone had told me before I built a marketing department” There’s a lot about analytics and tracking (since that’s what the product specializes in), customer experience, growth, conversions … SURPRISE You never know what’s coming next on Zapier blog. Of course, there are posts on how to integrate Zapier with different things and how to save time with it. But, they also blog on various interesting topics - delegating, productivity, efficiency, making decisions … It’s really everything a business owner should know. And they’re written in a light and friendly tone that’s enjoyable to read. For example, here’s an article on how to procrastinate with a purpose.", "date": "2017-07-05"},
{"website": "Kolosek", "title": "What's a Good Web Design Brief?", "author": ["Jelena M."], "link": "https://kolosek.com/how-to-web-design-brief/", "abstract": "Creating a website for your business can be a very stressful affair , especially if you don’t know how to properly brief your web designer [1] . The project and the entire process is quite different than working with a graphic designer. A website is quite an investment. Not just financially, but for your entire brand (and the overall success of your business if it's online based). It takes time, money, and expertise from various areas to get it right. You're not going to be making a new website for your business every month, so make sure to devote enough time and patience to this process. Writing a good brief , in the beginning, will not only enable you to get a great website, it's also useful for the controlling process. This goes especially if you're not signing a contract with the agency or the freelancer. If you see something that wasn't agreed upon, you can kindly ask the designer to take a look at the initial brief and your requirements. Once again, we’re starting from the assumption that you’re hiring an experienced web designer. Here’s what you need to give them in order to get exactly what you want. What Is Your Business About? The very first thing you need to put out there is information about your business. Who are you and what do you do? Who are your competitors and how are you different from them? For how long has your business existed? If you offer more than one product or service, which ones are the most important? Are you online-based or is there a specific location that should be promoted? Feel free to go into detail here. If you're hiring an agency, most of them have a questionnaire they will make you fill in before starting the cooperation. But if you're asking for a quote from an agency or a freelancer without any guidelines, this is a great place to start. They need enough information to be able to give you the best estimate of how long it's going to take and how much it's going to cost. Who Are Your Customers? It's important for the agency or designer to know exactly who the website is for. Who is your target group and how would you describe your ideal customer? What are their biggest pain points you're solving? Here, it's good to start with age, gender, and localization. How tech-savvy are they? If they're older people who don't do great with technology, you'll have to simplify the interface as much as possible. Why are they visiting your website? To get information, download something for free, purchase, or just have fun? This has a lot to to with the \"why\" of your business and the customer acquisition strategy you have. Technical Requirements What do you need the website to do? Is it just a presentation of your business without any actionable steps. Or you need products to be available in a shop. If so, how will you be charging? Specific data security measures need to be put in place if you're collecting credit card info. Do you have an idea about the CMS you'd like to be used? What are your reasons for that? It seems to be implied today, but make sure you remind them about the mobile responsiveness of the website. That will benefit your SEO efforts . While we're there - how will they optimize the website for search engines? Is it a part of their service or do you need to bring an SEO specialist on board? How many languages do you need? How many pages do you need and what should they do? Is it a membership or a subscription website? You have to be aware of the fact that the price will depend on the complexity . Also, this is a good place to think about what comes after. Who will be maintaining the website? Is it going to be someone on your team or do you need the agency or the freelancer to keep doing it for you? If they'll keep doing it, how much will they charge and what does the maintenance include. The Content Ideally, you'll already have your content prepared for the web designer . Which pages should the website contains and what should be on them? They will need all of your branding guidelines, logos, photos, videos and everything you want on the website. This is also a good place to talk about the \"feel\" of the website. You already know who your target audience will be. What do you want them to take from your website? What kind of a feeling do you want to provoke? What message do you want to leave them with? If you don't have the content, you need to state that in the initial brief. In that case, what is your expectation? What will you be delivering and what do they need to create? The Looks If you already have a website, make sure to include it in the brief. What do you like about it and what should stay the same? What is not so great and needs to be changed? Find websites that you like and send them as a reference. Comment on exactly what you like on each of them. It's the best if you stick to websites that are in your industry or similar. As we said already, branding guidelines and the general \"feel\" are very important . Digital Marketing This important aspect of a website is often overlooked. Make sure to let your agency or freelancer know what you need. Do you want to collect email addresses for your newsletter? How visible should the social media accounts be? Is your blog going to be an important part of your content strategy so you need it to be optimized for conversions in a specific way? Will you be offering affiliate marketing? Conclusion In case you didn't get it by now, creating a website isn't something you do when your business is just a vague idea. If you want an outcome you'll be satisfied with, you need to be able to answer all these questions . And if you want the website to actually convert visitors into customers, you need to hire experts to make it. A web designer will typically only do the front-end tasks, while a web developer is in charge of the back-end. A full-stack web developer will do both. Meanwhile, most companies in this business are called \"web design agencies\". And we often see all the website development tasks being assigned to a role called \"web designer\". So, for the simplicity of the post, we've used that term. ↩︎", "date": "2017-07-05"},
{"website": "Kolosek", "title": "5 Best Places to Learn about Node.js", "author": ["Jelena M."], "link": "https://kolosek.com/learn-about-node/", "abstract": "How do you manage to stay on top of things in the fast-paced Node.js world? We compiled a list of the best learning and newsgathering sources for you. The list will be handy both for beginners and for seasoned developers. 1. Node Weekly We hate spam. But we love Node Weekly. One newsletter every Friday, packed with awesome news and best tips. If you don't trust newsletters, there's a \"free\" sample of the latest edition . You can check it out without leaving your email address and decide whether it's the right thing for you. The newsletter already has more than 35.000 subscribers. 2. /r/node Reddit has a mountain of useful info for anyone, including developers. The /r/node community is updated quite frequently and there is a bunch of developers ready to give you a hand with anything you need. 3. Official Node.js This Medium blog is the place where all the news are published first. Apart from that, they make sure to recommend the best learning sources for developers. Post are mostly short and to the point, you won't need more than 10 minutes per post . 4. Nodesource If you're looking for case studies and open source projects, this is the right place. They also publish a roundup called \"Last week in Node.js\" . This blog contains some pretty decent beginner's guides. This is a company blog, so you might need to go through some product promotions along the way. 5. How to Node This blog hasn't been updated for a while now, but it has great archives . You can find excellent posts on content syndication, basics of deploying to Heroku, testing, and other topics. Bonus If you're a web developer who's still a little confused about Node.js and its implications, here's a great read. This post will tell you everything you need to know about its pros and cons, compared to Ruby on Rails.", "date": "2017-07-05"},
{"website": "Kolosek", "title": "9 Ruby on Rails Blogs You Should Follow", "author": ["Jelena M."], "link": "https://kolosek.com/learn-ruby-on-rails-blogs/", "abstract": "If you’re a Rails developer (or aspiring to become one), you know how important it is to stay up to date with all Ruby related news. It can sometimes even be overwhelming because there are so many sources of information online . It can be hard to determine which ones are actually legitimate. Also, every developer appreciates the help of a community. Problems are solved much faster with other people’s experience. So, here are the best everyday reads for busy a Ruby on Rails developer who wants to keep up. 1. Ruby Weekly We all hate boring and spammy newsletters. This is definitely not one of them. Ruby Weekly is very concise, to the point and current . They will deliver one newsletter to your inbox per week, and it will be packed with useful info, no matter what you do with your Ruby code. There’s a sample issue of the latest newsletter so you can take a look at that before deciding whether you want to give them your email address. 2. Everyday Rails This blog has been around for a while now. It’s not updated regularly, but it’s packed with useful stuff, especially if you’re into testing. It also contains a lot of handy tips you can use to make your workday easier . The blog has a “get things done” approach and that’s probably what we like most about it. 3. The Official Rails Blog Well, of course. We recommend the official RoR blog for timely updates about the framework. It contains all the relevant changelogs for the gems. There’s also a “This Week in Rails” section with practical tips from developers. 4. /r/ruby If you’re not already using Reddit as a channel for learning about development, it’s high time you got started. /r/ruby is a lively community full of people who are ready to share their knowledge (and their frustrations) 5. Drifting Ruby This is a screencast and a blog which is updated fairly often. So, if you’re a fan of learning things visually , this is a great place. The website is run by a Rubyist Dave Kimura. 6. RailsCasts While we’re at screencasts, we have to mention the RailsCasts. This website hasn’t been running for a while now, but the archives are definitely worth the visit, especially for someone who’s just starting out . 7. Ruby Inside This is another blog with news and tutorials that haven’t been updated in the past few years. Again, the archive is more than valuable for issues we’re facing today. 8. Go Rails Another one for visual learners . GoRails YouTube channel is updated weekly and contains detailed tutorials. Most videos are just a few minutes long, but the longest you’ll spend on a single video is around 20 minutes . The description of the screencasts states they are there to “fill in the gaps, explain the confusing pieces, and give you an understanding you can't find elsewhere”. 9. Ruby Flow If you enjoy the concept of HackerNews, you’ll like Ruby Flow. It’s just the community, pushing out the content they find most useful. What should we add to the list? Share your favorite blogs, YouTube channels, subreddits or other sources you use for Rails in the comments below.", "date": "2017-07-05"},
{"website": "Kolosek", "title": "How to Properly Brief a Graphic Designer", "author": ["Jelena M."], "link": "https://kolosek.com/hire-graphic-designer/", "abstract": "It often seems as if graphic designers are against the entire world. Like they're making our projects look terrible on purpose. And why would they charge so much for something they can make in a matter of hours? It's just clicking around and making photos look pretty. Versatile, not pretty Well, if you want to have a successful cooperation with a graphic designer, there are a few things you need to know . Especially if don't have that much design knowledge or if you (like me) are not a very visual person. So, first things first. This short guide is applicable only if you're hiring an experienced professional designer. They need to know their stuff. You need to look into their portfolio to see that. But, there's a catch. When you're checking the materials they designed, it's not about whether you think they're pretty. It's about how versatile their design is, how well they adapt to different industries and specific projects. That's far more important. They need to be able to truly understand the nature of your work and how to present it in the best way possible. Picking the right graphic designer is a broad topic that deserves its own blog post, so we'll just stick with this basic principle for now. Understanding Another important thing is the understanding. We all know that it takes time to start being in sync with someone you work with. This especially goes for designers because they need to get the feel for your business if you want exceptional results. You are aware of the fact that communication is not as easy as it seems . That is obvious when you're having to create a visual output based on your instructions. Let's dive into the guidelines for a successful cooperation with a graphic designer. Accept that you're hiring an expert When you're hiring a professional, you need to be able to sit back and let them do their job . Seriously. The biggest struggle designers are facing is that a lot of people think their job is very easy so they find it's acceptable to give their opinion every step of the way. Please, don't be one of those people. You're hiring a person who has devoted at least 4 years of their life to education in that area. And after that, they've been doing the same thing for a living. They know what they're doing. Of course, you need to give them proper instructions in the beginning about what you expect out of the project. Prepare your expectations I probably don't need to tell you a good service is never cheap . Cheap service is never good. Fast service in the graphic design world is also not cheap. If you need a solution very fast, keep in mind that design is a creative process that takes time. Also, if you're hiring a freelancer, you're most likely not their only client. Before you start even looking for a designer, you need to know what your project is exactly. If you're making a poster, are they expected to prepare it for print as well? If it's social media posts, what are the dimensions? Have the copy ready before you start the cooperation. They can't work without it. No, just adding it later is not an option. What is your deadline for the project? If you're a part of a team, who needs to be satisfied with the final solution? Make sure that your decision-making process isn't messing up the designer's schedule. Normally, designers will provide you with at least 3 sketches before they create the final solution . What is the deadline for the sketches and when should the final one be done? Make sure to always agree on how many revisions are included in the price . This is a very common source of misunderstanding between designers and their clients. It's always good to ask the designer to provide you with the original files as well since they can be used further and customized. Another important thing you need to tell them is how much freedom they have . Are they expected to do something based on very strict guidelines or they have creative freedom? Prepare the materials Any designer will need your brand materials - logos, colors, fonts, any guides you might have. If there is another visual material that was made for you earlier, show it to them. Let them know what's good about it and what you'd like changed. It's a great reference for their work. If you're just starting out and you don't have any of those, the best thing you can do is find examples you like. The more the better. Be very clear - **what do you like about each of them, and what you'd rather not have on your design? ** How to communicate clearly? Clear communication starts with you stating your expectations. In order to do a good job, the designer needs to know enough about your business. What is the message you want to send with the project you're assigning them to do? What is the feeling you want to leave the viewers with? Those are the most important questions you need to answer for them. When they have sketches ready, there are good and not so good ways to give them feedback. \"My wife doesn't really like it\" is not a good feedback. You need to state exactly what's not in accordance with your vision. Is it the colors used? The shapes? Or maybe the composition. Without a clear feedback, they won't be able to change the design according to your needs. Listen After you've given your feedback, what the designer tells you are not excuses. They are explanations of a seasoned professional. Ask them what they think and where they think you should go from there. You're paying them for their expertise. This is a two-way lane and should be treated as such. Here's the recap: Hire a professional. Provide them with your \"Why?\" Give them the materials to work with. State clear expectations regarding deadlines and revisions. Provide clear feedback. Sit back, relax, and let them do their job.", "date": "2017-07-05"},
{"website": "Kolosek", "title": "Data That Will Make You Understand How to Build a Profitable App", "author": ["Jelena M."], "link": "https://kolosek.com/data-how-to-build-profitable-app/", "abstract": "It seems like everyone has a great idea to create an app for this or that. Looks like the market just keeps growing, there's a spot for everyone. But is it really so? With famous apps like Uber, Netflix or Instagram, more and more entrepreneurs are trying to leave their mark (and get filthy rich in the process). So, let's take a closer look at the world of mobile apps . What's the situation really like? No better place to find that out than look into relevant data. Back in 2008, Mary Meeker famously announced how popular mobile would get. Her detailed report of technology trends for that year states: \"Mobile to overtake fixed Internet access by 2014\" And she was completely right. This comScore report from 2015 contains the exact statistics - a number of mobile users surpassed desktop users in 2014. In 2017, we can see that App store has almost 2 million apps and there are over 2.2 million apps on Google Play. With over 268 billion mobile downloads, it is predicted an income of $77 billion will be generated this year. Quite a market . Mobile trends in 2017 Once again, let's turn to Mary Meeker of Kleiner Perkins Caufield Byers. Every year, we get the chance to see a huge and rather detailed report, assembled based on the big data. It explains exactly what's going and what we can expect in the near future. While it might not be a 100% accurate guide for investors, it can definitely provide great insight for anyone who is in the online business. The first trend mentioned in the report is that the number of users is constantly growing. At the same time, smartphone expansion is coming to a halt. With over 3.4 billion global internet users, you can say the world is very much connected. But, we are no longer enchanted by smartphones. It could be due to a high number of other gadgets that are replacing important smartphone functions. In 2016, Android was still dominating iOS with over 80% market share. American adults are spending most of their time on digital media through mobile platforms. 52% of the time they spend on their mobile devices includes using apps. Advertising trends to look out for Of course, this expansion brings a significant change in the money flow. Advertisers are taking their budgets to social media and online channels rather than TV or billboards. With the growth of ads, adblocking is becoming more and more popular. And that is especially visible on mobile. This does not mean you should take your ads elsewhere. It means you should make your content valuable and your messages on point. That way, users won't have the need to block you. The future of search Ben Silbermann, the founder and CEO of Pinterest says: \"A lot of the future of search is going to be about pictures instead of keywords.\" That prediction is something to remember (and use) since it comes from the guy who founded one of the best search engine platforms. Everybody knows Pinterest is constantly improving their algorithm, making it more advanced with every update. The prediction of pictures beating keywords also makes sense if we look at the trends in the past few years. Marketing is all about the visual . Make it visually appealing and clear for the viewer and you're already slaying. It seems like people don't have time to read anymore so you need to make sure you're attracting their attention with visual elements. But, it's not about the visual only. Search is moving to voice . Platforms like Google Assistant are enabling users to search without typing. 20% of mobile queries are made via voice. This results in the search phrases becoming more and more natural since we're using our conversational language. That's another thing that's transforming keywords as we know them. It's a habit that consumers are developing and we need to change the way we're formulating our pitches. Apps are becoming gamified If you're thinking about making a popular app, you'd better think gamification . This trend is influencing multiple consumer services. People like the experience a game provides. They want the possibility to be rewarded for their achievements and feel like they're constantly advancing. Moreover, they want to have fun doing it. That's what Bumble did with dating, Duolingo with language learning, and Starbucks in the food industry. So, instead of making a boring app, you should focus on the gaming mentality and find the hooks they use to keep people interested and engaged. Digital subscription model As user experience is getting better, the digital subscription is growing. If you want to deconstruct the success of this model, you don't have to go far. Just take a look at Spotify or Netflix. They've both experienced rapid growth lately mostly due to on-demand content, personalization and complete mobile-friendliness. Security matters With the rise of apps, a very important thing to keep in mind is security. The users are trusting their private data with apps and expect them to be secure in return. So, if you're going to build an app, make sure security measures are at its very base . The data was curated from the 2017 Internet Trends report", "date": "2017-07-05"},
{"website": "Kolosek", "title": "10 Things to Consider Before Outsourcing App Development", "author": ["Jelena M."], "link": "https://kolosek.com/outsourcing-checklist/", "abstract": "So, you’re considering outsourcing as the best option for the development of your app? Or maybe you’ve already decided this is the road you’ll be taking. Either way, here's a list of things you need to consider first . You can hire anyone Outsourcing has been big for the past decade or so, and it is praised by many business owners as the easiest and simplest way to get stuff done without hiring extra people for the team. You can literally hire anyone - entire HR departments, developers, virtual assistants, marketing experts, designers… It’s a simple process with all the mediating platforms that are available nowadays and the fact you can reach out to people from all over the world through a handy network of connections called the internet. You are no longer limited to the local talent pool since distance doesn't mean anything - you can find and hire the person with the exact expertise you need, no matter where they are. It’s a great deal on the service providers’ side since they can literally sell their time and knowledge while working on a set of interesting projects at the same time. But that's all old news, right? Yes, outsourcing can be an awesome thing, but it’s not all fun and games . There is always the other side of the story. The dark side. The dark side In the shadows, you will find a bunch of lost investments, unhappy clients, and failed projects. If you don’t want to waste both your time and money, here are some important things to consider before hiring an outsourced team to develop your app. 1. Do you know what you want? This question seems like common sense for any business endeavor. Make sure you know exactly what you want before you start building it and having other people help you build it is quite a basic principle. But, the hectic startup culture has almost made it an imperative to move forward, as fast as possible, even if you’re not quite clear on what you’re doing. We’re rushing to create and launch our app or any other piece of software and beat our competitors to the market. Speed became the synonym for the right thing to do. If we’re not fast enough, we’re going to miss on something very important. Make sure to l eave yourself enough time to know what you need and what you want, to have specific requirements as for what the final product should look like and how it should work. Sure, there are going to be modifications along the way, but you need to have a clear vision and requirements that will enable you to find the best partner. Outsourcing a development team means you need to give enough input in order to get the output you’ll be satisfied with. Most outsourcing companies or independent teams are going to “interview” you when you first get in touch with them. They will do this in order to make sure they are capable of performing the exact thing you have in mind. Of course, there will be companies that will promise you they can do everything you imagine , without even asking for details. Those are the people who just want your money and the result of your cooperation can be satisfactory only in the rare case that the planets are aligned just right with your zodiac sign. So, one of the first things you need to look out for is how many questions you get from your potential outsourced team. After all, you are looking for quality , not for someone who’s just going to rip you off, leave you with a Frankenstein's monster app and disappear. The clearer your vision, the easier it is to find the right fit. 2. Clear expectations This is connected to the previous point. Who are you looking for? If you have a very specific vision and know exactly what your app needs to look like, you’ll be looking for someone with “just” technical skills to perform the task they are given. If you’re a tech person or have one on the team it’s very likely you’ll be having this scenario. So, you’re looking for people who are technically perfect and highly skilled at what they do. If, on the other hand, you don’t have a tech person on the team and you’re not quite sure about the best way to make your app happen from the technical aspect, you’ll be looking for a team that is also business-savvy and can help you make some more complex tactical decisions, as well as assist you in future-proofing your app. With the technology constantly changing, you need to keep up or you are out of the game. Ideally, you’ll be looking for a mix of these two - technical competence and awareness of the nuances of the hectic market . You need to be very clear about what you need from the outsourced team. Should there be a designer on the team or do you already have one in your crew? Which technologies are you going for? Are they expected to create code that you’ll keep on maintaining from some point? How often do you need them to report to you and how many details do you want to know? Ask yourself as many questions as possible as to what you’re expecting from this cooperation. Either way, you’re looking for a partner here . The more you know about what the team is supposed to look like, the easier you’ll find the perfect fit. Clearly articulating most of the expectations during the first meeting about possible cooperation will definitely save you much time since you won’t be wasting it with people who don’t fit your criteria. 3. Put it on paper This is also common sense but tends to slip our minds every now and then. Especially if you encounter a particularly charismatic character who ensures you your project is safe with their team. A contract is definitely necessary , no matter how small your project might seem. Also, make sure to be aware of exactly what’s on that paper you’re signing. What are you agreeing to? Is the development team going to charge you extra for any changes or features that are not previously agreed upon? Are the deadlines strict and what happens if either side breaches them? The contract needs to be adjusted to your specific business goals, so don’t just agree to the one-size-fits-all generic forms you might be offered. It’s always a good idea to have a lawyer go through any documents before you sign them. If this is not your regular business procedure, it should definitely become one. NDAs are very popular nowadays since many entrepreneurs want to protect their ideas before they hit the competitive market. It’s up to you whether you consider this necessary or not. 4. Reliability When looking for a partner, you need someone who is capable not just to keep up with you, but to go ahead of your ideas in their specific area of expertise. You can’t be the best at knowing and doing every single thing - even if you had knowledge and expertise in each and every area necessary for a successful business, it would be simply impossible to achieve everything in a given period of time. So, you are looking for a team (or an individual) who is ready to respect deadlines, knows how to be self-starting and knows when they need to address a specific problem. Proper prioritizing skills is also a must. This is especially important since the outsourced team will, in most cases, not be in your close proximity. They will most likely be in a different country or on a completely different continent. So, you can’t sit next to them and “make” them respect your requirements. One of the easiest ways to find someone who will surely deliver on what you want for your app are recommendations . If you don’t have any friends or business associates who can introduce you to experts in a specific area, there are other recommendations you can use. On platforms (such as Upwork) you can see reviews from previous clients. Give them close attention, they will tell you a lot. The lack of comments is also a sign. If you’re considering working with someone, and there are no reviews publicly available, ask them to provide work samples and tell you about their previous projects . Make sure not to believe testimonials on the website if you cannot check them yourself. It’s easy to fabricate fake reviews on your own site. Of course, this doesn’t mean someone with less experience will not do a good job on your project, but it does help to find out more about their expertise and whether they will fit your needs. 5. Understand the tech speak If you have a technical background, this shouldn’t be a problem. Still, if you want to come to a complete understanding with your app development team, you need to have clear communication . That means you need to understand at least the basics of limitations and possibilities of the chosen technology. You need to know the basic lingo in order not to feel uncomfortable on meetings. As much as you believe your outsourced team or individual, if you’re not sure about what they mean by a specific term, make sure to ask them for clarification. That doesn’t mean you will present yourself as an ignorant person. Quite the contrary. Ask for clarifications and listen carefully. This is also a very important thing to look for in a tech partner - are they willing and capable to explain complex concepts and issues in a simple and approachable manner ? You don’t need to have extensive knowledge of technology to be able to understand what’s going on during the meeting with the development team and how's the overall process doing. 6. Team organization This is one of the things you need to probe in the very beginning. If you’re hiring an outsourced team, what does their dynamic look like? Are they working well together? Is there a team leader or will you be talking to the developers and designers directly? Are there frequent changes when it comes to people on the team? In order for your app development project to succeed, the team you’re working with needs to be stable , well organized and skillful when it comes to communication both inside the team and towards you. If the group of people you intend to cooperate with is not coordinated well enough, if they have a history of people leaving the team quickly and new employees being brought in to replace them in the nick of time - you will want to walk away from such outsourcing arrangement, your app will not be safe in their hands. 7. Realistic time frame “No biggie, your app will be done in a few weeks or so” is a great thing to hear, but not quite realistic. App development process (no matter how simple the project might seem) is a process and as such demands enough time for planning , space for trial and error, and time for implementation. A high-quality outcome is not possible if you don’t let the process happen, track it carefully and make adjustments when needed. What’s a realistic time frame for development of an app? We'll be writing about that very soon. 8. Values This goes into the very core of your business. If you want your project to be truly successful, you’ll be looking for partners who share your values in business . Those are the people who will understand you fully and who will be able to carry out exactly what you need. In case you don’t already have a list of your business’ core values, you can easily make it by replying to the question: “Why?” Why am I doing what I’m doing? Why is this important to me? Why is it important to me to do things in a specific manner? Of course, the best reference for this is probably Simon Sinek who has developed an entire business philosophy around it. 9. Cultural differences Thanks to the internet, our world has become quite globalized at a very fast rate. There are no real boundaries, travel is easier than ever and it’s quite simple to get in touch with anyone, no matter where they are. But, that didn’t erase important cultural differences that exist . The way of life and cultural heritage have a huge influence on today’s business customs. Cooperating with a Scandinavian is nothing like working with an Australian . Yes, the core competencies and principles need to be the same in any business, but our location influences us more than we are ready to admit. This means the company or individual you hire from the other side of the globe will most likely have completely different work habits and slightly different understanding of business ethics and customs to your own. That is a great opportunity to learn about other cultures , but it can also bring a lot of trouble if you come unprepared. Make sure you’ve done your research before you engage in a cooperation with someone whose history you know nothing about. Keep in mind that personal experiences of your friends may or may not be true since they’re quite subjective. 10. Cheaper isn’t always better One of the main benefits of outsourcing is that you pay for what you get , and that is often less than it would take to hire a team of app developers and designers to carry out your project. But, it’s important to remember that cheaper doesn’t always mean better . With all the competition in today’s market, the companies and individuals who couldn’t find a better competitive advantage chose to decrease their prices in order to attract clients. Make sure you’re really getting the value for your money, and that means you should be making the decision based on the quality of service you’ll be getting, not on whether it’s 100$ cheaper than the next one. The most interesting stuff can be delivered to your inbox", "date": "2017-06-05"},
{"website": "Kolosek", "title": "How to Build Simple React App (Part 1)", "author": ["Acko S.", "index.js changes", "Root.jsx", "NotFound.jsx", "App.js (Home.jsx)"], "link": "https://kolosek.com/building-simple-react-app-part-1/", "abstract": "In this article, we will go through the whole process of building simple front-end application using React from the ground up. First of all, we will go through setup process, how to setup boiler-plate for your application using all of the necessary libraries (plugins), After that, we will start building our app. Before you continue reading this article, I highly recommend reading JavaScript bases . Our application will be simple ToDo application (real creative, I know). It will have list of all todos on the home page, form for adding a new todo, actions for marking todo as finished (or unfinished), deleting todo, and some filters for the global list of todos. That is the main plan, if something else comes across in building process, this plan can be extended to support some more features. Setting up application boiler-plate For creating application boiler-plate we will use command line tool create-react-app which will generate all necessary project structure for us, along with babel for compiling ES6 syntax , webpack as a development server and few more useful libraries (plugins). First, we need to install this tool. That can be done through npm . Open your terminal and type: npm install -g create-react-app Position yourself into a folder in which you want to create the application and simply do following: create-react-app react-todo\ncd react-todo\nnpm start After installation is finished, and you start application open your browser and go to localhost:3000 , you should see something screen similar (or same) as the picture below (background color is changed inside src/index.css for better distinction between image background and site background, that's why the background is light blue #eaf8ff ). That is pretty much it. Pretty simple, right? We don't need any additional configuration for our test project, but if you want something customized check documentation for create-react-app tool, there you should find what you need. Adding custom libraries We will use redux in our application, so we have to install it. Redux provides a clean concept for building (not only) react applications. It is based on three principles : The state of your whole application is stored in an object tree within a single store. (Single source of truth) The only way to change the state is to emit an action, an object describing what happened. (State is read-only) To specify how the state tree is transformed by actions, you write pure reducers. (Changes are made with pure functions) You can find more information about principles in official documentation . More about redux usage in practice will be described later in implementation section, for now, just note that we need that for our application. Along with redux, we will need react-router , for routing (we are using v4, currently most recent one). And few helper modules (libraries, plugins) like prop-types, immutable etc. To install all these packages needed for our application, position yourself into application folder and type: npm install --save redux react-redux react-router react-router-dom immutable prop-types Redux configuration Next, we need to configure our application to work with redux. First, we will change src/index.js . So for now, we will only change what is necessary , we need to add few imports ( Provider from react-redux , createStore from redux and our application reducer). In code this would look something like: import { Provider } from 'react-redux';\nimport { createStore} from 'redux';\nimport appReducer from './reducers'; We won't modify other imports for now. If you try to run this now, you will get an error ( Failed to compile. Error: ENOENT: no such file or directory .../src/reducers.js ). So we need to create our main reducer file. Let's put it in the root directory ( src ). Create new file src/reducers.js , and for now, it will create empty reducer which we will extend later. // src/reducers.js\n\nimport { combineReducers } from 'redux';\n\nconst appReducer = combineReducers({\n    // here will go real reducers\n});\n\nexport default appReducer; Ok, now if we run it, everything goes smooth, but still, we get some warnings in the console: Line 3:  'Provider' is defined but never used     no-unused-vars\nLine 4:  'createStore' is defined but never used  no-unused-vars\nLine 6:  'appReducer' is defined but never used   no-unused-vars Don't panic, it is just a reminder that we have unused variables defined, and we will resolve it in a moment. Next, we want to create store object with our application reducer as a state (More about this topic you can find on the link ), and to pass that store to Provider (wrapper) component. That wrapper component will wrap our App component (just for now). O.K, let's do that. // creating store with our application reducer as state\nlet store = createStore(appReducer);\n\nReactDOM.render(\n        // wrapping our App component inside Provider\n\t<Provider store={store}>\n    \t    <App />\n  \t</Provider>,\n\tdocument.getElementById('root')\n);\n\nregisterServiceWorker(); As you can see, nothing has changed, application compiles, and runs, no warning are shown, and it doesn't look like anything had been done. But it is done, we now have connected redux into our application, which means that we can subscribe any component to application state (reducer) , and pull any data from it. All of this will make more sense later when real example comes along, for now, you have to trust me that this was worth it. Adding routes (react-router v4) At this point, we will change base architecture a little. Each new separate part ( part can be interpreted as component , but I used word part because it doesn't have to be one component, it can be subtree of components, each using its children or some common components), will have its own folder with Component , actions folder, reducers folder, constants file, tests folder, optionally assets folder and other subcomponents folders. So our new architecture will look something like this: src\n|-- components\n|   |-- Home\n|   |   |-- actions\n|   |   |   |-- ...\n|   |   |-- assets\n|   |   |   |-- images\n|   |   |   |   |-- logo.svg\n|   |   |   |-- styles\n|   |   |   |   |-- Home.css\n|   |   |-- reducers\n|   |   |   |-- ...\n|   |   |-- tests\n|   |   |   |-- Home.test.js\n|   |   |-- Home.jsx\n|   |   |-- constants.js\n|   |-- NotFound\n|   |   |-- assets\n|   |   |   |-- styles\n|   |   |   |   |-- not-found.css\n|   |   |-- NotFound.jsx\n|   |-- Root\n|   |   |-- styles\n|   |   |   |-- index.css\n|   |   |-- Root.jsx\n|   |-- common\n|   |   |-- ...\n|-- utils\n|   |-- ...\n|-- index.js\n|-- reducers.js Comparing this to the previous structure you may notice that App component is extracted into a separate folder and renamed to Home , with subfolders for each unity . So the test is moved into tests, style into styles, new folders are created for actions and reducers (which will be empty for now), and new file constants.js (also empty). We will follow this kind of architecture through the whole example. Also, Home.js (App.js) , renamed as Home.jsx , that is just convection we follow, you are not obligated to do that, but it is recommended, each JavaScript file which contains HTML like tags inside javascript code is marked as \"[.jsx]\" ( https://facebook.github.io/react/docs/jsx-in-depth.html#why-jsx ) instead of simple \".js\" . Also, two new components are created (separated in own directory) Root and NotFound . index.js changes Let's start at index.js . We need to change import from App.js to Root.jsx . New import will be: // src/index.js\n\nimport Root from './components/Root/Root'; Remove line that includes index.css (and move css file into src/components/Root/assets/style ). And also we want to change rendering, not to render App component, but Root . So our render will look like this: // src/index.js\n\nReactDOM.render(\n\t<Provider store={store}>\n            <Root />\n  \t</Provider>,\n\tdocument.getElementById('root')\n); Everything else stays same. Next let's take a look at the Root component. Root.jsx // src/components/Root/Root.jsx\n\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\n// custom components\nimport Home from '../Home/Home';\nimport NotFound from '../NotFound/NotFound';\n\n// custom styles\nimport './assets/styles/index.css';\n\n\n// here would go some application default layout, if it exist\n// in our case just simple router\nconst Root = () => (\n\t<Router>\n\t\t<Switch>\n\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t<Route path=\"*\" component={NotFound} />\n\t\t</Switch>\n\t</Router>\n);\n\n\nexport default Root; As we can see, our root component contains our routing logic, for now, we just have one route \"/\" which leads to Home component, and any other links to NotFound which we will take a look at next. Also note that this component includes index.css (it is the same style which was included in index.js ), which means that every subcomponent (child component) will have access to styles defined here inside. So, in that file we would add any additional global CSS. <Switch> component ensures that only one <Route> component will be rendered (first match), see docs . Root component class is written as a dumb component . There is no class keyword. It is a simple function which returns HTML like content. You should always start writing your components as dumb ones, change them to class only when you find yourself in need of internal component state ( should be avoided ) or some lifecycle methods . To conclude Root component is our main layout which every \"page\" of our application will have (in our case it doesn't have any specific layout, but it may/should have some common layout which all \"pages\" share). NotFound.jsx This is a simple component which simulates 404 Not found status in our front-end routing. // src/components/NotFound/NotFound.jsx\n\nimport React from 'react';\n\nimport './assets/styles/not-found.css';\n\n\nconst NotFound = () => (\n\t<div className=\"centered-context\">\n\t\t<h1> Page not found </h1>\n\t</div>\n);\n\nexport default NotFound; /* src/components/NotFound/assets/styles/not-found.css */\n\n.centered-context {\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tmin-height: 100%;\n} Here we don't need to analyze anything, it's pretty straight forward. App.js (Home.jsx) Finally, we need to modify App component. First, all files are renamed and moved to appropriate locations (check file structure scheme). Everything else stays same, only imports are changed so that they match new file structure. Affected imports are shown in following code snippet. // src/components/Home/Home.jsx\n\nimport logo from './assets/images/logo.svg';\nimport './assets/styles/home.css'; The results If we start our application, the base screen will stay same, looks like nothing is changed. New thing added to the application is \"Not found\" page, which will appear if try to access any URI different than \"/\" . For example, if you try to access localhost:3000/asdf you will get something like this: Conclusion That is all for part 1 of Building simple react app . We have started from ground-zero and configured our application, added redux and react-router , and defined custom code organization scheme which will be used through the whole application. In next part, we will start adding real functionality, new actions and reducers, and start building new container and presentational components. Stay tuned for Building simple React app (Part 2) .", "date": "2017-07-05"},
{"website": "Kolosek", "title": "How to Build Simple React App (Part 2)", "author": ["Acko S."], "link": "https://kolosek.com/building-simple-react-app-part-2/", "abstract": "In the previous part of How to build simple React app , we had set up basic boiler-plate for our ToDo application. In this part we will: start building our application logic, introduce actions and reducers, finish our todo page Let's start coding! Writing new components for handling todos On start we will focus only on functionality, a style will be added later. So for our todos, we will create a TodoList component, which will render Todo components for each todo it gets. So let's look at TodoList component. // src/components/Home/TodoList/TodoList.jsx\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Todo from './Todo/Todo';\nimport AddTodo from './AddTodo/AddTodo';\n\n\nconst TodoList = ({ todos, setTodoDone, deleteTodo, addTodo }) => (\n  <div className=\"todos-holder\">\n    <h1>Todos go here!</h1>\n    <AddTodo addTodo={addTodo} />\n    <ul className=\"todo-list\">\n      {todos.map((todo) => <Todo key={`TODO#ID_${todo.id}`} todo={todo} setDone={setTodoDone} deleteTodo={deleteTodo} />)}\n    </ul>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    task: PropTypes.string.isRequired,\n    done: PropTypes.bool.isRequired\n  })).isRequired,\n  setTodoDone: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  addTodo: PropTypes.func.isRequired\n};\n\nexport default TodoList; Pretty straightforward component, written as dumb component (if you recall, in previous part I recommended writing all components as dumb on the beginning). It has a heading, AddTodo component, which we will take a look into in a moment, and one unordered list in which all todos are rendered, in form of Todo component. New part here is the usage of prop-types . Prop-types gives us a possibility of type checking . Its main idea is to define types of props component will receive, which gives you more clarity when writing component, and more verbosity when debugging (for example if something marked as required is not set, you will see console error for that, or if something is sent, but type doesn't match, you will also see console error). More about prop-types and rules for writing them you can find here . We defined \"todos\" as array of objects having a shape as described, and marked that array as required . Shape of each todo is described by id number required the value, the task as a required string, and done required boolean flag. addTodo , setTodoDone , and deleteTodo are props defined as functions and all required. Don't worry for now from where TodoList will get its props, we will get to that later, for now just note that we are assuming that those props are passed to the component from somewhere. Next component we obviously need is AddTodo component. Let's take a look at AddTodo implementation. // src/components/Home/TodoList/AddTodo/AddTodo.jsx\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass AddTodo extends Component {\n\n  static propTypes = {\n    addTodo: PropTypes.func.isRequired\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      task: ''\n    };\n\n    this.changeTaskText = this.changeTaskText.bind(this);\n    this.submitTask = this.submitTask.bind(this);\n  }\n\n  changeTaskText(e: Event) {\n    e.preventDefault();  // optional, not necessary in this case, but for consistency\n\n    this.setState({ task: e.target.value });\n  }\n\n  submitTask(e: Event) {\n    e.preventDefault();  // optional, not necessary in this case, but for consistency\n\n    this.setState({ task: '' });\n    this.props.addTodo(this.state.task);\n  }\n\n  render() {\n    return (\n    <div>\n      <input type=\"text\" onChange={this.changeTaskText} value={this.state.task} placeholder=\"Task text\" />\n      <button onClick={this.submitTask}>Add Todo</button>\n    </div>\n    );\n  }\n}\n\nexport default AddTodo; This component is written in class form because it uses internal state. Generally, component internal state should be avoided because it makes testing harder, separates a component from global application state (which is the main idea behind redux/flux), but here it is implemented this way, mainly to show one component written through class . AddTodo component, as we already said, have its internal state storing task text (which is read from input field), and two custom methods (functions) changeText and submitTask . The changeText method is triggered by any change event inside input field, while submitTask is triggered only by Add Todo button click. Both methods are simple ones, changeText just sets an internal state task to received text, and submitTask restarts text inside internal state, and submits current text (from the internal state) through only prop component received, addTodo . The interesting thing here is the order of actions, it first restarts text, and then submits text which is inside the state, but it still works as it is supposed to. How? Component's setState method is an async method, which means that it won't change state immediately, but in next process tick, so we can do something like that. You should probably reverse order of this two lines, just for clarity, I just wanted to share that fun fact with you. Prop types in this component (and in all class defined components) are defined as a static attribute of the class. AddTodo only has one prop (and it is required), addTodo function. In this case, it gets that prop from TodoList component, but it may be extracted from somewhere else, doesn't matter, the only thing that matters inside AddTodo is that addTodo is function and passed through props. Next thing we want to take a look is Todo component. // src/components/Home/TodoList/Todo/Todo.jsx\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Todo = ({ todo, setDone, deleteTodo }) => (\n  <li style={{ textDecoration: (todo.done ? \"line-through\" : \"\") }}>\n    {todo.task}&nbsp;\n    <button className=\"done-button\" onClick={() => setDone(todo.id, !todo.done)}>{todo.done ? \"Activate\" : \"Set Done\"}</button>&nbsp;\n    <button className=\"delete-button\" onClick={() => deleteTodo(todo.id)}>Delete</button>\n  </li>\n);\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    task: PropTypes.string.isRequired,\n    done: PropTypes.bool.isRequired\n  }).isRequired,\n  setDone: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired\n};\n\nexport default Todo; This component is the presentation of one Todo item. It is wrapped inside <li> tag, has todo's task text and two buttons, one for marking todo as done or undone (same button, same action, different parameter), and one for deleting todo. Both buttons trigger functions which are just delegating the job to function given through props , with appropriate attributes (values). As far as prop-types are concerned, it has todo key (defined same as the todo in TodoList component), setDone required function and deleteTodo required function. Before we carry on with components, let's talk a little bit about presentational and container components. There is this pattern which states that all react components are divided into two groups, presentational and container components. Presentational components are responsible for rendering content, how things will look like on screen. They are not responsible for fetching or mutating data, they just receive data through props, and create an appropriate layout for that data. Usually, they are written as dumb components, and they can hold other presentational or container components, doesn't matter. Unlike them, container components, are responsible for data fetching and mutating. Their job is to provide data to presentational components, and to provide callbacks (hooks) for mutating data, most often the same to presentational components. There is one nice article describing this pattern here is the link , just note that in that article dumb component is practically the synonym for the presentational component, while in this article dumb component has other meaning. Having in mind what I just described about presentational and container components, you can see that all our components are presentational. Neither one of them is concerned about data fetching or mutating, they all just display data, and link callbacks (hooks) for mutation to user controls (buttons). There is no real source of data or mutation callbacks, it all comes from TodoList which gets it from props, but where does TodoList get them from? TodoListContainer component, actions, and reducers Now we will create our first container component, which will handle fetching data (for now just from reducer - application state), and provide callbacks for the mutation (modification). // src/components/Home/TodoList/TodoListContainer.js\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { setTodoDone, deleteTodo, addTodo } from './actions/todoActions';\nimport TodoList from './TodoList';\n\n\nconst mapStateToProps = state => ({\n  todos: state.todoReducer.todos\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  setTodoDone,\n  deleteTodo,\n  addTodo\n}, dispatch)\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList); Here we have few new concepts. First of all, as you may have noticed, the real definition of the component doesn't even exist here. In export default part we just wrapped our TodoList component in some function and returned that. What is this actually? It's just a wrapper which subscribes component to global application state (reducer) and provides data (and functions) as props to the wrapped component. So this is the part where real data is \"injected\" into our components. connect function accepts two functions as parameters and creates a wrapper which then accepts component to wrap. First function passed to connect is mapStateToProps , function which gets state (global state, which is created by combineReducers in our src/reducers.js added to a store object in our src/index.js and injected in global wrapper <Provider> also in src/index.js ) and returns object with keys (extracted from state) which will be passed as props to wrapped component. Second function passed to connect is mapDispatchToProps , function which gets dispatch (callback we will get back to this in Part 3 where we will take a look into creating async actions), and returns object containing \"function name - function\" pairs (that functions are actually actions ) which will also be passed as props to wrapped component. This is a pretty important part, it is the link between simple components, and application state, a part that actually connects all parts of redux as a functional whole. One more handy thing connect do for us, is \"subscribing\" to a part of the state we are passing to the wrapped component, so any time that part of the state is changed ( only through reducers! ), our wrapped component will receive new (changed) props. It is like we have some event listener, which listens for change events only for those parts of the global state we \"subscribed\" on. In our mapStateToProps we connected state.todoReducer.todos to a todos key. That is nice, but we need todoReducer , if you take a look in src/reducers.js it is just an empty object, we need to create todoReducer , with todos key. Also in mapDispatchToProps we are using bindActionCreators function (this will also be explained later, for now just think of it as a helper) to wrap our object containing actions . But we still need those actions in code. So let's start with our actions, and then take a look at our todoReducer . // src/components/Home/TodoList/actions/todoActions.js\n\nimport * as types from '../constants';\n\n\nexport const setTodoDone = (id: Number, done: Boolean) => ({\n  type: types.SET_TODO_DONE,\n  payload: {\n    id,\n    done\n  }\n});\n\nexport const deleteTodo = (id: Number) => ({\n  type: types.DELETE_TODO,\n  payload: {\n    id\n  }\n});\n\nexport const addTodo = (task: String) => ({\n  type: types.ADD_TODO,\n  payload: {\n    task\n  }\n}); It is just a JavaScript file containing a bunch of functions. Every function is returning some kind of object. That object is actually an action , and these functions are action creators . In this article, whenever I said actions I was referring to \"action creators\", and when I want to refer action I will say \"action object\", that is pretty common notation. Each action object has to have type key, representing identification by which it will be recognized in reducers, other keys are optional. For consistency, I like to all other data put inside payload key so that each action object has the same structure. Actions (action creators) can accept parameters however you want because, in the end, they are just a simple plain functions which will be called from somewhere in your code (components). These returned objects (action objects) are automatically dispatched in the system (automatically thanks to the bindActionCreators method, but more on that later), and main reducer (optionally combined from other reducers - in our case in src/reducers.js with function combineReducers ) will get called with that action object as a second parameter. Let's now take a look into our todoReducer.js // src/components/Home/TodoList/reducers/todoReducer.js\n\nimport { Record } from 'immutable';\nimport * as types from '../constants';\n\nimport { getLastId } from '../../../../utils/todoUtils';\n\n\nconst TodoState = new Record({\n  todos: [\n    { id: 1, task: \"This is todo 1\", done: false },\n    { id: 2, task: \"This is todo 2\", done: false },\n    { id: 3, task: \"This is todo 3\", done: true }\n  ]\n});\n\nconst initialState = new TodoState();\n\nconst todoReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case types.SET_TODO_DONE:\n      return state.set('todos', state.todos.map((todo) => todo.id === action.payload.id ? { ...todo, done: action.payload.done } : todo));\n    case types.DELETE_TODO:\n      return state.set('todos', state.todos.filter((todo) => todo.id !== action.payload.id));\n    case types.ADD_TODO:\n      return state.set('todos', [ ...state.todos, { id: getLastId(state.todos) + 1, task: action.payload.task, done: false } ]);\n\n    default:\n      return state;\n  }\n}\n\nexport default todoReducer; Let's start from thr top. First, we defined initial state using immutable Record . That ensures that state won't be changed manually, only through the public interface ( set method), which is useful because any manual changes made to state won't be recognized, and \"event\" for state change won't be fired. We could do that with Object.assign , by making a new instance of state each time we change something, immutable provides the same result but with a bunch of optimizations. reducer is actually just a function, which gets the current state as the first parameter, and action object which caused invoking function (action creator created and dispatched that action object), as a second parameter. So everything that reducer is doing is actually just mutating state depending on received action object. Before I mentioned that each action object has to have type key, by that key reducer recognizes which action actually invoked change, and knows how to handle that concrete action. One more time, you can't modify state object manually, it is possible to do something like state.todos.push({ \n  id: -1,\n  task: 'Invalid modification of state',\n  done: false\n}); but don't! This type of change won't trigger \"change event\" , so all components that are subscribed won't get the signal that anything changed. One common thing that both actions and reducer use (import) is the constants.js file, which we haven't show yet. It is just a simple collection of constants, for simpler connection between them (recognition of action objects inside reducer). // src/components/Home/TodoList/constants.js\n\nexport const SET_TODO_DONE = 'SET_TODO_DONE';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const ADD_TODO = 'ADD_TODO'; Let's now analyze each case in our reducer. First case is SET_TODO_DONE // action object\n{\n  type: types.SET_TODO_DONE,\n  payload: {\n    id,\n    done\n  }\n}\n\n// reducer handler\ncase types.SET_TODO_DONE:\n      return state.set('todos', state.todos.map((todo) => todo.id === action.payload.id ? { ...todo, done: action.payload.done } : todo)); So in reducer, we go through current state todos, and checking if given todo id matches one sent through action object (in payload.id ), when it match, we replace that todo object with new object, by copying all key-value pairs from old object (using spread operator ), and overriding done key with value passed through action object. And in the end, newly created list we set as new state todos . Next case is DELETE_TODO // action object\n{\n  type: types.DELETE_TODO,\n  payload: {\n    id\n  }\n}\n\n// reducer handler\ncase types.DELETE_TODO:\n      return state.set('todos', state.todos.filter((todo) => todo.id !== action.payload.id)); Simple handler, just filter current state todos to extract todo with given id ( payload.id ). Filtered list is then set as todos key in new state. And the last case is ADD_TODO // action object\n{\n  type: types.ADD_TODO,\n  payload: {\n    task\n  }\n}\n\n// reducer handler\ncase types.ADD_TODO:\n      return state.set('todos', [ ...state.todos, { id: getLastId(state.todos) + 1, task: action.payload.task, done: false } ]); Here action object has only task key in payload , that is because done is by default false, and id is auto-generated. Here we just copy all of current state todos into new list and add new object, with auto-generated id, task from payload.task and default false for done. Generation of id is done through helper function in our src/utils/todoUtils . // src/utils/todoUtils.js\n\nexport const getLastId = (todoList: Array) => {\n  let lastId = 0;\n  todoList.map((todo) => lastId = (todo.id > lastId ? todo.id : lastId));\n\n  return lastId;\n} For now, it just contains that one function, which is pretty basic. Goes through given list, finds biggest id, and returns that. The default value is 0 so if no todos are sent, it will return 0, and in our generator, we always add + 1 on last id, so minimal id will be 1. Connecting all the parts together Ok, so, we defined our actions, our reducer, and all components that we need, now it's time to include them somewhere in our application. In our TodoListContainer , we referenced todos from reducer with state.todoReducer.todos , and in our reducer, we only have todos key, so that means that whole reducer will be registered under todoReducer inside global one. That would be simple enough. // src/reducers.js\n\n...\nimport todoReducer from './components/Home/TodoList/reducers/todoReducer';\n...\n\nconst appReducer = combineReducers({\n  // here will go real reducers\n  todoReducer\n});\n... In our main reducer creator, we just imported our reducer and inserted it inside appReducer under the name (key) todoReducer . That will give us access to all data from new reducer inside global applications state. And the last thing we need to do to make this work (show on our screen) is to actually render our TodoList . // src/components/Home/Home.jsx\n\n...\nimport TodoList from './TodoList/TodoListContainer';\n... First, we need to import our component inside Home because that is where we want to render our list. Note that we imported from TodoListContainer and not TodoList , why is that? Because we need a component which has data and function, we don't want to provide custom data or functions to it, here we need it independent. Next, we want to actually render component, so we insert <div>\n  <TodoList />\n</div> just bellow ending </p> tag in default render method. And that is it. Now if you start application you shouldn't get any warnings or errors, and on localhost:3000 you should see something like You can play around with options, it will all work. Each time when you restart browser tab, it will go to this initial data set (because we haven't connected our reducers to some persistent data, but only to our initial state). Conclusion That is all for this part. It has much information, go through this part more times if you need to, it is important to get all the concepts described here because everything else is built on them. If you haven't read first part you can read it here . In next part, we will focus on async actions, and connecting the application with RESTful API (that is why we need async actions). See you in part 3 .", "date": "2017-07-05"},
{"website": "Kolosek", "title": "Planning and Building a Profitable Mobile App", "author": ["Jelena M."], "link": "https://kolosek.com/building-profitable-mobile-app/", "abstract": "There are currently almost 10.000.000 mobile apps available in the leading app stores. Yes, there are 10 million pieces of software on the market. And there’s always someone thinking about making a new one. An app that’s going to kick the others out of the game, become super popular and make a ton of money in the process. If you’re one of the people with such thoughts on their mind, then this short guide is for you. We’ll go through exactly what you need to think about before even starting the project , and then we’ll explain how to start it off on the right foot. However, if your idea is to build a mobile game, then this post is not for you. The game industry has different rules and nuances you need to learn about. It might be a topic of some other post on this blog, but not this one. So, let’s get down to business. How to make sure my mobile app will be successful? 1. Is your app solving a problem? This might seem like common business sense, but quite often we see enthusiastic people on their way to build an app they believe in without actual need. What does that mean? Well, either they or someone they know encountered a specific problem, and they feel they could easily solve it with an app. That’s a great starting point for any business - identifying a problem, a pain point, that you can find a solution for . But, it’s a terribly bad idea if you don’t do a couple of things before running into a demanding venture. If you think you have a perfect solution for your aunt Gracy’s cat’s problem, first make sure that other cat owners are struggling with the same issues. Your aunt and her friends aren’t a very large user pool. So, once you’ve identified the problem, you need to do your research. Are there really enough potential users? You don’t need to find 10.000 people, a small relevant sample will do. Find an online venue (Facebook group, Twitter, email list…) where your target group gathers and give them a questionnaire in a form that works best for you. Use this to find out exactly what they’re struggling with and how they’re solving it. You can also use this as an opportunity to gather your initial user group . At the end of the questionnaire, offer to let them know about your launch (or offer a discount) in return for their email address or phone number. This will come in handy since you'll have qualified leads before you even have the final product. Recap : Is it a real problem? Are there enough potential users to make the app profitable? 2. Who else is solving the same problem? With millions of mobile apps out there, it's very likely someone else is trying to do the same thing. Find them and research them thoroughly. How are they approaching the problem? How successful are they? For how long have they existed and how big is their user base? If they failed, why and how did it happen? You can do the research on Startup graveyard and autopsy.io. These two handy websites will give you a bunch of stories about startup failure . They're not meant to demotivate you, but to help you know what to look out for. There's also a /r/shutdown subreddit, if you prefer this platform for getting your information. Take a close look at your competitors and find their weak points. Are they failing their users in an important area? Is their service excelling at something particular? Use them as a great source of information and gather as much as you can. Maybe your service will be complementary to theirs and you can actually partner up? Keep your mind open to such options. Recap : Go into depth when researching your competitors. Keep your mind open to \"unconventional\" possibilities. 3. What is going to hold you down? Are there any legal implications you should be aware of? If you're tapping into a niche that's rigorously regulated, you need to talk to an expert before you proceed any further. If you'll intend to collect any personal data from your users, how will you enable security and privacy protection? No matter what you're doing, it's good to have a lawyer and an IT security expert at least as consultants . Recap : Legal and security aspects are very important. 4. How will you monetize it? It's a decision you need to make early on as it will determine the profitability of your project. Are you going to charge for the app? Will you go with the free app + paid upgrades? If you're not an expert in the pricing area, then this is something to discuss with your team or a professional consultant. You need someone who is experienced in the industry. There is more than one tool you can use for this including Google AdMob and Facebook Audience Network . Recap : Think about the money. 5. It's a project Developing an app should be taken as a serious project. And a serious project means there is serious management . You need to plan carefully and find the best team possible. That is not the easiest task if you're just starting out and don't really have much money to throw at this project. If you're a developer yourself , you'll most likely need a marketing and sales person. Also, another developer for peer review always comes in handy. Make sure you know where you're going with the app and give yourself deadlines. The next step is to actually try and follow those deadlines. Seriously. If you're not a developer , you'll need at least one, depending on the complexity of the app. Make sure you choose carefully. We wrote about that in our blog post about outsourcing. The same principles can be used if you're a non-tech person who's picking a developer. Either way, put it all on paper , be honest about what you can(not) do and find the holes you can't fill. Then look for people who could help you on your journey. One can do very little on their own. You DO need a team, no matter how small it is in the beginning. If you can't pay for them, you can offer them a percentage of ownership. Or you can find a different deal that is going to work for everyone. Recap : Take your project seriously. Hire a team. Try and stick to the deadlines. All in all, it is going to be a bumpy ride for you (and your teammates). Buckle up, get ready and good luck!", "date": "2017-07-05"},
{"website": "Kolosek", "title": "Killing (Almost) Any Process on Linux", "author": ["Kolosek"], "link": "https://kolosek.com/killing-almost-any-process-on-linux/", "abstract": "Have you ever accidentally turned off your Rails server with ctrl+Z ? I know I did and here are some simple guidelines to kill that Rails server process so you can restart it again. Find PID of process you want to turn off Open terminal and type lsof -i :number_of_port to find PID of the process you want to kill. For example, if your Rails server is running on port 3000, the command will look like this: lsof -i :3000 The output of this command should be something like this: COMMAND  PID   USER     FD   TYPE  DEVICE  SIZE/OFF NODE NAME\nruby     1438  ubuntu   14u  IPv4  691363  0t0      TCP  localhost:3000 (LISTEN) Kill the process In terminal type kill -9 PID_OF_PROCESS to kill the process! You can find PID of process under PID column of lsof -i command. In our case the command would look like this: kill -9 1438 And that is it! You have successfully killed this process and you can restart your Rails server.", "date": "2017-05-05"},
{"website": "Kolosek", "title": "How to Build Simple React App (Part 3)", "author": ["Acko S."], "link": "https://kolosek.com/building-simple-react-app-part-3/", "abstract": "This is thr third part of our series about building simple react application. In this part, our main topic will be connecting our application to RESTful API. For that, we will need to use async actions , another important concept. If you haven't read previous parts, you can find them on following links part 1 , part 2 . Async actions In order to use async actions, we need to inject middleware called thunk . Thunk allows us to write async actions (action creators). As you know, until now all actions just returned simple action object, which would be dispatched automatically. With the thunk, we get a possibility to control what and when will be dispatched, it provides us possibility to return the function from action which can call dispatch manually. You will see in a second what that means to us. First let's add that middleware, while we are here, we will add one more middleware ( redux-logger ) which will log each action as it gets dispatched along with application state before and after that action, pretty nice for debugging. First of all, install this two packages. npm install --save redux-thunk redux-logger And then inject them into the application. // src/index.js\n\n...\nimport { createStore, applyMiddleware } from 'redux'\n\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n...\n\nlet store = createStore(\n  appReducer,\n  applyMiddleware(logger, thunk)\n);\n... So we just imported two middlewares we want to inject, added applyMiddleware function from redux . Inside createStore we added the second parameter where we defined which middlewares we want to be injected (applied). Ok, now when we resolved that, let's add our first async action. Setup RESTful API server We don't want our todos to be defined in the initial state, on our front-end, we want them to be fetched from some external resource. Instead of writing our RESTful API here we will use json-server . It is quite simple to setup, we will go through that process right now. First, we need to install json-server npm install -g json-server Then create db.json file which will represent our database, and json-server will create all CRUD actions over our resources defined in that file, and will change that file immediately. It is a great tool for front-end testing. We will create db.json file inside our project, just to group all stuff into one place. // db.json\n\n{\n  \"todos\": [\n    {\n      \"id\": 1,\n      \"task\": \"This is simple API test task\",\n      \"done\": false\n    },\n    {\n      \"id\": 2,\n      \"task\": \"This is simple API test task 2\",\n      \"done\": false\n    },\n    {\n      \"id\": 3,\n      \"task\": \"This is simple API test task 3\",\n      \"done\": true\n    }\n  ]\n} This file is placed in the top folder (with package.json and README.md ). If you take a look at this structure, you will see that it is pretty similar to one we've defined in reducers initial state (only task texts are different). Now we will start the server. Open new terminal tab and type: # cd path-to-project/\njson-server -p 9000 --watch db.json You should see something like this. And that is all, now you have all of the CRUD operations on todo resource, which are available through localhost:9000 . Now we can really write our first async action, which would be fetching all todos and putting them into our state. First async action and fetching data from API // src/components/Home/TodoList/actions/todoActions.js\n\nexport const fetchTodosStart = () => ({\n  type: types.FETCH_TODOS_START\n});\n\nexport const fetchTodosError = (error: Error) => ({\n  type: types.FETCH_TODOS_ERROR,\n  error\n});\n\nexport const fetchTodosSuccess = (todos: Array) => ({\n  type: types.FETCH_TODOS_SUCCESS,\n  payload: { todos }\n});\n\nexport const fetchTodos = () => dispatch => {\n  dispatch(fetchTodosStart());\n\n  fetch(`${API_URL}/todos`)\n    .then((response) => response.json())\n    .then((body) => dispatch(fetchTodosSuccess(body)))\n    .catch((error) => dispatch(fetchTodosError(error)));\n} We practically created four actions (action creators), three are simple actions returning just a action object, and one is async ( fetchTodos ) which dispatches other three when it should. We could theoretically use any of these three simple actions directly, but we won't need that. fetchTodosStart is simple action which purpose is just to notify system that fetchTodos action has started, fetchTodosError notifies system that some error occurred while fetching todos , and fetchTodosSuccess notifies system that todos are fetched and passes those fetched todos in action object. Nothing new here, now let's take a look at fetchTodos . The first thing to note here is that this action doesn't return a simple object but a function , with dispatch as a parameter ( getState is another parameter provided by thunk, but we don't need that here, so we don't store it anywhere). At the beginning, we dispatch signal that fetching has started. Then we do real fetch using fetch method from the native framework. If everything goes well, we dispatch success signal sending response body as a value of todos parameter, and if any error ( catch part), we just dispatch error signal providing that error as a parameter. Nothing complicated, right? That is it, we created async action, which fetches data from the server, parses it ( response.json() part) and notifies system on each \"breakpoint\" . This pattern with three simple actions (as a help) will be followed by this article. It is not mandatory, you could do something like fetch(`${API_URL}/todos`)\n  .then((response) => response.json())\n  .then((body) => dispatch({\n    type: types.FETCH_TODOS_SUCCESS,\n    payload: { todos: body }\n  })\n  .catch((error) => dispatch({\n    type: types.FETCH_TODOS_ERROR,\n    payload: { error }\n  }); But I find it more readable when it is separated. We haven't yet defined API_URL constant. // src/utils/configConstants.js\n\nexport const API_URL = 'http://localhost:9000'; And of course, we need to import that constant in todoActions.js // src/components/Home/TodoList/actions/todoActions.js\n\nimport { API_URL } from '../../../../utils/configConstants'; Right now we are getting an error in our front-end application ( Failed to compile. \"export 'FETCH_TODOS_SUCCESS' (imported as 'types') was not found in '../constants'.\" ) That is because we haven't defined constants, and yet we use them. So let's define that. // src/components/Home/TodoList/constants.js\n\nexport const FETCH_TODOS_START = 'FETCH_TODOS_START';\nexport const FETCH_TODOS_ERROR = 'FETCH_TODOS_ERROR';\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS'; Next step is to add reducer handler for this action(s), otherwise, all those signals would be useless. We will do this just by adding new case inside todoReducer . case types.FETCH_TODOS_SUCCESS:\n  return state.set('todos', [...action.payload.todos]); Nice and simple, just exchange state.todos with the new array containing data received from action object. We haven't handled FETCH_TODOS_ERROR and FETCH_TODOS_START , currently, they are not in our main focus. You could handle error signal in some global way, or locally to your todoReducer, it depends on you, however you want to. Start signal can be useful for something like rendering loading the bar on screen or disabling some option until action is finished, just notice that no END signal is sent, so you will have to handle end on success and on error. The circle is now complete, all we need to do now is to actually make a use of this. We won't need anymore that initial state defined in todoReducer (that was just test data), so let's delete it. // src/components/Home/TodoList/reducers/todoReducer.js\n\n...\nconst TodoState = new Record({\n  todos: []\n});\n... If you look at your application now, there won't be any todos on the screen, exactly what we wanted. Now let's fetch. Where would we add this part of the the code. If you remember from last part where we talked about presentational and container components, we said that those container components should handle data fetching, so we need to change our TodoListContainer . // src/components/Home/TodoList/TodoListContainer.jsx\n\nimport React, { Component } from 'react';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { setTodoDone, deleteTodo, addTodo, fetchTodos } from './actions/todoActions';\nimport TodoList from './TodoList';\n\nclass TodoListContainer extends Component {\n\n  componentDidMount() {\n    this.props.fetchTodos();\n  }\n\n  render() {\n    return <TodoList {...this.props} />\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  todos: state.todoReducer.todos\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  setTodoDone,\n  deleteTodo,\n  addTodo,\n  fetchTodos,\n}, dispatch)\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListContainer); Most parts stayed the same, we linked fetchTodos action in our mapDispatchToProps (and imported it at the top). But now simple connect wrapper isn't enough for us, we need something more, something that will actually fetch data in some moment. That's why we created a new component (real TodoListContainer ) and used lifecycle method componentDidMount in which fetching is actually called. Its render method is just simple returning TodoList with all received props sent down. So it is still just a wrapper, only \"smart\" wrapper which does something before rendering wrapped component. Now if you go to your browser and look at the application you should see three todos defined in our db.json . And our logger middleware is logging each action on our console, as you can see, only FETCH_TODOS_START and FETCH_TODOS_SUCCESS is logged (first logged action you can disregard, it is just a log for fetchTodos which doesn't actually need to be logged). If you try to add, modify or delete any todo now, it will still work as it worked before, but won't be saved to the database, that is because those actions just change reducer, neither one is actually \"talking\" to an external source (API), let's fix that. Adding new todo export const addTodoStart = () => ({\n  type: types.ADD_TODO_START\n});\n\nexport const addTodoError = (error: Error) => ({\n  type: types.ADD_TODO_ERROR,\n  error\n});\n\nexport const addTodoSuccess = (todo: Object) => ({\n  type: types.ADD_TODO_SUCCESS,\n  payload: {\n    todo\n  }\n})\n\nexport const addTodo = (task: String) => dispatch => {\n  dispatch(addTodoStart());\n\n  fetch(`${API_URL}/todos`, { \n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      task,\n      done: false,\n    })\n  })\n    .then((response) => response.json())\n    .then((body) => dispatch(addTodoSuccess(body)))\n    .catch((error) => dispatch(addTodoError(error)));\n} We replaced addTodo action with an async one, also we added already familiar three methods (start, error and success actions) as helpers. The interesting thing here is that todo creating is moved from reducer into the action, actually, it is moved to API, but because of default API behavior we have to provide all parameters (can't create default value on API - which is what we would do in a real application). It is pretty much same as fetchTodo action, on start it dispatches start signal, after that, it hits API endpoint, only difference is that here we need to send POST method, set header for Content-Type so that API knows how we formatted data which we send, and last but not least we need to send real data in body as JSON encoded string. After that, we get a response, parse it as JSON, and dispatch body as new todo object with success signal, or in case of error, just dispatch error signal with that error. Why we dispatch value returned from the server instead of object we created? Simple, the server will automatically create an id , which we need for modification and removal, so we need to wait for the server to give us complete object, which we will then store in reducer. Let's see reducer modifications to support this. // old case\ncase types.ADD_TODO:\n  return state.set('todos', [ ...state.todos, { id: getLastId(state.todos) + 1, task: action.payload.task, done: false } ]);\n\n// new case\ncase types.ADD_TODO_SUCCESS:\n  return state.set('todos', [...state.todos, action.payload.todo]); It is actually simplified, reducer doesn't need to generate id, or an object anymore (it shouldn't generate resources anyway). That is it. Try now adding new todo and refreshing page, it persists. Deleting todo export const deleteTodoStart = () => ({\n  type: types.DELETE_TODO_START,\n});\n\nexport const deleteTodoError = (error: Error) => ({\n  type: types.DELETE_TODO_ERROR,\n  error\n});\n\nexport const deleteTodoSuccess = (id: Number) => ({\n  type: types.DELETE_TODO_SUCCESS,\n  payload: {\n    id\n  }\n});\n\nexport const deleteTodo = (id: Number) => dispatch => {\n  dispatch(deleteTodoStart());\n\n  fetch(`${API_URL}/todos/${id}`, {\n    method: 'DELETE',\n  })\n    .then((response) => dispatch(deleteTodoSuccess(id)))\n    .catch((error) => dispatch(deleteTodoError(error)));\n} As it goes for deleteTodo , it is pretty much the same. Helper methods (actions) are there, same as always, nothing new there, and bind-together action deleteTodo is also same as others, only difference is http method, and the fact that we don't need to parse response body (it is empty), we just need to know that response was returned successfully without error (valid status code), and we can dispatch success signal. Reducer hasn't changed at all, the only thing that changed is the name of constant on which handler is called, renamed from DELETE_TODO into DELETE_TODO_SUCCESS . Updating todo export const setTodoDoneStart = () => ({\n  type: types.SET_TODO_DONE_START\n})\n\nexport const setTodoDoneError = (error: Error) => ({\n  type: types.SET_TODO_DONE_ERROR,\n  error\n});\n\nexport const setTodoDoneSuccess = (id: Number, done: Boolean) => ({\n  type: types.SET_TODO_DONE_SUCCESS,\n  payload: {\n    id,\n    done\n  }\n})\n\n// Changed from id: Number into todo: Object to use PUT /todos/:id, avoid creating custom api routes\nexport const setTodoDone = (todo: Object, done: Boolean) => dispatch => {\n  dispatch(setTodoDoneStart());\n\n  fetch(`${API_URL}/todos/${todo.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ ...todo, done })\n  })\n    .then((response) => dispatch(setTodoDoneSuccess(todo.id, done)))\n    .catch((error) => dispatch(setTodoDoneError(error)));\n} Same goes for setTodoDone , everything stays the same as before. Here we use PUT method, to use default API update method because we are avoiding custom API routes (in a real application you would probably have separate route only for setting done, which would get only an id ). Reducer hasn't been changed for this either (only constant name). For this we have to change a little bit call to the method (because we changed the interface, it doesn't get the only id anymore), so we need to modify a little bit Todo component. Inside Todo render method we just need to change our setDone handler, instead of () => setDone(todo.id, !todo.done) , we want () => setDone(todo, !todo.done) . And that is all. Now we completely migrated our application to use RESTful API for all data operations. Conclusion In this part, we connected our application to RESTful API and adapted all actions to actually hit API endpoints, and change data on the server. One thing you could do in a real application is to extract fetch call into a helper method (or a class) so that you can easily replace the library that you are using for http requests. Another thing that may be useful in real examples is normalizr , it won't be discussed here but I encourage you to take a look. Next part will be the final part of this series, and it will show you usage of selectors , and also we will focus a little on application styling.", "date": "2017-07-05"},
{"website": "Kolosek", "title": "How to Build Simple React App (Part 4)", "author": ["Acko S."], "link": "https://kolosek.com/building-simple-react-app-part-4/", "abstract": "In the previous part we connected our application with RESTful API, which made it more realistic. This part is the final part of our series \"How to build simple React app \". On start, we will cover selectors and their usage, and then we will go through styling our application, using .scss . Filtering todos Next thing we want to enable in our application is filtering todos so that user can see only finished, unfinished or all todos. This can be done with simple filter function bypassing connection between application state and component. For example, we can modify our TodoListContainer components mapStateToProps to look like this. const getVisibleTodos = (visibilityFilter, todos) => {\n  switch (visibilityFilter) {\n    case FILTER_ALL:\n      return todos;\n    case FILTER_DONE:\n      return todos.filter(todo => todo.done);\n    case FILTER_UNDONE:\n      return todos.filter(todo => !todo.done);\n    default:\n      return todos;\n  }\n}\n\nconst mapStateToProps = state => ({\n  todos: getVisibleTodos(state.todoReducer.filter, state.todoReducer.todos)\n}); This will filter our todos depending on filter value of our todoReducer. This is asimple and intuitive solution, but it has one problem. It will recalculate todo list each time when the component is re-rendered. That is where selectors come in. We will use reselect library for selectors, you can find many examples and explanations about selectors and how they work on their page. Practically what selectors will do is optimize function calls. When we do this through selectors, function which calculates \"visible todos\" will be called only when some parts of the state (that function is using) gets changed, and not every time component is re-rendered. That may be very useful especially when calculations are expensive. Let's see how does all this look like implemented. First, we will create a new file for our todo selectors, todoSelectors.js and put it inside our TodoList/reducers/ folder. // src/components/Home/TodoList/reducers/todoSelectors.js\n\nimport { createSelector } from 'reselect';\nimport { FILTER_ALL, FILTER_DONE, FILTER_UNDONE } from '../constants';\n\nexport const getVisibilityFilter = (state) => state.todoReducer.filter;\nexport const getTodos = (state) => state.todoReducer.todos;\n\nexport const getVisibleTodos = createSelector(\n  [ getVisibilityFilter, getTodos ],\n  (visibilityFilter, todos) => {\n    switch (visibilityFilter) {\n      case FILTER_ALL:\n        return todos;\n      case FILTER_DONE:\n        return todos.filter(todo => todo.done);\n      case FILTER_UNDONE:\n        return todos.filter(todo => !todo.done);\n      default:\n        return todos;\n    }\n  }\n); First two functions ( getVisibilityFilter and getTodos ) are simple selectors (plain functions) which only subtract part of the state relevant to our real selector. getVisibleTodos is actual selector created with createSelector function (got from reselect library). createSelector will create thr function which gets a state as a parameter, then will put that state through all \"plain selector functions\" we provide as first argument (in array), and then those extracted values will be passed to the second parameter, which is our filtering function. You see how does it work, it creates a wrapper around our \"filter\" function which decides if the actual function should be called or not. It works similar to like connect on connecting components with the state (if you remember it won't always send props to the component, but only when relevant parts of application state changes). More on selectors read on their official page . In order for this to work you have to install reselect library. npm install --save reselect Let's carry on, for now, we are again getting an error about importing non-existing constant, let's fix that first, we need to add following three constants in our constants.js . // src/components/Home/TodoList/constants.js\n\nexport const FILTER_ALL = 'ALL';\nexport const FILTER_DONE = 'DONE';\nexport const FILTER_UNDONE = 'UNDONE'; Ok, now everything works, but we haven't connected this \"selector\" anywhere. We will change our TodoListContainer to filter todos before sending them to TodoList . We just need to import our selector, and to modify our mapStateToProps function a bit. // src/components/Home/TodoList/TodoListContainer.jsx\n\n...\nimport { getVisibleTodos } from './reducers/todoSelectors';\n...\n\n...\nconst mapStateToProps = state => ({\n  todos: getVisibleTodos(state)\n});\n... And of course we need to add filter property to our global state, otherwise, our getVisibilityFilter (in todoSelectors.js ) will always return undefined . // src/components/Home/Todos/reducers/todoReducer.js\n\n...\nconst TodoState = new Record({\n  todos: [],\n  filter: types.FILTER_ALL\n});\n... That is it, we now connected everything up. If you change initial state value of filter to, for example, types.FILTER_DONE will only see finished todos on screen. That is nice, but we need some kind of public interface to enable users to change the filter. We will do that with the new component. // src/components/Home/TodoList/FilterSelect.jsx\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FILTER_ALL, FILTER_DONE, FILTER_UNDONE } from './constants';\n\n\nconst handleChange = (e, changeFilter) => changeFilter(e.target.value);\n\nconst FilterSelect = ({ changeFilter }) => (\n  <select onChange={(e) => handleChange(e, changeFilter)}>\n    <option value={FILTER_ALL}>No filter</option>\n    <option value={FILTER_DONE}>Show finished only</option>\n    <option value={FILTER_UNDONE}>Show unfinished only</option>\n  </select>\n);\n\nFilterSelect.propTypes = {\n  changeFilter: PropTypes.func.isRequired\n};\n\nexport default FilterSelect; It is a pretty simple component, just one select with thr binded onChange event to a handleChange function which calls changeFilter action (received through props) with thr value given from option tag. Now just render it somewhere on thr screen, for example in TodoList after </ul> closing tag. Now we have almost everything connected, but still, in our console, we get an error about failing prop-types. Why is that, because our FilterSelect needs changeFilter function passed as a prop, and we are not sending anything. Ok, let's delegate that more. We will modify TodoList to require that function as well and to send it down. After that TodoList will look like this. // src/components/Home/TodoList/TodoList.jsx\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Todo from './Todo/Todo';\nimport AddTodo from './AddTodo/AddTodo';\nimport FilterSelect from './FilterSelect/FilterSelect';\n\n\nconst TodoList = ({ todos, setTodoDone, deleteTodo, addTodo, changeFilter }) => (\n  <div className=\"todos-holder\">\n    <h1>Todos go here!</h1>\n    <AddTodo addTodo={addTodo} />\n    <ul className=\"todo-list\">\n      {todos.map((todo) => <Todo key={`TODO#ID_${todo.id}`} todo={todo} setDone={setTodoDone} deleteTodo={deleteTodo} />)}\n    </ul>\n    <FilterSelect changeFilter={changeFilter} />\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    task: PropTypes.string.isRequired,\n    done: PropTypes.bool.isRequired\n  })).isRequired,\n  setTodoDone: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  addTodo: PropTypes.func.isRequired,\n  changeFilter: PropTypes.func.isRequired\n};\n\nexport default TodoList; Now we get two errors, both prop-type errors, one is for TodoList and other for FilterSelect component, and both for changeFilter function. We need to a create new action and new reducer handler for this. // src/components/Home/TodoList/actions/todoActions.js\n\n...\nexport const changeFilter = (visibilityFilter) => ({\n  type: types.CHANGE_FILTER,\n  payload: {\n    filter: visibilityFilter\n  }\n}); // src/components/Home/TodoList/reducers/todoReducer.js\n\n// new case added to switch\ncase types.CHANGE_FILTER:\n  return state.set('filter', action.payload.filter); Don't forget to insert constant in constants.js // src/components/Home/TodoList/constants.js\n\nexport const CHANGE_FILTER = 'CHANGE_FILTER'; And thr last thing, to add this inside our TodoListContainer , just import action from appropriate action file, and add it inside mapDispatchToProps . And that is all. Now filtering is enabled. Styling application, and enabling .scss Each web application needs some style. This part is sometimes done by web designers, but still, sometimes, it is for you to do it, so it is good to know at least basics of CSS3, .scss and styling HTML. I must state here that I am not a web designer , so this styling isn't done by professional in that area, and probably can be styled better, I just wanted to show you some basics in the styling of application, but for real application styling you should, consult real web designer. Setup For styling, we will use .scss format, and to do that we need to make it work with create-react-app because it is not provided by default. There is this great article that writes about adding .scss and .sass into create-react-app and we will do pretty much the same method. We will pick the first method (because it is simpler and more generic), described in detail here . First of all, we need to add .scss preprocessor (the difference between .sass and .scss are nicely described here ), and one more package we will make use of later. npm install --save node-sass-chokidar npm-run-all Next thing we need to do is to modify our npm scripts, don't worry if you don't get everything from this part, it is not that important for programming in react, and it is really nicely described on links I provided up, so you can find it when you need it. \"scripts\": {\n    \"build-css\": \"node-sass-chokidar src/ -o src/\",\n    \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n    \"start-js\": \"react-scripts start\",\n    \"start\": \"npm-run-all -p watch-css start-js\",\n    \"build\": \"npm run build-css && react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }, What would this do, on npm start it will first run watch-css and then start-js (which is actually our previous start ), and watch-css will compile all .scss files into same-name.css files, in same directory. So from our components we will still include .css files, even though we haven't created them, or they don't exist in given moment. That is it, we now can start writing our stylesheets. Styling First of all, we will use bootstrap (v4 which is in the time this article is written still in alpha phase, and here used version is 4.0.0-alpha.6 ), because it provides a lot of things already implemented, so we can use it (with some modifications) to get it up and running fast. To do that, we will modify base HTML template used for our application public/index.html . We need to add stylesheet CDN link in the head tag (on the end) and script CDN links to the end of the body tag. <!-- Bootstrap stylesheet link, end of the <head> -->\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css\" integrity=\"sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ\" crossorigin=\"anonymous\">\n\n\n<!-- Bootstrap scripts, end of the <body> tag -->\n<script src=\"https://code.jquery.com/jquery-3.1.1.slim.min.js\" integrity=\"sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js\" integrity=\"sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js\" integrity=\"sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn\" crossorigin=\"anonymous\"></script> And that is it, we have included bootstrap into our app, so we can use it freely inside every component. Next thing we want to do is to override current css files into scss. Let's start from top down. First we will create one file just for constants. we will put it inside src/components/common/styles/variables.scss . /* src/components/common/styles/variables.scss */\n\n$background-lighter: #3a3a3a;\n$background-darker: #222222;\n$white: #FFFFFF;\n$black: #000000;\n$white-shadowed: #C9C9C9; That defines all of colors we will use through application, in all other stylesheet files we will include this file, and use those variables. Next is Root . /* src/components/Root/assets/styles/index.scss */\n\n@import '../../../common/styles/variables.scss';\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: sans-serif;\n  background-color: $background-lighter;\n}\n\n.dark-input {\n  background-color: $background-lighter !important;\n  color: $white !important;\n\n\n  &::-webkit-input-placeholder {\n    color: $white-shadowed !important;\n  }\n  \n  &:-moz-placeholder { /* Firefox 18- */\n    color: $white-shadowed !important;  \n  }\n \n  &::-moz-placeholder {  /* Firefox 19+ */\n    color: $white-shadowed !important;  \n  }\n \n  &:-ms-input-placeholder {  \n    color: $white-shadowed !important;  \n  }\n}\n\n.dark-select {\n  background-color: $background-lighter !important;\n  color: $white !important;\n\n  option {\n    color: $white !important;\n  }\n} We defined very simple style for body tag, we used $background-lighter variable to define body background color. And we defined two global classes, .dark-input and .dark-select , which will use somewhere later, they just provide styles for input and select tags, accordingly. Just make sure that src/components/Root/Root.jsx includes ./assets/styles/index.css . Note again that components are still importing .css files and not .scss even though we are writing .scss. Next is NotFound , we renamed not-found.css into the index.scss , and that is it, its content stays the same, only thing that changed is the name, so we need to fix import inside NotFound.jsx // from\nimport './assets/styles/not-found.css';\n\n// to\nimport './assets/styles/index.css'; And we got to Home , here we will actually make some changes. First of all, we rename our Home/assets/styles/home.css into Home/assets/styles/index.scss and replace content with /* src/components/Home/assets/styles/index.scss */\n\n@import '../../../common/styles/variables.scss';\n\n.app-header {\n  background-color: $background-darker;\n  height: 72px;\n  padding: 20px;\n  color: white;\n  text-align: center;\n}\n\n.main-content {\n  width: 70%;\n\n  margin: 2% auto;\n  padding: 5% 10%;\n  border-radius: 33px;\n  background-color: $background-darker;\n  color: $white;\n\n  -webkit-box-shadow: 10px 10px 26px 0px rgba(0,0,0,0.75);\n  -moz-box-shadow: 10px 10px 26px 0px rgba(0,0,0,0.75);\n  box-shadow: 10px 10px 26px 0px rgba(0,0,0,0.75);\n} And accordingly change html structure // rendering html in src/components/Home/Home.jsx\n\n<div>\n  <div className=\"app-header\">\n    <h2>ToDo App</h2>\n  </div>\n  <div className=\"main-content\">\n    <TodoList />\n  </div>\n</div> We extracted some stuff we don't need anymore, it is simplified, and more compact now. One note, for box-shadow property there is a site, which generates code for it, pretty cool tool, you can find it here . Now we go into styling TodoList . Same as before we create assets/styles/index.scss file and import it inside TodoList component. Style content is again pretty simple. @import '../../../../common/styles/variables.scss';\n\n.todo-list {\n  margin: 30px 0;\n  list-style-type: none;\n\n  border: 1px dashed;\n  padding: 30px;\n} And rendering html, pretty similar. // rendering html of `src/components/Home/TodoList/TodoList.jsx\n\n<div>\n  <AddTodo addTodo={addTodo} />\n  <ul className=\"todo-list\">\n    {todos.map((todo) => <Todo key={`TODO#ID_${todo.id}`} todo={todo} setDone={setTodoDone} deleteTodo={deleteTodo} />)}\n  </ul>\n  <FilterSelect changeFilter={changeFilter} />\n</div> Three more components to go. Let's start from AddTodo . Here we don't need any special style defined, so we don't define assets/style/index.scss (but that would you do in moment when you need some style for that component), we just change a html a bit. // rendering html of `src/compoennts/Home/TodoList/AddTodo/AddTodo.jsx\n\n<div className=\"form-group row\">\n  <input \n    className=\"form-control dark-input\"\n    type=\"text\"\n    onChange={this.changeTaskText}\n    onKeyPress={this.handleKeyPress}\n    value={this.state.task}\n    placeholder=\"Task text\"\n  />\n  {this.state.task ? <small class=\"form-text\">Press enter to submit todo</small> : null}\n</div> Have you noticed that there is no submit button any more? We changed that, for styling purposes, it looks better with input only, but how do we now submit? In <input> tag we added onKeyPress handler, mapped to a function this.handleKyePress , so let's see that function. class AddTodo extends Component {\n  ...\n  constructor(props) {\n    ...\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  \n  ...\n  handleKeyPress(e) {\n    if (e.key === 'Enter')\n      this.submitTask(e);\n  }\n  \n  ...\n}\n... Straightforward function, just checks if the pressed key was enter , and if it is, it calls submitTask function, which, if you remember, was our handler for submit button. Because this can be a little confusing for a user, we added a little note below the input field, which shows only if input field contains text, and guides user how to submit todo. Also, note that here we are using that class we defined inside Root/assets/styles/index.scss , .dark-input , that was extracted to root, because it isn't something bound for AddTodo component, it is just a look of a an input field, we may need it somewhere else in the project, not only here, that is why those classes are extracted. Ok, next is Todo , there we need some style. /* src/components/Home/TodoList/Todo/assets/styles/index.scss */\n\n@import '../../../../../common/styles/variables.scss';\n\n.todo-holder {\n  display: flex;\n  flex-direction: row;\n\n  margin: 10px 0;\n\n  border: 1px dashed;\n  padding: 15px;\n\n  &.done {\n    background-color: $background-lighter;\n\n    .text {\n      text-decoration: line-through;\n    }\n  }\n\n  .text {\n    flex: 7;\n    text-align: left;\n    margin: 0;\n\n    /* Center text verticaly */\n    display: flex;\n    align-items: center;\n  }\n\n  .buttons {\n    flex: 3;\n\n    delete-button {\n      border: none;\n      padding: 0;\n\n      cursor: pointer;\n    }\n\n    .done-button {\n      border: none;\n      padding: 0;\n\n      cursor: pointer;      \n    }\n\n    .control-image {\n      width: 24px;\n    }\n  }\n} Nothing complicated, let's see html changes // rendering html of src/components/Home/TodoList/Todo/Todo.jsx\n\n<li className={'todo-holder ' + (todo.done ? 'done' : '')}>\n  <p className=\"text\">{todo.task}</p>\n  <div className=\"buttons\">\n    <a className=\"done-button\" onClick={(e) => { e.preventDefault(); setDone(todo, !todo.done) }}>\n      {\n        todo.done ? \n          <img src={reactivateImg} className=\"control-image\" alt=\"Reactivate\" /> :\n          <img src={doneImg} className=\"control-image\" alt=\"Set Done\" />\n      }\n    </a>&nbsp;\n    <a className=\"delete-button\" onClick={(e) => { e.preventDefault(); deleteTodo(todo.id) }}>\n      <img src={deleteImg} className=\"control-image\" alt=\"Delete\" />\n    </a>\n  </div>\n</li> First of al, we added todo-holder class to each <li> element, and removed that inlined style for done tasks into a class. Task text is wrapped inside text class, and buttons inside buttons class, buttons are changed from <button> tag into <a> tags with images inside, and in onClick handlers are added e.preventDefault(); on beginning so that link doesn't actually go somewhere (top of the page). And last but not least FilterSelect . We haven't added any special styles here either. But html changed a bit. // rendering html of src/components/Home/TodoList/FilterSelect/FilterSelect.jsx\n\n<div className=\"form-group row\">\n  <select className=\"form-control dark-select\" onChange={(e) => handleChange(e, changeFilter)}>\n    <option value={FILTER_ALL}>No filter</option>\n    <option value={FILTER_DONE}>Show finished only</option>\n    <option value={FILTER_UNDONE}>Show unfinished only</option>\n  </select>\n</div> Nothing special we added some bootstrap classes, and .dark-select from our global stylesheet ( Root/assets/styles/index.scss ). And that is it! Conclusion With this part, we have finished this series about building react application from grounds up. We have covered most of the main parts you would need while building a real react application. Some parts are covered in more depth then others, that doesn't necessarily mean that they are more important. I encourage you to read through documentation of all libraries that you are using, and to read more articles written on this topic while working, it is very useful, that is why I have linked many things I found useful in the text(s). You can find all of the source code on GitHub link . That is it, I hope this was helpful.", "date": "2017-07-05"},
{"website": "Kolosek", "title": "Setting up VCR and Webmock for Cucumber Testing", "author": ["Kolosek"], "link": "https://kolosek.com/setting-up-vcr-and-webmock-for-cucumber-testing/", "abstract": "In order to setup VCR and webmock for Cucumber testing you should: Add webmock and VCR gems to your Gemfile.rb : #Gemfile.rb\ngroup :test do\n  gem 'webmock'\n  gem 'vcr'\nend Add file called vcr_setup.rb in your /features/support/ folder that will be used for VCR configuration. # features/support/vcr_setup.rb\nrequire 'vcr'\nVCR.configure do |c|\n  c.cassette_library_dir = 'features/cassettes'\n  c.hook_into :webmock\n  c.ignore_localhost = true\nend\nVCR.cucumber_tags do |t|\n  t.tag '@vcr', :use_scenario_name => true\nend Add require ‘webmock/cucumber’ to /features/support/env.rb . # features/support/env.rb\nrequire 'webmock/cucumber' Now, run your tests! Your tests are now behaving like they are in a bubble : totally independent from their environment. If some of them worked, but now they are failing, that is because they are trying to make an API call . To fix them just add @vcr to the top of the tests. Now the API call will be allowed, and it will be recorded saved in features/cassettes and later reused whenever there is an API call from that test. Happy testing!", "date": "2016-11-05"},
{"website": "Kolosek", "title": "Server Firewall Configuration", "author": ["Kolosek"], "link": "https://kolosek.com/server-firewall-configuration/", "abstract": "There are two ways in which you can think about server firewall security. The easy way or the hard way. The easy way would be to start thinking before something bad has happened to your server. We are sure that you can figure out on you own what the hard way would be. In order to get the security of your server up, you should start with setting up the firewall. Simple firewall for Linux (Ubuntu) sudo apt-get install ufw Now that this is set up, you can start most simple settings. Please remember to enable ssh any time – you don’t want to be locked from your own server. sudo ufw default deny incoming\nsudo ufw logging on\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw allow 22/tcp\nsudo ufw enable Some of the ports include open ports for email senders. After this basic setup is set. Restart ufw. sudo ufw disable\nsudo ufw enable\nsudo ufw status verbose Additional elements to check: netstat -nputw c  - monitor current connections. high Send-Q implies your     server is being misused. \ngit clone https://github.com/CISOfy/lynis\n./lynis audit system -Q                      - Check for security vulnerabilities. For information wget: wget supports HTTP, HTTPS, and FTP, so by default that's 80, 443, 20, and 21 (all TCP). Apt: apt can use HTTP, HTTPS, FTP, RSH, and SSH, so that's 80, 443, 20, 21, 514, and 22 (also all TCP)", "date": "2016-11-05"},
{"website": "Kolosek", "title": "Ruby on Rails Code Quality", "author": ["Kolosek"], "link": "https://kolosek.com/ruby-on-rails-code-quality/", "abstract": "In this article, we will point out steps on what can you do in order to improve your code quality in Ruby on Rails apps that you are building. Follow up Ruby style guide Yes, let’s start with the basics. You can read community-driven Ruby style guide at https://github.com/bbatsov/ruby-style-guide . Follow up Rails style guide You might have guessed, next step is to read community driver Rails style guide. There are more than few tips which can make you improve the speed of your apps, and to make them smarter. https://github.com/bbatsov/rails-style-guide Rubocop In order to successfully follow Ruby styleguide, you can install a Rubocop gem, which can be run automatically. It will output all variations of Ruby code. Instructions on how to use it: https://github.com/bbatsov/rubocop . If using Atom editor – you might try https://github.com/yujinakayama/atom-lint . It warns user inside the editor. Rubycritics This is a Rails gem, that can check all your code and point out code smells where you might think it doesn’t exist. https://github.com/whitesmith/rubycritic Rails best practices There is a gem, that doesn’t just point out the code smell, but it also suggests a way how it should be written instead. Install the gem, and run it against your code. https://github.com/railsbp/rails_bestpractices How you should start improving your code Here are some steps that can help you improve code: First, read the documentation, and install all the gems. Run each gem on your code that you are most familiar with. Look through the results. For each part that you learned something new, document it. Write a single sentence – for yourself on what you should do in similar situation. e.g. Don’t name variables with a single letter, or don’t make methods with ! at end – only in specific cases . Share your findings. Next time around, try to apply all learned lessons. If you don’t remember everything, check your document that you wrote for yourself. It’s not competition, it’s a way to improve ourselves. Related posts Ruby programming beginners guide We are writing this brief tutorial on how to easily get into Ruby programming language and Ruby on Rails frame.", "date": "2016-11-05"},
{"website": "Kolosek", "title": "Migrating Database from Heroku to Ubuntu", "author": ["Kolosek"], "link": "https://kolosek.com/migrating-database-from-heroku-to-ubuntu/", "abstract": "You created your own server, and now you would like to move all of your apps on Heroku to your custom server, right? If so, the first thing to do is to move your database from Heroku to a new server. Here are the steps that explain how to do it: Make DB backup on Heroku heroku pg:backups:capture --app sushi Download your database heroku pg:backups:download Upload your download dump to server via SSH scp -P 22 latest.dump [email protected] :~/ Import latest dump into your newly created database pg_restore --verbose --clean --no-acl --no-owner -h localhost -U ubuntu -d opend_production ~/latest.dump", "date": "2017-01-05"},
{"website": "Kolosek", "title": "Ubuntu Run Script on Start up", "author": ["Kolosek"], "link": "https://kolosek.com/ubuntu-run-script-on-start-up/", "abstract": "In order to run a custom script on startup on Linux/Ubuntu system, you can follow these steps : Create custom file e.g. startup_script in your home folder: vim startup_script Then edit script and enter following: cd /home/SOME_USER/projects/YOUR_AWESOME_FOLDER/;\nbundle exec rails s Now, make that script executable: chmod +x startup_script Now, open cron tab: crontab -e And add a line at the end of that file that calls your custom created script that should run on startup. @restart /home/startup_script Now, each time your server is restarted it will start your applications immediately.", "date": "2016-11-05"},
{"website": "Kolosek", "title": "Bashrc Tweaks for Ruby", "author": ["Kolosek"], "link": "https://kolosek.com/bashrc-tweaks-for-ruby/", "abstract": "After a long time of using the .bashrc file to store our commands here, we share some of our tricks to make the most out of a .bashrc file. Alias methods for shorter commands We put our most commonly used commands in the bashrc file under alias methods: alias rs=\"bundle exec rspec spec\"\nalias rr=\"bundle exec rake routes\"\nalias rc=\"bundle exec cucumber --format=pretty\"\nalias rcw=\"bundle exec cucumber --profile=wip --format=pretty\"\nalias rakem=\"bundle exec rake db:migrate\"\nalias rakep=\"bundle exec rake db:test:prepare\"\nalias spork=\"bundle exec spork\"\nalias sporkc=\"bundle exec spork cucumber\"\nalias railss=\"bundle exec rails server\"\nalias be=\"bundle exec\"\nalias railsc=\"bundle exec rails console\"\nalias bi=\"bundle install --path vendor/bundle\" Git branch information per application (master/development..) Add following line in .bashrc and you will have information on which branch git is all the time PS1='[\\ [email protected] \\h \\W$(__git_ps1 \" (%s)\")]\\$ '", "date": "2016-11-05"},
{"website": "Kolosek", "title": "One Day in Developer's Life Explained Through Movie Roles", "author": ["Aleksandra M."], "link": "https://kolosek.com/one-day-in-developers-life/", "abstract": "In one of our previous articles, we wrote about reasons developers wear headphones . Now, we are going to dig a little deeper. If there is something we know it is how developers work and function in day-to-day life. That's why we decided to write about one day in developer's life explained through movie roles. Nowadays, there is no such thing as \"typical developer\". However, all developers have one thing in common - from the moment they wake up and start coding they all go through few phases. We described those phases through movie roles. Note: If you haven't seen one of these movies, please skip reading the comparisons. Shortly - the text is full of spoiler alerts! Waking up like Neo from Matrix If a developer has been coding that night, he/she probably doesn't know where he/she is and wonder have the machines taken over the world. Kinda like Neo getting to know the Matrix. Except the fact that a developer already knows how to read all those code lines . :) Morning routine like Tony Montana from Scarface Do you remember the scene when Tony Montana sits in front of a pile of cocaine? Don't get us wrong, a developer is not a junkie, but coffee is his/her cocaine . To be honest, there are few developers that start their day with a smoothie or some other kind of healthy refreshment. Starting the work like Bruce Wayne from Dark Knight Raises If you have seen the movie, you know how hard it was for Bruce to become Batman again. It was a struggle, to say at least. Every Developer raises like the Batman once did. Coding like a pro, Forrest Gump style Do you remember that scene when a girl screams \"Run, Forrest, run!\" ? And that's how a developer codes. Strong and with passion. One day in developer's life just got a bit more interesting, ha? Solving problems like Vito Corleone from The Godfather In the process of coding, nothing ever goes smoothly. If it did, something would be wrong. So, a smart developer makes a move - giving the code an offer it can't refuse . And it works, most of the time. Nothing works and a developer pulls Jack Sparrow moves Captain Jack Sparrow moves, to be exact. You know how Captain Sparrow always goes from one person to another, trying to manipulate him/her in order to get his way? That's what a developer does with the code. Going from one code line to another, manipulating it and trying to find the solution. Finding solutions like Jamal Malik from Slumdog Millionaire The whole point of the film is learning things by accident, being thought by life situations. That is precisely how a developer learns - through experience and life. Being like Andy Dufresne from Shawshank Redemption If you haven't seen the movie, please skip this part. All we want to say is that hard work pays off . A developer doesn't take 19 years to create an app but being through always pays off. Living the dream like John Smith from Mr. and Mrs. Smith In the end, being a developer is like being a top secret agent . Everyone wants to hire you, 'cause they know how good you are. Your secret life starts when the lights turn off and the blue-ish screen shines on your face. As you can see, one day in developer's life is pretty messed up and we went from do-gooder, like Neo is, to manipulating pirate Captain Jack Sparrow pretty quickly. In reality, the life of a developer is full of interesting stories, everyday challenges and the constant ability to learn something new. A developer is a modern hero. Forget Batman and Spiderman! Developers are the ones we are turning to. Please note that this article is meant to put a smile on your face and cheer you up even more in this holiday, Christmas season. Any resemblance to actual persons, fictional characters, living or dead is purely coincidental. :)", "date": "2017-12-05"},
{"website": "Kolosek", "title": "FactoryGirl (Bot) - create vs build vs build_stubbed", "author": ["Aleksandar M."], "link": "https://kolosek.com/factory-girl-build-vs-build_stub/", "abstract": "If you are new to writing RSpec tests in Rails using FactoryGirl (bot), you can ask yourself what is the difference between create , build and build_stubbed . In this article, we will do our best to help you understand them better. Let's say we are testing a valid profile creation: FactoryBot.define do\n  factory :profile do\n    user\n    sequence(:name) { |n| \"Name#{n}\" }\n  end\nend\n\ndescribe Profile, type: :model do\n  it 'creates valid profile' do\n    expect(FactoryBot.create(:profile)).to be_valid \n  end\nend FactoryBot.create(:profile) will create profile object and all association for it. They will all be persisted in the database. Also, it will trigger both model and database validations . Example test performance with create is: Note: after(:build) and after(:create) will be called after the factory is saved. Also, before(:create) will be called before factory is saved. On the other hand, FactoryBot.build(:profile) won't save the object, but will still make requests to a database if the factory has associations. It will trigger validations only for associated objects . Example test performance with build is: Note: after(:build) will be called after factory is built. FactoryBot.build_stubbed(:profile) does not call database at all. It creates and assigns attributes to an object to make it behave like an instantiated object. It provides a fake id and created_at . Associations, if any, will be created via build_stubbed too. It will not trigger any validations . Example test performance with build_stubbed is: Note: after(:stub) will be called after factory is stubbed via buildstubbed. Keep in mind that this was a very simple test example. Better performance results are expected with more complex test suites. Thank you for reading this article. Hopefully, it helped you better understand the differences between the ways to instantiate the objects when testing with FactoryBot. If you liked this article please subscribe to our newsletter for more Rails content! Interested in similar topics? Be sure to check our take on Rspec let vs before . Also, if you're totally new to RSpec, we have a guide to set it up .", "date": "2018-02-05"},
{"website": "Kolosek", "title": "CarrierWave Upload Multiple Images [2018 Update]", "author": ["Nesha Z."], "link": "https://kolosek.com/carrierwave-upload-multiple-images/", "abstract": "When you are building a web application, you definitely want to add an option for image uploading as well. In this tutorial, we will show you the necessary steps to enable upload multiple images/files using CarrierWave in Rails 4+ from scratch. A similar procedure can be applied for nested forms. Step 1: In the gem file CarrierWave is a Ruby gem that provides a simple and extremely flexible way to upload files from Ruby applications. You will need to add these gems to the Gemfile and run bundle install . gem 'carrierwave' Step 2: Setting up CarrierWave The first step to configure CarrierWave it to run the following command: rails generate uploader Avatar . This will create a new directory called uploaders in the app folder and a file inside called avatar_uploader.rb. class AvatarUploader < CarrierWave::Uploader::Base\n  storage :file\n\n  def store_dir\n    \"uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}\"\n  end\n\n  def default_url\n    \"/images/fallback/\" + [version_name, \"default.png\"].compact.join('_')\n  end\nend store_dir - You can modify the default directory to change where uploaded files will be stored. default_url - It is the path to the default image, you can use this image if no other image has been selected. Step 3: Generate your migrations You can generate your migrations using Scaffolding in Rails . This will generate a full set of model, views and controller, and a test suite for each of the above. It is the most simple way to get your project up and running. rails g scaffold post title:string\nrails g scaffold post_attachment post_id:integer avatar:string\nrake db:migrate Step 4: Edit Models Once scaffolding finishes generating the files you can start editing your models . You want to be able to create post and post_attachment in one go. To do this you need to add the following to post.rb : post.rb class Post < ActiveRecord::Base\n has_many :post_attachments\n accepts_nested_attributes_for :post_attachments\nend accepts_nested_attributes_for :post_attachments - Nested attributes allow you to save attributes on associated records through the parent. The time has come to mount your uploader. Navigate to your PostAttachment model and add mount_uploader :avatar, AvatarUploader to the file. post_attachment.rb class PostAttachment < ActiveRecord::Base\n   mount_uploader :avatar, AvatarUploader\n   belongs_to :post\nend Step 5: Modify your Controller The next step is to modify the post_controller to accept those new nested attributes. post_controller.rb def show\n  @post_attachments = @post.post_attachments.all\nend\n\ndef new\n  @post = Post.new\n  @post_attachment = @post.post_attachments.build\nend To make sure that post_attachments is ready to be created once the new post is done, you will need to build it with @post.post_attachments.build . def create\n   @post = Post.new(post_params)\n\n   respond_to do |format|\n     if @post.save\n       params[:post_attachments]['avatar'].each do |a|\n          @post_attachment = @post.post_attachments.create!(:avatar => a,     :post_id => @post.id)\n       end\n       format.html { redirect_to @post, notice: 'Post was successfully     created.' }\n     else\n       format.html { render action: 'new' }\n     end\n   end\n end To help the nested attributes reach the model, you will need to add the following to the post_params method in the PostController. private\n\ndef post_params\n  params.require(:post).permit(:title, post_attachments_attributes: \n  [:id, :post_id, :avatar])\nend Step 6: View layout For the last step to finish out application you will need to edit the view to allow us to upload new images. You can do this by adding the following line: <%= p.file_field :avatar, :multiple => true, name: \"post_attachments[avatar][]\" %> views/posts/_form.html.erb <%= form_for(@post, :html => { :multipart => true }) do |f| %>\n   <div class=\"field\">\n     <%= f.label :title %><br>\n     <%= f.text_field :title %>\n   </div>\n\n   <%= f.fields_for :post_attachments do |p| %>\n     <div class=\"field\">\n       <%= p.label :avatar %><br>\n       <%= p.file_field :avatar, :multiple => true, name:     \"post_attachments[avatar][]\" %>\n     </div>\n   <% end %>\n\n   <div class=\"actions\">\n     <%= f.submit %>\n   </div>\n<% end %> Thank you for reading! As we upload new images, we also upload new articles. Subscribe now to stay up-to-date!", "date": "2016-11-05"},
{"website": "Kolosek", "title": "Rails Join Table Ultimate Tutorial", "author": ["Nesha Z."], "link": "https://kolosek.com/rails-join-table/", "abstract": "This is a complete tutorial for creating join table in Ruby on Rails. It will show how to generate and create a join table and how to address associations between different models. It will also show you how to write a form with multiple select boxes and how to handle it in the controller. Step 1: Creating a migration First let's create join table in the Rails way, with city and cleaner as references. rails g model Assignment city:references cleaner:references This will create the following migration: create_assignments.rb class CreateAssignments < ActiveRecord::Migration\n  def change\n    create_table :assignments do |t|\n      t.references :city, index: true, foreign_key: true\n      t.references :cleaner, index: true, foreign_key: true\n\n      t.timestamps null: false\n    end\n  end\nend Step 2: Modify the Model In the model, we will configure a has_many :through association between cleaner, city, and assignment. The association declarations could look like this: cleaner.rb class Cleaner < ActiveRecord::Base\n  has_many :assignments\n  has_many :cities, through: :assignments\nend city.rb class City < ActiveRecord::Base\n  has_many :assignments\n  has_many :cleaners, :through => :assignments\nend assignment.rb class Assignment < ActiveRecord::Base\n  belongs_to :city\n  belongs_to :cleaner\nend You can read this example in the following way: Cleaners through assignments have many cities that they are assigned to, while cities have many cleaners through assignments. Both cities and cleaners can have many assignments as well! Assignments table connects the cleaner and city table through their id (city_id and cleaner_id). Step 3: Modify the Controller Here you should edit your cleaners controller to accept city_ids in the private cleaner_params definition. cleaners_controller.rb private\n\ndef cleaner_params\n  params.require(:cleaner).permit(city_ids: [])\nend Be sure to cover everything with tests using RSpec and FactoryGirl ! Modify View layout Once the backend is set the only thing left for you to do is to add the view. In this example, you can add a multiple selection checkbox, where we can select multiple city names at once where the cleaner can be assigned at. form.html.erb <%= form_for(@cleaner) do |f| %>\n  <p>\n    <%= f.label :cities %><br />\n    <% for city in City.all %>\n      <%= check_box_tag \"cleaner[city_ids][]\", city.id, @cleaner.cities.include?(city) %>\n      <%=h city.name %><br />\n    <% end %>\n  </p>\n  <div class=\"actions\">\n    <%= f.submit %>\n  </div>\n<% end %> We hope we managed to explain how you should create join table in Rails. Stay connected with us just like these tables do, through newsletter subscription!", "date": "2017-09-05"},
{"website": "Kolosek", "title": "React JSX - How to do it the right way - Part II", "author": ["Nesha Z."], "link": "https://kolosek.com/react-jsx-conditions/", "abstract": "In the previous part of React JSX series , we took a look at how to correctly loop through arrays and objects in React. In this article, we'll help you learn how to write conditional statements when rendering components. Everything below applies to React Native as well! Conditional statements inside React render While learning to code in React, most of us have probably tried this and realized it won't work: render() {\n    return (\n        <div>\n            {\n                // this won't work\n            }\n            {\n                if (condition) {\n                    // do something\n                } else {\n                    // do something else\n                }\n            }\n        </div>\n    )\n} JSX is just a syntactic sugar for function calls and object construction, and, although JavaScript is pretty flexible, we still can't pass the code like the if-else above as a parameter to a function. Below are the correct ways to do the conditioning! Let's say we have a flight object and in our Flight component, we want to show whether it's cancelled or not. The most usual way to do simple conditioning like this is via ternary expressions: render() {\n    return (\n        <p>\n            {\n                flight.cancelled ?\n                    'Cancelled'\n                    :\n                    'Regular'\n            }\n        </p>\n    )\n} Ternary expressions are okay for simpler stuff but what happens if we have something more complex? Let's say, what if we have a situation where we should use an else if statement? Of course, we can do something like this: render() {\n    return (\n        <p>\n            {\n                flight.cancelled ?\n                    'Cancelled'\n                    :\n                    ( \n                       flight.arrived ?\n                           'Arrived'\n                           :\n                           'Regular'\n                    )\n            }\n        </p>\n    )\n} This can easily pile up and start looking pretty messy and unreadable. What's the better way then? Do the conditioning above the return statement: render() {\n    let status;\n    if (flight.cancelled) {\n        status = 'Cancelled';\n    } else if (flight.arrived) {\n        status = 'Arrived';\n    } else {\n        status = 'Regular';\n    }\n    return (\n        <p>\n            { status }\n        </p>\n    )\n} Now, in previous examples, we were only rendering a status in our component, but usually, there will be much more to render. So, if we want to render the departure time, the destination, the arrival time and status, for example, it might look something like this: render() {\n    let status;\n    if (flight.cancelled) {\n        status = 'Cancelled';\n    } else if (flight.arrived) {\n        status = 'Arrived';\n    } else {\n        status = 'Regular';\n    }\n    return (\n        <div>\n            <p>\n                Destination: { flight.destination }\n            </p>\n            <p>\n                Departure time: { flight.departureTime }\n            </p>\n            <p>\n                Arrival time: { flight.arrivalTime }\n            </p>\n            <p>\n                Flight status: { status }\n            </p>\n        </div>\n    )\n} Now, this is okay, it's working, but we're polluting the render method of a component . Imagine we had more if-else statements - it'd be a mess. Instead, why wouldn't we move it outside of a render method , so it's completely separate? renderStatus() {\n    let status;\n    if (flight.cancelled) {\n        status = 'Cancelled';\n    } else if (flight.arrived) {\n        status = 'Arrived';\n    } else {\n        status = 'Regular';\n    }\n    return status;\n}\n\nrender() {\n    return (\n        <div>\n            <p>\n                Destination: { flight.destination }\n            </p>\n            <p>\n                Departure time: { flight.departureTime }\n            </p>\n            <p>\n                Arrival time: { flight.arrivalTime }\n            </p>\n            <p>\n                Flight status: { this.renderStatus() }\n            </p>\n        </div>\n    )\n} Our code looks way neater now, right? All of the examples above were about rendering a simple string based on some boolean values but what could have happened if we had to add a different class, or pass a different prop? Logic is the same. Let's say we have a button to book a flight unless it's cancelled: renderButton() {\n    let handleOnPress;\n    let buttonClassName;\n    let buttonText;\n    if (flight.cancelled) {\n        buttonClassName = 'button disabled';\n        buttonText = 'Cancelled';\n    } else {\n        buttonClassName = 'button';\n        buttonText = 'Book';\n        handleOnPress = this.bookFlight\n    }\n    return (\n        <button\n            className={buttonClassName}\n            onPress={handleOnPress}\n        >\n            { buttonText }\n        </button>\n    )\n} We can also use ternary expressions to have the same result as the one produced by code above: renderButton() {\n    // for className, you can also use this:\n    // `button ${flight.cancelled ? 'disabled' : ''}`\n    return (\n        <button\n            className={flight.cancelled ? 'button disabled' : 'button'}\n            onPress={flight.cancelled ? null : this.bookFlight}\n        >\n            { \n                flight.cancelled ?\n                    'Cancelled'\n                    :\n                    'Book'\n            }\n        </button>\n    )\n} If you just want to render/pass something if the condition is fullfilled, you can also write it this way: render() {\n    return (\n        <p>\n            {\n                // condition && what_to_render\n            }\n            { \n                flight.cancelled && 'Cancelled'\n            }\n        </p>\n    )\n} Conditional rendering inside for loop When rendering a list of items , you might want to render them differently based on some condition. For example, you might want to add grey background to all the even items. How to do this? You can either use ternary expression or standard if/else, both will work! Remember that it's a function like any other! Here's a small example: render() {\n  \treturn (\n    \t<div>\n    \t\t{\n      \t\t\tthis.state.list.map((item, index) => {\n                    // if even, render grey background\n                    if (index % 2 === 0) {\n                      // don't forget to return what you want to render!\n                      return (\n                        <div style={{backgroundColor: 'grey'}}>\n                          {item.name}\n                        </div>\n                      );\n                    } else {\n                      // you can also use ternary expression\n                      return (\n                        <div style={item.expired ? {backgroundColor: 'red'} : null}>\n                          {item.name}\n                        </div>\n                      );\n                    }\n                  })\n    \t\t}\n    \t</div>\n\t);\n} Of course, this mapping function can be extracted outside of render method , for increased readability. Switch statement We've been talking about if-else, but conditioning can, also, be done with a switch statement. Let's say that, instead of the boolean attributes for cancelled and arrived, we have one status attribute. Of course, we can't just type something like this: render() {\n    return (\n        <p>\n            {\n                // this will raise an error\n            }\n            { \n                switch(flight.status) {\n                    case 'cancel':\n                        return \"Cancelled\";\n                    case 'arrive':\n                        return \"Arrived\";\n                    default:\n                        return \"Regular\";\n                }\n            }\n        </p>\n    )\n} For switch, there's no neat way to do it directly in return statement. We can, of course, use immediately-invoked function containing a switch, but it's neither practical nor does it look nice. To make the switch above work, just move it to some function outside of render method: renderStatus() {\n    switch(flight.status) {\n        case 'cancel':\n            return \"Cancelled\";\n        case 'arrive':\n            return \"Arrived\";\n        default:\n            return \"Regular\";\n    }\n}\nrender() {\n    return (\n        <p>\n            { \n                this.renderStatus()\n            }\n        </p>\n    )\n} Of course, switch can also be specified in render method, above the return statement. Just remember not to use 'return' in cases, but a 'break' : render() {\n    let status;\n    switch(flight.status) {\n        case 'cancel':\n            status = \"Cancelled\";\n            break;\n        case 'arrive':\n            status = \"Arrived\";\n            break;\n        default:\n            status = \"Regular\";\n            break;\n    }\n    return (\n        <p>\n            { status }\n        </p>\n    )\n} Now you're completely ready to do conditioning in React! Go ahead and try these out, make that code you've been struggling with for hours finally work properly! If you already knew how to use if-else and switch in React, we hope you still enjoyed the article and freshened up your knowledge a bit. Thank you for your time! If you liked this article, make sure to subscribe! Next time, we'll be talking about props!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "React JSX - How to do it the right way - Part I", "author": ["Nesha Z."], "link": "https://kolosek.com/react-jsx-loops/", "abstract": "Usually, when developing a website, you'll need some dynamical rendering, like a listing of items, showing some element under a certain condition and so on. You're all aware of the standard JS syntax - a for loop, or an if/else - but when you try to write those under a render method in React, you'll most likely get some weird looking errors. In this, the first part of React JSX series, we will take a look at how to correctly loop through arrays the reactive way. In second part of the series you can find out more about conditional rendering . Please note that all of the examples below apply as well to React Native! Using Loops Inside React Render Methods Let's say you have an array of movies and that you need to display the Movie component for each of them. Most of us have tried this at some point: render() {\n    return (\n        <div>\n            {\n                // this won't work!\n            }\n            {\n                for (var i=0; i < movies.length; i++) {\n                    <Movie movie={movie} />\n                }\n            } \n        </div>\n    )\n} This, however, won't work. Why? Think of it like you're just calling JavaScript functions. You can't put a for loop as a parameter when calling a function! Well, how to do it then? There are a few ways. You can go through a for loop above the return statement in render method and fill in a list you'll pass in return: render() {\n    const movieItems = [];\n    for (var i=0; i < movies.length; i++) {\n        movieItems.push(<Movie movie={movie} />);\n    }\n    return (\n        <div>\n            {\n                movieItems\n            } \n        </div>\n    )\n} This, however, is not a neat way as it's polluting the render method. To make render more readable, better move the for loop outside of it and then call it as a function: renderMovies(movies) {\n    const movieItems = [];\n    for (var i=0; i < movies.length; i++) {\n        movieItems.push(<Movie movie={movie} />);\n    }\n    return movieItems;\n}\n\nrender() {\n    return (\n        <div>\n            {\n                this.renderMovies(movies)\n            } \n        </div>\n    )\n} This looks a bit better now. Still, you are using the for loop which doesn't really look so nice. The for should be used when you need to render something a certain number of times. When you have an object or an array instead, there are neater ways. So, let's switch to using the map from JS Arrays: renderMovies(movies) {\n    // This is ES6 syntax! You'll need babel configured to use it!\n    // You can still use the standard function syntax,\n    // but ES6 is definitely something that'll easen your life.\n    return movies.map((movie) => {\n        return (\n            <Movie movie={movie} />\n        );\n    });\n}\n\nrender() {\n    return (\n        <div>\n            {\n                this.renderMovies(movies)\n            } \n        </div>\n    )\n} Now, this looks good! Yet, it might look a bit bulky for being just a simple listing you can do in one single place. However, the map syntax you can actually use directly in a return statement . Why? Because the map function basically passes a freshly created array, compared to the for loop which is just a bulk of code. render() {\n    return (\n        <div>\n            {\n                // This is shortened syntax, for where we don't need to manipulate the actual items before rendering them\n            }\n            {\n                movies.map((movie) => <Movie movie={movie} />)\n            } \n        </div>\n    )\n} When you need to manipulate the actual item in the list before rendering it, you can do it this way: render() {\n    return (\n        <div>\n            {\n                movies.map((movie) => {\n                    // do something with a movie here\n                    return (\n                        <Movie movie={movie} />\n                    );\n                })\n            } \n        </div>\n    )\n} Now, again, if there's a lot of manipulating to be done for a single item, doing it inside a return statement might unnecessarily pollute the render method. In that case, better move this code out of the render method. Here's an example: renderMovie(movie) {\n    // do something with a movie here\n    return (\n        <Movie movie={movie} />\n    );\n}\n\nrender() {\n    return (\n        <div>\n            {\n                // map will automatically pass the list item to our function\n            }\n            {\n                movies.map(this.renderMovie)\n            } \n        </div>\n    )\n} All of the previous can also be used for JavaScript objects, with slight adaptation - you won't be mapping through the object, but through the list of the keys of the object: render() {\n    return (\n        <div>\n            {\n                // You can as well use lodash keys function (_.keys)\n                // instead of Object.keys, but it functions the same way\n            }\n            {\n                Object.keys(moviesObject).map((movieKey) => {\n                    const movie = moviesObject[movieKey];\n                    return (\n                        <Movie\n                            key={movieKey}\n                            movie={movie}\n                        />\n                    );\n                })\n            } \n        </div>\n    )\n} Keep in mind that all of the codes above are just examples, pseudo codes. Always send the key prop to the items you're rendering and keep it unique, avoiding array indexes. Now you know multiple ways on how to loop through arrays in React! Which way you'll use is up to you and the occasion, sometimes one will be more suitable than the other. Thank you for your time and good luck with coding! Part II is out! Read about conditional rendering in React now! Did you like this article? Subscribe and stay tuned when new React articles come out!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "Rails Scaffold", "author": ["Kristina P."], "link": "https://kolosek.com/rails-scaffold/", "abstract": "Scaffolding in Ruby on Rails refers to the auto-generation of a set of a model, views and a controller usually used for a single database table. For example, you can auto-generate a ready to use controller, model, and views with a full CRUD ( C reate, R ead, U pdate, D elete) web interface for the Story table using the following command: $rails generate scaffold Story title:string content:text It's way easier to do this, instead of coding everything yourself, it saves you a lot of time! Scaffold or Models? Compared to the scaffold that generates everything that you need (and don't need), models create only some related components. The best, and my favorite, way to explain the difference between scaffold and models is by using the following example: Generate models Once you enter the command $rails generate model Story title:string content:text you will generate: invoke  active_record\ncreate    db/migrate/20180205103025_create_stories.rb\ncreate    app/models/story.rb\ninvoke    test_unit\ncreate      test/models/story_test.rb\ncreate      test/fixtures/stories.yml invoke active_record will tie your model to the database, while the next line creates a migration file . Migrations are used to alter your database schema. This migration file creates the database table called 'stories', and database columns for \"title\" and \"content\". The third line will create a model - a Ruby class that inherits the Active Record. With this, every method that can be called in Active Record can now be called in your model. The last three lines create related test files for your model. While scaffolding will get you up and running quickly, the code it generates is unlikely to be a perfect fit for your application. You’ll most probably want to customize the generated code. Many experienced Rails developers avoid scaffolding entirely, preferring to write all or most of their source code from scratch. You can read more about this on RailsGuides . As you can see, generate models does not create any kind of view to display information on a page. To have a complete, ready to use application, you would need to: generate controllers (which in turn generates views, as well) or generate scaffold (which generates your model, views, controller and writes to your routes.rb file). If you change your mind and decide to use scaffold after already generating the model, you can always run $rails generate scaffold <name> . It will create all the missing files. Generate scaffold If you enter the command $rails generate scaffold Story title:string content:text you will generate the following files: invoke  active_record\ncreate    db/migrate/20180205103508_create_stories.rb\ncreate    app/models/story.rb\ninvoke    test_unit\ncreate      test/models/story_test.rb\ncreate      test/fixtures/stories.yml\ninvoke  resource_route\nroute    resources :stories\ninvoke  scaffold_controller\ncreate    app/controllers/stories_controller.rb\ninvoke    erb\ncreate      app/views/stories\ncreate      app/views/stories/index.html.erb\ncreate      app/views/stories/edit.html.erb\ncreate      app/views/stories/show.html.erb\ncreate      app/views/stories/new.html.erb\ncreate      app/views/stories/_form.html.erb\ninvoke    test_unit\ncreate      test/controllers/stories_controller_test.rb\ninvoke    helper\ncreate      app/helpers/stories_helper.rb\ninvoke      test_unit\ninvoke    jbuilder\ncreate      app/views/stories/index.json.jbuilder\ncreate      app/views/stories/show.json.jbuilder\ncreate      app/views/stories/_story.json.jbuilder\ninvoke  assets\ninvoke    coffee\ncreate      app/assets/javascripts/stories.coffee\ninvoke    scss\ncreate      app/assets/stylesheets/stories.scss\ninvoke  scss\ncreate    app/assets/stylesheets/scaffolds.scss Once model related tests are created, the next line will generate resource routes to your stories. After generating resource routes comes the controller and its actions (index, show, new, edit, create, update and destroy), together with views and controller tests for each of this actions. The Rails router recognizes URLs and connects them to a controller's action. By default, a controller's action will render a view of the same name. Migration Every time you create a migration using scripts (generate model/generate scaffold) a new migration is added to the correct directory. You use $rake db:migrate to checks which migrations that have not been added to the database. == 20180205103508 CreateStories: migrating ====================================\n-- create_table(:stories)\n   -> 0.0007s\n== 20180205103508 CreateStories: migrated (0.0008s) =========================== Destroy Everyone is free to edit and do the necessary changes to their application to work as intended, even if it means completely removing scaffold . You can remove scaffold in the following way: Generate scaffold: $rails generate scaffold Story If you migrated your files, perform a rollback: $rake db:rollback Destroy or undo scaffold: $rails destroy scaffold Story By doing this, you will delete all the files created by the scaffold but additional changes that you may have done manually will not be removed. Conclusion A scaffold is excellent to use when it comes to simple examples, quick mockups or testing . However, be sure to generate your own models when you decide to develop a new application. Don't forget to always test your application, find out how to do it by using Capybara ! We hope you discovered something new today! If you want to dig deeper and search for more Ruby mysteries, be sure to subscribe to our newsletter!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "Gradient, My Dear Watson", "author": ["Tijana D."], "link": "https://kolosek.com/everything-you-need-to-know-about-gradient/", "abstract": "As a designer born in the flat era I knew that gradient only exists next to the word DON’T . The year 2016 was predicting big things for it and it’s been correct, ( Smashing magazine even predicted gradient trend in 2009). Impossible as it may seem, 2017 is gradienter than 2016 was. In this year gradient was everywhere! We could find it in the background, in buttons, in borders, in texts, illustrations, animations etc. Here's our view on the gradient subject. Flat design and gradient 101 Flat design has been around for a while and it’s been compatible with other trends such as minimalism, responsive web design, and Material Design. It’s getting along with gradient as well. With gradient and shades, the flat design evolved into semi-flat (also known as almost-flat and Flat 2.0) design, which is great news for everyone - from users to designers. By the principles of flat design, it’s not easy to be different and stand out and that is what every design wants to accomplish. With the freedom to use more colors and their combinations, designers get what they always wanted - a more acceptable specter of options. There are so many new options: two similar colors, two opposite or just different ones, 3 or more colors in one element, slight white into the color gradient and slight color into black etc. You can try imitating nature and make sky like or sun like gradient or you can try something nobody tried - combining and making weird but loud sludge . More about the gradient Gradient represents a variation of colors continuously with position, producing smooth color transitions. Most common type is the linear one . A linear gradient is specified by two points and colors on that line. In Web design, a gradient is defined with CSS and it’s compatible with every browser. Defining gradient in CSS is possible with background property. It’s possible to define: gradient type, linear or radial, shape for radial one, size, 4 different sizes, gradient direction, by angle or side, colors in every CSS format there is, repeat percentage of color. Gradients are so popular! Instagram changed the logo in 2016 to gradient one, Facebook added gradient glorifying option this year... It’s official, it’s not just another trend, it’s a new option in your palette ! Gradients for 2018 are an honorable mention in every design guide/predictable text/list. We can expect it in form of retro color gradient, in duotone form or combined with crazy patterns but it’s here to stay for sure! (Color transitions are the same thing as gradients, but it is predicted that to be its fancy name for the next year.) To be honest, I’m not a gradient person, but I consider myself a good designer so gradient options are not rare in everyday decisions of mine. Best gradient tools and examples If you want to play with gradient tools, you should definitely try this one - uiGradient . And take a look at WebGradients . I definitely wouldn't mind if you'd be interested in CSSmatic . And this one - coolhue . And all three of them: Grabient , gradiently , and Blend . If you want to know more, be sure to check out Colorion and Unique gradient generator . Some of my favorite best gradient examples are Paperplanes World , Lines , Swiss Army Man . As well as Fcinq , Justactions , Calmind , spicyweb , Lauren Anne Design , and Andrew Spencer . Some of the previously mentioned examples are used as photos in this text.", "date": "2017-12-05"},
{"website": "Kolosek", "title": "RSpec Let Vs Before", "author": ["Kristina P."], "link": "https://kolosek.com/rspec-let-vs-before/", "abstract": "In RSpec, there are two different ways to write DRY tests, by using before or let . Their purpose is to create variables that are common across tests. In this post, we will explore differences between before and let and explain why let is preferred by the Ruby community . let Let creates lazily-evaluated local variables. This means that let() is not evaluated until the method that it defines is run for the first time. It DRYs up the spec and makes it more readable. $count = 0\ndescribe \"let\" do\n  let(:count) { $count += 1 }\n\n  it \"stores the value\" do\n    expect(count).to eq(1)\n    expect(count).to eq(1)\n  end\n\n  it \"is not cached across examples\" do\n    expect(count).to eq(2)\n  end\nend Let should not be used for local variables, which have to be saved to the database, as they will not be saved to the database unless they have already been referenced. In this case, you should use let! or before blocks . The the tests we are creating are done using RSpec and Capybara . Also, never have a let block inside of a before the block, this is what let! is made for! let! Unlike let, you can use let! to force the method's invocation before each example . It means that, even if you didn't invoke the helper method inside the example, it will be invoked before your example runs. $count = 0\ndescribe \"let!\" do\n  invocation_order = []\n\n  let!(:count) do\n    invocation_order << :let!\n    $count += 1\n  end\n\n  it \"calls the helper method in a before hook\" do\n    invocation_order << :example\n    expect(invocation_order).to eq([:let!, :example])\n    expect(count).to eq(1)\n  end\nend As with let blocks, if multiple let! blocks are defined with the same name, the most recent one will be executed. The core difference is that let! blocks will be executed multiple times if used like this, whereas the let block will only execute the last time. before(:each) Before(:each) block will run before each example, even if the example doesn't use any of the instance variables defined in the block. This can noticeably slow down the setup of the instance variables. class User\n  def tests\n    @tests ||= []\n  end\nend\n\ndescribe User do\n  before(:each) do\n    @user = User.new\n  end\n\n  describe \"initialized in before(:each)\" do\n    it \"has 0 tests\" do\n      @user.should have(0).tests\n    end\n\n    it \"can accept new tests\" do\n      @user.tests << Object.new\n    end\n\n    it \"does not share state across examples\" do\n      @user.should have(0).tests\n    end\n  end\nend In nearly every situation, it is better to use let over before blocks. Depending on your personal preference you could use before blocks when: There is a reasonable amount of variables. There are variables that don't need to be referenced directly but are required. There are many commands to be executed because its syntax is more clear when many commands are involved. Creating mocks/stubs. Give it a try and create your own model or controller tests ! before(:all) This block is executed only once, before all of the examples in a group. There are certain situations this can cut down on execution and effort. class User\n  def tests\n    @tests ||= []\n  end\nend\n\ndescribe User do\n  before(:all) do\n    @user = User.new\n  end\n\n  describe \"initialized in before(:all)\" do\n    it \"has 0 tests\" do\n      @user.should have(0).tests\n    end\n\n    it \"can get accept new tests\" do\n      @user.tests << Object.new\n    end\n\n    it \"shares state across examples\" do\n      @user.should have(1).tests\n    end\n  end\nend Using before(:all) in RSpec will cause you lots of trouble unless you know what you are doing! It runs outside of transactions, so the data created here will bleed into other specs. Conclusion Let blocks bring more to the table than before blocks. It all depends on what and how you need to make the RSpec tests work or consider using FactoryGirl for creating data. Besides being slower, one of the major problems with before blocks is that spelling errors can lead to bugs and false positives, allowing certain types of tests to pass when they shouldn't. before(:each) do\n    @user = User.find(username: \"kolosek\")\n    @user.logout\nend\n\nit \"should log the user out\" do\n    expect(@usr).to be_nil\nend Since @usr wasn't previously defined, the test will pass, @usr is nil by default. The same test using let would raise NameError because @usr isn't defined. Hope this will help you to better understand the differences between let and before blocks. Thank you for reading! Follow our railsroad by subscribing to our newsletter! Know da way!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "Rails RSpec Setup", "author": ["Kristina P."], "link": "https://kolosek.com/rails-rspec-setup/", "abstract": "RSpec is an awesome tool for testing Rails apps. It is a hugely popular BDD-oriented ( B ehavior D riven D evelopment) testing framework in the Ruby community. It makes writing tests simpler, more expressive and easier to maintain! Getting started First, you'll need to install RSpec but you’ll also need Database Cleaner to help hold things together and ensure a clean state during tests. Add the following gems to the :test and :development groups in your Gemfile and then run bundle install : group :development, :test do\n  gem \"database_cleaner\"\n  gem \"rspec-rails\"\nend It is very common to use RSpec together with Capybara to improve your testing development. Configuring RSpec Before you can start with writing your RSpec tests your will need to run rails generate rspec:install . This will create the following files: create  .rspec\ncreate  spec\ncreate  spec/spec_helper.rb\ncreate  spec/rails_helper.rb Files such as, spec_helper.rb and rails_helper.rb contain the default RSpec set up with lots of comments. It is strongly recommended to read through all of those comments to get a good understanding of what each option does. spec_helper.rb spec_helper.rb file is used to configure RSpec. The base configuration file, after uncommenting some useful configuration options, is written in the following way: RSpec.configure do |config|\n  config.expect_with :rspec do |expectations|\n    expectations.include_chain_clauses_in_custom_matcher_descriptions = true\n  end\n\n  config.mock_with :rspec do |mocks|\n    mocks.verify_partial_doubles = true\n  end\n\n  config.shared_context_metadata_behavior = :apply_to_host_groups\n  config.filter_run_when_matching :focus\n  config.disable_monkey_patching!\n  \n  if config.files_to_run.one?\n    config.default_formatter = \"doc\"\n  end\n  \n  config.profile_examples = 10\n  \n  config.order = :random\n  Kernel.srand config.seed\nend expectations.include_chain_clauses_in_custom_matcher_descriptions = true - Chain method allows custom matcher descriptions and failure messages to include text for helper methods. mocks.verify_partial_doubles = true - Partial doubles prevent you from stubbing any methods that don’t already exist on an object, it typo-proofs your mocks. config.shared_context_metadata_behavior = :apply_to_host_groups - Shared context metadata configures how RSpec treats metadata passed as part of a shared example group definition. filter_run_when_matching - Filter run when matching allows you to limit a spec run to individual examples or groups you tagged with :focus metadata. disable_monkey_patching! - Prevents RSpec from monkey patching makes objects behave in tests as they would in \"real\" life. default_formatter - Default formatter sets up the default format of your rspec tests that will be used if no formatter has been set. config.profile_examples - Profile examples print the slowest examples and example groups at the end of the spec run, but it slows down your suite config.order = :random and Kernel.srand config.seed - Configure tests to run in a random order . This helps to keep each test independent of one another. rails_helper.rb rails_helper.rb file is used for specs which depend on Rails (mostly model and controller tests , but also on nearly every part of a Rails projects). rails_helper.rb requires spec_helper.rb to work. require 'spec_helper'\nENV['RAILS_ENV'] ||= 'test'\nrequire File.expand_path('../../config/environment', __FILE__)\nabort(\"The Rails environment is running in production mode!\") if Rails.env.production?\nrequire 'rspec/rails'\n\nActiveRecord::Migration.maintain_test_schema!\n\nRSpec.configure do |config|\n  config.fixture_path = \"#{::Rails.root}/spec/fixtures\"\n  config.use_transactional_fixtures = true\n  config.infer_spec_type_from_file_location!\n  config.filter_rails_from_backtrace!\nend fixture_path - File fixture is a normal file stored in spec/fixtures by default. use_transactional_fixtures - Transactional fixtures allow records created for one test to be visible for the next test. infer_spec_type_from_file_location! - Allows to automatically tag specs in directories with matching type metadata so that they have relevant helpers available to them. filter_rails_from_backtrace! - Backtrace filtering is used to filter out lines in backtraces that come from Rails gems in order to reduce the noise in test failure output. Configuring Database Cleaner By configuring the Database Cleaner in your application, you make it sure that tests start with a clean state. The only thing you need to do is to add the following to your RSpec.configure block in rails_helper.rb: config.before(:suite) do\n  DatabaseCleaner.clean_with(:truncation)\nend How to run the tests? Once everything is configured you are ready to go! There are four ways to run your test: Everything at once: bundle exec rspec . This runs all your tests. One RSpec package: bundle exec rspec ./spec/models This runs all model specs. One RSpec file at a time: bundle exec rspec ./spec/models/story_spec.rb . This runs only tests in Story model. One by one: bundle exec rspec ./spec/models/story_spec.rb:10 This runs only tests on line 10 in Story model. In the same way, you can run tests on your controller . Be careful! The more tests there are the longer it takes to compile them. Only run tests for what you really need! We hope this article helped you get your tests up and running! To learn more about our future RSpec articles, subscribe to our newsletter!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "Lodash Library Usage Examples", "author": ["Kolosek"], "link": "https://kolosek.com/lodash-library-usage-examples/", "abstract": "Using Lodash library will make writing JS code so much easier. The good definition is: \"Applicative programming is the pattern of defining a function that takes a function and then invokes that function for each element in a collection/list\". It has a very nice documentation . Now, let's get to the actual work. Here is a list of the most commonly used functions for different data structures. Common functions for collection _.forEach - iterates over elements of the collection and invokes iteratee for each element. _.forEach([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `1` then `2`. _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed) _.map - creates an array of values by running each element in the collection throught iteratee. var users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n\n_.map(users, 'user');\n// => ['barney', 'fred'] function square(n) {\n  return n * n;\n}\n\n_.map([4, 8], square);\n// => [16, 64] _.find - iterates over elements of the collection, returning the first element predicate returns truthy for. var users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n];\n\n_.find(users, function(o) { return o.age < 40; });\n// => object for 'barney' _.filter - returning new array of items based on a logical criteria. var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n_.filter(users, { 'age': 36, 'active': true });\n// => objects for ['barney'] _.some - checks if the predicate returns truthy for any element of the collection. Iteration is stopped once the predicate returns truthy. var users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n];\n\n_.some(users, { 'user': 'barney', 'active': false });\n// => false\n\n_.some(users, ['active', false]);\n// => true _.sortBy - allows sorting arrays by the specified value. var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 },\n];\n\n_.sortBy(users, ['user', 'age']);\n// => [['barney', 36], ['fred', 40], ['fred', 48]] Common functions for array _.difference - creates an array of array values that are not included in the other given arrays. The order and references of result values are determined by the first array. _.difference([2, 1], [2, 3]);\n// => [1] _.indexOf - gets the index at which the first occurrence of the value is found in array. _.indexOf([1, 2, 1, 2], 2);\n// => 1 _.uniq - creates a duplicate-free version of an array in which only the first occurrence of each element is kept. _.uniq([2, 1, 2]);\n// => [2, 1] Check _.uniq_by too. _.findIndex - similar to _.find except it returns the index of the first element. var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.findIndex(users, function(o) { return o.user == 'barney'; });\n// => 0 _.reverse - reverses array. var array = [1, 2, 3];\n \n_.reverse(array);\n// => [3, 2, 1] _.remove - removes all elements from array that predicate returns truthy for and returns an array of the removed elements. var array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n \nconsole.log(array);\n// => [1, 3]\n \nconsole.log(evens);\n// => [2, 4] _.slice - creates a slice of array from start up to, but not including, end. var array = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];\n\n_.slice(array, 1, 3)\n// => ['Orange','Lemon'] Common functions for object _.keys - creates an array of the own enumerable property names of the object. function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\n_.keys(new Foo);\n// => ['a', 'b'] (iteration order is not guaranteed) _.values - creates an array of the own enumerable string keyed property values of the object. function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \n_.values(new Foo);\n// => [1, 2] (iteration order is not guaranteed) _.pick - creates an object composed of the picked object properties. var object = { 'a': 1, 'b': '2', 'c': 3 };\n \n_.pick(object, ['a', 'c']);\n// => { 'a': 1, 'c': 3 } _.omit - creates an object composed of own and inherited enumerable property paths of objects that are not committed. var object = { 'a': 1, 'b': '2', 'c': 3 };\n \n_.omit(object, ['a', 'c']);\n// => { 'b': '2' } Common functions for string _.capitalize - converts the first character of the string to upper case and the remaining to lower case. _.capitalize('FRED');\n// => 'Fred' _.lowerCase - converts the string, as space separated words, to lower case. _.lowerCase('fooBar');\n// => 'foo bar' _.includes - checks if the string contains substring. _.includes('foobar', 'ob');\n// → true _.split - splits the string by a separator. _.split('a-b-c', '-', 2);\n// => ['a', 'b'] _.trim - removes leading and trailing whitespace or specified characters from the string. _.trim('  abc  ');\n// => 'abc' Common math functions _.sum - computes the sum of the values in array. _.sum([4, 2, 8, 6]);\n// => 20 Check _.sumBy too. _.round - computes a number rounded to precision. _.round(4.006);\n// => 4\n \n_.round(4.006, 2);\n// => 4.01 _.random - produces a random number between the inclusive lower and upper bounds. _.random(0, 5);\n// => an integer between 0 and 5 _.max(array) - computes the maximum value of array. If the array is empty or falsey, undefined is returned. _.max([4, 2, 8, 6]);\n// => 8 Check _.min too. _.mean(array) - computes the mean of the values in the array. _.mean([4, 2, 8, 6]);\n// => 5 You should also check out _.debounce , _.throttle and _.cloneDeep . That's it! Thanks for reading! If you want to know more how we can help you deal with writing JS code, subscribe to our newsletter! References: https://codehangar.io/common-lodash-functions/ https://vooban.com/en/send-english-newsletter-tips-articles-geek-stuff/10-lodash-functions-everyone-should-know/ http://ngninja.com/posts/powerful-lodash-functions-javascript https://lodash.com/docs/", "date": "2016-11-05"},
{"website": "Kolosek", "title": "RSpec Rails Controller Test", "author": ["Nesha Z."], "link": "https://kolosek.com/rspec-controller-test/", "abstract": "Rails is a web development framework, where model , view and controller are important aspects of your application. Controllers, just like models and viewers, need to be tested with Ruby communities favorite tool, RSpec . Controllers in Rails accept HTTP requests as their input and deliver back and HTTP response as an output. Organizing tests Describe and context blocks are crucial for keeping tests organized into a clean hierarchy, based on a controller's actions and the context we're testing. Betterspecs.org provides the basics about writing your tests, it will help you make your tests much more expressive. The purpose of 'describe' is to wrap a set of tests against one functionality while 'context' is to wrap a set of tests against one functionality under the same state. Describe vs. Context in RSpec by Ming Liu You want to create a context for each meaningful input and wrap it into a describe block. We will express each HTTP session in different describe blocks for: stories_controller_spec.rb . describe \"Stories\" do\n  describe \"GET stories#index\" do\n    context \"when the user is an admin\" do\n      it \"should list titles of all stories\"\n    end\n    \n    context \"when the user is not an admin\" do\n      it \"should list titles of users own stories\" do\n    end When you want to control the authorization access you can create a new context for each user role. In the same way, you can manage the authentication access , by creating a new context for logged in and logged out users. context \"when the user is logged in\" do\n      it \"should render stories#index\"\n    end\n    \n    context \"when the user is logged out\" do\n      it \"should redirect to the login page\"\n    end\n  end By default, RSpec-Rails configuration disables rendering of templates for controller specs. You can enable it by adding render_views : Globally, by adding it to RSpec.configure block in rails_helper.rb file Per individual group describe \"GET stories#show\" do\n    it \"should render stories#show template\" do\n    end\n  end\n\n  describe \"GET stories#new\" do\n    it \"should render stories#new template\" do\n    end\n  end It is very common to check if you are using valid or invalid attributes before saving them to the database. describe \"POST stories#create\" do\n    context \"with valid attributes\" do\n      it \"should save the new story in the database\"\n      it \"should redirect to the stories#index page\"\n    end\n    \n    context \"with invalid attributes\" do\n      it \"should not save the new story in the database\"\n      it \"should render stories#new template\"\n    end\n  end\nend How to get your data ready? We use factories to get the data ready for our controller specs. The way factories work can be improved with a FactoryBot gem. With the following factory we will generate multiple stories by using a sequence of different titles and contents: FactoryBot.define do\n  factory :story do\n    user\n    sequence(:title) { |n| \"Title#{n}\" }\n    sequence(:content) { |n| \"Content#{n}\" }\n  end\nend Let's test this out! The time has come to create our own controller tests. The tests are written using RSpec and Capybara . We will cover stories_controller.rb with tests for each of these methods: #index First, we want to take a look at our controller stories_controller.rb . The index action authorizes access to stories depending if the current user is an admin: def index\n  @stories = Story.view_premissions(current_user).\nend And in model story.rb we check if the current user is an admin: def self.view_premissions(current_user)\n  current_user.role.admin? ? Story.all : current_user.stories\nend With the info we just gathered, we can create the following GET stories#index test: describe \"GET stories#index\" do\n  context \"when the user is an admin\" do\n    it \"should list titles of all stories\" do\n      admin = create(:admin)\n      stories = create_list(:story, 10, user: admin)\n      login_as(admin, scope: :user)\n      visit stories_path\n\n      stories.each do |story|\n        page.should have_content(story.title)\n      end\n    end\n  end\n\n  context \"when the user is not an admin\" do\n    it \"should list titles of users own stories\" do\n      user = create(:user)\n      stories = create_list(:story, 10, user: user)\n      login_as(user, scope: :user)\n      visit stories_path\n\n      stories.each do |story|\n        page.should have_content(story.title)\n      end\n    end\n  end\nend As you can see, we created two different contexts for each user role (admin and not admin). The admin user will be able to see all the story titles, on the other hand, standard users can only see their own. Using options create(:user) and create_list(:story, 10, user: user) you can create users and ten different stories for that user. The newly created user will login login_as(user, scope: :user) and visit the stories_path page, where he can see all the story titles depending on his current role page.should have_content(story.title) . Another great way to create new users is using let or before blocks , those are two different ways to write DRY tests. #show You can write the #show method tests in a similar way. The only difference is that you want to access the page that shows the story you want to read. describe \"GET stories#show\" do\n  it \"should render stories#show template\" do\n    user = create(:user)\n    story = create(:story, user: user)\n\n    login_as(user, scope: :user)\n    visit story_path(story.id)\n\n    page.should have_content(story.title)\n    page.should have_content(story.content)\n  end\nend Once again we want to create the user create(:user) and a story create(:story, user: user) . The created user will log in and visit the page that contains the story based on the story.id visit story_path(story.id) . #new and #create Unlike the others, this method creates a new story. Let's check out the following action in stories_controller.rb # GET stories#new\ndef new\n  @story = Story.new\nend\n\n# POST stories#create\ndef create\n  @story = Story.new(story_params)\n  if @story.save\n    redirect_to story_path(@story), success: \"Story is successfully created.\"\n  else\n    render action: :new, error: \"Error while creating new story\"\n  end\nend\n\nprivate\n\ndef story_params\n  params.require(:story).permit(:title, :content)\nend The new action renders a stories#new template, it is a form that you fill out before creating a new story using the create action. On successful creation, the story will be saved in the database. describe \"POST stories#create\" do\n  it \"should create a new story\" do\n    user = create(:user)\n    login_as(user, scope: :user)\n    visit new_stories_path\n\n    fill_in \"story_title\", with: \"Ruby on Rails\"\n    fill_in \"story_content\", with: \"Text about Ruby on Rails\"\n\n    expect { click_button \"Save\" }.to change(Story, :count).by(1)\n  end\nend This time a created and logged in user will visit the page where it can create a new story visit new_stories_path . The next step is to fill up the form with title and content fill_in \"...\", with: \"...\" . Once we click on the save button click_button \"Save\" , the number of total stories will increase by one change(Story, :count).by(1) , meaning that the story was successfully created. #update Everyone wants to be able to update their stories. This can be easily done in the following way: def update\n  if @story.update(story_params)\n    flash[:success] = \"Story #{@story.title} is successfully updated.\"\n    redirect_to story_path(@story)\n  else\n    flash[:error] = \"Error while updating story\"\n    redirect_to story_path(@story)\n  end\nend\n\nprivate\n\ndef story_params\n  params.require(:story).permit(:title, :content)\nend When a new story is created we will be able to update it, by visiting the stories edit page. describe \"PUT stories#update\" do\n  it \"should update an existing story\" do\n    user = create(:user)\n    login_as(user, scope: :user)\n    story = create(:story)\n    visit edit_story_path(story)\n    \n    fill_in \"story_title\", with: \"React\"\n    fill_in \"story_content\", with: \"Text about React\"\n    \n    click_button \"Save\"\n    expect(story.reload.title).to eq \"React\"\n    expect(story.content).to eq \"Text about React\"\n  end\nend Just like in the previous methods, a newly created logged in user will create a story and visit the edit story page edit_story_path(story) . Once we update the title and content of the story it is expected to change as we asked expect(story.reload.title).to eq \"React\" . #delete At last, we want to be able to delete the stories we disliked. def destroy\n  authorize @story\n  if @story.destroy\n    flash[:success] = \"Story #{@story.title} removed successfully\"\n    redirect_to stories_path\n  else\n    flash[:error] = \"Error while removing story!\"\n    redirect_to story_path(@story)\n  end \nend You want to make it sure that only the admin and owner of the story can delete it, by installing gem 'pundit' . class StoryPolicy < ApplicationPolicy\n  def destroy?\n    @user.role.admin?\n  end\nend Let's test this out as well. describe \"DELETE stories#destroy\" do\n  it \"should delete a story\" do\n    user = create(:admin)\n    story = create(:story, user: user)\n    login_as(user, scope: :user)\n    visit story_path(story.id)\n    page.should have_link(\"Delete\")\n    expect { click_link \"Delete\" }.to change(Story, :count).by(-1)\n  end\nend The test is written in a similar way to stories#create, with a major difference. Instead of creating the story, we delete it and such reduce the overall count by one change(Story, :count).by(-1) . Once again we reached the end! But there are many more articles waiting for you, subscribe now!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "Rails Bundle Install and Gemfile", "author": ["Kristina P."], "link": "https://kolosek.com/rails-bundle-install-and-gemfile/", "abstract": "Bundler makes sure that Ruby applications always use the exact gems and versions that you need while keeping a consistent environment and gem dependencies satisfied. This is done by ensuring that the gems you need are present in the development, staging and the production. Setting up a Bundler With this three simple steps that every begginer should know to get your application up and running with bundler : Install (or update) bundler with the following command: $gem install bundler Specify your dependencies in a Gemfile: gem \"carrierwave\", \"~> 1.0\"\ngem \"devise\"\ngem \"pundit\" Install all the gems Rails will need to get started: $bundle install Bundle Install Before you start, you will need to install Ruby on Rails on your machine. Once the installation is finished run bundle install , this will create Gemfile.lock in your repository. This ensures that other developers on your Ruby application run the same third-party code on every machine. Options There are multiple options you can use to change the way bundle install works. We will cover the most commonly used ones. bundle install [--deployment][--force][--frozen][--path PATH]\n               [--standalone[=GROUP[ GROUP...]]]\n               [--without=GROUP[ GROUP...]][--with=GROUP[ GROUP...]] --deployment : Runs bundle in the production environment. Activating deployment mode on development machines will cause an error when the Gemfile is modified. --force : Downloads every gem, even if the required versions are already available. --frozen : Gemfile.lock will not be updated after this install. --path <path_to_folder> : The specific locations where gems are going to be installed. --standalone <gem_list> : Creates a bundle that can work without depending on Bundler at runtime. --without <gem_list> : Groups of gems to skip during installation. --with <gem_list> : Groups of gems to install during installation. Gemfile A Gemfile is a file we created which is used for describing gem dependencies for Ruby programs. The Gemfile is located in the root of the project directory. source 'https://rubygems.org'\n\ngem 'rails', '4.2.6'\ngem 'sqlite3'\ngem 'sass-rails', '~> 5.0'\ngem 'uglifier', '>= 1.3.0'\ngem 'coffee-rails', '~> 4.1.0'\ngem 'jquery-rails'\ngem 'turbolinks'\ngem 'jbuilder', '~> 2.0'\ngem 'sdoc', '~> 0.4.0', group: :doc\n\ngroup :development, :test do\n  gem 'byebug'\nend\n\ngroup :development do\n  gem 'web-console', '~> 2.0'\n  gem 'spring'\nend Setting up the Gemfile Using source will explain the Gemfile where to look for gems: source https://rubygems.org . There is no need for more than one source per project. git and path are also valid gem sources. Bundler first looks if a source location is set up for the gem. If nothing has been explicitly set, it will look at the sources you have defined, starting at the first one. If the application requires a specific Ruby version or engine we can set this in the Gemfile in the following way: ruby '2.0.0', :patchlevel => '353', :engine => 'jruby', :engine_version => '1.6.7' :patchlevel : Patch level for Ruby. :engine : Type of Ruby engine. :engine_version : Version of the Ruby engine. Setting up the Gems Gems default syntax is: gem 'gem_name' . You can improve the default syntax in the following way: Setting versions : gem 'gem_name', '~> 1.3' If you don’t set a gem version , bundler will set it for you. To avoid that, you can use operators ( = Equal To , != Not Equal To, > Greater Than, < Less Than, >= Greater Than or Equal To, <= Less Than or Equal To, ~> Pessimistically Greater Than or Equal To). The ~> operator ensures that your application will safely work with future versions of a gem. gem 'gem_name', '~> 1.0' is the same as: gem 'gem_name', '>= 1.0', '< 2.0' Setting gem to required : gem 'gem_name', require: false In order to require gems in your Gemfile, you will need to call Bundler.require in your application. You can prevent bundler from requiring the gem with require: false , but it will still install and maintain the gem. Adding gem source : gem 'gem_name', source: 'https://gem_site.com' You can add source to your gems using source: 'https://gem_site.com' , a git repository git: ' [email protected] /git_repository/gem_name' , or a system path :path => '.../path_to_gem/gem_name' . When installing gems using git, you can set either a branch, tag, or ref for the gem. The default branch is branch: 'master' . gem 'gem_name', git: ' [email protected] /git_repository/gem_name', branch: gem_branch Another gem source can be :gist , it is used if the project is hosted on Github as a gist. Gist ID is used as the path: gem 'gem_name', :gist => '8eb650c7065', branch: 'gem_branch' Grouping gems : gem 'gem_name', group: :development Gems can belong to one or more groups . When it doesn’t belong to any groups it is located in the :default group. group :development, :test do\n  gem 'gem_name'\n  gem 'gem_another_name'\nend You can specify certain groups to not bundle install, this can considerably speed up the installation time. bundle install --without development test Setting a platform : gem 'gem_name', platform: :jruby You can specify in the Gemfile if a gem is used on a specific platform (or set of platforms). When developers use different Operating Systems during development, they will need different versions of gems depending on what is supported by their system. platforms [:mingw, :mswin, :x64_mingw, :jruby] do\n  gem \"gem_name\"\n  gem \"gem_another_name\"\nend Hope this text helped you to gain a better understanding of gems and bundle install. Thank you for reading! Gems are precious but so is our newsletter! Be sure to subscribe to it!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "CSS line-height", "author": ["Tatjana B."], "link": "https://kolosek.com/css-line-height/", "abstract": "The CSS property line-height defines the amount of space used for lines, most commonly in the text. It is often confused with line spacing (leading) used in Photoshop and similar softwares. Leading is a term that describes the distance between the baselines in the text. In the case of defining leading, space is always added below the text . But, when working with line-height property, space is always added equally above and below the text . Line-height uses several different types of units : px , em , % , unitless number , It’s important to mention that the unitless value is, basically, just a percentage . So, if the line-height has a property of 1.2 , it means it just has a value of 120% . Importance of line-height The most important use of line-height is making your text readable . It is recommended to use unitless values of any other unit that isn’t static like the px unit. If there is a need to set the font size and line-height at the same time, there is a handy CSS shorthand : html {\n  font: 24px/1.5 ‘Lato’, sans-serif;\n} By using this shorthand you will be able to set 3 elements at the same time: font-size, line-height, font-family. The line-height property applies only to elements that have their display property set to inline or inline-block . If the line-height is set on a block element, there might be some changes, but it is probably just the inline child elements that have been affected. If you set the line-height without a unit, the result is the line-height value multiplied by the element’s font-size . div {\n  Font-family: ‘Lato’, sans-serif;\n  Font-size: 14px;\n  Line-height: 2 // equals to 28px\n} Hope this article helped clarify the meaning and usage of the line-height property. Thank you for reading! Wanna read more? Subscribe to our newsletter!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "CSS Text Underline", "author": ["Tijana D."], "link": "https://kolosek.com/css-text-underlined/", "abstract": "In overall Web design, the most recognizable style is still blue text underlined , which is certainly going to take you somewhere. Link element <a> has that styling by default and it’s the only color in default mode. So we should be respectful of it. Although, there is a new world outside and old stuff are improved through at least a few stages. Link elements aren’t necessary underlined anymore and line under text isn’t just a link identification today. This quick course is mostly about underline text-decoration CSS option and “linked” options. First thing first - if you need quick, plain, regular underline, there is always <u> HTML element for it . It is going to make line in the text color on default position from the text. In fact, the <u> element is simply adding text-decoration:underline to the text with the browser's built-in CSS. Ok, how you probably didn’t need that, following examples are including CSS solutions and surely solution for your problem. There are two main options for adding the line underneath the text with CSS. The first one is text-decoration property and it specifies the decoration added to the text. Possible values for this property are underline, overline and line-through . The text-decoration property should be shorthand property for text-decoration-line, text-decoration-color, and text-decoration-style, but this isn’t supported well yet. For now, we have text-decoration and with it, we can add line under, over or through text, with text-decoration-color we can color that line and with text-decoration-style , we can make it double, dotted, dashed or wavy. The second solution is sort of a hack and it implies the use of a border-bottom . The display property, in this case, must be inline . With this solution we can control the position of the line with a padding-bottom property, thickness of the line with border-bottom-width , style with border-bottom-style and color with border-bottom-color . Border-bottom-style has same options like text-decoration-style has and some 3D effect options. This option offers more options and variables but it’s a trickier for usage. It’s still impossible to make dotted wavy underline. Waiting for it :(", "date": "2018-01-05"},
{"website": "Kolosek", "title": "Rails Capybara Setup", "author": ["Kristina P."], "link": "https://kolosek.com/rails-capybara-setup/", "abstract": "Capybara is a web-based automation framework tool for testing Rails apps. It helps you to create functional tests that simulate how users would interact with your application through the browser. It is a fantastic tool for testing your application through the browser! Capybara doesn't interact with the website, it's just a layer between you and the web driver. For this, you can use Selenium web driver or any of the other drivers that Capybara supports. Configuring Capybara Capybara can easily integrate with common test frameworks used in Rails. It is mostly used together with RSpec for writing feature and, but less commonly, controller test . Before you get started, you need to add the following gems to the :test group in your Gemfile and run bundle install : group :test do\n  gem 'capybara'\n  gem 'selenium-webdriver'\nend Testing with Capybara Capybara comes with a user-friendly DSL ( D omain S pecific L anguage), which offers helper methods for extracting information, inputting data, testing, or clicking around. By default, Capybara will only locate visible elements. This is because a real user would not be able to interact with non-visible elements. You can read more about this at rubydoc.info . Common DSL options Here we will cover the most commonly used DSL actions for interacting with elements in your web application: Find specific elements and manipulate them: find_field('field_name').value\nfind_field(id: 'field_id').value\nfind_link('link_name', visible: all).visible?\nfind_button('button_name').click This is one of the most important functions every good programmer should know if you want to manipulate your elements. You can use it to find your links, buttons and fields and check if they are visible to the user, or click on them. Find will always wait for an element to appear on the page before raising an error. Interact with the web application by following links and buttons : click_link('link_id')\nclick_link('link_text')\nclick_button('button_name')\nclick_on('link_text') # clicks on either link or button Always use one of these options when you want to access a link or a button. You can do this by using id, title, text within tag or value of the element. Interact with form elements : fill_in('Title', :with => 'Example')\nchoose('radio_button')\ncheck('checkbox')\nuncheck('checkbox')\nattach_file('image', 'image_path') # upload a file\nselect('option', from: 'select_box') # select from dropdown Whenever you want to fill up your form you should use one of these possibilities. Depending on the type of the element the present values are: id, name or related label element. The only exeption is attach_file, it can only accept id and name. Navigate trough pages with: visit('url_name') You can easily navigate trough page with this simple command or only access the current page with: expect(page).to have_current_path(path_name) Query the page for the existence of certain elements: expect(page).to have_selector('table tr')\nexpect(page).to have_content('content_name') Restrict certain actions within a specific area of the page with scoping : # within(:xpath, 'actual_xpath') do\n  fill_in 'Title', with: 'Example'\nend Use the within method when you want to use actions only in a specific area or use these special methods: within_fieldset for a specific fieldset and within_table for a specific table. Debug with the following methods: save_and_open_page # current snapshot of the page\nsave_sceenshot('screenshot_name.png')\nsave_and_open_screenshot # saves and automatically opens the screenshot When you want to save the snapshot of the page, just add one of these lines to your code, or you can also retrieve the current state of an element with: print page_name.html Matchers When trying to find an element by using the DSL or XPath, it is common to have two or more matches . You can customize the way Capybara find elements by using: Capybara.exact – Finds exact matches of an element. Capybara.match – Controls how Capybara behaves when multiple elements match. To avoid getting Ambiguous match error when more than one match is found, you should consider using the following matching strategies supported by Capybara: :first – This will simply pick the first element that matches. :one – This will raise an error if more than one element is found. :prefer_exact – This finds all matching elements but only the first exactly matching element is returned and the rest is discarded. :smart – If Capybara.exact is set to true , it will behave like :one . Otherwise, it will try to find the exact element. Once again, an error is raised if multiple elements are found. If no element is found, a new search is performed. JavaScript and Asynchronous Calls Asynchronous JavaScript allows you to interact with an element on the page that isn't present yet. This can happen when using JavaScript to creates a new element on the page: click_link('test')\nclick_link('foo') Once you click on the 'test' link it will trigger an asynchronous process, which will show the 'foo' link. Clicking on the 'foo' will most likely raise an error since that link doesn't exist yet. Capybara can handle this by waiting for a brief period of time. You can adjust the default waiting period (the default is 2 seconds) with: Capybara.default_max_wait_time . Capybara and RSpec Using Capybara together with RSpec is as simple as adding require 'capybara/rails' in the rspec_helper.rb file. To be able to do this, you will need RSpec installed beforehand. describe 'users' do\n  let! :each do\n    @user = FactoryGirl.create(:user)\n    login_as(@user)\n  end\n\n  describe GET user#edit' do\n    it 'should update user' do\n      visit edit_user_path(@user)\n      within('#edit_user_path') do\n        fill_in 'email', with: ' [email protected] '\n      end\n      click_button 'Save'\n      find_button('Save').click\n      expect(page).to have_content 'Success'\n    end\n  end\nend This was a simple example that shows how you can use Capybara and RSpec at the same time by editing the user. Hope this article helped you understand what Capybara the rodent can do to your test environment! Subscribe and stay tuned for the upcoming articles!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "Cucumber Cheat Sheet (2018 update)", "author": ["Kolosek"], "link": "https://kolosek.com/cucumber-cheat-sheet/", "abstract": "A Cucumber is a software tool based on B ehavior D riven D evelopment (BDD) framework which is used to write acceptance tests for the web application. The tests are written in easily readable and understandable format for Business Analysts, Developers and Testers. It is like reading plain English texts! Syntax Cucumber tests are divided into individual Features . These Features are subdivided into Scenarios , which are sequences of Steps : Given - Describes the initial state before the start of a test. When - Describes user actions during a test. Then - Describes results from When actions. Occasionally, you might want to write a combination of Given-When-Then. You can use the following conjunctions keywords : And - Logical AND But - Negative form of AND Before we start, you might want to consider using VCR and Webmock for Cucumber testing. Once we are ready, let's try implementing the tests! Action steps First, we will start with the most common actions users do every day when using a web application. Sign in Sign in is an action everyone does multiple times per day. To sign in a user in our application we will create a new user and use login_as function provided by warden test helpers (assuming we are using devise for authentication). # And I am signed in\nAnd(/^I am signed in$/) do\n  @user = create(:user, email: ' [email protected] ', password: 'password')\n  login_as(@user, scope: :user)\nend Clicking on an element Every so often we click on an element in our browser. All this clicking has to be covered with tests, you can describe them in many different ways. Here are some examples: # When I click on element \".element\"\nWhen(/^I click on element \"(.*?)\"$/) do |selector|\n  find(selector).click\nend\n\n# And I click on text \"Sign in\"\nAnd(/^I click on text \"(.*?)\"$/) do |text|\n  click_text(text)\nend\n\ndef click_text(text)\n  elem = find(:xpath, \"//*[contains(translate(text(), '#{text.upcase}', '#{text.downcase}'), '#{text.downcase}')]\", match: :first, wait: false)\n  scroll_to(elem, -200)\n  elem.click\nend Capybara has a great toolkit for testing interaction with elements in your web application, as well! Existence of a specific text Once we have clicked on an element and selected the \"Sign in\" text with the help of click_text(text) helper method and then a text content will appear: # Then I should see \"First Name\"\nThen(/^I should see \"(.*?)\"$/) do |content|\n  expect(page).to have_content(/#{Regexp.quote(content)}/i)\nend Now, you have discovered the existence of a specific text on the page, in this case, \"Fist Name\". Forms steps Filling up forms is another common action. Let's start with filling input, selecting the dropdown option and clicking on the checkbox examples. Filling input The input filed can only accept element selectors and values as the input. First, we will select an input field and then fill it with a specified value. # When I fill in \"test\" for field \"user[user_attributes][first_name]\"\nWhen(/^I fill in \"(.*?)\" for input element \"(.*?)\"$/) do |value, selector|\n  all(selector).last.set(value)\nend Selecting dropdown option You can only use element selector and option value as selected dropdown options. The option will be selected depending on the value. # When I select option \"My Test Inc Account\" from \".accounts-dropdown\"\nWhen(/^I select option \"(.*?)\" from element \"(.*?)\"$/) do |option, selector|\n  all(selector).last.find(:option, option).select_option\nend Clicking checkbox In the following example, you can only select a checkbox name which is used for finding and checking the element. # When I select checkbox \"report_type_summary\"\nWhen(/^I select checkbox \"(.*?)\"$/) do |cb|\n  check(cb)\nend Where are many different ways to write tests, especially in Ruby on Rails. Another very popular testing framework is RSpec , be sure to take a look. One way to build your testing data for RSpec is with FactoyBot . Navigation steps You can navigate through a page by the page name and value, different values can mean different pages. It will raise Missing mapping for '#{page_name}' page. exception if the page name is not defined. # Given I am on page users board\nGiven /^I am on page ?(.+)?$/ do |page_name|\n  case page_name\n  when 'homepage'\n    visit root_path\n  when 'users board'\n    visit users_path\n  when 'products board'\n    visit product_path\n  else\n    raise \"Missing mapping for '#{page_name}' page.\"\n  end\nend Why don't we put our new knowledge into practice and start writing tests for a modal ? Waiting for ajax Clicking on a button will trigger a ajax call and you will need to simulate the delay before your application responds to it. You can define the helper method that calls the sleep function: def wait_for_ajax\n  sleep 2\nend Always keep this cheat sheet close to you, to be there when you need it! Don't forget to test our subscribe input fields!", "date": "2016-11-05"},
{"website": "Kolosek", "title": "Factory Girl (Bot) Associations", "author": ["Aleksandar M."], "link": "https://kolosek.com/factory-girl-associations/", "abstract": "In this article we will go through how to generate the data for has_one, has_many and polymorphic associations using FactoryGirl. Every association will be described with an example, so you can get the idea how to create more complex factories with no pain. Generating the data for has_one association Setting up has_one association is quite easy, you can define it within the factory. If the factory name is the same as the association name, the factory name can be left out. For example: FactoryBot.define do\n  factory :story do\n    # story attributes\n    author\n  end\nend Also, you can specify a different factory and override attributes: FactoryBot.define do\n  factory :story do\n    # story attributes\n    association :author, factory: :user, first_name: \"Jon\"\n  end\nend It's possible to specify different strategies for creating the association: association :author, factory: :user, strategy: :build Keep in mind that this won't save an associated object in the database. Generating the data for has_many association Generating the data for a has_many association is a bit more complicated. You can define new factory and use after(:create) callback to create a list of associations. Let's see how to do it in this example: FactoryBot.define do\n\n  # user factory without associated stories\n  factory :user do\n    # user attributes\n\n    factory :user_with_stories do\n      transient do\n        stories_count 10\n      end\n\n      after(:create) do |user, evaluator|\n        create_list(:stories, evaluator.stories_count, user: user)\n      end\n    end\n  end\nend Attribute stories_count is a transient and available in attributes of the factory and in the callback via the evaluator. Now, you can create a user with stories with the option to specify how many stories we want: create(:user_with_stories).stories.length # 10\ncreate(:user_with_stories, stories_count: 15).stories.length # 15 Please note that every story will have a unique id, but in order to have other attributes unique, you need to generate different values for each story. You can achieve that using the sequence as an example: FactoryBot.define do\n  factory :story do\n    # story attributes\n    sequence(:title) { |n| \"Title#{n}\" } # Unique title for every story\n    association :author, factory: :user, first_name: \"Jon\"\n  end\nend There is also an interesting gem that can help you generate unique values called faker . Generating the data for polymorphic associations A polymorphic association can be a bit confusing. Hopefully, this example will help you understand it better. Let's say you have next classes with polymorphic associations: class Profile\n  belongs_to :profileable, polymorphic: true\nend\n\nclass Account\n  belongs_to :accountable, polymorphic: true\nend\n\nclass User\n  has_one :profile, as: :profileable\n  has_one :account, as: :accountable\nend When creating the factories for the models that have the polymorphic model, you simply create the polymorphic model in an after(:create) block and specify the polymorphicable to be the model the factory is for: FactoryBot.define do\n  factory :user, class: User do\n    # user attributes\n    \n    after(:create) do |user|\n      create(:account, accountable: user)\n      create(:profile, profileable: user)\n    end\n  end\nend And... that's it! Thank you for reading this article. If you are interested in reading more interesting articles about Rails be sure to subscribe to our newsletter! Interested in similar topics? Be sure to check our take on Rspec let vs before , Rspec Setup and FactoryGirl - create vs build vs buldstubbed .", "date": "2018-02-05"},
{"website": "Kolosek", "title": "React Guide to Props - Part I", "author": ["Kristina G."], "link": "https://kolosek.com/react-props-basic/", "abstract": "Disclaimer: This was intended to be part III of React JSX series, but as for props there's a lot to be covered, we have decided to divide it into a subseries! In some of our previous articles, you had the opportunity to read about JSX specific stuff, like how to render content in loops and how to do conditional rendering in React. Today, you will learn how props function. However, before we move to actual prop usage examples, you must first understand the difference between state , props and refs . Once you know what is what, everything will be a lot easier. Here's a short explanation: The state is similar to attributes in object-oriented programming : it's something local to a class (component), used to better describe it. We'll cover React state management and what should be kept in the local state in another article. Props are like parameters - they are passed to a component from the caller of a component (the parent) : as if you called a function with certain parameters. Refs are, as the name suggests, references to nested components (children), used for functionality like triggering of focus or an animation. However, they shouldn't be used too much , as the most proper way to communicate between the components is via props. Now that we have covered all the basic differences, we can start with the prop passing! All of the below applies to React Native as well! Passing props - the standard way Passing props is pretty straightforward: you send a prop by specifying the name under which will it be available in child component and defining what the prop should equal: render() {\n    return (\n        <Child\n            propName={propValue}\n        />\n    )\n} Here is a bit more realistic example: render() {\n    // strings don't have to be wrapped with {},\n    // but it's better to get used to wrapping everything\n    return (\n        <Movie\n            actors={[\n                ...\n            ]}\n            details={{\n                director: \"Director name\",\n                ...\n            }}\n            duration={120}\n            released={true}\n            title={\"Movie title\"}\n        />\n    )\n} That's basically it for sending a prop! Below you'll find some more specific props you'll definitely be using at some point when coding in React! Boolean props If you want to pass a true value as a prop, you can do it next way: render() {\n    // No need for \"released={true}\"!\n    return (\n        <Movie\n            released\n        />\n    )\n} In the same manner, if you want to pass a false value, you can do it by just not passing anything at all: render() {\n    // This will work the same way as if you passed \"released={false}\"!\n    return (\n        <Movie />\n    )\n} If the boolean value is contained within a variable, then, of course, you'll have to pass it. render() {\n    let booleanVariable = true; // this will often be calculated\n    return (\n        <Movie\n            released={booleanVariable}\n        />\n    )\n} You can directly calculate the value of a prop when passing it, as well: render() {\n    return (\n        <Movie\n            released={value1===value2}\n        />\n    )\n} Just keep in mind that it should be clear what's happening in the code, if the expression is too long, move it above the return statement or even to a separate function: isFormValid() {\n    // various checks, whether every form field is of correct format\n}\nrender() {\n    return (\n        <Form\n            disabled={!this.isFormValid()}\n            fields={this.state.fields}\n        />\n    )\n} Function props Often, you'll have to pass functions and event handlers as props. The functions you pass need to be bound to the component context. However, don't bind functions in render methods: handleChange(event) {\n    // do something here\n}\n\nrender() {\n    return (\n        <div>\n            {\n                // don't do this!\n            }\n            <input\n                onChange={this.handleChange.bind(this)}\n            />\n        </div>\n    )\n} If you bind a function in the render, everytime a component is rerendered, the new function will be created. Instead, it's the best to use arrow syntax when defining a function ( You'll need babel configured to use ES6 syntax! ): handleChange = (event) => {\n    // do something here\n}\n\nrender() {\n    return (\n        <div>\n            <input\n                onChange={this.handleChange}\n            />\n        </div>\n    )\n} You might be thinking: that's fine when there are no other parameters to be passed, but what if I need to pass an attribute? Here's how to do it with arrow functions: handleChange = (parameter1, parameter2) => (event) => {\n    // do something here\n}\n\nrender() {\n    return (\n        <div>\n            <input\n                onChange={this.handleChange(parameter1, parameter2)}\n            />\n        </div>\n    )\n} Sending props to this.props.children Sending the props to child component called directly in code is pretty straight forward, but how do we send the props to children passed as a prop? This is the way to do it: render() {\n    let updatedChildren = React.Children.map(this.props.children,\n        (child) => {\n            return React.cloneElement(child, { newProp: newProp });\n        });\n\n    return (\n        <div>\n            { updatedChildren }\n        </div>\n    );\n} If your component is having just one child, there's no need for mapping, you can do this as well: render() {\n    return (\n        <div>\n            {\n                React.cloneElement(this.props.children, {\n                    newProp: newProp\n                })\n            }\n        </div>\n    );\n} Props and the '...' You might have seen the three dots earlier and wondered what they mean. Code similar to one in next example is quite common in React world: render() {\n    return (\n        <Movie\n            {...this.props}\n        >\n    );\n} The ... is a spread operator , and it'll send each of the key-value pairs inside of this.props as a separate prop to Movie component. Let's say that we have an object movie: const movie = {\n    title: \"Inception\",\n    releaseDate: \"16.07.2010\",\n    genre: [\n        \"Action\", \"Adventure\", \"Sci-Fi\",\n    ],\n}; We should pass all of the key-value pairs from movie object to Movie component. Here's how we'd do it without the ... : render() {\n    return (\n        <Movie\n            title={movie.title}\n            releaseDate={movie.releaseDate}\n            genre={movie.genre}\n        />\n    );\n} Now, the code above can be much shorter using the three dots syntax, and work completely the same: render() {\n    return (\n        <Movie {...movie} />\n    );\n} However, although it's way shorter, it can get a bit messy over time, so don't overuse it! Also, keep in mind, that although the ... works as spread operator for arrays as well, when sending props you should only use it on objects! Thank you for your time reading this article! Now that we've gone through the prop basics, you can make your components communicate and understand better how they do so! This, however, is just a beginning, as there's a lot more to learn about component communication. We'll be covering the communication from children to parent and between two same level components in our next article. Subscribe and we'll notify you when it comes out!", "date": "2018-03-05"},
{"website": "Kolosek", "title": "CSS calc()", "author": ["Tatjana B."], "link": "https://kolosek.com/css-calc/", "abstract": "Ever wondered what in the world is the calc() property? Well, you’re about to find out! It can be used for creating layouts in CSS. For this purpose, you can also use the position property . CSS calc() is used for calculations inside the stylesheet. The calc() function allows the usage of mathematical expressions : addition (+) , subtraction (-) , multiplication (*) , division (/) . Being able to do math in CSS is a very useful feature, especially when creating complex layouts. Preprocessors all have the ability to use math functions, but none as powerful as the calc() function. Some of the preprocessor abilities include nesting in SASS and LESS . The main advantage with using the calc() property is the ability to mix different units . For example, you could divide the percentages with a unitless number or subtract pixels from percentages. The syntax div {\n  width: calc(100% - 30px)\n} The important thing to note is that there must be space on both sides of the operator . Browser support The best way to check if any of the CSS properties are supported by browsers is by visiting Can I use . We can see that the calc() function has a pretty good browser support, over 94%. Positioning example A simple example that demonstrates the power of the calc() function is positioning a div inside a container. .parent-element {\n  height: 500px;\n  width: 500px;\n  background-color: #C98EED;\n  position: relative;\n}\n\n.child-element {\n  height: 100px;\n  width: 100px;\n  background-color: #8FC9FF;\n  position: absolute;\n  left: calc(100% - 300px);\n  top: calc(100% - 150px);\n} In this example, we will see how the calc() function helps us position the child element relatively to the parent element . Afterwards, we can give the elements some styling and the text some formatting . Width example Another good example might be looking at how to set the width of the element using the calc() function. .parent-element {\n  height: 400px;\n  width: 1000px;\n  border: solid thin #808080;\n}\n\n.first-child {\n  background-color: #C98EED;\n  float: left;\n  margin-right: 20px;\n  width: 50%;\n  height: 300px;\n}\n\n.second-child {\n  background-color: #8FC9FF;\n  float: right;\n  width: calc(50% - 100px);\n  height: 300px;\n} This way, the calc() function is used to define the width of the .second-child element using both the percentage and pixel units . This is a good demonstration of the unit mixing abilities of this function. The conclusion We hope you learned something new from this article. We have shown you the basics of the calc() function, now it’s time for you to play around with it and unlock its full potential. Check out other articles about CSS properties such as relative font size and CSS positions .", "date": "2018-03-05"},
{"website": "Kolosek", "title": "Rails respond_to block Explained", "author": ["Nesha Z."], "link": "https://kolosek.com/rails-respond_to-block/", "abstract": "When you start your first Rails application you might think that controller actions are only capable of rendering HTML. So why and how to use a respond_to block? Here, we will show you how handy respond_to blocks can be. respond_to The first step is to create a new project and generate a scaffold in Rails. Let's take a look at some of our controller actions. def index\n  @blogs = Blog.all\nend As you can see, index action does not have a respond_to block. So, this will work when just rendering an HTML. But what if, however, a client asks to get the page in TEXT format? It will lead to an exception : ActionView::MissingTemplate (Missing template blogs/index ... with { ... :formats=>[:text], ...}) Rails goes through the registered formats and tries to find a compatible format for the MIME type in the request . If there is no handler it will raise an error. Credits to max . Instead of telling our clients that the file is missing , we want to tell them that the requesting format is not supported . You could add a respond_to block to your index action: def index\n  @blogs = Blog.all\n\n  respond_to do |format|\n    format.html # index.html\n    format.js   # index.js\n    format.xml { render xml: @blogs }\n  end\nend After the change, the client will get 406 error when the format is not supported. Also, your index action will respond to two new formats: js and xml. If you need a simple and quick way to render your objects, you can take this shortcut , it works in the same way as the example above: def index\n  @blogs = Blog.all\n  respond_to :html, :json, :xml\nend Not sure if this really works? Go on and test it using RSpec and FactoryBot ! Responding to the Same Format It’d be nice if you could have a respond_to that would affect the entire controller. Usually, each action in your controller can work with the same formats, you can achieve this by using respond_with . Here is an example of how to implement it: class BlogController < ApplicationController\n  respond_to :html, :json, :xml\n\n  # GET /blogs\n  # GET /blogs.json\n  # GET /blogs.xml\n  def index\n    @blogs = Blog.all\n    respond_with(@blogs)\n  end\nend If you need more control and want to be able to have a few actions that act differently, you can always use a full respond_to block. In Rails 4.2, respond_with is no longer included. But you can get it back if you install the responder gem . Once you install it and generate a Rails scaffold , the generator will create controllers using respond_with instead of respond_to . class BlogController < ApplicationController\n  before_action :set_blog, only: [:show, :edit, :update, :destroy]\n  respond_to :html, :json\n  \n  def index\n    @blogs = Blog.all\n    respond_with(@blogs)\n  end\n  ...\nend Format ALL or Format ANY? If you’d like to specify a respond_to to render something for all formats while keeping other options untouched, you can always use format.all in the following way: respond_to do |format|\n  format.csv { render_csv }\n  format.all { render_404 }\nend Use format.any if you want to specify a common block of different formats: def index\n  @blogs = Blog.all\n\n  respond_to do |format|\n    format.html\n    format.any(:xml, :json) { \n      render request.format.to_sym @blogs \n    }\n  end\nend All the controller actions need to be tested to make sure they work as intended! Defining Custom MIME Type If you need to use a MIME type which isn't supported by default, you can register your own handlers in config/initializers/mime_types.rb : Mime::Type.register \"text/markdown\", :markdown That's it for this article! Thank you for your time reading it! Be sure to subscribe to our newsletter, we will respond_to with many more future articles!", "date": "2018-03-05"},
{"website": "Kolosek", "title": "10 Ways to Improve Your Website Design", "author": ["Aleksandra M."], "link": "https://kolosek.com/10-ways-to-improve-your-website-design/", "abstract": "Nowadays, a company’s website is similar to the first handshake with someone—it represents the good (or the bad) start of a potential cooperation. However, a handshake is more than a form of greeting. A handshake establishes trust while giving you the power to diminish the negative first impression. The same thing goes for a website. A website should be as strong as a CEO’s handshake. What does this mean? No matter the market, companies are becoming more and more competitive and customers/consumers more and more impatient. Your visitors need great content to sweep them off their feet. In a study Web design: A key factor for the website success from 2009, authors Carlos Flavián, Raquel Gurrea and Carlos Orús put an emphasis on the importance of the website design. Authors stated that a good website design has an impact on online consumer's perception and behavior . Furthermore, authors defined originality and creating a website from demand's perspective as one of the key factors of a website design. There are many benefits of putting an effort into improving your website design: customers are able to recognize your brand in all forms of communication, building trust among your consumers, a chance to differentiate amongst all the other content e.g. use the gradient . If you are interested in making a good first impression, be sure to follow these 10 steps. Want to share this image on your site or/and social media? Just copy and paste the code below. <textarea onclick='this.focus();this.select()' style='width:700;height:400'><p><strong>Please include attribution to kolosek.com with this graphic.</strong><br /><br /><a href='https://kolosek.com/10-ways-to-improve-your-website-design/'><img src='https://kolosek.com/content/images/2018/02/Infographic-main.png' alt='Infographic-website design' width='720' border='0' /></a></p></textarea> Or the horizontal version: <textarea onclick='this.focus();this.select()' style='width:700;height:400'><p><strong>Please include attribution to kolosek.com with this graphic.</strong><br /><br /><a href='https://kolosek.com/10-ways-to-improve-your-website-design/'><img src='https://kolosek.com/content/images/2018/02/Infographic-horizontal.png' alt='Infographic-website design' width='1101' border='0' /></a></p></textarea>", "date": "2018-02-05"},
{"website": "Kolosek", "title": "Sass Import", "author": ["Tijana D."], "link": "https://kolosek.com/sass-import/", "abstract": "We can follow CSS progress by following the development of its pre-processors. Which preprocessor to use is a different time theme, but it’s really necessary to use one because they allow features that don't exist in CSS yet. (We have also written about the ones that exist though e.g. columns , underline , font size ) One of the preprocessors is Sass and one of these extra features is import and that is the theme of this post. My next post is the export feature, so you'll have something to look forward to. Before you can use import feature or Sass at all, you need to set Sass on your project for which sass guide will presumably help. @import The import feature works pretty much as expected. You can import a .scss file in another one, and all the variables in it will be available. The syntax is @import and name of the scss file. The scss file you can define without .scss extension and it will work. @import \"colors\";\n @import \"fonts\";\n @import \"buttons\";\n @import \"forms\"; or short form: @import \"colors\", \"fonts\", \"buttons\", \"forms\"; In this example, scss file with this code can use all styles defined in colors.scss , fonts.scss , btn_styles.scss and form_styles.scss files in the current directory. The content of these files will replace the @import statement. Partials Sass compiles all the .scss or .sass files inside the directory it’s watching. If you don't want to compile it directly you don't need to. You can tell Sass not to compile a file with the file’s name. If you add an underscore to the start of the file name, Sass won’t compile it. So, if you don’t want colors.scss to compile to colors.css , name the file _colors.scss instead. Files named this way are called partials in Sass terminology. The rule about import without extension works here too. Partials are used as general style files (reset, colors, fonts, typography, navigation, forms, buttons, grids, figures, header, sidebar, footer...) and other files usually work as page styles. Nested @import We have already written about nesting and how important in CSS pre-processors it is. Even if it's typical to include your @import statements at the top of the importing file, you can nest @import wherever. The example which follows will explain the second most common usage of this feature. _background.scss div{\n     background-color:#ababab;\n } homepage.scss section{\n     @import \"background\";\n } Assuming the two files are located in the same folder, the code would compile to (homepage.css): section div{\n     background-color:#ababab;\n } So you can import the partial file directly inside the block of code , and it's going to be compiled just like expected. Extra Just to be sure it's clear, with defining the file to import it's possible to use all folders common definitions. Example 1: @import \"style/*\" This way all the files in the style folder will be compiled. Example 2: @import \"../../style/buttons\" This way buttons.scss in the corresponding place from the current file will be compiled. Closing Word If you're using Sass you better make a good structure for your stylesheets, because it's almost all about that. The structure without @import in Sass is impossible to make so.... For more about Sass and CSS features soon subscribe to our newsletter.", "date": "2018-03-05"},
{"website": "Kolosek", "title": "React Guide to Props - Part II", "author": ["Kristina G."], "link": "https://kolosek.com/react-props-communication/", "abstract": "In the previous article, you were able to read about the basics of React props . In that article, we wrote about things like sending event handling functions as props, spread operators and sending props with cloning children prop. Overall, it was all the standard flow, where the parent passes the props to child components . Today, we're spicing up the game and covering a bit more advanced themes - how the component can send information to the parent via props, and how components on the same level (under the same parent) can communicate by using props. Note that there are other, more advanced ways to realize communication between components (using more advanced way to manage app state like redux ), but in this article, we're talking about props only . Note: As for all the previous articles, everything below also applies to React Native, as well! Communication from children to parent Props are passed in one direction only: from parent to children . However, this doesn't mean that the communication from children to the parent via props is impossible. It can be implemented using 'the basic flow': by passing the prop functions to children . These function props should act as callbacks. So, let's say that we have a ChildInput component: class ChildInput extends Component {\n    ...\n    handleChange = (event) => {\n        // This is functional setState!\n        this.setState(() => {\n            const newValue = event.target.value;\n            this.props.updateParent(newValue);\n            return {\n                value: newValue,\n            }\n        });\n    }\n    ...\n    render() {\n        return (\n            <input\n                onChange={this.handleChange}\n                placeholder={this.props.placeholder}\n                type=\"text\"\n                value={this.state.value}\n            />\n        )\n    }\n} In our parent component, we get the information on value updates in input using a callback sent as updateParent prop: class Parent extends Component {\n    ...\n    saveChange = (field) => (newValue) => {\n        // do something with this field's newValue\n        // for this example field is \"username\"\n        // newValue is whatever is typed into input\n    }\n    ...\n    render() {\n        return (\n            <ChildInput\n                placeholder={\"Input field\"}\n                updateParent={this.saveChange(\"username\")}\n            />\n        )\n    }\n} So, every time the user types something in input rendered within ChildInput component, state of the this component will be updated to contain the new value, and saveChange function from Parent will be called, sending that new value to parent as well. This kind of communication is most commonly used for conditional rendering . Of course, this callback approach can be used only when there's some event to trigger it. However, if you need to do something about the child that's not event triggered, most likely this information you need shouldn't belong to the child at all . Communication between same level components Direct communication between the two components that are on the same level via props is not possible . There is, however, a way, for the two same-level components to communicate via props - if these props can be contained and handled in parents state. On every change in either of the two components, parent component's state should be updated with the new information from the updating child component. As parent's state is updated, it will automatically trigger rerendering of both children components. Let's say we have a TodoList component which renders items in todo list: class TodoList extends Component {\n    render() {\n        return (\n            <div>\n                {\n                    this.props.items.map(this.renderItem)\n                }\n            </div>\n        )\n    }\n} Besides this component, We also have an AddTodo component, which should add new todo to our list: class AddTodo extends Component {\n    ...\n    addItem = () => {\n        this.props.addItem(this.state.todo}\n        this.setState(() => {\n            return {\n                todo: ''\n            };\n        });\n    }\n    ...\n    render() {\n        return (\n            <div>\n                <input\n                    onChange={this.handleChange}\n                    type=\"text\"\n                    value={this.state.todo}\n                />\n                <button\n                    onClick={this.addItem}\n                >\n                    Add todo\n                </button>\n            </div>\n        )\n    }\n} For this to function properly, TodoPage component will have to know about the todo list, store it and update accordingly: class TodoPage extends Component {\n    constructor() {\n        super();\n        this.state = {\n            todoList: []\n        };\n    }\n    ...\n    addItem = (newItem) => {\n        this.setState(({ todoList }) => {\n            todoList.push(newItem);\n            return {\n                todoList,\n            };\n        });\n    }\n    ...\n    render() {\n        return (\n            <div>\n                <AddTodo\n                    addItem={this.addItem}\n                />\n                <TodoList\n                    items={this.state.todoList}\n                />\n            </div>\n        );\n    }\n} When a new todo item is added to a list, parent will be notified about it and update the state accordingly, thus notifying the TodoList to rerender. Let's take a look at another example, where we have a ChildInput component (the same one that appeared previously in this article!), a Button and a Form, which is a parent. So we have conditions here: if the value of the input is empty, our button should be disabled, else it'll be enabled. Here's our Button component: class Button extends Component {\n   render() {\n        return (\n            <button\n                disabled={this.props.disabled}\n            >\n                { this.props.text }\n            </button>\n        );\n    }\n} Form will know the value of ChildInput and pass it to Button whether it's disabled based on this value: class Form extends Component {\n    constructor() {\n        super();\n        this.state = {\n            fieldValue: \"\"\n        };\n    }\n    ...\n    handleInputChange = (fieldValue) => {\n        this.setState(() => {\n            return {\n                fieldValue,\n            };\n        });\n    }\n    ...\n    render() {\n        return (\n            <div>\n                <ChildInput\n                    placeholder={\"Form input\"}\n                    updateParent={this.handleInputChange}\n                />\n                <Button\n                    disabled={!this.state.fieldValue}\n                    text={\"Form button\"}\n                />\n            </div>\n        );\n    }\n} Keep in mind that for more complex application, you won't be handling same-level component communication this way, but with some more advanced mechanisms. We'll talk about some of these in upcoming articles. We hope you enjoyed our article! Thank you for your time and good luck with the further learning of one of the best JavaScript frameworks! Part III of React props series will be coming soon. It's all about the typechecking! Subscribe and stay tuned when it arrives!", "date": "2018-03-05"},
{"website": "Kolosek", "title": "Sass Extend", "author": ["Tijana D."], "link": "https://kolosek.com/css-extend/", "abstract": "Please make sure to read my post on Sass Import because I didn't want to copy-paste first part (it serves as an introduction to this post, as well). Extend represents the next (after import) Sass extra feature and if you set Sass and not use @extend you just don’t know what you’re doing (or do you really?). @extend The @extend feature allows one selector to inherit the styles of another selector. Your job is just to free your mind and think outside of the CSS. Now when you're reset to Sass, you can reuse everything previously written, in other words, you can extend classes. Sass .class1{\n     width:100px;\n     height:30px;\n     color:red;\n     background-color:#ababab;\n }\n \n .class2{\n     @extend class1;\n     border-radius:2px\n } CSS: .class1, .class2{\n     width:100px;\n     height:30px;\n     color:red;\n     background-color:#ababab;\n }\n \n .class2{\n     border-radius:2px;\n } Placeholder Next level includes one extra thing: a placeholder class . If you're missing variables in CSS, you will not miss it in Sass. A placeholder class is a special type of class that only prints when it is extended, and its functionality can be explained simply as a variable feature. It is always used with @extend and it's syntax contains % instead of . in class. It is ignored in CSS output until it is used. Sass %class-style{\n     width:100px;\n     height:30px;\n     color:red;\n     background-color:#ababab;\n }\n \n .class1{\n    @extend %class-style;\n }\n \n .class2{\n     @extend %class-style;\n     border-radius:2px;\n } CSS: .class1, .class2{\n     width:100px;\n     height:30px;\n     color:red;\n     background-color:#ababab;\n }\n \n .class2{\n     border-radius:2px;\n } Cons It is frequently pointed that @extend should be carefully handled. Always first consider CSS selectors and their combination before @extend . Before using @extend also consider skipping nesting , because it often becomes messy( example ). One more thing, using @mixin is usually considered to be best practice than @extend ( example ). Conclusion @extend is defined with Sass and I described it. It has its pros and probably much more cons which just means that we should be careful with it (and research it thoroughly which I believe I did). For more thorough researches subscribe to our newsletter.", "date": "2018-03-05"},
{"website": "Kolosek", "title": "CSS float", "author": ["Tatjana B."], "link": "https://kolosek.com/css-float/", "abstract": "One of the basic and the most important properties every web designer should learn is the float property . It is most commonly used for floating text around the image or creating the two column layout . The float property can cause a lot of frustration and confusion if it’s not fully understood, so we’re here to make those confusions disappear with this short explanation. Also, be sure to check out our articles on some other properties, other than CSS float, that often cause confusion like css columns or relative font size . The definition The CSS float property specifies as the name says, how the element should float. With the usage of the float property, the element is placed along the left or right side of its container. The float property has the possible values: Left - the element floats to the left side of its containing block. Right - the element floats to the right side of its containing block. None - the element must not float. When an element has float set to it, it is shifted to the right or left side until it touches the edge of the container element or another floated element . Support The best place to check how well is the CSS property supported is the Can I Use service. Here, we see that the float property has an extremely high support, with over 97% . Examples Now, we will support the float theory with examples to make things understandable. The examples will show you how to float text around a div. HTML <div class=”container”>\n  <div class=”left-segment”></div>\n  <div class=\"right-segment”></div>\n  <p class=”segment_text”>Cardigan aesthetic direct trade, migas locavore shoreditch DIY bicycle rights lyft street art bitters. Gastropub salvia flexitarian next level cold-pressed iceland williamsburg tofu biodiesel everyday carry. Direct trade selfies mixtape 8-bit jean shorts paleo. Roof party thundercats gastropub, jianbing williamsburg microdosing tbh dreamcatcher crucifix. Fingerstache crucifix shoreditch, kitsch selfies tumblr everyday carry aesthetic. Narwhal readymade cardigan gentrify.</p>\n</div> CSS .container {\n  border: solid thin #ccc;\n}\n\n.left-segment {\n  height: 200px;\n  width: 200px;\n  background-color: #C98EED;\n  float: left;\n}\n\n.right-segment {\n  height: 200px;\n  width: 200px;\n  background-color: #8FC9FF;\n  float: right;\n} In this example, we can see the two divs floated to the right and left the side of the container . The text is flowing around the divs and continuing below it . Afterwards, we can give the elements some styling and the text some formatting . HTML <div class=”container”>\n  <div class=”left_segment”></div>\n  <div class=”left_segment”></div>\n  <p class=”segment_text”>Cardigan aesthetic direct trade, migas locavore shoreditch DIY bicycle rights lyft street art bitters. Gastropub salvia flexitarian next level cold-pressed iceland williamsburg tofu biodiesel everyday carry. Direct trade selfies mixtape 8-bit jean shorts paleo. Roof party thundercats gastropub, jianbing williamsburg microdosing tbh dreamcatcher crucifix. Fingerstache crucifix shoreditch, kitsch selfies tumblr everyday carry aesthetic. Narwhal readymade cardigan gentrify.</p>\n</div> CSS .container {\n  border: solid thin #ccc;\n}\n\n.left-segment {\n  Height: 200px;\n  Width: 200px;\n  Margin-right: 10px;\n  Background-color: #A1ED8E;\n  Float: left;\n} The second example shows how two divs are floated to the left side of the container using the float:left property and how the text flows around those divs and continues below them. Hopefully, this article will be useful when working with the float property. Stay tuned for the article that will further explain the clear property , another extremely important property that is in tight relations with the float property. Other important properties, other than float, include the line height and the position property . If you like what you read, be sure to subscribe to our newsletter! There are more articles to come!", "date": "2018-03-05"},
{"website": "Kolosek", "title": "Testing GraphQL Server in NodeJS", "author": ["Nesha Z."], "link": "https://kolosek.com/testing-graphql-server/", "abstract": "When we started using GraphQL in our NodeJS project , we had a struggle with writing tests: we read numerous blogs, searching for the best way. Unfortunately, there didn't seem to be one, so we made one ourselves and here we'll share our way of testing GraphQL queries. This article will help you test your GraphQL server using Mocha , Chai , supertest and graphql . First, we will set up everything needed for running tests: npm i --save-dev mocha chai supertest graphql Now that we have everything installed we can go ahead and import all the dependencies we will use in our User.test.js file: const chai = require('chai');\n\nconst expect = chai.expect;\nconst url = `http://localhost:3001/`;\nconst request = require('supertest')(url);\n\ndescribe('GraphQL', () => {\n    // Tests\n}); Setup is even easier than setting up RSpec for testing! Before running any test we will have to add a command to our package.json \"scripts\": \"scripts\": {\n      \"test\": \"mocha test/*.test.js\"\n   } This will tell Mocha to test all the files with .test extension in our test folder. To run the test just type: npm test It will say 0 passing since we haven't written any test cases yet. Follow our organizational guidelines for SailsJS+GraphQL app! Let's define a graphql schema which we will use to write tests. For instance, here we'll create a User type with some basic information about the user in UserType.js file: const graphql = require('graphql');\n\nexport default new graphql.GraphQLObjectType({\nname : 'UserType',\n fields : {\n     id : {\n         type : graphql.GraphQLInt\n     },\n     name : {\n         type : graphql.GraphQLString\n     },\n     username:{\n         type: graphql.GraphQLString\n     },\n     email : {\n         type : graphql.GraphQLString\n     }\n}); We're organizing our tests the similar way we organize RSpec controller tests ! Let's define the query field that will return users with the fields we defined just now: const graphql = require('graphql');\n const UserType =  require('./UserType').default;\n\n export default {\n  user: {\n    description: 'Returns information about user/s',\n    type: new graphql.GraphQLList(UserType),\n    args: {\n      id: { type: graphql.GraphQLInt },\n    },\n    resolve: async (_, { id }) => {\n        if (id) return User.find({ id })\n        return User.find() \n    }\n  }, For us to be able to query users, we will have to define GraphQL schema: const graphql = require('graphql');\n const UserQuery = require('./UserQuery');\n \n export default new graphql.GraphQLSchema({\n     name: 'Query',\n     fields: UserQuery\n }) The last thing to do before we start writing the tests is to create a universal GraphQL controller which will be triggered for every query, so our client app ( we're using React ) has an endpoint to make request too, and our tests too. const graphql = require('graphql');\nconst schema = require('./schema').default;\n\nmodule.exports = {\n  graphql: async (req, res) => {\n    try {\n      const result = await graphql(schema, req.body.query, req);\n      if (result.errors) throw (result.errors);\n      return res.ok(result);\n    } catch (err) {\n      return res.badRequest(err);\n    }\n  }, Now that we have defined our User type, defined the query object for it and included it in our GraphQLSchema, we're all set to write tests . Let's assume that there are some users in our database, the only thing left is to send requests with supertest to our GraphQLController and to output the results of our query: const chai = require('chai');\n\nconst expect = chai.expect;\nconst url = `http://localhost:3001/`;\nconst request = require('supertest')(url);\n\ndescribe('GraphQL', () => {\n    it('Returns user with id = 10', (done) => {\n        request.post('/graphql')\n        .send({ query: '{ user(id: 10) { id name username email } }'})\n        .expect(200)\n        .end((err,res) => {\n            // res will contain array with one user\n            if (err) return done(err);\n            res.body.user.should.have.property('id')\n            res.body.user.should.have.property('name')\n            res.body.user.should.have.property('username')\n            res.body.user.should.have.property('email')\n            done();\n        })\n    })\n\n    it('Returns all users', (done) => {\n        request.post('/graphql')\n        .send({ query: '{ user { id name username email } }' })\n        .expect(200)\n        .end((err, res) => {\n            // res will contain array of all users\n            if (err) return done(err);\n            // assume there are a 100 users in the database\n            res.body.user.should.have.lengthOf(100);\n        })  \n    })\n}); Of course, chai library provides much more options to check out. With this, we came to an end of this article. Hope you enjoyed it and found it informative! If you enjoyed this article, make sure to subscribe for more quality content from JavaScript world!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "The Process of App Making - Explained", "author": ["Aleksandra M."], "link": "https://kolosek.com/the-process-of-app-making-explained/", "abstract": "The facts are these: there is a significant number of app making companies out there . In fact, according to a post on Clutch.co, 67% of small businesses planned to have an app finished by the end of 2017. Keep in mind that this information includes only mobile app statistics, without desktop or web apps. Now, let’s say that you want to find reliable app makers to partner with. In the sea of all the tech companies, you can easily get lost. Why? Because it can be difficult to distinguish good from the bad ones . Fortunately, there are numerous parameters that can separate good app making companies from the ones you don’t want to do business with. These parameters are: Employees’ knowledge, Technical support, The ability to properly communicate problems, And many more. Don’t forget: the best app making companies are the ones that have employees who work thoroughly, efficiently and keep an eye on details . Employees in these types of companies invest their time, knowledge and skills to come up with the best possible solutions. They are able to put themselves in their users’ shoes, recognize their deepest needs, and use this information as a guidance when building an app. Let’s move on with the story. Imagine finding several companies that you think will be a good fit for you. Before you reach out those companies and evaluate them, though, you should understand how the app making process works. If you are new to the whole development process, you should be aware of the fact that team commitment or great communication amongst team members are not enough to ensure the quality of an app. A team of developers and designers have to follow certain steps that will lead them to the final goal. So, which steps are there in the development process? What makes a great development process? Does the development process depend on developers’ and designers’ knowledge, or is there more to it? We are going to answer all of these questions (and more) and, if, by the end of the text, you feel like there are some things left unsaid, be sure to leave us a comment below and we will get back to you as soon as possible. Just a quick note before we start with the actual stepsーin the following text, we will cover the process that outsourcing app making companies go through, which shouldn’t come as a surprise since Kolosek is a remote development team, too. Now, let’s go through all the steps. Step 1: The First Contact with a Client You have probably heard that making a good first impression is the key to doing business. We definitely agree and here’s why. Making a good first impression is important, because it establishes trust in the long run and has the power to loosen up the first contact atmosphere. In fact, did you know that one sincere smile in interpersonal communication can make you more memorable? So, what happens during this meeting? You get to meet the Project Manager (or CTO or CEO) of an outsourcing company for the first time. In this meeting, you discuss the idea behind a potential project. If there is a mutual understanding, you provide the company with the information of what your app should look like and then, once the Project Manager has all the initial answers, the app making process can begin. In most cases, the best app making companies try to meet the client face-to-face. If that is not a possibility, the first contact can be established over the phone. Step 2: The Team Explores Your Idea Once the Project Manager gathers all the information they need about the project, they introduce you to the team, who then explore your idea deeper by having a brainstorming session with the development and design team. Here’s the thing about app making companiesー developers and designers have to work together in order to create an app the way the client wanted. If they don’t, the goal of creating an app won’t be clear and there will always be one element left out. Everyone has to be on the same page, understanding each other’s tasks, and contributing equally. What major decisions should a team make? Well, in this step the team should choose the right platform for the app, depending on its purpose and the ultimate goal. Understandably, there are differences between choosing a platform for a mobile or for a web app. At the same time, a team of designers should work on making the best possible visual solution for the app. Designers create mockups of what the app should look like when it is finalized. This includes adding the logo and all the vital elements, like color, fonts, styling etc. Once the team has a concept of the idea, the company should reach out to you and present it. Step 3: Presenting the Idea to the Client Once the idea is thoroughly explored, the team/the Project Manager will present it to you. Usually, a team of designers is in charge of this, since designers can easily lead you through every development and designer choice. Please note that best app making companies know how to present their ideas in a concise and precise way. They don’t want to waste your time and know that you don’t want to listen to a two-hour story. In this phase, you can spot a good development company just by paying attention to the feedback they provide you with, after you ask a question or disagree with something. Teams from the best app making companies always try to gather as much feedback as possible , because they know that is how trustworthy collaborations are established. Also, if there is something you are not pleased with, you should always mention it and, eventually, have it changed. Keep in mind that this step is the final preparation before the actual programming starts. Step 4: App Making Process The app making process requires both development and design teams working together to create the final product. Usually, the client periodically checks the team’s progress and makes changes, if needed. There are several methods which can ensure that the app development process is one the right track. You have probably heard of agility and Scrum teams. Some managers in app making companies say that it is the best way to be in control of the project and monetize the progress. We can say that this method has led us through all of our projects and hasn’t disappointed us so far. The app making process consists of the actual coding . The goal of every project is to make sure that you end up with a high-quality code, and it can be achieved by hiring experienced developers that can deliver fast, without hurting the code quality. However, there is one approach to the development process that will definitely raise the chance of having a quality codeーTDD. TDD is an acronym of three words: T est D riven D evelopment methodology. In short, this means that developers have to test their code before they can call it finished. Tests should be done periodically and the code is not considered finished until it passes every test. When performing the tests, remember that the first test is definitely going to fail. This is one of the first rules of development. Step 5: Beta Testing App making companies opt for beta testing only when the app is completely finished, i.e. when both the design and the coding part have been completed. Why beta testing? Because this, the final testing, is there to make sure that your app doesn’t get released with bugs or crashes. Developers finally get a chance to use the app as final users and that is how they notice all the flaws and room for improvement. From a financial perspective, beta testing is highly efficient . If a development company decides to skip beta testing, it can cost more since all the testing is done once the app is already released on the market. Keep in mind that checking for bugs, performance, usability and all the other issues is a must before the official app launch. Don’t let any other app making companies tell you different. Step 6: Post-release Activities If you think that your development team is “off the hook” once the app is launched, think again. The project continues even after the release and that’s when you’ll need someone who’ll have your back. Here’s the deal: there’s no such thing as a perfect app . Bugs can occur even after the launch, but it is important to deal with them the moment they occur. That is why the development team takes care of the app by fixing all the issues that can come along. In this phase, the team takes the role of technical support. Conclusion As you can see, the development process is just like any other processーit requires hard-working people who properly communicate and are not afraid to face challenges. Bear in mind that the app making process can be a success only when both sides work together . The development team needs your input before creating an app and your information about their progress. Have you ever worked with any app making companies? If so, what is your experience? Share it with us in the comment section below.", "date": "2018-04-05"},
{"website": "Kolosek", "title": "5 Business Lessons from Successful Entrepreneurs", "author": ["Aleksandra M."], "link": "https://kolosek.com/5-business-lessons/", "abstract": "Let’s make something clear in the beginning. Being an entrepreneur is, most of the time, a handful. It is more than “challenging” or “demanding”. Being a founder is frustrating, it often puts you out of your comfort zone, and forces you to think and act faster than you’d like. Simply putー it is hard to run a company . By now you might be thinking that we are exaggerating and trying to make you feel better. Guess whatーwe are not. Doubt it? We’ll let the statistics speak for themselves: According to Hustle , 30% of entrepreneurs live with depression. Small business owners reported that managing their business is four times more stressful than raising children. Our founder would agree with both of these statements. It is perfectly normal to feel discouraged, lonely and anxious. And, sometimes, you just need a small push in the right direction. A push from the people who have made a name for themselves or their companies. That is why we decided to present you with the five business lessons from successful people that will inspire you and give you the strength to continue the neverending battle of running your own business. Listen to Your Guts Do you remember your beginnings? Do you remember the days when you came up with your business idea and set your mind to transforming it into reality? How you felt like nothing or no one was able to stop you, and you just knew that it was the right thing to do and decided to pursue that idea. It’s normal for that initial enthusiasm to wear off after a couple of months (or years) of maintaining your business, but as much as it wanes, you should never stop believing in yourself and your idea. In fact, our first story will cheer you up and remind you why you should always follow your intuition. Our first story today is one about Konosuke Matsushita , the man whose life consists of small business lessons. Back in 1917, Matsushita was just an apprentice at the Osaka Electric Light Company. Although he had no formal education and was pretty young (only 23 years old), he had an eye for details and an engineering way of thinking. What happened was this: Matsushita came up with an improved version of the light socket, but his boss wasn’t interested. Despite this, Konosuke never gave up on his idea! He believed in it so fervently that he decided to make samples in his own basement. Later, he went on to expand the product line. Now, do you know which company we are talking about? Well, you might know it as Matsushita Electric or Panasonic , to be exact. As you can see, the founder of Panasonic never gave up on himself and his ideas, especially in the beginning when it was the toughest for him to make it on his own. He listened to his gut and slowly created a multimillion-dollar company. So, the next time you feel a bit down and are unsure of what you’re supposed to do, just listen to what your stomach has to tell you and you won’t regret any decision you make. This is the first out of five business lessons. Each of them is equally important, so make sure you remember them! There Is Always a Way to Achieve Goals When you feel like the time is running out of your hands, that your employees are not capable of doing enough, and that you are far from achieving your goals and living your vision, remember this story. Our second story is about business lessons that will, hopefully, put business and management into a new perspective for you. The story is about the founder of Zoomー Eric Yuan . In case you haven’t heard of Zoom, it is a company that offers a software for video conferencing, which also includes mobile cooperations and online meetings. If you Google it, you will see that the company’s headquarters is in San Jose, California while its founder is from China. That’s where the story begins. In the mid-‘90s, Yuan wanted to come to America and make use of the Internet expansion, which, at the time, wasn’t all that popular in China. He applied for a visa eight times before he finally got itーon the ninth try . He had no idea that one of the biggest business lessons in his life has started. Make no mistake, this is not a story about persistence. When he finally, after two years of applying, got to America, there was only one problemーhe didn’t know the language. So, what did he do? He started coding . Little did he know that he would soon get a job in WebEx, a company that provides its users with collaboration and communication platforms. And, as it usually happens, Eric saw a room for improvement and decided to make a new communication platform. This platform was born in 2012, under the name Zoom. Why did we choose to include this story on our list of business lessons? Because just when you think that you’re all out of solutions, there is one waiting for you around the corner. You just have to keep your eyes open and they will lead you to your goals. You Can’t Do It All by Yourself We are sure you have heard various stories of business buddies that achieved great success together. We would like to highlight one in particular: a well-known Apple story, about two Steves ーSteve Jobs and Steve Wozniak. Don’t worry, this is not a story about acquiring a lot of money (the duo became millionaires in their twenties). It’s about being a team player . As you will later see, most business lessons have to do with being human, not getting rich. Over the years, you might have noticed that people have started judging Jobs and his tech knowledge, and that more and more people have actually started glorifying Wozniak as the “brain of the operation”. This is no coincidence. In fact, Wozniak was in charge of building the product in the beginning (Apple I and then Apple II), while Jobs took care of the sales part. Although people often refer to Jobs as the man who was a difficult work partner, the truth is that neither of them would have succeeded if they hadn’t stuck together. Having a right hand to confide in and share your business with might seem like a good idea, but only if you pick the right person to work with . If you feel like you need an equal partner to help you run the company, you have to be careful and make sure that you trust this person enough to play such an important part in the business management. And remember, one of the most important business lessons is that delegating work is not an acknowledgment of your incapability , but a recognition of your limits. It’s okay to make mistakesーafter all, you’re only human. This leads us to our next lesson. It's Okay to Make Mistakes As we mentioned above, it’s okay for you to make mistakes, even if you’re a busy founder. What you want to do, though, is take those mistakes, learn from them, and turn them into valuable business lessons. In order to get an idea of what kind of mistakes we are thinking about, we are going to talk about Airbnb’s story. Three years after Airbnb was founded, in 2011, a negative comment on one person’s blog threatened to ruin this entire company’s reputation. To be precise, a woman by the name of EJ left a comment on her blog saying that Airbnb renters had destroyed her home. At the time, it seemed like the situation had been properly handledーnot long after that, one of the founders, Brian Chesky made a public statement , saying that the company was going to do right by her. That’s only the beginning, though. The women thought that all Airbnb wanted was to make things go away and was not pleased with the answer. The situation only got worse when another renter complained about crystal meth users destroying his apartment. At this point, Chesky could have done the same thing for the second time and publicly responded to the man. However, he didn’t have the luxury to let the bad word spread, so he admitted that the company had made a mistake with one simple tweet: We screwed up and we are sorry. The tweet also included a link to the company’s blog, with the title Our Commitment to Trust & Safety . Bad entrepreneurs would consider this mistake as one of the failures in the business management, but it is actually one of the best business lessons from successful people. As you can see, this story proves that you can take control of how your users/customers perceive your brand. It is completely understandable to make a few mistakes along the way, as long as you own up to them and are open to the public eye. As you can see, nobody’s perfect, not even a multimillion dollar company like Airbnb. Do Not Settle for Average We have to admit this statement sounds like a cliché, but it’s the truth. Once you have reached one of your goals, don’t stop thereーalways think bigger and strive to do more. And, if you thought an article that includes business lessons from successful people could go without mentioning Elon Musk, you were definitely wrong. Elon Musk. An entrepreneur who inspired actor Robert Downey Jr. for his role as the famous Iron Man. Believe it or not, Musk is more than a real-life Iron Man. He is a man that has a couple of companies behind them. The first company Musk launched was a software company by the name of Zip2, back in 1995. Musk created it with his brother Kimbal, and it served as an online city guide for newspaper companies, which were trying to keep up with this new trend called the Internet. Without getting into too many details, let’s just say that one thing led to another, and four years later the company was sold. Musk received 22 million dollars. The next one was PayPal, which was eventually sold to eBay, and then Tesla Motors Inc, SolarCity, HyperLoop, and more recently, the Boring Company. We have to admit that Musk is a walking encyclopedia of business lessons. Alas, not everyone can be and think like Elon Musk, but this man is the living example of always trying to do more and making a change in the world. There is no need to settle for average or think small . Be brave and keep on challenging yourself on a daily basisーonce you start doing so, great things will happen. Final Word Entrepreneurs are modern-day supermen. They have an out-of-this-world strength and above-average intelligence which only goes up with the years they spend as founders. So, next time you start doubting yourself, remember that you are not the only one, that a lot of people before you went through the same situation and came out as winners. Keep your chin up and channel your inner Elon Musk! Thank you for reading this article to the very end. We hope you found these business lessons helpful and inspiring. Is there any other business lessons you would like to add to this list?", "date": "2018-04-05"},
{"website": "Kolosek", "title": "Being an Entrepreneur in 2018", "author": ["Aleksandra M."], "link": "https://kolosek.com/being-an-entrepreneur-in-2018/", "abstract": "With AI, AR and blockchain on the rise, now seems like a perfectly good and reasonable time to invest in one of the mentioned high-tech options and create your very own small business. All you need to do is find people who will work for small wages and overtime, and you can begin calling yourself a “startup”. That’s how it goes, right? Just kidding—no, it doesn’t. With technology constantly evolving, it’s true that having your own business and becoming the next Jeff Bezos or Jack Ma seems more possible than ever before. If this is the case, though, why aren’t we all bursting with new ideas and trying to create a new, let’s say, Amazon? What’s stopping us? Well, the fact that being an entrepreneur in 2018 is not as easy as you might think . According to Fitsmallbusiness.com , 46% of businesses fail due to incompetence, 30% due to lack of managerial experience, 11% due to lack of experience, and the rest due to fraud, natural disasters and neglect. To sum it all up: almost half of all small businesses failed in 2017. Furthermore, if we mention that 30% of entrepreneurs work 50-59 hours per week , would you still consider it to be an “easy job”? Working 60 hours a week to make something that has almost 50% chance of failing? It sounds like only an insane person would take such a risk. Some would say an insane person, while others—a true entrepreneur. Becoming an entrepreneur is not a decision you can make overnight and lightly. In fact—this decision requires a lot of self-questioning, self-doubt and worrying. However, if you make it to the other side after all that torture, and still want to start a small business, it’s probably a sign you are ready to embark on this amazing journey. Being an entrepreneur requires commitment, a lot of hard work, patience and belief in yourself. It calls for a strong will and an enormous amount of ambition. A true business owner knows that the market is constantly changing and that having a business requires adapting to those changes as fast as possible. So, what does 2018 hold for entrepreneurs? What does it actually mean to be an entrepreneur in this day and age? In this post, we’re going to talk about about six tips and tricks that will help you learn what being an entrepreneur is like and help you become the founder you always wanted to be. Never Underestimate the Power of Networking Never underestimate its power, not even 20 years from now! As an entrepreneur, you have to be everywhere . It goes without saying that you should attend all the meetups, lectures, conferences and any events you feel like you can benefit from. Why? Because being an entrepreneur (not just in 2018) means always searching for new sources of knowledge and ways to expand your horizons. Not only that, by participating in the startup/tech community, you get a chance to meet a bunch of people who have the experience you need. Most of them, fortunately, are willing to give you a piece of advice or two on how to manage your team, be a leader and create a healthy company culture. Also, be sure to remember— networking is not a one-time thing . It creates relationships between people. So, after you have met a couple of fellow entrepreneurs and exchanged contacts, don’t hesitate to give them a call and meet for a cup of coffee. There are a lot of things people are inclined to share in an eye-to-eye communication. Be persistent and find your place in the community. Well, nobody said being an entrepreneur in 2018 is easy, right? Validate Your Idea as Soon as Possible Nowadays, nobody has the time to spend months building a product and then validating it. On the contrary— validating your idea should be your top priority . Why? Because you’ll get an answer to the questions you have been asking yourself all that time: Does my product/service have a chance to make it? Is my dream really going to come to life? Our advice to you is to present the product (or an MVP) to its potential customers as soon as you feel ready. That way, you’ll get the much-needed feedback and, if the validation goes well, you will be able to work on the product and adjust it to your users’ wishes. Being an entrepreneur is all about being active and proactive. This leads us to our next tip. Bravery Is Always Highly Rewarded Once you feel like the product is completed and market-ready, launch it! Be brave and just go for it. Being an entrepreneur is about being brave and bold. But, make no mistake: being brave is not synonymous with being a gambler . Bravery requires mental or physical strength which is demonstrated as the willingness to do something in spite of a dangerous, threatening situation. Validating your product/service on a cruel market which sometimes feels like it consists out of angry piranhas? Sounds brave to us! Please remember that most entrepreneurs show bravery by not letting anyone stop them on their journey. Even if they fail, they failed because of their own decisions, not because they were afraid to succeed. On that matter, there is one final advice we can give you. Once you finally decide to launch your product, start marketing it before the launch . Prepare yourself for the launch and be positive about it. Let your marketing plan do the magic. Keep an Eye on the Market Change If anyone knows what it’s like being an entrepreneur, it’s definitely Neil Patel. In one of his recent posts , Patel mentioned the change in the market—in 2018, the term disruptive innovation is the most important thing to remember. What does it mean? Well, although this term has been present since 1995, it has reached its full glory in the past couple of years. It can be described as something innovative, done by a startup. So, what is so special about innovation? Well, this innovative product is capable of making a huge impact on the industry , stepping on even the biggest industry competitors. One of the examples of disruptive innovation, as Neil states, is Airbnb. In our blog post about 5 business lessons , we mentioned how Airbnb almost made a huge mistake that could have cost it its reputation. Thanks to being open and owning up to the mistake, its founder managed to save the business. That is precisely what disruptive innovation is: being able to make an enormous boom in the market (and cast a shadow on industry leaders), and being able to manage that boom . Other examples include Facebook, Zoom, Amazon, etc. Don’t get us wrong—being an entrepreneur doesn’t mean having a brilliant, Facebook-like business idea which will shake the market to its core. You just have to recognize the trend and be aware of the fact that, at the same moment you are thinking about your idea, another entrepreneur-to-be is probably having a similar idea to yours and is looking for a way to become successful on the market. To conclude: be aware of the trends, not afraid of them. Say Yes to a Remote Team Did you know that employees tend to be 20% more productive when they are are working on a project remotely? Not only that—they are able to sleep more, which makes them feel more rested and alerted. If you are thinking about having a remote team, now is the time to jump on this bandwagon. Why should you give it chance? Well, if the statement about productivity didn’t convince you, maybe thinking about operating costs will. Being an entrepreneur also means keeping an eye on the costs. If you give it a thought, you can save a couple thousands of dollars on an office space and invest it in other company infrastructure. Doesn’t sound that bad, right? So, before you rush to rent an office, do the math and read through the following facts: More and more industries are embracing remote working ( The New York Times ). Some people find it easier to work from home than others ( Forbes ). In a remote team, keys to a good cooperation are trust and open communication ( Gethppy.com ). This is why we are all about remote software development . You Can’t Avoid AI According to Forbes , Artificial Intelligence is now bigger than the Internet was when it first appeared. From self-driving cars and customer-facing service, to data scientists being in high demand, the market is moving towards this advanced technology. Sure, not everyone can have or even want to build a company similar to Tesla Inc, but what they are not aware of is that they are probably following this trend by using collaborative tools on a daily basis. Let’s face it— AI is all around us . If you are not interested in creating self-driving cars, just keep an eye on this particular trend. You never how it might be able to help your business grow. Final Word Out of all these tips and tricks, we have to highlight the one you should always bear in mind. If you are a new entrepreneur who is working on developing a product, don’t let these trends scare you . Use them to your advantage and prove that anyone can make it in 2018, with a bit of luck and a brave heart. It is important to be present. Being an entrepreneur in 2018 doesn’t mean following the most advanced technology and trends at all cost. It means being up-to-date when it comes to the newest market trends and combining old-time business principles. In the end, it all comes down to listening to your intuition and what the market/new trends have to say. We wish you good luck on your journey! Thank you for reading the article until the very end. What do you think, is it hard being an entrepreneur in 2018? Are there any entrepreneurial tips and tricks we haven’t mentioned? Share them with us in the comment section below!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "Tabindex", "author": ["Tatjana B."], "link": "https://kolosek.com/tabindex/", "abstract": "When dealing with element focusing, tabindex has a big role. This attribute indicates if the element can be focusable and reachable with the keyboard navigation . When pressing the Tab key , the browser shifts focus from one element to another . By using tabindex, we can change the tab order flow . When creating any element, styling should be included. Values The tabindex accepts integer values. They can be: Negative (usually tabindex=”-1” ) - the element is not reachable by the keyboard navigation. tabindex=”0” - the element is reachable by the keyboard navigation but the order is defined by the documents source order. Positive - the element is reachable by the keyboard navigation, and the order is defined by the value. For example, tabindex=”2” is focusable before tabindex=”3” , but after tabindex=”1” . Usage Tabindex can be used on the following elements: input , anchor (a) , textarea , select , button . After creating any of these elements, give the text a proper line-height . Example HTML <body>\n  <label>This element will be focused second</label>\n  <input name=”field1” type=”email” tabindex=”2” />\n\n   <label>This element will be focused first</label>\n  <textarea rows=”4”  cols=”5” tabindex=”1”></textarea>\n\n   <label>The second focused last</label>\n  <input name=”field3” type=”text” tabindex=”3”/>\n</body> Here we can see the order of the tab selection, starting from the lowest to the highest number . If an element has tabindex=”0” , it will be excluded from the tab order . If two elements have the same tabindex value, they will be selected in the order which they appear in the element. If you found this article interesting and useful, check out other subjects such as relative font size , css columns and a little something about SASS and LESS . Summary This short article summarizes the usage of the tabindex. By mastering this, you will write more efficient and user-friendly forms. Thank you for reading and happy coding! Wow, you've reached the end! Why not subscribe to our newsletter while you are still there? :)", "date": "2018-04-05"},
{"website": "Kolosek", "title": "How To Find Good App Developers", "author": ["Aleksandra M."], "link": "https://kolosek.com/how-to-find-good-app-developers/", "abstract": "So, you have successfully become the founder of a tech startup company. Congrats! Now what? Let’s see: you have probably managed to put together a concept for your idea, write it down, create a business plan, and might have even rented an office. All you need to do now is find someone who will bring your app idea to life . Who is it going to be though? A development company, new employees or a group of individual app developers working remotely? How are you supposed to decide? The first thing you’ll most likely do is ask one of your friends for a recommendation . This is completely understandable—it is common for a founder to rely on a recommendation from family and friends. However, if you rely solely on your friends for a recommendation, you could end up making a huge mistake—and here’s why. Here’s what you need to know: when it comes to searching for developers, limiting yourself is the worst thing you can do. Simply asking around if anyone’s available is just not good enough. You need a team of great app developers, who are not only devoted to your project, but also have enough experience and knowledge and, on top of that, are willing to work for a startup company. On the other hand, if you don’t limit your search, you are going to find yourself in a sea of developers, losing your mind over whom to choose. Nowadays, when there are so many of them out there it can be really hard to choose a couple just by looking at their portfolio. It is especially challenging if you don’t have the necessary knowledge and a set of programming skills. With all of this in mind, how are you supposed to find the best app developers for your business? We are here to help you out with that by providing you with a couple of options that don’t include hiring someone a family member/a friend recommended. Before we begin, there is just one piece of advice we want to give you: if you are not a developer yourself, try finding a recruiter who has worked for a development company and knows exactly how to find the best ones. This will ease up the process of interviewing after finding developers. Let’s get to how you can find those developers, shall we? Your First Decision: Employees, Freelancers or a Development Team? The first thing you have to decide, based on your experience is whether you want to hire actual employees , freelancer(s) or a whole development team . Recently, the most popular way of creating an app is to hire someone “from the outside”. Sureーhaving teammates is a great option, but finding the right ones usually takes longer than hiring freelance app developers or a development company to help you out. Since Kolosek is a remote development team, we are not going to advise you to hire one. There is no need for promotion. However, we have to mention one difference between a development team and a freelancer. So, the main difference is the fact that with a team you get the “whole package”. What does this mean? Well, when you hire a team, you actually hire a group of individuals that are used to working together and each of them is an expert in their own field. This is especially important since most development teams have app developers and designers. However, bear in mind that hiring a development team requires investing a lot more resources into it. On the other hand, freelancers can seem like a good cup of Jacobs instant coffee “3 in 1”ーfront-end, back-end developer and a designer in one person. We can't help but wonder how one person can be an expert in several fields. That being said, you should be aware there is always an option of hiring more than one freelancer. The point is: choose the ones your entrepreneurial intuition think it’s the best. Final advice we can give you: before you decide whether to hire freelancers or a development team/company, be sure to check Clutch.co . This website will provide with a list of top web development companies, as well as top developers in using different technologies. Now, let’s get to the actual searching for app developers. Your Second Decision: Location Yes, location is the second factor you should bear in mind. Since we had such a strong opinion about hiring developers which were recommended to you, you probably think we are against searching for a developer locally, as well. This can’t be farther from the truth. In that paragraph, we just wanted to highlight that you shouldn’t hire developers solely based on a recommendation. The location had nothing to do with the choice. The best and probably the easiest thing you can do is check for app developers locally . Ask around, but don’t jump to conclusion too fast. Google them, do whatever it takes to find the right ones. The biggest advantage of hiring someone local is that you don’t have to worry about cultural differences, language barriers or different time zones. You speak the same language and all that matters is that you are able to find common ground with that person. On the other hand, if there are over 12 million app developers in the world , why limit yourself? Knowing that the grass is always greener on the other side, why not go and check that grass out? If you turn to Quora answers, you’ll learn that you can find the best app developers in India, Ukraine, Russia, the Czech Republic, and Poland. So, which country to choose? Well, if you are on a budget, India is definitely an option since product development in that region is highly cost-effective. If you take a moment to compare their prices to those on People Per Hour , for example, you’ll see that PPH developers and designers request anywhere from $10-$35 per hour. In the USA, your average developers are twice as expensive as their counterparts in India—charging up to $70 per hour—so there’s always that to keep in mind throughout your search. According to Appfutura.com , in an overall ranking, the first three countries in which you can find great app developers are China, Russia and Poland. We have to mention that developers from Central and Eastern Europe are definitely not far behind. The point is this: don’t settle for the first developer you find. Explore your options a bit before you hire one and you’ll probably end up making the right decision. Easily Find App Developers Online Now, if you decide to go with freelancers, you should know that there are multiples freelance websites where you can easily hire them. Toptal, Upwork, Freelancer, and GetACoder are just some of them, but there are many more. As you can probably assume, all of these websites have their good and bad sides. For example, Toptal provides you only with top 3% of freelance app developers from across the world. Because of this, it is more expensive to hire a developer here than on the other sites. Freelancer, on the other hand, has the opposite problem—having a lot of developers to choose from means that you are going to have to carefully balance work quality and costs. Fortunately, these sites are only the beginning of the list. If you are a developer yourself, don’t hesitate to check out StackOverflow or GitHub , and remember that there’s always LinkedIn and Twitter to take into consideration. The possibilities are limitless you just have to know what profile of a developer you are searching for. Start Attending Different Events In one of our previous articles, we wrote about what being an entrepreneur in 2018 is like. We mentioned that a founder should never forget about the benefits of networking and we’re sticking by this piece of advice. So, the next time you hear there is a conference or a meetup nearby, be sure not to skip it. You never know who you’ll meet. Also, don’t forget about local colleges and universities. If it counts, Kolosek attended one of the university fairs in Novi Sad which offers students possibilities to talk to company representatives and find more about the team, the development process etc. We have actually met some pretty cool app developers at that fair! Reach Out to App Developers You Find Interesting So, after you have collected all the data and met up with a developer or two, all that is left for you to do is contact them —this can be via email, a LinkedIn message or one of the freelance sites we mentioned. Before you do contact them, though, don’t forget to check your chosen developers’ portfolios in details. When looking at a portfolio, what should you pay attention to? Seeing that most developers nowadays have their own websites, let their websites talk to you. Pay attention to the design and the portfolio section. Good app developers have a list of dozens or even a hundred projects they worked on. If you can’t get the entire picture from these projects, don’t hesitate to ask for a more detailed portfolio. After analyzing the portfolios, the next logical step is to schedule a Skype call or an interview. During any type of communication, be sure to ask the right questions and remember: developers’ experience is one of the most important things . The longer app developers are on the market, the easier it is to work with them. Conclusion Finding the right app developers requires a lot of planning, questioning and researching, so be prepared for all of that. In short: it’s not exactly a picnic. What you want to do is find a developer/developers/a company that is reliable, easy to talk to and is transparent about the project. Remember, communication is the key to a good collaboration. Thank you for reading the article to the very end. We hope we have provided you with some useful information on how to find the right app developers for your project. How did you manage to find developers for your startup? What did you pickーhiring employees, freelancers or working with a development company? Share your experience in the comment section below!", "date": "2018-05-05"},
{"website": "Kolosek", "title": "Git Merge", "author": ["Kristina P."], "link": "https://kolosek.com/git-merge/", "abstract": "Isolating features into different branches is a crucial practice for any serious developer. By separating each feature, bugfix or working experiment you will avoid a lot of problems and keep your development branches clean. At some point, a piece of code will reach a state where you'll want to integrate it with the rest of the project. This is where the git merge command comes in. Preparing to Merge Let's assume that we want to merge branch hotfix into your master branch . Before we start, how to make sure that you are ready to merge your changes? Check if your local repository is up to date with the latest changes from your remote server with a git fetch . Once the fetch is completed git checkout master . Ensure the master branch has the latest updates by executing git pull . Checkout to the branch that should receive the changes, in our case that is master. Merging Once the preparations are completed, you can start the merge with git merge hotfix command. Fast Forward Merge A fast-forward merge can occur when there is a linear path between branches that we want to merge. If a master has not diverged , instead of creating a new commit, it will just point master to the latest commit of the hotfix branch. All commits from hotfix branch are now available in master. However, a fast-forward merge is not possible if the branches have diverged. In this case, you want to use a Three-way merge . Three-Way Merge When there is not a linear path to the target branch, Git has no choice but to combine them via a three-way merge . This merge uses an extra commit to tie together the two branches. Test this out! Create your own project with an RSpec test branch and at the same time edit the Controller tests in master. Now, try to merge. How to Deal With Merge Conflicts A merge conflict occurs when two branches you're trying to merge both changed the same part of the same file, Git won't be able to figure out which version to use. For example, if the file example.rb was edited on the same lines in different branches of the same Git repository or if the file was deleted, you will get a merge conflict error when you try to merge these branches. Before you can continue, the merge conflict has to be resolved with a new commit . Merge conflicts will only occur in the event of a 3-way merge. Generate a list of the files which need to be resolved: git status # On branch master\n# You have unmerged paths.\n#   (fix conflicts and run \"git commit\")\n# Unmerged paths:\n#   (use \"git add ...\" to mark resolution)\n# both modified: example.rb\n# no changes added to commit (use \"git add\" and/or \"git commit -a\") When the conflicted line is encountered, Git will edit the content of the affected files with visual indicators that mark both sides of the conflicting content. These visual markers are: <<<<<<< - Conflict marker , the conflict starts after this line. ======= - Divides your changes from the changes in the other branch. >>>>>>> - End of the conflicted lines. <<<<<<< HEAD(master)\nconflicted text from HEAD(master)\n=======\nconflicted text from hotfix\n>>>>>>> hotfix Decide if you want to keep only your hotfix or master changes, or write a completely new code. Delete the conflict markers before merging your changes. When you're ready to merge, all you have to do is run git add command on the conflicted files to tell Git they're resolved. Commit your changes with git commit to generate the merge commit. Hope this helped you get a better understanding how to merge your branches and deal with conflicts. We automatically fetch you new articles once you subscribe!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "CSS will-change", "author": ["Tijana D."], "link": "https://kolosek.com/css-will-change/", "abstract": "The coolest name, isn't it? Well, CSS is changing, and it will change, hopefully by adding more cool-name options. There's a word that will-change is here to change transition in the transition-transform relationship. Can I just ask: will-it-change? (OK, I'm done!) It's totally fine if you didn't hear about will-change until now, you will understand everything there is in a text that follows. About will-change The real purpose of will-change property is to warn browser that selected element will change in future processes, so the browser can set up appropriate optimizations ahead. Posible values: auto - standard browser optimizations will be applied; scroll-position - the element’s scroll position will be animated sometime in the near future; contents - the contents of an element is expected to change so the browser will not cache this element’s content; [custom-ident] - specifying the name or names of one or more properties that you expect to change (e.g. transform, opacity, top, left,); It is possible to declare multiple values with a comma-separated list. .sidebar{\n     will-change:transform, opacity;\n } Some properties will have no effect when specified in will-change , because the browser doesn’t perform any special optimizations for changes in most properties. It is still safe to specify them, though; it’ll simply have no effect. This property is not supported in IE, Edge and Opera Mini, keep that in mind. Do's Use sparingly Adding will-change directly in a stylesheet implies that the targeted elements are always a few moments away from changing and the browser will keep the optimizations for much longer time than it would have otherwise. So, it is a good practice to switch will-change on and off on using script code before and after the change occurs. Give it time It is important to give the browser some time to actually do the optimizations. Find some way to predict at least slightly ahead of time that something will change, and set will-change then. Remove all will-change after the changes are done The usual browser behavior for optimizations that it makes is to remove these optimizations and revert back to normal behavior as soon as it can. Be aware that will-change may actually influence the visual appearance of elements, when used with property values, that creates a stacking context (e.g. will-change: opacity), as the stacking context is created up front. Don'ts Don't apply will-change to too many elements The browser already tries as hard as it can to optimize everything. Don't apply will-change to elements to perform premature optimization. will-change is intended to be used as something of a last resort, in order to try to deal with existing performance problems. Excessive use of will-change will result in excessive memory use and will cause more complex rendering to occur as the browser attempts to prepare for the possible change. This will lead to worse performance. The End Read About, read Do's, read Don'ts and that's everything. I don't even have the last word to add. For the weekly update, subscribe to our newsletter.", "date": "2018-05-05"},
{"website": "Kolosek", "title": "CSS overflow", "author": ["Tatjana B."], "link": "https://kolosek.com/css-overflow/", "abstract": "The CSS overflow property specifies what to do in the case a content is too large to fit in the container box. It specifies if a scrollbar should appear, or if a content gets clipped . The overflow property is a shorthand for overflow-x and overflow-y. The overflow-x property specifies handling the overflow in the horizontal direction, while overflow-y specifies handling the overflow in the vertical direction. When learning about this, it is useful to know a little something more about positioning . Values The overflow property can have different values: visible - content can be rendered outside of the box, hidden - content gets clipped and no scrollbars are shown, scroll - content gets clipped and necessary scrollbars are shown, auto - the browser determines how it will handle the content, it can vary from browser to browser, but generally, scrollbars appear as required. The overflow property applies only to the block, inline-block and table elements . Syntax The following syntax is used for defining the overflow property: div {\n  overflow: hidden;\n} Examples Now, let’s back this theory up with some examples. When working with text, it should have a proper formatting . HTML <div>\n  <p>Lorem ipsum dolor amet next level banh mi actually etsy craft beer. Portland meh palo santo pitchfork wayfarers raclette kinfolk try-hard YOLO. Lo-fi cred pork belly, cloud bread artisan heirloom raw denim kombucha. Godard etsy ugh, letterpress roof party fingerstache succulents edison bulb. Iceland disrupt palo santo fixie hella taiyaki celiac green juice.</p>\n</div> CSS div {\n  height: 200px;\n  width: 200px;\n  border: solid thin blue;\n  background-color: #fafafa;\n  overflow: visible;\n} In the example above, we have set the overflow to visible and the content spills outside of the containing box. HTML <div>\n  <p>Lorem ipsum dolor amet next level banh mi actually etsy craft beer. Portland meh palo santo pitchfork wayfarers raclette kinfolk try-hard YOLO. Lo-fi cred pork belly, cloud bread artisan heirloom raw denim kombucha. Godard etsy ugh, letterpress roof party fingerstache succulents edison bulb. Iceland disrupt palo santo fixie hella taiyaki celiac green juice.</p>\n</div> CSS div {\n  height: 200px;\n  width: 200px;\n  border: solid thin blue;\n  background-color: #fafafa;\n  overflow: hidden;\n} In the second example, we have set the overflow property to hidden . The content is clipped and no scrollbars are visible. HTML <div>\n  <p>Lorem ipsum dolor amet next level banh mi actually etsy craft beer. Portland meh palo santo pitchfork wayfarers raclette kinfolk try-hard YOLO. Lo-fi cred pork belly, cloud bread artisan heirloom raw denim kombucha. Godard etsy ugh, letterpress roof party fingerstache succulents edison bulb. Iceland disrupt palo santo fixie hella taiyaki celiac green juice.</p>\n</div> CSS div {\n  height: 200px;\n  width: 200px;\n  border: solid thin blue;\n  background-color: #fafafa;\n  overflow: scroll;\n} In the third example, we have set the overflow property to scroll . In this case, the content spills outside the container, and the scrollbars appear . HTML <div>\n  <p>Lorem ipsum dolor amet next level banh mi actually etsy craft beer. Portland meh palo santo pitchfork wayfarers raclette kinfolk try-hard YOLO. Lo-fi cred pork belly, cloud bread artisan heirloom raw denim kombucha. Godard etsy ugh, letterpress roof party fingerstache succulents edison bulb. Iceland disrupt palo santo fixie hella taiyaki celiac green juice.</p>\n</div> CSS div {\n  height: 200px;\n  width: 200px;\n  border: solid thin blue;\n  background-color: #fafafa;\n  overflow-y: scroll;\n  overflow-x: hidden;\n} Finally, we can see the usage of the overflow-y property. We see only the vertical scrollbar is visible , while the horizontal scrollbar is hidden . Summary In this short tutorial, we have explained the overflow property. Hopefully, it will be of any help when you start your next project. Thank you for reading! Wanna know more about CSS? We are glad to share - just subscribe to our newsletter.", "date": "2018-05-05"},
{"website": "Kolosek", "title": "Rails Delegate", "author": ["Kolosek"], "link": "https://kolosek.com/rails-delegate/", "abstract": "A model should only talk to its immediate association. According to the Law of Demeter, you shouldn’t talk to the association’s property or association’s association. Here we talk about Rails delegate approach. BAD SMELL class Profile < ActiveRecord::Base belongs_to :user end <%= @profile.user.address %>\n<%= @profile.user.city %> Rails provides helper method to accomplish delegation, which uses DSL to generate wrapper methods. It can also prevent error call method on nil object if :allow_nil => true is added. Refactored class Profile < ActiveRecord::Base\n  belongs_to :user\n  delegate :address, :city, :to => :user, :prefix => true, :allow_nil => true\nend\n<%= @profile.user_address %>\n<%= @profile.user_city %>", "date": "2016-11-05"},
{"website": "Kolosek", "title": "Rails Associations", "author": ["Nesha Z."], "link": "https://kolosek.com/rails-associations/", "abstract": "An association is a connection between two Active Record models . It makes much easier to perform various operations on the records in your code. We will divide associations into four categories: One to One One to Many Many to Many Polymorphic One to Many If you are new to Ruby on Rails, be sure to get up your rails project ready and check how to create models in Rails. One to One When you set up one-to-one relations you are saying that a record contains exactly one instance of another model. For example, if each user in your application has only one profile, you can describe your models as: class User < ApplicationRecord       class Profile < ApplicationRecord\n  has_one :profile                     belongs_to :user\nend                                  end One of the models in the given relation will have has_one method invocation and another one will have belongs_to . It is used to describe which model contains a foreign key reference to the other one, in our case, it is the profiles model. Cover your associations with RSpec tests to make sure everything works the way you want it to. One to Many A one-to-many association is the most common used relation. This association indicates that each instance of the model A can have zero or more instances of another model B and model B belongs to only one model A. Let's check it out via example. We want to create an application where users can write multiple stories, our models should look like this: class User < ApplicationRecord       class Story < ApplicationRecord\n  has_many :stories                     belongs_to :user\nend                                  end Here, deciding which model will have has_many and which will have belongs_to is more important than in one-to-one relations, because it changes the logic of your application. In both cases, the second model contains one reference to the first model in form of a foreign key . The second model doesn't know about the first model relation to it - it is not aware if the first model has a reference to more than one of them or just to one. The tests for associations get more complex to write the more relations you create. You should check it out how to create your own association factories to make your testing life easier. Many to Many Many-to-many associations are a bit more complex and can be handled in two ways, \"has and belongs to many\" and \"has many through\" relations. Has and Belongs to Many A has_and_belongs_to_many association creates a direct many-to-many connection with another model. It is simpler than the other one, as it only requires calling has_and_belongs_to_many from both models. Example: Let's say, a user can have many different roles and the same role may contain many users, our models would be like this: class User < ApplicationRecord       class Role < ApplicationRecord\n  has_and_belongs_to_many :roles       has_and_belongs_to_many :users\nend                                  end You will need to create a join table for this association to work. It is a table that connects two different models. The join table is created with rails function create_join_table :user, :role in a separate migration . class CreateUserRoles < ActiveRecord::Migration\n  def change\n    create_table :user_roles, id: false do |t|\n      t.references :user, index: true, foreign_key: true\n      t.references :role, index: true, foreign_key: true\n    end\n  end\nend This is a very simple approach, but you don't have the direct access to related objects , you can only hold references to two models and nothing else. Has Many Through Another way to define a many-to-many association is to use the has many through association type. Here we define a separate model , to handle that connection between two different ones. Instead of putting down a new example, you should check this one out ! It explains everything you should know about this association. Using the example of has_and_belongs_to_many association, this time the three models should be written like this: class User < ApplicationRecord\n  has_many :user_roles\n  has_many :roles, through: :user_roles\nend\n \nclass UserRoles < ApplicationRecord\n  belongs_to :user\n  belongs_to :role\nend\n \nclass Role < ApplicationRecord\n  has_many :user_roles\n  has_many :users, through: :user_roles\nend This association will enable you to do things like user.role and to get a list of all connected second model instances. It will also enable you to get access to data specific to the relation between first and second models. Polymorphic Polymorphic associations are the most advanced associations available to us. You can use it when you have a model that may belong to many different models on a single association. Let's imagine you want to be able to write comments for users and stories. You want both models to be commentable. Here's how this could be declared: class Comment < ApplicationRecord\n  belongs_to :commentable, polymorphic: true\nend\n \nclass Employee < ApplicationRecord\n  has_many :comment, as: :commentable\nend\n \nclass Product < ApplicationRecord\n  has_many :comment, as: :commentable\nend You can think of a polymorphic belongs_to declaration as setting up an interface that any other model can use. To declare the polymorphic interface you need to declare both a foreign key column and a type column in the model. You should run the migration once you are done. class CreateComments < ActiveRecord::Migration\n  def change\n    create_table :comments do |t|\n      t.text :body\n      t.integer :commentable_id\n      t.string :commentable_type\n      t.timestamps\n    end\n \n    add_index :comments, :commentable_id\n  end\nend This migration can be simplified by using references : class CreateComments < ActiveRecord::Migration\n  def change\n    create_table :comments do |t|\n      t.text :body\n      t.references :commentable, polymorphic: true, index: true\n      t.timestamps\n    end\n  end\nend Aditional Options There are a few additional options you can use when defining relations between models , we will cover two most commonly used ones. class_name If the name of the other model cannot be derived from the association name, you can use the :class_name option to supply the model name. You can read more about this on RailsGuides . Example: You want the belongs_to relation to call for an author , but there are two problems: There is no model called in that way. The story table is missing an author_id field. Easy fix! To make this work and stop your tests from failing , you just have to specify the :foreign_key and the actual name of the class: class Story < ApplicationRecord\n  belongs_to :author, class_name: 'User', foreign_key: 'user_id'\nend dependent You can use this option when you want to get rid of orphaned records since they can lead to various problems. Orphaned records are created when we delete or destroy a model A that was associated with model B, but model B wasn't removed in the process. class User < ApplicationRecord\n  has_many :stories, dependent: :destroy\nend Example: Suppose, a user called Maria wrote a lot of stories. Then, we deleted Maria from the database, but the stories still have the user_id column set to Maria's id. These stories are called orphaned records . Thank you for reading! Be sure to subscribe if you want to stay in a many-to-many association with our articles!", "date": "2018-05-05"},
{"website": "Kolosek", "title": "Starting a Business with a Development Company vs Without a Development Company", "author": ["Aleksandra M."], "link": "https://kolosek.com/starting-a-business-with-a-development-company-vs-without-a-development-company/", "abstract": "Starting a business you have dreamt for a longer period of time means being prepared to face the unknown. Once you start working on developing a business plan, you will become aware of the fact that dreams don’t come true that easily. In fact, only a true entrepreneur has the courage to live his/her dream, in spite of small chances of surviving in the market. Yesーwe said itー small chances of making it in the market . Why are we being so pessimistic? Actually, we are not and here is a statistic to prove it: 50% of business don’t make to celebrate the five-year mark ? They get lost or “eaten” by a competition, or lack of entrepreneur’s motivation and/or knowledge. It is only natural for an entrepreneur to want to raise those chances by starting a business in the industry he/she knows best. Although it may seem like a good idea to start a local business in the fast-growing industries like cryptocurrencies or even green energy , this move can actually bring even more risk. However, what if you are willing to face that risk and finally bring your idea to life by turning it into a web/mobile app? What happens then? Well, first, let us just say: that’s amazing! And second, we are glad you showed bravery and dedication. You are slowly becoming a true entrepreneur! So, what’s your next step? The first challenge you are going to face when starting a business is putting the idea on a piece of blank paper and creating a business plan. In that process, you will come across a gigantic barrierー not having enough skills and knowledge to deliver the product to the market by yourself. As a non-developer, you can always try learning programming languages and principles of web (and mobile?) design but that can take a while. To be precise, it can take months before you can actually start feeling confident enough to engage in the development process. Once you become aware that you need a hand in building the app, it is time to start searching for professionals that have the knowledge, skills and experience to make it all happen. In short: you need great software developers to have your back. But, before you can start searching for them, you need to decide whether you would like to hire developers, work with freelancers or hire a development company. Before you jump to start googling developers, there is one thing you should know. Starting a business with the right development team (no matter if it is a development company, freelancers or a team you hired yourself) is like finding the perfect suite ーit fits in all the right places and gives you the confidence to carry on with your day proudly and fiercely. Working with this kind of team puts developing your idea into whole other perspectiveーyou are able to focus on other tasks rather than controlling every step of the development process. If it doesn’t feel like a good suite than it is not the right team. Since Kolosek is a development company and has worked with a lot of startups, we know a thing or two about pros and cons of making this kind of partnership. We are going to share our experience, providing you with objective information on several topics. So, let's talk about what starting a business with a development company and without one is like. Starting a Business with a Development Company Imagine the following scenario: after a lot of research, you have found the development company you believe is going to be a good “partner in crime”. So, what can you expect from partnering up with a development company? Well, from our experience, starting a business and deciding to collaborate with a company has its good and bad sides and we are going to name them all. Without further ado, let’s get to the pros. Experienced Team If you starting a business, you don’t want developers that are at the beginning of their careers. You need more. You need the best ones. That is why, before you make up your mind on which development company to hire, you should definitely take into account their portfolio . Remember that a good development company is the one that has multiple projects successfully done, and whose team of developers and designers has the expertise to carry out the project until the very end. Why is it so important to find the company with a rich portfolio? Because a team that has more than a dozen projects completed is usually the one that is “well-trained”. When we say well-trained we think of developers’ and designers’ ability to efficiently and productively go through the project . This means respecting deadlines, properly providing estimates, prioritizing tasks and, on top of all this, regularly sharing challenges they face in order to improve the quality of their work. Simply said, this kind of team consists of bookworms who are always striving to do better and, at the same time, have enough experience to face every programming challenge. Which leads us to the next benefit of starting a business with a development company. Team Reliability and Code Quality Let’s make something clear in the beginning: a good development team should be your right hand in the process of developing an idea. It should guide you through the process, providing just as much information as you can comprehend. It is reliable, open to communication and trustworthy. What does it mean to have a reliable team by your side? There is only one answer to this question: a reliable team is the one that is going to write high-quality code. Although the goal of the project is to deliver the product in the predefined period of time, a reliable development company would never choose the speed in writing a code over code quality . The app has to be perfected to the smallest details and a reliable team knows how to achieve this goal. Not only this, a development team is responsible for the app even after the launch. From reliability comes trustworthiness and from that on, the sky is the limit. Time Management Out of all these benefits of starting a business with a development company, this is the one you should keep in mind: a good development company is your savior when it comes to time management. As a fresh, small business owner, you have a lot on your mindーdealing with legal issues, perfecting the business plan, thinking about marketing an app and all the other matters that are not related to the product R&D. The last thing you need is to think about managing a development team. Lucky for youーa good development company is self-organized. Bear in mind that, in the best case scenario, you, as an entrepreneur and the creator of the idea, simply have to explain the idea and let the development company do its magic. That is how the product development process should be done. Starting a business seems a lot easier now, doesn’t it? Once we have explained the ups of partnering up with a development company, it is time to get to the more challenging aspects of working with a professional development team. Costs When you are first starting a business at the end of each month it always comes down to how much you’ve earned and spent. If you started a business operating by a low-cost strategy then partnering up with a development company definitely shouldn't be your first choice. There is no secret that working with a development company costs more than hiring a freelancer . In fact, according to the past year’s research conducted by Clutch.co, which included 120 development companies, a proper app development can cost a couple hundred thousand dollars. Precisely, average hourly rates for development team members can go anywhere from $15-$150, depending on the team location. So, before you decide you definitely want to hire a development company, keep an eye on the costs and then reach out to the company. Time Zone and Language Barriers One of the most mentioned flaws of starting a business with development companies (especially the offshore ones) is having difficulties with syncing time zones. To be honest, it has never been a problem for us and we don’t consider it to be a challenge . The days when development companies are on the rise and competition is everywhere, we try to be flexible about working hours and adjusting to the client’s needs. Make no mistakeーwe are not specialーmost development companies do business this way. On the other hand, when it comes to language barriers, English is the third most spoken language in the entire world and everyone is at least familiar with it. If you take into account that code lines are all written in English (as well as code comments) and that all developers operate on English, language barriers become almost non-existent. Starting a Business Without a Development Company Once you have put all the numbers on the paper and costs seem to much to make additional ones, it is a good option to partner up with freelancers or even hire employees. Let’s go back for a minute. In one of our previous articles, we wrote about what it takes to find good app developers . In there we mentioned that you have to be aware of multiple factorsーlocation, searching online and locally and mingling around to find the right ones. Butーyou have to face itーall that search can take longer than you can actually afford, especially if you are on the hunt for co-workers. So, not only that you have to deal with all the tasks regarding starting a business, you also need to invest the two most valuable resources, time and money, into the process of finding a team to have your back. When choosing between hiring employees and working with freelancers, the second option is the one that is less time-consuming and can bring the results faster. With that in mind, for the following part of the article, we decided to write about what it is like to work with freelancers. For the sake of this article, let’s say you have already found what you were looking forー a couple of experienced freelancers . But, before we start elaborating the benefits and shortcoming of hiring freelancers, there is one thing you should bear in mind: a good freelancer is a professional and the one that has the necessary range of skill set to be able to commit, test and deploy the code without delays . He/she should have an impeccable work ethics, be reliable and open to facing challenges. Now, let's get to the perks of hiring freelancers: Flexibility This is the one benefit that can make freelancers superior in the comparison to development companies. Why? As you have probably heard, freelancers can work whenever, wherever. They make their own schedules and make themselves as flexible as they possibly can , they are a great option when you are starting a business and need fast results. For you, that means no worries about different time zones and not being able to properly communicate with your development team. They are even able to work on the weekends and holidays! Flexibility is truly the one benefit that makes freelancers stand out. Lower Costs As we have previously mentioned, hiring freelancers is much more cost-effective than partnering up with a development company. How much more cost-effective, you may ask? Well, depending on the region of the world , freelancers’ hourly rates can go up to $70. The least expensive are the ones in Pakistan and Ukraine. Freelancers Are Easily Found It’s no secret that you can easily find freelancers, just by Googling one of the top online platforms for hiring developersーToptal, Freelancer, Upwork and similar. However, there is one tip we can give you: if you are trying to hire a “cost-effective” freelancer, try browsing through as many online platforms as you can. Why? Because if you compare the prices, you will see that freelancers on some of the mentioned platforms have higher hourly rates than others which can be a deal breaker when you are starting a business. Also, be sure to check freelancers’ “reviews” , so you don’t end up with a poor-quality code. Now, let’s get to the cons. As it usually is, hiring a one-man-show, has its consequences and here they are: No Post-Launch Technical Support Imagine that all the blood, sweat and tears paid off and your app is officially on the market. It has been launched and is ready to be used. If you did everything right regarding marketing activities, hopefully, in the next couple of weeks, it will have a significant number of users. What you have to bear in mind even before starting a business is that it is completely natural for a bug to appear after the launch . Or a crash. However, app users might not be that forgiving. At that moment the real problem is: you most likely don’t have a developer to fix all the current and future bugs and errors. How to stop this from happening? Well, depending on the contract, a freelancer can provide post-launch support and it can cost a bit more than the standard hourly rate. This is the main con of hiring a freelancer. Working on Multiple Projects Although it is pretty easy to reach out to freelancers, it is not easy to hire them . You have to keep in mind that most of them work on multiple projects and find clients who can offer the best balance between work and hourly rates. So, if you need someone to start the development process as soon as tomorrow, don’t be so sure you will find him/her. Alas, we have one final tip for you: it is crucial to find a developer who will be loyal and with whom you will not have a problem with confidentiality. After all, you are starting a business and you should raise your chances of having a successful product launch. What should you do? Propose a freelancer to sign a non-disclosure agreement (NDA), so all the information about product development process is safe between the two of you. It shouldn’t be a problem. Conclusion As a founder, you are going to face a lot of tough decisions. There will be many bumps in the road so the last thing you need to worry is about the process you don’t have the competence to control. On the other hand, there is always an aspect of cost reduction especially when you are first starting a business. This is why you should give some serious thought to whether you would like to start a business with or without a development company by your side. So, to conclude: be careful not to lose quality simply because you want to lower the costs. You have reached the end of this article! We hope you found it helpful and have a better understanding of how your business can operate with or without a development company. Have you had any experience with working with a development company or freelancers? Have you had any regrets? Share it with us in the comment section below!", "date": "2018-05-05"},
{"website": "Kolosek", "title": "Git Stash", "author": ["Kristina P."], "link": "https://kolosek.com/git-stash/", "abstract": "Imagine that you are working on a part of a project and it starts getting messy. There has been an urgent bug that needs your immediate attention. It is time to save your changes and switch branches. The problem is, you don’t want to do a commit of a half-done work. The solution is git stash . Stashing is handy if you need to quickly switch context and work on something else but you're mid-way through a code change and aren't quite ready to commit. By Bitbucket Stashing Let's say you currently have a couple of local modifications. Run git status , to check your current state: $ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#      modified:   index.html\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#      modified:   assets/stylesheets/styles.css We need to work on that urgent bug. First, we want to save out unfinished work changes without committing them. This is where git stash comes as a savior: $ git stash\nSaved working directory and index state WIP on master:\n  bb06da6 Modified the index page\nHEAD is now at bb06da6 Modified the index page\n(To restore them type \"git stash apply\") Your working directory is now clean and all uncommitted local changes have been saved! At this point, you're free to make new changes, create new commits , switch branches , and perform any other Git operations. By default, stashes are identified as \"WIP\" – work in progress, on top of the branch and commit they are created from. Re-applying Your Stash Git stash is a temporary storage. When you're ready to continue where you left off, you can restore the saved state easily: git stash pop . Popping your stash removes the changes from your stash and reapplies the last saved state. If you want to keep the changes in the stash as well, you can use git stash apply instead. Additional Tips and Tricks There are a couple of other things you can do with a stash. Let's take a look! Saving stashes Save a stash with a message : $ git stash save <message> . Try this out by adding CSS-line high to your styles and stash it with a nice comment. Stashing untracked files This is the only way to save untracked files : $ git stash -u or $ git stash --include-untracked List multiple stashes When you git stash or git stash save , Git will create a Git commit object with a name and then save it in your repo. You can view the list of stashes you made at any time! $ git stash list . $ git stash list [email protected] {0}: On master: Modified the index page [email protected] {1}: WIP on master: bb06da6 Initial Commit Partial stashes You can choose to stash just a single file, a collection of files, or individual changes from within files: $ git stash -p or $ git stash --patch . RSpec tests are a must in the Ruby on Rails projects, but they might not be always complete. Stash only the part that is ready to go! Viewing stash diffs There are two ways to view a stash: to view the full diff of a stash - $ git stash show -p or view only the latest stash - $ git stash show . $ git stash show\nindex.html | 1 +\nstyle.css | 2 ++\n2 files changed, 3 insertions(+) Creating a branch from the stash Create a new branch to apply your stashed changes to, and then pop your stashed changes onto it: $ git stash branch <branch_name> <stash_id> . This is another way to save your stash before moving on with the project. Remove your stash Use it with caution, it maybe is difficult to revert. The only way to revert it is if you didn't close the terminal after deleting the stash. If you no longer need a particular stash , you can delete it with: $ git stash drop <stash_id> . Or you can delete all of your stashes from the repo with: $ git stash clear . Hope this article helped you to get a better understanding how stashing works. Be sure to test it out! The next article is just about to leave the stash! Subscribe and get informed when the time comes!", "date": "2018-05-05"},
{"website": "Kolosek", "title": "Web Developer vs Web Designer", "author": ["Aleksandra M."], "link": "https://kolosek.com/web-developer-vs-web-designer/", "abstract": "You’ve done all you can. Breath. After weeks (or months?) of planning and preparing, doing market research, talking to other entrepreneurs, the time has come to turn your business idea into something more一into a web app . It’s finally the time to make a product out of it. If you did all your planning right, then you should be able to answer our first question: how are you going to make it all happen? What is going to be your first step? Well, in order to make a web app, you need someone to turn the idea into code and “make it pretty”, so the users will like what they see. From where we’re standing, it seems like you have two options: you can do this task yourself or hire someone to do it . We have to be honestーif you don’t have any programming experience, it might not be a good idea to start learning languages right now. You need reliable, quality results as soon as tomorrow so you can put the product on the market. Our suggestion: find a web developer to do it. In fact, find both developer and designer to build the app. Whether you decide to hire co-workers, reach out to freelancers or start a collaboration with a development company , you have to know that, in order to have a high-quality product, you need a team of developers and designers. Our second question is: Do you know why you need them both? Why shouldn’t you just cut the costs and hire only a web developer? Because web developers and designers, unfortunate or not, are the two sides of the same coin. They are not the same nor they are the opposite. They have the same goal and different ways of achieving it. A web designer codes just like a web developer does, while a web developer has some saying in the design. If you are a bit confused, it’s OK, let’s make it simple: you need both of them because they complement each other and go hand in hand. Another reason why you need them is that you need excellence ーtwo different skill sets that can make a product perfect. An expertise of a developer can only come to life if a designer has done a good job. That all being said, there are several major differences between developers and designers. They may not seem so obvious now, but just wait, we are going to explain them all. Bear in mind that the primary focus of this article is to explain the distinction between developers and designers by emphasizing their knowledge and skill set. We are not going to focus on their hourly rates or incomes. Let’s begin, shall we? What Is a Web Developer? Let’s make it all clear in the beginning: a web developer is a person who has the skill set to build a web app from the ground up . Web developers’ role is to write a good-quality (and, preferably, an easy-to-read) code and create a functional, bug-free app. At this point, you might be asking yourself how does he/she know what to build? Do you just approach the developer and say there is an app that you would like him/her to create and a developer gets to business? Well, it’s not that simple. In fact, this is the part where a web designer steps in . Before the coding process can begin, a web designer should create a mockup design of the app. Once the mockup design has your approval, a designer can hand it over to a developer. Then, web developer and designer work together to make sure that a developer understands all the aspects of the following design. A web developer should not question the design itself but should ask questions if he/she feels there is anything left unsaid. We are going to mention this part later. Let’s go back to the actual developing and programming. What does a web developer do? Well, depending on his/her knowledge, a web developer can be front-end or back-end-oriented. If you are not sure what we mean, let us explain. Back-End and Front-End Development A back-end development includes complex, code-intensive work. When we previously mentioned that web developers bring apps from the ground up, this is what we were referring to. If you are still not getting the picture, let’s put it this way: a back-end web developer should know how to create a multiple users app like Airbnb or Amazon are. All the shopping carts or offers like booking a flight are done by back-end developers. On the other hand, there is a front-end web developer. Believe it or not, front-end is the reason why it is hard to tell a difference between developers and designers. But the truth is actually really simple. A job of a front-end developer is to translate the work of a designer into the code. He/she is not supposed to make any design changes but to provide functional connections between all design elements. Those are the main differences between a back-end and a front-end web developer. Now, you have probably heard of the term “ full-stack developer ”. This term is used to describe developers who have the knowledge of both back-end and front-end development. But, make no mistake一it doesn’t mean that you should always hire a full-stack web developer to cover all the job. Depending on the project, it’s nice to have full stack developers in a team, so some of them can work on the front-end and some on the back-end and each of them can jump in if the help is needed. Web Developers’ Skills and Knowledge The one characteristic that should always be used to describe web developers is analytical . No matter if we are talking about a front-end web developer or a back-end one. As you will be able to see in the following text, a web designer is the one that relies on his/her creativity, while a developer is the one that is oriented to details and the development process itself. So, if you are looking a web developer, what should you look for? Well, depending on the type of the project, you will need developers that are familiar with different technologies. A web developer should be familiar with: Back-end development technologies which include languages like PHP, Java, Ruby, Python and tools like MySQL and SQL Server. Front-end development technologies like HTML, CSS, JavaScript and frameworks like React JS, Node JS, jQuery, Bootstrap, Angular JS, Ember JS etc. Before you start searching for a web developer, be sure to consult an expert on what type of a developer you need. Would you rather choose a Ruby developer or perhaps a PHP one? Also, please note that developers are not obligated to know each and every programming language that exists. Surprisingly enough, this is a good news for you because you can easily find a developer that suits the needs of your project. So, What Makes a Good Web Developer? Let’s put it this way: a good software developer is the one that can write good-quality code fast, the one that learns quickly, is not afraid to face the challenge, is reliable and has good communication skills. With all this in mind, it wouldn’t hurt to have a team player by your side, as well. The point is that a web developer should not only be an expert in his/her field but also a good communicator and a problem solver. A Web Designer A web designer is, in short, the creative mind that stands behind a web app. What does a web designer do? A web designer should create a visual layout of a web app . You may wonder how can one person can that easily translate your idea of a brand into a web app design. Well, this is where your input should step in. In fact, before you start working with a web designer, you should make a web design brief ーa list of all brand, tech and content requirements which will help a designer. The more detailed it is, the better. After you have talked to a designer, it is up to him/her to use the knowledge of graphic design and combine it with different types of software and prototyping tools, which will help him/her to create the first version of an app. Trust a Designer When it comes to working with a designer, the biggest challenge is to put your idea in his/her hands. Why is that? Well, because you, as the creator of the idea, already have in mind what the web app should look like. In most cases, that idea doesn’t align with the rules of web design, so it is necessary to make a few changes. Why are changes necessary? Because a good web designer knows about colors contrasts, shapes, textures, typography and more. You have to admit you are probably not the most competent person when it comes to these design elements. On the other hand, a good designer knows how to use all these elements and create a never-seen-before web app that target users are going to find useful and easy on the eyes. Our advice on this matter is: don’t overreact if there are more changes than you anticipated. If you chose a good designer then there is a nothing to be afraid ofーyou will be able to find common grounds with him/her and share your thoughts and fears. However, if you are not still not convinced that you should trust a web designer there are two aspects of design that only a designer knowsー user experience (UX) and user interface (UI) design. UX and UI Design What are user experience (UX) and user interface (UI) design ? Without getting into too many details, since we will cover this matter in another article, let’s put it this way: A user experience design is a process that includes improving a user’s ability to maneuver the product. It should provide a user with satisfaction and clarity. A user interface is a combination of content, forms and behavior. It pays attention to how the app looks than worrying about how the user interacts with the application. A good designer is the one that knows principles of UX and UI. Guided by those principles, he/she knows what your app needs to skyrocket on the market. If you thought that this is the end of designer’s knowledge you were wrong. A web designer should be familiar with design tools like Photoshop, Illustrator, Sketch and prototyping tools like Mockplus. Not only that, a designer should be familiar with HTML and CSS, just like a front-end web developer is. As we saidーa web developer and a web designer are two sides of the same coin. Conclusion At first sight, it can be difficult to make a difference between a (front-end) web developer and a web designer. But, as you can see, there is one huge contrariety between these twoーa web developer provides functionality , while a designer uses imagination and creativity to make sure app users like the app and find it pain-free to use it. However, both of them have to work together in order to create a product that is going to present the company in the best way and have a value for a user. We hope that this article provided clarity and some useful insight on how both sides work. Is there anything we forgot to mention? Tell us in the comment section below!", "date": "2018-05-05"},
{"website": "Kolosek", "title": "CSS :before and :after", "author": ["Tatjana B."], "link": "https://kolosek.com/css-before-and-after/", "abstract": "The CSS :before and :after properties are what also known as pseudo elements . They are used to add something before or after the content of an element. There are a lot of great uses for these pseudo elements, and we are here to explore some of them. The Syntax If we have an element like this one: <h2>welcome to our website</h2> We can add a pseudo element before it using CSS, like this: h2:before {\n  content: “Hello“;\n  color : blue;\n} The result will be: This is a quite simple principle. You are adding content before or after a certain element. It can be extremely helpful when adding icons, clearing floats , and in many other cases. The content property of the pseudo element can be left empty with empty quotes like this content: “” . This way you can treat the pseudo element like a box with no content . If the content property is removed altogether, the pseudo element will not work . Adding Icons Probably the most popular usage of the before and after pseudo elements is using them to add icons . We can add a simple .png icon. Let’s look at the markup. HTML <h2>Weather report</h2> CSS h2:before {\n  content: “ ”; \n  display: block;\n  height: 15px;\n  width: 25px;\n  url: (‘images/icon.png’’);\n  margin-right: 5px;\n} The result: Now we have successfully added an icon before the text. Easy, right? Clearing Floats After elements are floated , another one needs to be added in order to clear that float. You can avoid adding a new element and simply using a pseudo one. Let's say we have this situation: We can use the next code to achieve clearing of the floats. HTML <div class=\"box-container\">\n  <div class=”box”></div>\n  <div class=”box”></div>\n</div>\n<p>Lorem ipsum dolor amet truffaut kombucha roof party iPhone forage farm-to-table.</p> CSS .box-container:before,\n.box-container:after {\n  content: \"\";\n  display: block;\n}\n\n.box-container:after {\n  clear: both;\n}\n\n.box {\n  height: 100px;\n  width: 100px;\n  background-color: #C98EED;\n  margin: 5px;\n  float: left;\n} Now, let's take a look at the result. By using this method we are clearing the float and the paragraph is moved below the two elements. Using a Background Image We can also add a background image to a pseudo element. This is commonly used when styling a header. HTML <h2>Hello World</h2> CSS h2:after {\n  content: “”;\n  width: 100%;\n  height: 30px;\n  background: url(‘underline.png’) center center no-repeat;\n  display: block;\n} The result achieved: Browser Support As with everything else in CSS, browser support needs to be checked. By consulting the Can I Use service, we see that these pseudo classes have a high browser support ( over 98% ) and we won’t have a headache when using them. Summary Here, we have explained basic principles of the CSS pseudo elements. The examples illustrate just some of the many possible usages. Dont't worry if it's not completely clear in the beginning. A little practice goes a long way. Hopefully, this article will help with any future projects. Thank you for reading! If you liked this article be sure to subscribe to our newsletter for more great content!", "date": "2018-05-05"},
{"website": "Kolosek", "title": "Git Reset, Revert and Checkout", "author": ["Kristina P."], "link": "https://kolosek.com/git-reset-revert-and-checkout/", "abstract": "Git toolbox provides multiple unique tools for fixing up mistakes during your development. Commands such as git reset , git checkout , and git revert allow you to undo erroneous changes in your repository. Because they perform similar operations, it is very easy to mix them up. There are a few guidelines and rules for when each command should and should not be used. Let's take a look! Be careful! You can't always redo after an undo . This is one of the few areas in Git where you may lose some work if you do it wrong. Undoing with Git Commands We will start off by clarifying the main differences between these three commands. Checkout: Use this to move the HEAD pointer to a specific commit or switch between branches. It rollbacks any content changes to those of the specific commit. This will not make changes to the commit history. Has potential to overwrite files in the working directory. Revert: Rollback changes you have committed. Creates a new commit from a specified commit by inverting it. Hence, adds a new commit history to the project, but it does not modify the existing one. Has the potential to overwrite files in the working directory. Reset: Use this to return the entire working tree to the last committed state. This will discard commits in a private branch or throw away uncommitted changes! Changes which commit a branch HEAD is currently pointing at. It alters the existing commit history. Can be used to unstage a file. Every command lets you undo some kind of change in your repository, only checkout and reset can be used to manipulate either commits or individual files. Using the Commands There are many different ways you can undo your changes , it all depends on the current scenario. Selecting an appropriate method depends on whether or not you have committed the change by mistake, and if you have committed it, whether you have shared it or not. Undo Public Changes Scenario: Image that you did git push in hotfix branch for commits you didn't want to make yet. Solution: The safest way to fix this is by reverting your changes since it doesn't re-write the commit history. git checkout hotfix\ngit revert HEAD~1 Result: You have successfully undone committed changes! Everything that was changed in the old commit will be reverted with this new commit. Git forces you to commit or stash any changes in the working directory that will be lost during the checkout. You can think of git revert as a tool for undoing committed changes, while git reset HEAD is for undoing uncommitted changes. Undo Local Changes Scenario: You started working on a feature, but you didn't like the end result. These changes haven't been shared with anyone else. Solution: You want to undo everything in that files to the previous state, just the way it looked in the last commit . git checkout file_name.rb Result: File file_name.rb has been reverted to a state previously known to Git. Note that this removes all of the subsequent changes to the file! You can use git checkout branch_name to switch between branches. Git forces you to commit or stash any changes in the working directory that will be lost during the checkout operation. Undo Private Changes Scenario: You've made some commits locally in the hotfix branch but everything is terrible! You want to remove the last two commits from the current branch. Solution: Reset the hotfix branch backward by two commits as if those commits never happened. git checkout hotfix\ngit reset HEAD~2 Result: Our git repository has been rewinded all the way back to the specified commit. Those left out commits are now orphaned and will be removed the next time Git performs a garbage collection . For now, then their contents are still on disk. You can tell Git what to do with your index (set of files that will become the next commit) and working directory when performing git reset by using one of the parameters: --soft : Tells Git to reset HEAD to another commit, so index and the working directory will not be altered in any way. All of the files changed between the original HEAD and the commit will be staged. --mixed : Just like the soft, this will reset HEAD to another commit. It will also reset the index to match it while working directory will not be touched. All the changes will stay in the working directory and appear as modified, but not staged. The main difference between --mixed and --soft is whether or not your index is also modified. Check more on git-reset-guide . --hard : This resets everything - it resets HEAD back to another commit, resets the index to match it, and resets the working directory to match it as well. Tips and Tricks We will cover two additional things that can come in handy during your Git adventures. Fix the Previous Commit Message Scenario: Everyone makes typo mistakes when writing commits and this is completely fine! It can be easily fixed before you do a git push . Solution: Just run git commit --amend or git commit --amend -m 'The new message' . This will update and replace the most recent commit with a new commit. Redo After Undo Scenario: You have done a git reset --hard for some unwanted changes, but then you realized that you actually needed them. Solution: git reflog comes to your rescue! It is an amazing command for recovering project history and it can recover almost anything. Hope this three tools will help you whenever you need to undo your recent changes. Subscribe and stay tuned for the upcoming articles!", "date": "2018-05-05"},
{"website": "Kolosek", "title": "CSS Formatting", "author": ["Tatjana B."], "link": "https://kolosek.com/css-formatting/", "abstract": "During our work on multiple projects, there often is a confusion on how to use CSS properly. This document is here to provide a clarification. The SASS 3 preprocessor introduces a new syntax known as SCSS which is used in our projects. One of the most important things to learn is nesting in Sass . The two most frequently used guide systems are RSCSS and BEM . We will go through the basics of both systems in order to ensure they will be used properly in any current and future projects. General Rules First, we will take a look at some general CSS rules that should be followed. When writing CSS, classes should be used, while IDs should be avoided . Use the SCSS syntax, never the SASS syntax. Use two spaces for indentation. When using multiple selectors in the rule declaration, give each selector its own line . When a margin or padding helper class needs to be used, first see if it could be incorporated into the elements CSS rules, to avoid having too many classes added to a single element . Do not nest selectors more than 2 levels deep . RSCSS Components When working with RSCSS you should think in components . Each piece of UI should be thought as an individual component. Classes of components should be named with two words, with a dash in the middle. Some of the naming examples include: search-form, photo-container, primary-button. Elements Each component contains elements . Classes should have only one word . If an element contains multiple words, they should be joined together to make one word. For example: userimg, smalltext, navlink. Using tag names and ids while writing your CSS should be avoided. Variants Variants can be used for** both component and element names**. Class names for variants are prefixed with a dash . For example: class=\"button-primary -large\", class=\"avatar -round\", class=\"input-form -wide\". In the example below, we will break down the components into elements and show a real life usage of RSCSS. The image shows a simple input field with a button and placeholder text. First, we will identify the component and break it down to elements . The component includes the input field and submit button. Now, it is time to write the CSS classes. We will name the component, element, and variable . .signup-form {\n   .inputfield {\n     ...\n   }\n   .submitbtn {\n     ...\n     \n     &.-inverted {\n       ..\n     }\n   }\n} For naming the elements, we connected the two words (didn't use a dash or underscore). A variable was used for defining the style of the button. Therefore, both submitbtn and -inverted of the classes will have to be used on the button element. BEM BEM is a methodology that based on the Block - Element - Modifier system. Only class name selectors are used, ids are to be avoided. Blocks Blocks can be nested, or can interact with each other. They are similar to components in RSCSS , and are semantically equal. Bloks usually have a class name with one word, or two words separated by a dash. Block names may consist of Latin letters, digits, and dashes. Elements Elements are a part of the block. Element names may consist of Latin letters, digits, dashes and underscores. The class name is formed with the name of the block plus two underscores and the element name . For example: \" forminput \". Modifiers Modifiers are used on elements to show a change in appearance, behavior or state. An elements design is changed by adding or removing a modifier. Modifier names may consist of Latin letters, digits, dashes and underscores. A modifier class name is formed by taking the name of the element class and adding two dashes plus a name of the modifier. When an element has a modifier, it must have both the element class and modifier class. For example: \" blockinput blockinput--dashed \". In the next example, we will show in a practical example of the BEM methodology. The above image shows a block which has the class \" form \". It consists of an input field and a submit button. Next, we have identified the elements within the block. Those elements are \" input \" and \" submit \". The \" submit \" element has an appearance modifier which makes the button wider. According to all of this information, our stylesheet will be written as: .form { }\n.form__input { }\n.form__submit { }\n.form__submit--wide { } The HTML file will look like this: <form class=\"form\">\n  <input class=\"form__input\" placeholder=\"your email address\" />\n  <input type=\"submit\" class=\"form__submit form__submit--wide\" />\n</form> We hope this article helped you understand the basics of RSCSS and BEM, as well as the class naming conventions. Check out other detailed articles related to CSS properties such as this one: CSS Positions , SASS and LESS Nesting , CSS Columns .", "date": "2018-05-05"},
{"website": "Kolosek", "title": "State Management in React Apps - Part I", "author": ["Kristina G."], "link": "https://kolosek.com/react-state/", "abstract": "Previously we have learnt how to properly use JSX , and how React components communicate with each other . Yet, we still didn't cover another very important question: where to store information that our application cares about. Today we're talking about application state management in React. There are a lot of ways to handle application state but first, let's take a look at the simplest one - components' state. React Components' State You might have previously seen this.state . A component has its' local state, an object with a purpose to keep information important to the component, like that movie list you were supposed to render . This local state is firstly initialized in the constructor, like this: constructor() {\n    super();\n    this.state = {\n        itemKey: defaultItemValue,\n        ...\n    };\n} Keep in mind that you should define a default value for each of the state attributes you will use in the component, even if the initial value is undefined . What should I store in components' state? There is a debate on when to use components' state, and when to move to a bit more advanced approach: many developers in the past were forcing the philosophy that you shouldn't use this.state at all, but you should keep everything in the globally accessible state (i.e. redux state - which will be mentioned a bit later), even if it's just a simple toggle used for conditional rendering . However, there is no point in keeping a value in the redux state if it is only used inside this one component; and if the application that is being developed is pretty simple, there's no need to introduce yet another dependency like a separate library for state management. In the beginning, when learning React, it's better to stick to using this.state , as it doesn't require diving into yet another library. React components' state is asynchronously updated. You will use this.setState function to update your state. However, there is a thing to always keep in mind: you shouldn't use setState two times in a row when one setState depends on the previous one, due to its' asynchronous nature. // assuming this.state.count === 0\nthis.setState({\n    count: this.state.count + 1\n});\nthis.setState({\n    count: this.state.count + 1\n});\n// it doesn't necessarily mean that this.state.count will be 2 now However, you can use so called functional setState for setting the state dependent on previous state or on some of components' props : this.setState((previousState, currentProps) => {\n    return {\n        count: previousState.count + 1,\n    };\n}); Using functional setState is the best way to use setState . If you want to change multiple values kept in the state, you don't need to call setState multiple times: // \"standard\" way\nthis.setState({\n    item1: value1,\n    item2: value2,\n});\n// \"functional\" way \nthis.setState((previousState, currentProps) => {\n    return {\n        item1: value1,\n        item2: value2,\n    };\n}); The state shouldn't be mutated. This applies both to simple components' state and some bit more advanced ones, like third-party redux state. Components' state should only be changed by using setState function. While you can just use this.state.disabled = true , it won't trigger rerendering of the component. There is no prevention of mutating items kept in the state, so you have to care about not mutating them yourself. So far we've covered React components' state and its' three basic concepts: it's immutable , asynchronous and local . It is a quick way to handle storing information in simple apps, but also for local variables that should be accessed from multiple places inside a components' instance, even in really big and complex applications. However, for more complex applications, for components that are too dependent on each others' state , and for better handling of the data used by an application, there are third-party libraries like Redux, Flux, CerebralJS and many other, which provide more advanced ways to handle app state. We'll talk more about these next time. Subscribe today and we'll inform you when more reactive content comes out!", "date": "2018-06-05"},
{"website": "Kolosek", "title": "Problem Solved: Navigation on Scroll", "author": ["Tatjana B."], "link": "https://kolosek.com/navigation-on-scroll/", "abstract": "A challenge we recently faced was that we needed to create a navigation that shows only when scrolling up. How did we solve it? Well, firstly, the HTML for the form was created. Keep in mind that while creating the form, Bootstrap was used. Here we have solved the problem using CSS and jQuery. Some of the useful CSS properties that should be learned are relative font size , columns , relative and absolute positioning . Now, let's move on. Then, we created the static navigation and the navigation that should appear on scroll up. <nav class=\"main-navigation navbar navbar-expand-lg\">\n  <a class=\"navbar-brand\" href=\"/\"></a>\n  <button class=\"navbar-toggler custom-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n     <span class=\"navbar-toggler-icon\"></span>\n  </button>\n  <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n    <ul class=\"navbar-nav ml-auto\">\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current) </span></a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"#\">First link</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"#\">Second link</a>\n      </li>\n    </ul>\n  </div>\n</nav> We created two identical navigations , one beneath the other. The difference was: one should appear when scrolling up and have a different background, while the other should remain static at the top of the page. In order to do this, these navigations had to have different identifiers . The navigation that appears on scroll had a class \".navigation-bar-scroll\", while the static navigation had a class with a different name so that the styles won't get mixed. We used the following SCSS for the navigation that appears on the scroll: .navigation-bar-scroll {\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  z-index: 1000;\n  \n  &.is-hidden {\n    opacity: 0;\n    -webkit-transform: translate(0,-60px);\n    transition: .5s ease;\n  }\n  \n  &.is-visible {\n    opacity: 1;\n    -webkit-transform: translate(0,0);\n    transition: .5s ease;\n  }\n} Then, we used the following JQuery code to implement the \"show on scroll up\" functionality. var previousScroll = 0;\n\n   $(window).scroll(function(){\n\n     var currentScroll = $(this).scrollTop();\n     \n     if (currentScroll > 0 && currentScroll < $(document).height() - $(window).height()){\n\n       if (currentScroll > previousScroll){\n         window.setTimeout(hideNav, 300);\n\n       } else if (currentScroll == previousScroll) {\n         window.setTimeout(visibleNav, 300);\n       }\n        else {\n         window.setTimeout(showNav, 300);\n       }\n  \n       previousScroll = currentScroll;\n     }\n     \n     /* make the scroll navigation disappear when it is scrolled on top */\n\n     if ($(window).scrollTop() <= 150) {\n         $('#navigation-scroll').css('display', 'none');\n     } else {\n       $('#navigation-scroll').css('display', 'flex');\n     }\n\n   });\n\n   function hideNav() {\n     $(\".main-navigation-scroll\").removeClass(\"is-visible\").addClass(\"is-hidden\");\n   }\n   function showNav() {\n     $(\".main-navigation-scroll\").removeClass(\"is-hidden\").addClass(\"is-visible\");\n     $(\".main-navigation-scroll\").addClass(\"shadow\");\n   }\n\n }); We have achieved the effect of a navigation appearing when scrolling up . This navigation bar will disappear when the scrolling reaches the top, while the second static navigation will be located at the top of the page. Looks pretty cool, doesn't it? Here's our final tip: navigations should be identical so users don't get confused. The only difference you can add is a different background color for the navigation that appears on scroll up, so the links of the navigation stay clearly visible on the page with a lot of content. This is just one of the many ways you could improve the design of your website . Hope you found this short blog post helpful! Thank you for reading! :)", "date": "2018-07-05"},
{"website": "Kolosek", "title": "10 Website Redesign Tips for 2018", "author": ["Aleksandra M."], "link": "https://kolosek.com/website-redesign-tips-2018/", "abstract": "In 2018, a website is one of the most important representations of your business. It provides visibility , 24/7 accessibility and is proved to be an effective sales channel . However, if you want your website to deliver a significant return on investment (ROI), it needs to be well-designed and built specifically for users’ eyes and preferences. Why is that? Let’s see. Picture the following situation: you, as a CEO of your company, should hold a meeting first thing tomorrow, at 9 AM. Now, would you walk into that meeting completely unprepared and dressed in a hoodie? Probably not. You would dress for the occasion. So, just like you need to dress to impress you also need to redesign to shine online. You need to make a good first impression. No, not good. The best! Now, we want you to have the best possible “suite” there is and that is why we decided to write about this year’s website redesign tips. By now you are probably thinking: why shouldn’t I just buy a new suit? Precisely, why shouldn't you start all over again and build a new website? Well, for starters, you have to be aware that rebuilding a site means creating new databases, dealing with servers, code and every part of the back-end side. On the contrary, redesigning usually requires improvements in website's visual elements without making changes in the used technology. Additionally, rebuilding is a process that can take too much time and resources . Therefore, if your business website is functioning properly but needs just a bit of touch in design, there is no point in making a new website. Additionally, by doing a redesign you will minimize costs while still getting that “fresh look” . If you are still hesitant about making changes in the redesign, check out the following facts : ESPN.com’s revenue went up by 35% after they incorporated community suggestions into their homepage design. Eighty-eight percent of online consumers would not return to a website if they had a bad experience. As Invision further states, first impressions are 94% design-related. As you can see, a first impression is the one that counts . What can make a good first (online) impression? Well, a website that is mobile-friendly, that has good navigation and visible contact information. These are just some basic website redesign tips. But, where to start? How to make sure your new design gets you more users and leads? It's pretty simpleーstart with planning. We will cover the planning part in some other article. For now, all you need to know is without planning the costs can easily go up and the release of the project can be delayed. Now, let's get to the actual website redesign tips that will help you be more visible and easily reachable to your users/leads: Tip No. 1: Lower Page Loading Time We mentioned the importance of having a fast page in the article that covers 10 ways to improve your website design . Now, let's dig a bit deeper. It is a well-known fact that people don’t like to wait for anything . Unfortunately, impatience is even more emphasized in the digital world. So, remember that your user doesn't have the time to wait for a web page to load. Let’s check the actual facts. Did you know that slower page load can directly affect your revenue ? More precisely, did you know that it can result in a significant drop in revenue, in some cases 1% loss for every 100ms delay ? If this information didn’t make you think maybe this one will: almost 33% visitors bounce when page speed is 7 seconds long. Fun fact: There is no difference between page speed and page load time. These statements just prove that lowering page loading time is one of most significant website redesign tips you should have in mind. Want to improve it? Start with checking your current page speed . Tip No. 2: Include a Web Animation This is one of the newest website redesign tips. Web animation goes hand in hand with lowering page loading time. Why? Because both of these elements are affected by impatient users. How are these tips connected? Well, as Telegraph once stated, people nowadays have lower attention span than a goldfish . That being said, a visitor doesn’t have the time to wait for the page to load or to read long contentーif it takes to much time to read it, there is a good chance something else will catch visitor's attention. If your website is not interesting or fast enough, chances are you will be left with just a handful of users. So, where to include a web animation? Well, according to Creative Bloq , you can include it in almost every part of the website. The most popular ones are included in logos or as a background videos on landing pages. Additionally, keep in mind that adding a hover over a button is always a good practice, as well. If you need some inspiration, be sure to check GENROD , Oleg Gert or Mathis-biabiany.fr . Tip No. 3: Make the Site Mobile-friendly If you can’t think of any good reason why you should make your website mobile-friendly, remember this: Google loves these types of websites . Why is that? Well, let's see what Google has to say. In March this year, Google officially announced mobile first indexing . This means that the mobile version of your website is a starting point which Google includes in its index (which is how the rankings are determined). But, don't worry, if your site doesn't have a mobile-friendly version, the desktop one is the one that counts. However, a site that has a mobile experience will be ranked better than the one that doesn't have. What do you get by making the website mobile responsive? For starters, credibility and reputation . Additionally, your business will be perceived as modern and important in the community. Making your website mobile-friendly is one of the best website redesign tips we can give you. Tip No. 4: Don’t Forget About SEO Never underestimate an SEO’s role in creating content. You might think that quality content has a way to find its path to users' hearts. Although it is trueーquality content can attract more usersーit is not nearly enough. A content has to be optimized for both browsers and readers . It has to be Google-friendly while still being easily readable. If you a skeptic, check the facts! According to Hubspot , 61% of marketers pay attention to SEO to grow their organic presence. Additionally, 40% of marketers agree that the toughest task in SEO is adapting to changes in search algorithms . In order to make this process a bit easier you should know that, for 2018, one of the biggest website (re)design tips is adding Robots Meta tags , which provide search engines with instructions on how a content should be indexed and presented in results. None of the Meta Robots tags are visible to website visitors but can work wonders. Tip No. 5: Add Even More Optimization This time we are talking about conversion rate optimization. What is a conversion rate optimization? According to Moz.com , this type of optimization consists of ways to increase the number of visitors who are willing to take an action. creating your landing pages so a user can easily contact you, make a purchase or make any other move. In short: this is one of the website redesign tips that is going to help users reach your CTA in no-time . Unlike the SEO optimization that takes time for Google to recognize it, conversion optimization doesn’t require that much time to get you results . Keep in mind that it can bring results quickly but it requires testing and a bit of time to find what really works. So, what do you need to do in order to have the right CRO? Analyze how users move through the site and which actions they take. Is there anything that is stopping them from making a conversion? Tip No. 6: Flat Design 2.0 Yes! Flat design 2.0 has some extra cool features. Let’s back up a bit. What is a flat design? This is a minimalistic graphics style that uses features in a two-dimensional space. If you can remember, 2000s were full of graphic website elements. Suddenly, the times changed一a minimalistic, 1.0 approach to design was supposed to offer the best user experience. However, it didn’t manage to deliver. Although it was created as an approach that will lead a user to call-to-action, somehow users missed CTAs and were even more confused. Then we said hello to the 2.0 version. Now, the second version of the flat design is full of gradients, highlights, and shadows . Flat design 2.0 is all about making depth and getting the 3D, real-feel of this type of design. One of the best website redesign tips we can give you: be sure to include it. You won’t regret it. Check out these websites for inspiration: Supremo and Logram . Tip No. 7: Social Media Links Social media buttons or links are a necessity nowadays. Did you know that one of the ways you can boost page and domain authority is to share a content on social media? However, social media’s role is not just in increasing traffic. These links build visibility and credibility in your community. So, where should you put social media links? Well, it’s up to you to decide whether you want to go with top, middle or the bottom of a webpage. However, the important thing is to make those links open in a new window , so your visitors don’t leave the website. Tip No. 8: Colors & Typography Colors and typography are two basic elements in web design so be sure to follow all the trends that involve these two elements. Currently, one of the major web design trends is a gradient . In 2018, gradient moved towards typography . If this sounds too plain to you, consider adding a gradient highlight . On the other hand, if you are not feeling this gradient trend don’t worry一there’s a backup plan. Try adding image-filled typography to your landing page. You’ll see, it can make quite a difference and a modern feel to your website. If these trends did not impress you or just don’t go along with what you had in mind, be sure to check the Design’s Hack article to find the one trend that will suit you the best. When it comes to choosing colors, there are no website redesign tips you should follow. That being said, we have to mention a color of the yearー Ultra Violet (18-3838) . The good thing about purple is that you can use it muted, saturatedーit is easily adaptable to any industry. Check out these examples on image-filled typography ( Nurture Digital ) and using purple in the design ( Neurohive.io ). Tip No. 9: Progressive Web Apps (PWA) We are sure you have heard about this term. If you are not familiar with it, get on this bandwagon since this is one of the website redesign tips you definitely shouldn’t skip. In 2018, PWAs are going to take over the digital world. Why is that? Because these types of apps, provide the best of both worldsー a website and an app . Let’s check the statistics. According to AppInstitute , user engagement can be increased by 136%, while conversions can increase up to 52% when you include PWA in your web design. So, what should you include in a PWA? Should you add push notifications or animated page transitions ? Or both, perhaps? Well, our advice is this: try to mix the best sides of websites and apps to get the greatest results. In fact, don’t think too much about it. Let the designer handle it. He/she should know how to include these elements and create a perfect user experience (UX). Tip No. 10: Make Constant Improvements When you are done implementing all the previously mentioned tips, there is just one more thing you should knowーthose tips are a great starting point. So, if you really want to make the website redesign pay off, you constantly need to make UX updates and improvements . There is no success without constant enhancements in web design. And that's it! These are the 10 website redesign tips you should bear in mind. So, what comes next? Testing and launching the project. Testing and Launching Once the website redesign is completed, you probably can't wait to launch it. However, there is one more step before the official launch that will make sure all your efforts paid off. The step in question is testing. Here are some questions you should ask yourself while testing: Does the website function/look the way it was planned? Do the old pages redirect to new ones? Is there a backup plan if the site crashes? If you have positive answers to all these questions (and many more ) and feel you can move on to the launch. Once you launch the website, our advice is to never stop testing and improving . How are you going to manage that? Add a survey regarding the new design on your website and acquire users’ opinions first hand. In the End... Should You Do All This Work by Yourself? Definitely not! There is a whole industry dedicated to improving user experience in web design. So, instead of trying to do it all by yourself, leave it to the professionals. Whether you decide to go with a development company or a freelancer please make sure you found the right one. A good web designer knows all the principles of web design and how to meet previously defined goals. What is your experience with redesigning a website? Did you implement all these tips? Do you have anything to add?", "date": "2018-06-05"},
{"website": "Kolosek", "title": "8 Questions to Ask an App Development Company", "author": ["Aleksandra M."], "link": "https://kolosek.com/8-questions-to-ask-an-app-development-company/", "abstract": "After giving it a lot of thought, you decided to partner with an app development company instead of hiring freelancers of finding employees to do it. Congratulations! One of the biggest decisions regarding your business is now off your shoulder. But, don’t relax just yet, you still have a lot of work to do . What do we mean by that? Wellーsure, you have made a huge step forward in creating the actual productーbut now you have to focus on finding the right development company. Although there are sites that provide an insight on “top 10”, “top 20” or even “top 100” app development companies, you have to be aware of the fact there were over 12 million mobile app developers in the world in 2016 . That being said, you also should take into account the prediction that the number of developers will raise up to 14 million by 2020. That’s a lot! So, let’s just assume that a third of them work for development companies. That, again, means there are millions of developers, thousands of companies . So, how will you choose the right web and mobile app development company? Let’s start with the search first. When it comes to choosing the right company to partner with , you are most likely going to rely on your friends’ and family’s recommendation. And that’s greatーdon’t get us wrongーbut choosing a company solely based on location seems a bit ridiculous. Instead of trying to limit yourself you can search for a company online and visit some popular development events. It’s always a great move to meet your future partners in person. What are we trying to say? Whatever you do, before making the final decision please make sure that you have explored all the options in order to find the right app development company. Now that we got that out of the way, there is only one question left: how are you going to choose The One? Let’s say you have 10 companies on your list. Which one will you choose? What is the parameter which can make a company stand out? In one of our articles, we have mentioned that it can come in handy to have a recruiter or an expert by your side when choosing developers to partner with. Why is that? Because a recruiter knows what questions to ask. When it comes to development companies, things are a bit different. From our experience, every app development company looks at a potential client as a tabula rasa . We don’t mean to be disrespectful. On the contrary, every client has a certain level of app development knowledge and experience and a company must respect that. That is why a top app development companies always try to provide a client with as much information as possible so he/she can completely understand a product development process, the technology behind it and other important elements. However, it can’t hurt to prepared and learn more about that company and development process before you start reaching out to it. We have to admit that, sometimes, companies forgot to mention a thing or two about the way they work, which project management tools they use or some other information. That is precisely why you should be prepared and step in with the questions. In order to make sure you are asking a company the right questions, we made a list to help you get going. Without further ado, let’s get to these questions. Q1: How Long Have You Been Working as an App Development Company? It is completely natural to ask about company’s experience. The longer a company is in the market, the more knowledge and experience it has. Be sure to pay attention to its working experience as well as a client profile. If the company has never worked before with a startup, chances are you won’t come across much understanding and support you need. Q2: Can You Provide a Portfolio? If a company has nothing to hide (or be ashamed of) the obvious answer to this question should be Yes . By checking a company’s portfolio you will be able to see previous apps they have built, get to know its aesthetics and the way of work. A timetable can also be a useful insight to see how long usually takes a company to develop an app. In short, you will be able to get an impression if the cooperation is even a possibility. What more should you look for? Well, having multiple (satisfied) clients is always a good parameter to measure the success of an app development company. However, if you are not sure that what the company is portraying is the truth, you can always ask for a contact information of its former clients . It can be extremely useful to hear what the “other side” has to say about their experience with working with the company in question. There is just one thing we have mention. Remember: it is one thing to hire a team to create a bug-free app in no-time but it is completely other to have a product development process that is stress-free and developers and designers that are reliable and a joy to work with. You don’t need just efficient developers (you don’t need robots), you need humans that know how to properly communicate issues and that you are not afraid to talk to openly. Which leads us to our next question. Q3: How Big Is Your Team? Team structure is one of the most important factors you should have in mind. From our experience, for building an app you need at least two developers and one to two designers. Keep in mind that development companies come in all sizes ーsome of them have larger, some smaller teams. However, you have to be aware that the factor that makes an app development company so attractive is not the number of team members but the fact that those developers and designers know how to truly work as a team. They know each other’s strengths, weaknesses and are willing to work together until they find the solution. It is up to you to decide whether you want to cooperate with a small or a big team. Be aware that the pricing point can be a deciding factor when choosing the size of a team. And remember, a reliable team will not hesitate to meet you in person (even if the team in question works overseas). We’ve mentioned pricing. Let’s talk more about rates for a moment. To the next question! Q4: What Is Your Pricing Structure? Sometimes even if the size of a team, team structure and portfolio seem on point, developers’ and designers’ rates can be the most important factor. What do we mean by that? Well, depending on the part of the world, developers’ and designers’ hourly rates can vary. For example, North America has the highest hourly rates, while the Asia the lowest ones . That being said, location is just one of the parameters you should keep in mind when it comes to pricing. As you have probably heard, the complexity of an app can have an effect on its costs. For example, mobile games are extremely popular nowadays but they require multiple elements to be included in the development process. On the other hand, there’s the fact that making a mobile game is one of the most lucrative parts of app development business . You do the math. Our advice is: do the math before you start reaching out to development companies. In most cases, your expenses will go up. That is why you have to be sure you know where you are looking into for an app development company. These four questions are the basic ones that you should always keep in mind when talking to a manager or C-level man of an app development company. However, there are some questions that go deeper into understanding the development process and that you have the right to ask. We have covered those questions as well: Q5: Can You Explain How You Make Apps? Even if you know how a software development process works, it can’t hurt to go through its steps with the potential development company. Here are some steps of a development process: Explaining your idea to a designer (or a team of designers). A designer (or a team of designers) creates a mockup and present the idea to you. Once you found common ground with a designer, developers take the lead. Developers choose the right platform (or platform), as well as technology, to create the app. A period of coding and pure programming comes next. Creating a beta version of the app. The final step is to release an app. We tried to explain development process as short as possible since some of the aspects of this process can vary depending on how an app development company works. What is the real reason you should ask this question? It’s pretty simple: because you need to know how much time you need to invest in this process. It goes without saying that a team will need your input but what you don’t know is how much of an input. Some teams like to do the work by themselves, some don’t. It’s up to you to decide what will provide the greatest results. Q6: Can You Estimate Costs of the Project? Oh, we wish it was that simple! This is a tricky question and here’s why. If you are asking a manager of the company to provide you estimates on schedule and costs in the next two minutes, you are probably making a huge mistake. If there is no deep discussion about the project itself, an app development company cannot provide you with a precise estimate . It is as simple as that. And there’s one more thing: keep in mind you will always find a company that can and will do it “faster”. The question is: will you get the same quality as you would by doing things differently, without rushing? It is up to you to decide. Q7: Who Owns the Code? This is such an important question! In most cases, this question has only one answer: YOU DO! We must mention that there are development companies that insist on owning the code and the project. Please don’t let this be an option! Let’s dig a bit deeper. First of all, the app was your idea and any app development company that agrees to turn it into an app is just “an executioner”. In business terms, this means that the app is your intellectual property . Think about it: if you are a founder of a startup that is likely going to want to find some investors or get acquired, you need to have your own product to offer to others. That being said, there is only one rule: even if a company is building a product for you, YOU are the owner. This might be a good time to mention an NDA (a non-disclosure agreement). An NDA is a form of a legal contract that ensures that all the knowledge, materials and information regarding the project are safe and protected between two you and the company. This means that only sides that have signed the contract have an access to this type of resourcesーno third parties are involved. If you get uncomfortable just thinking about it, remember that NDA is a common thing in the business world and there is nothing to be nervous about. A good app development company should, without a doubt, say yes to the suggestion of signing an NDA. Let’s just mention one more thing. What happens when your app comes to life when it is launched and ready to be used? Well, top app development company should be there to “support” the app after the launch . However, this is also a matter of mutual understanding and should be included in an NDA. You can include these post-release activities in the contract or you don’t have to. Our advice is to do it. By doing so you’ll keep the users happy by fixing all the bugs and glitches on time. Q8: If I Am Not Happy Can I Call off the Project? The answer to this question should be: of course. If you decided to work with a good app development company that respects its clients then it shouldn’t be a problem to make arrangement to call off the project. As we have mentioned in the text above, you are the legal owner of the project and the app is your intellectual property. If at any point, you decide that you are not happy with the progress, you have every right to call off everything . Keep in mind that some other company or team of developers should continue where the first development company left off. These 8 questions are the major ones you should ask every development company you are considering to partner with. But, there’s more. If you truly want to get know an app development company, you should be digging more into their development process. Check how they work, which technologies they use, ask about their project management tools. Since every development company uses different technologies, we decided to not get into too many details explaining these, technical questions. But we are going to name them all. Technical questions you should consider asking if you are thinking about partnering up with an app development company are: Which platforms do you cover? Is UX/UI design part of the development process? What languages, technologies, and tools do you use? Explain separately front-end development and back-end. Is TDD (Test Driven Development) a part of your process? How do you test apps? How can you guarantee a security of the app? Which project management methodology do you use? Do you use any project management tools? What communication tools do you use? How often will I get a project update? As you can see, these questions require knowing more than just a couple of things about the development process. If you are not familiar with these terms be sure to contact a project manager, recruiter or a developer to help you understand these questions and explain you the most important parts. Conclusion Finding a few development companies among thousands of them is a tough challenge. However, finding the right one among ten of them can even be a harder task to complete. That is why we have created this list of all the questions you should be asking your potential partner. Please remember: take the fate into your own hands by asking these questions and you’ll find the right app development company in no-time. We hope that this article will be your guide to a journey to hire the right company. Until next time! Are there any questions you believe are important that we haven’t mentioned? Tell us in the comment section below!", "date": "2018-05-05"},
{"website": "Kolosek", "title": "Textarea Tag Busted", "author": ["Tijana D."], "link": "https://kolosek.com/textarea-tag-busted/", "abstract": "The textarea is HTML tag mostly used for messages and comments. It is very similar to inputs, but because it provides an option to have more than one line of text, it is not presented as input [type=\"textarea\"]. In this text, all options of this tag will be present along with the often asked questions about it, and that will be all I believe exist related to textarea. Keep in mind that this text is second in line, after input [type=\"text\"] . About Textarea The default textarea tag is presented with border and graphic in the right bottom angle. It is a good practice to add a placeholder, just like in every input field. <textarea>\n </textarea> A default size of the textarea is defined with font-size of the text inside of it. So, if it isn't defined different, the height of the textarea is defined with 2 lines of text and width is defined with 20 text characters. Attributes Some of the most useful options for the textarea element can be defined with its attributes. There is a list of the most common: autofocus , readonly , required , disabled . All of these 4 attributes are pretty self-explained: autofocus makes textarea focused when the page loads, readonly , required and disabled attributes add just that state to the textarea. placeholder maxlength cols rows wrap These 5 attributes are used for styling and defining textarea more closely. With the placeholder attribute, you can add a placeholder, as in all input fields. The maxlenght specifies the maximum number of characters allowed. cols defines the \"width\" of a textarea by a number of the average character width (default value is 20) and rows defines the height of a textarea by the number of the text lines (default value is 2). The wrap attribute defines newline presentation on the submitted text. Values for these attributes are soft (default), off and hard . By choosing to turn the wrap off , text in the textarea will not break until you press return/enter. By choosing hard , the submitted text contains newlines and by choosing soft it isn't. For a better understanding of this attribute checkout html.com post . <textarea autofocus required placeholder=\"type your message\" maxlength=\"180\"  cols=\"50\" rows=\"6\" wrap=\"hard\">\n </textarea> For further styling you should use CSS, just keep in mind that option white-space:nowrap; doesn't work. Resize Problem There are a few problems with resizing related to textareas. To define height and width of the textarea you can use cols and rows attributes, or CSS standard styling (better). The next problem includes removing resize handle. So, you create a super nice design and everyone has an option to stretch textarea over it. Nah ah! This one is super easy to fix: textarea{\n     resize:none;\n } Also, a small but annoying thing about this tag we talk about is the default scrollbar on textarea in all versions of IE. Luckily, a solution is just a few lines. textarea{\n     overflow:auto;\n } The most often resize related problem though is autoresize. Unfortunately, there is still no option for textarea autoresize but here it is one of the hacks you can use. Reset Design Specific styling options for textarea are the same as ones for inputs. So, you can style border, background, text, placeholder text, states. I found a few examples of a non-standard textarea and it was difficult, so that proves that textarea is one ok-to-be-standard element. Closing Line The textarea tag is commonly used and its options are really simple. After you once read this text I'm sure you will master it! For more quick CSS knowledge check out next Kolosek newsletter.", "date": "2018-07-05"},
{"website": "Kolosek", "title": "Cherry Picking with Git", "author": ["Kristina P."], "link": "https://kolosek.com/cherry-picking-with-git/", "abstract": "Managing feature branches changes that aren't quite ready for a full merge can be a difficult task. Sometimes you don't want to push a whole branch into another, and only need to pick a few specific commits. This process is called cherry-picking . Why Cherry Pick? Let's take a look at the following scenario which will make it easier to understand how cherry-picking works. We are implementing new features for the next weekly sprint. Once the code is ready, we will push it to the development branch and open it up on the next public release when everything has been tested out. But, the client isn't pleased with all of the changes and is asking us to introduce only specific ones. Because not all features have been accepted for the next release, a git merge or git rebase would not produce the desired results since it will include all changes made in the last sprint. Cherry pick is the right answer! It focuses only on the changes included in the commit that implement the wished features without bringing along other commits. There are many other uses that this tool can offer: It is essential when it comes to bug fixing because bugs are fixed and tested in the development branch with their individual commits. You can avoid unnecessary conflicts by using git cherry-pick instead of other options that as well apply changes from the given commits, such as git diff . A useful tool whenever a full branch merge is not possible due to incompatible versions in the various branches. git cherry-pick is used to get the changes introduced to a sub-branch , without changing the branch. How to Cherry Pick? Let's cherry-pick a commit from the development and add it to feature branch by using the commit hash. We want to pick a commit C from the master. There are a few steps you should follow to get the job done: Obtain the commit hash. You can do this in two ways: By typing git log --oneline , to get the log of your commits history. Make sure you are on the correct branch: git checkout master . Selecting the commit hash from the GitHub page. Checkout to the branch that you want to insert the commit into, in our case this is the feature branch: git checkout feature . Cherry-pick the commit: git cherry-pick C . If you run the git log you will see that our cherry-picked commit at the top of the feature branch. It will have a new and different commit hash. Tips and Tricks If you want to select more than one commit at once, you can add their commit hashes separated by a space: git cherry-pick C D . You can cherry-pick a merge instead of a commit: git cherry-pick -m 1 <merge_hash> . Be careful! It is preferred to use git merge instead of git cherry-pick . When you cherry-pick a merge commit, it collapses all the changes made into that one commit. You lose the commit history. Be wary of cherry-picking a lot of commits out of order. The new sequence will be reflecting the way you cherry-picked, and not the chronological order of the original commits. Conclusion Cherry picking is commonly discouraged in the developer community. The main reason is that it creates duplicate commits and you lose the ability to track the commit history. You should always aim to use git merge . Merging nearby always overpowers cherry-picking. But it is worth taking a look at this unique Git feature! Share your experience with us. The upcoming cherry-picking season marks a new list of future articles! Subscribe to stay up-to-date!", "date": "2018-06-05"},
{"website": "Kolosek", "title": "Elixir - basic api guide", "author": ["Kolosek"], "link": "https://kolosek.com/elixir-basic-api-guide/", "abstract": "Elixir api guide Elixir represents relatively new programming language for wider audience. It was published back in 2011, and is in development ever since. His main trait is that adops functional pardigm because it is built on top of Erlang and runs on BEAM(Erlang VM). Elixir is designed for building fast, scalable and maintainable applications and with Phoenix these applications can be developed in web environment. Phoenix is web framework written in Elixir and it draws a lot of concepts from popular frameworks like Python's Django or Ruby on Rails. If you are familiar with those that is a nice starting point. Documentation Elixir/Phoenix is a great combination, but before starting writing an app, those who are not familiar with all concepts should first read following documentation. Elixir - Detail documentation, from Elixir basic types to advanced stuff like Mix and OTP, Programming Elixir by Dave Thomas is recommendation, ExUnit - Built-in framework for testing, Phoenix - Phoenix framework documentation with all concepts explained with examples and Ecto - Docs and API for Elixir's ORM. Setting up application Elixir ships with Mix which is built-in tool that helps compiling, generating and testing application, getting dependencies etc. We create our application by running mix phx.new company_api . This tells mix to create new Phenix app named company_api . After running this instruction mix will create application structure: * creating company_api/config/config.exs\n* creating company_api/config/dev.exs\n* creating company_api/config/prod.exs\n* creating company_api/config/prod.secret.exs\n* creating company_api/config/test.exs\n* creating company_api/lib/company_api/application.ex\n* creating company_api/lib/company_api.ex\n* creating company_api/lib/company_api_web/channels/user_socket.ex\n* creating company_api/lib/company_api_web/views/error_helpers.ex\n* creating company_api/lib/company_api_web/views/error_view.ex\n* creating company_api/lib/company_api_web/endpoint.ex\n* creating company_api/lib/company_api_web/router.ex\n* creating company_api/lib/company_api_web.ex\n* creating company_api/mix.exs\n* creating company_api/README.md\n* creating company_api/test/support/channel_case.ex\n* creating company_api/test/support/conn_case.ex\n* creating company_api/test/test_helper.exs\n* creating company_api/test/company_api_web/views/error_view_test.exs\n* creating company_api/lib/company_api_web/gettext.ex\n* creating company_api/priv/gettext/en/LC_MESSAGES/errors.po\n* creating company_api/priv/gettext/errors.pot\n* creating company_api/lib/company_api/repo.ex\n* creating company_api/priv/repo/seeds.exs\n* creating company_api/test/support/data_case.ex\n* creating company_api/lib/company_api_web/controllers/page_controller.ex\n* creating company_api/lib/company_api_web/templates/layout/app.html.eex\n* creating company_api/lib/company_api_web/templates/page/index.html.eex\n* creating company_api/lib/company_api_web/views/layout_view.ex\n* creating company_api/lib/company_api_web/views/page_view.ex\n* creating company_api/test/company_api_web/controllers/page_controller_test.exs\n* creating company_api/test/company_api_web/views/layout_view_test.exs\n* creating company_api/test/company_api_web/views/page_view_test.exs\n* creating company_api/.gitignore\n* creating company_api/assets/brunch-config.js\n* creating company_api/assets/css/app.css\n* creating company_api/assets/css/phoenix.css\n* creating company_api/assets/js/app.js\n* creating company_api/assets/js/socket.js\n* creating company_api/assets/package.json\n* creating company_api/assets/static/robots.txt\n* creating company_api/assets/static/images/phoenix.png\n* creating company_api/assets/static/favicon.ico Install additional dependencies if prompted. Next we need to configure our database. In this example we used PostgreSQL, and generally Phoenix has best integration with this DBMS. Open /config/dev.exs and /config/test.exs and setup username, password and database name. After setting up database, run mix ecto.create which will create development and test databases and after that mix phx.server . That should start server (Cowboy) on default port 4000. Check it up in browser, if you see landing page that's it, setup is good. All configurations are placed in /config/config.exs file. Creating API Before coding there are several parts of development that are going to be explained: Writing tests using ExUnit, testing both models and controlers, Writing migrations, Writing models, Writing controllers, Routing, Writing views, Authentication using Guardian and Channels. Note that following parts won't be described for whole application, but you'll get the idea. Testing and writing models While developing we want to write clean code that works, also think about specification and what that code needs to do before implementing it. That's why we're using TDD approach. First in directory test/company_api_web/ create models directory and then create user_test.exs. After that create a module: defmodule CompanyApiWeb.UserTest do\n    use CompanyApi.DataCase, async: true\nend On second line, we use macro use to inject some external code, in this case data_case.exs script that is placed in test/support/ directory among other scipts and async: true to mark that this test will run asynchronous with other tests. But be careful, if test writes data to database or in some sense changes some data then it should not run asyc. Think of what should be tested. In this case let's test creating user with valid and invalid data. Some mock up data can be set via module attributes as constants, for example: @valid_attributes %{name:    \"John\",\n                    subname: \"Doe\",\n                    email:   \" [email protected] \",\n                    job:     \"engineer\"\n                   } Ofcourse you don't have to use module attributes but it makes code cleaner. Next let's write test. test \"user with valid attributes\" do\n  user = CompanyApiWeb.User.reg_changeset(%User{}, @valid_attributes)\n\n  assert user.valid?\nend In this test we try to create changeset by calling method reg_changeset/2 and then asserting for true value. If we run test with mix test test/company_api_web/models/user_test.exs , test will fail ofcourse. First we dont even have User module, but we dont even have User table in database. Next we need to write a migration. mix ecto.gen.migration create_user generates migration in priv/repo/migrations/ . There we define function for table creation in sugar elixir syntax which then translates into appropriate SQL query. def change do\n  create table(:users) do\n    add :name, :varchar\n    add :subname, :varchar\n    add :email, :varchar\n    add :job, :varchar\n    add :password, :varchar\n\n    timestamps()\n  end\nend Function create/2 creates database table from struct returned by function table/2 . For detail information about field type, options, and creating indexes read docs. By default surrogate key is generated for every table, with name id and type integer, if not defined otherwise. Now we run command mix ecto.migrate which runs migration. Next we need to create model, so create models directory in lib/company_api_web/ and create user.ex file. Our model is used to represent data from database tables as it maps that data into Elixir structs. defmodule CompanyApiWeb.User do\n  use CompanyApiWeb, :model\n\n  schema \"users\" do\n    field :name, :string\n    field :subname, :string\n    field :email, :string\n    field :password, :string\n    field :job, :string\n  end\n  \n  def reg_changeset(changeset, params \\\\ %{}) do\n    changeset\n    |> cast(params, [:name, :subname, :email, :job, :password])\n    |> validate_required([:name, :subname, :email, :job])\n    |> validate_format(:email, ~r/\\ [email protected] \\S+\\.\\S+/)\n  end\nend On line 2, we use helper defined in lib/company_api_web/company_api_web.ex which actually imports all necessary modules for creating models. If you open file you'll see that model is actually a function, same as controller, view, channel, router etc. (If there is no model function you can add it yourself). Two important methods are schema (table <-> struct mapping) and changeset/2 . Changeset functions are not necessary, but are Elixir's way of creating structs that modify database. We can define one for registration, login etc. All validation and association checking can be done before we even try inserting data into database. For more details check Ecto.Changeset docs. If we now run test again, it should pass. Add as many test cases as you want and try to cover all edge cases. This should wrap creation of simple models. Adding association is going to be mention earlier. Testing and writing controllers Testing controllers is equally important as testing models. We are going to test registration of new user and getting all registered users in a system. Again we create test, this time in test/company_api_web/controllers/ with name user_controller_test.exs. With controller testing we're going to use conn_case.exs script. Another important thing about test that wasn't mention while testing models (cause we didn't need it) is setup block. setup do\n  user =\n    %User{}\n    |> User.reg_changeset(@user)\n    |> Repo.insert!\n\n  conn =\n    build_conn()\n    |> put_req_header(\"accept\", \"application/json\")\n\n  %{conn: conn, user: user}\nend Setup block is called before invokation of each test case, and in this block we prepare data for tests. We can return data from block in a form of tuple or map. In this block we will insert one user into database and create connection struct which is mockup of connection. Again constants can be used to setup data. @valid_data %{name:    \"Jim\",\n              subname: \"Doe\",\n              email:   \" [email protected] \",\n              job:     \"CEO\"\n             }\n\n@user %{name:    \"John\",\n        subname: \"Doe\",\n        email:   \" [email protected] \",\n        job:     \"engineer\"\n       }\n\n@user_jane %{name:    \"Jane\",\n             subname: \"Doe\",\n             email:   \" [email protected] \",\n             job:     \"architect\"\n            } Now let's write test that sends request for creating new user. Server should process request, generate password, create new user, send email with generated password and return user as a json. That sounds like a lot, but we'll go slow. Pay attention that you should try to cover all 'paths' and edge cases. First let's test with valid data, and then with invalid data. describe \"tries to create and render\" do\n  test \"user with valid data\", %{conn: conn} do\n    response =\n      post(conn, user_path(conn, :create), user: @valid_data)\n      |> json_response(201)\n\n    assert Repo.get_by(User, name: \"Jim\")\n    assert_delivered_email Email.create_mail(response[\"password\"], response[\"email\"])\n  end\n\n  test \"user with invalid data\", %{conn: conn} do\n    response =\n      post(conn, user_path(conn, :create), user: %{})\n      |> json_response(422)\n\n    assert response[\"errors\"] != %{}\n  end\nend Each test sends post request to certain path and then we check json response and assert value. Running this test with mix test test/company_api_web/controller/user_controller_test.exs will result in errors. We don't have user_path/3 function which means that route isn't defined. Open lib/company_api_web/router.ex . We'll add scope \"/api\" which will go through :api pipeline. We can define routes as resources, individually or as nested routes. Define new resource like this: resources \"/users\", UserController, only: [:index, :create] With this, Phoenix creates routes which are mapped to index and create functions and handled by UserController. If you open console and type mix phx.routes you can see list of routes and there are user_path routes, one with verb GET and one with verb POST. Now if we run test again, this time we'll get another error, create function missing. Reason for this is that we don't have UserController. Add user_controller.ex in lib/company_api_web/controllers . Now define new module: defmodule CompanyApiWeb.UserController do\n  use CompanyApiWeb, :controller\nend Next we need to create that create/2 function. Create function must accept conn struct(and also return it) and params. Params is struct which carries all data supplied by browser. We can use one powerful feature of Elixir, pattern matching, to match just the data we need with our variables. def create(conn, %{\"user\" => user_data}) do\n  params = Map.put(user_data, \"password\", User.generate_password())\n  case Repo.insert(User.reg_changeset(%User{}, params)) do\n    {:ok, user} ->\n      conn\n      |> put_status(:created)\n      |> render(\"create.json\", user: user)\n    {:error, user} ->\n      conn\n      |> put_status(:unprocessable_entity)\n      |> render(\"error.json\", user: user)\n  end\nend In our tests we send through post method params user: @valid_data , and that data is going to be matched with user_data . In User model define generate_password function, so we can generate random passwords for every new user. def generate_password do\n    :crypto.strong_rand_bytes(@pass_length)\n    |> Base.encode64\n    |> binary_part(0, @pass_length)\n  end Set the length of a password as you wish. Since the user_data is a map we are going to put new generated password inside that map with key \"password\". Although Elixir has try/rescue blocks they are rarely used. Usually combination of case and pattern matching is used for error handling. Function insert(note that we won't use insert! function cause it raises exception) returns one of two tuples: {:ok, Ecto.Schema.t}\n{:error, Ecto.Changeset.t} Based on returned tuple we send appropriate response. Since we're making JSON API, we should return data in json format. All data returned from controller is handled by appropriate view. If we run tests again, we are going to get another error. Last thing we need to do is to add view file. Create user_view.ex file in lib/company_api_web/views/ and inside define new module and render methods. defmodule CompanyApiWeb.UserView do\n  use CompanyApiWeb, :view\n  \n  def render(\"create.json\", %{user: user}) do\n   render_one(user, CompanyApiWeb.UserView, \"user.json\")\n  end\n  \n  def render(\"error.json\", %{user: user}) do\n    %{errors: translate_errors(user)}\n  end\n  \n  def render(\"user.json\", %{user: user}) do\n    %{id: user.id, \n      name: user.name, \n      subname: user.subname, \n      password: user.password, \n      email: user.email, \n      job: user.job}\n  end\n  \n  defp translate_errors(user) do\n    Ecto.Changeset.traverse_errors(user, &translate_error/1)\n  end\nend First render method is being called from controller, and in that method we call render_one/3 to which we pass key, view module, and template name, so we can pattern match method. Now we return data which is going to be encoded into json. We didn't have to call render_one/3 method, we could return json right away, but this is more convinient. Second render method renders errors provided by changeset struct in form of json. Built-in method Ecto.Changeset.traverse_errors/2 extracts error strings from changeset.errors struct. If we remove that one line which asserts that email has been sent, our tests will pass. This rounds up how we test and write controllers. Now you can test and write index method and add more test cases that covers more code. Email sending example There are several email libraries in Elixir, but in this project we decided to use Bamboo . After initial setup, its usage is fairly easy. Open mix.exs file and under deps function add following line: {:bamboo, \"~> 0.8\"} and then run following command: mix deps.get which will download dependency. After that add bamboo as extra_application in application function. In global config file add configuration for Bamboo: config :company_api, CompanyApi.Mailer,\n  adapter: Bamboo.LocalAdapter Here we're using Bamboo.LocalAdapter but there are other adapters also. Now, create module CompanyApi.Mailer and following line: use Bamboo.Mailer, otp_app: :company_api Before using mailer we should define email struct. Add into models directory Email.ex file(Note that you should first write test then add file but we'll skip that now). defmodule CompanyApiWeb.Email do\n  import Bamboo.Email\n\n  def create_mail(password, email) do\n    new_email()\n    |> to(email)\n    |> from(\" [email protected] \")\n    |> subject(\"Generated password\")\n    |> html_body(\"<h1>Welcome to Chat</h1>\")\n    |> text_body(\"Welcome. This is your generated password #{password}. You can change it anytime.\")\n  end\nend Function create_mail/2 returns email struct which we will use for sending. Before running tests we need to add configuration in /config/test.exs , same as before, only difference is in adapter which is now, Bamboo.TestAdapter. Adding this use Bamboo.Test allows as to use function such as assert_delivered_email in our tests. Now in UserController after successfull insert add next line: Email.create_mail(user.password, user.email)\n|> CompanyApi.Mailer.deliver_later This is going to create email struct and send it in the background. For asynchronuos sending there is Task module. If you wish to see sent mails, in router.exs add following: if Mix.env == :dev do\n  forward \"/send_mails\", Bamboo.EmailPreviewPlug\nend Now we can see delivered mails at localhost:4000/sent_mails . Authentication via Guardian So far we've have shown how to write tests, migrations, models, controllers, views and routing. One more important thing is authenticating user. Library of choice here was Guardian . It uses JWT (Json Web Token) as a method of authentication and we can authenticate Phoenix services and also channels. Great stuff. First add dependency {:guardian, \"~> 1.0-beta\"} in mix.exs file and run mix deps.get . In Guardian docs there is detail explanation how to setup basic configuration, but we're going to go step by step here. Open /config/config.exs and add following: config :company_api, CompanyApi.Guardian,\n  issuer: \"CompanyApi\",\n  secret_key: \"QDG1lCBdCdjwF49UniOpbxgUINhdyvQDcFQUQam+65O4f9DgWRe09BYMEEDU1i9X\",\n  verify_issuer: true Note that CompanyApi.Guardian is going to be module that we're going to create. You don't have to call it Guardian, maybe it's little redundant. Anyway, next thing is secret_key that has to be generated. This is example of one secret key, and it can be generated by running mix guardian.gen.secret . Create CompanyApi.Guardian module in lib/company_api/ . defmodule CompanyApi.Guardian do\n  use Guardian, otp_app: :company_api\n\n  alias CompanyApi.Repo\n  alias CompanyApiWeb.User\n\n  def subject_for_token(user = %User{}, _claims) do\n    {:ok, \"User:#{user.id}\"}\n  end\n\n  def subject_for_token(_) do\n    {:error, \"Unknown type\"}\n  end\n\n  def resource_from_claims(claims) do\n    id = Enum.at(String.split(claims[\"sub\"], \":\"), 1)\n    case Repo.get(User, String.to_integer(id)) do\n      nil  ->\n        {:error, \"Unknown type\"}\n      user ->\n        {:ok, user}\n    end\n  end\nend This module is going to be used when token is being created. We've put user id as a subject for token, in that way we can always get user from database. This may be the most convinient way, but it's not the only way. Next thing we're going to do is to set up guardian pipeline. Using Guardian with plugs is easy. Open lib/company_api_web/router.ex and add new pipeline: pipeline :auth do\n    plug Guardian.Plug.Pipeline, module: CompanyApi.Guardian,\n                                 error_handler: CompanyApi.GuardianErrorHandler\n    plug Guardian.Plug.VerifyHeader, realm: \"Bearer\"\n    plug Guardian.Plug.EnsureAuthenticated\n    plug Guardian.Plug.LoadResource, ensure: true\n  end This pipeline can be defined directly in router.ex file, or can be defined in separate module, but still needs to be referenced here. When user tries to call some service his request is going to pass through pipeline. Note that this pipeline is specifically for JSON API . Okey, first we define that we're using plug pipeline and reference implementation module and module that is going to handle auth errors (we're going to create it). Next plug verifies that token is in request header,plug EnsureAuthenticated ensures that valid JWT token was provided and last plug loads resource by calling function resource_from_claims/1 specified in CompanyApi.Guardian module. Since we're missing auth_error handling module add it in lib/company_api/ . defmodule CompanyApi.GuardianErrorHandler do\n  def auth_error(conn, {_type, reason}, _opts) do\n    conn\n    |> Plug.Conn.put_resp_content_type(\"application/json\")\n    |> Plug.Conn.send_resp(401, Poison.encode!(%{message: to_string(reason)}))\n  end\nend Poison is Elixir JSON library. Just add dependency {:poison, \"~> 3.1\"} in mix.exs. We've set up everything for Guardian and now it's time to write SessionController and handle login and logout. First we have to write tests. Create session_controller_test.exs. We're going to test user login and make it pass. We've already wrote tests for UserController so you know how to set up this one also. test \"login as user\", %{conn: conn, user: user} do\n    user_credentials = %{email: user.email, password: user.password}\n    response =\n      post(conn, session_path(conn, :create), creds: user_credentials)\n      |> json_response(200)\n\n    expected = %{\n      \"id\"        => user.id,\n      \"name\"      => user.name,\n      \"subname\"   => user.subname,\n      \"password\"  => user.password,\n      \"email\"     => user.email,\n      \"job\"       => user.job\n    }\n\n    assert response[\"data\"][\"user\"]   == expected\n    refute response[\"data\"][\"token\"]  == nil\n    refute response[\"data\"][\"expire\"] == nil\n  end We're going to try to login with valid credentials and we expect to get as a response user, token and expire value. If we run this test, it is going to fail. We don't have session_path route. Open router.ex file and in our \"/api\" scope add new route: post \"/login\", SessionController, :create We've put this route in \"/api\" scope becase our user doesn't need to get authenticated while he's trying to login. If we run test again, this time it is going to fail becase there is no create function. Let's add SessionController now and write login function. def create(conn, %{\"creds\" => params}) do\n    new_params = Map.new(params, fn {k, v} -> {String.to_atom(k), v} end)\n    case User.check_registration(new_params) do\n      {:ok, user} ->\n        new_conn = Guardian.Plug.sign_in(conn, CompanyApi.Guardian, user)\n        token    = Guardian.Plug.current_token(new_conn)\n        claims   = Guardian.Plug.current_claims(new_conn)\n        expire   = Map.get(claims, \"exp\")\n\n        new_conn\n        |> put_resp_header(\"authorization\", \"Bearer #{token}\")\n        |> put_status(:ok)\n        |> render(\"login.json\", user: user, token: token, exp: expire)\n      {:error, reason} ->\n        conn\n        |> put_status(401)\n        |> render(\"error.json\", message: reason)\n    end\n  end First line creates new map as a result with keys as atoms. Function check_registration/1 checks if user with given credentials exist in database. If user exists we sign him in, create new token and expire date. After that we set response header, status and render user. For rendering we need to create session_view.ex in lib/company_api_web/views/ . defmodule CompanyApiWeb.SessionView do\n  use CompanyApiWeb, :view\n\n  def render(\"login.json\", %{user: user, token: token, exp: expire})  do\n    %{\n      data: %{\n        user:   render_one(user, CompanyApiWeb.UserView, \"user.json\"),\n        token:  token,\n        expire: expire\n      }\n    }\n  end\n  \n  def render(\"error.json\", %{message: reason}) do\n    %{data: reason}\n  end\nend Now test should pass. Ofcourse more tests should be added, but that's up to you. Logout is fairly simple, Guardian.revoke(CompanyApi.Guardian, token) deletes token from header and that is all we need to do. With APIs there is no really logout, but this will work. Before adding new route for logging out, we need to define \"new scope\". Actually this is going to be the same \"/api\" scope again, but it will go through two pipelines now: pipe_through [:api, :auth] . Why are we doing this? Every new route that needs to be authenticated will be places inside of this new scope. Also if we want to logout, we need to be authenticated first. With this we've covered authenticating with Guardian. Later socket authentication is going to be mentioned, and it's even easier. Associations example Since this is a chat app, message history has to be saved somehow. We're going to add two more entities that will represent conversation between two users and user's messages. This will be a good opportunity to show examples of associations in Ecto. First entity that we're going to add is conversation entity. Conversations will belong to both user involved in chat, and user is going to have many conversations. Also conversations will have many messages which is second entity. Messages will belong to user and certian conversation. In this case user represents a person who sends messages. Other attributes of message are date and content. In a few sentences we've described our data model. Each of these data models will have their own tests, controllers and views, but since we've explained all of these stuff already, in this part we're going to focus on associations between these entities. Note that the only thing you need to do is to write function for creation of conversation, creation of messages and getting message history. Conversations Firstly, lets add conversations migration. Run command mix ecto.gen.migration create_conversations . Now we need to create table conversations with correct columns: def change do\n    create table(:conversations) do\n      add :sender_id, references(:users, null: false)\n      add :recipient_id, references(:users, null: false)\n\n      timestamps()\n    end\n\n    create unique_index(:conversations, [:sender_id, :recipient_id], name: :sender)\n  end As you can see, we're adding foreign keys sender_id and recipient_id and we are referencing users table. This will represent our two users in conversation. Both keys can't be null. Last thing we want to do is to create unique_index on both columns which correspond to unique constraint. We're doing this because we don't want duplicate conversations with the same ids. Lets create model now: defmodule CompanyApiWeb.Conversation do\n  use CompanyApiWeb, :model\n\n  alias CompanyApiWeb.{User, Message}\n\n  schema \"conversations\" do\n    field :status, :string\n\n    belongs_to :sender, User, foreign_key: :sender_id\n    belongs_to :recipient, User, foreign_key: :recipient_id\n    has_many :messages, Message\n\n    timestamps()\n  end\n\n  def changeset(changeset, params \\\\ %{}) do\n    changeset\n    |> cast(params, [:sender_id, :recipient_id, :status])\n    |> validate_required([:sender_id, :recipient_id])\n    |> unique_constraint(:sender_id, name: :sender)\n    |> foreign_key_constraint(:sender_id)\n    |> foreign_key_constraint(:recipient_id)\n  end Observe new functions. Functions belongs_to/3 and has_many/3 represents associations. Usually belongs_to/3 function is defined with a name and a referenced module, but this time since we're have two references to the same module we have to add a correspond foreign key column. Same story goes for has_many/3 association, association name and module(we're going to create Message module soon). Now the changeset. We've added two foreign_key_contraint/3 functions, one for each foreign key and unique_constraint/3 function (because of composite unique columns, only one has to specified). All of these contraints are checked on database level. Mesages Second entity is messages. Run mix ecto.gen.migration create_messages . Add create and table functions: def change do\n    create table(:messages) do\n      add :sender_id, references(:users, null: false)\n      add :conversation_id, references(:conversations, null: false)\n      add :content, :varchar\n      add :date, :naive_datetime\n\n      timestamps()\n    end\n\n    create index(:messages, [:sender_id])\n    create index(:messages, [:conversation_id])\n  end Same story as before. Two foreign keys, messages belong to user (sender) and conversation. This time we don't need unique contraint, so we just index mentioned fields. One look at the model: defmodule CompanyApiWeb.Message do\n  use CompanyApiWeb, :model\n  \n  alias CompanyApiWeb.{User, Conversation}\n\n  schema \"messages\" do\n    field :content, :string\n    field :date, :naive_datetime\n\n    belongs_to :conversation, Conversation\n    belongs_to :sender, User, foreign_key: :sender_id\n\n    timestamps()\n  end\n\n  def changeset(changeset, params \\\\ %{}) do\n    changeset\n    |> cast(params, [:sender_id, :conversation_id, :content, :date])\n    |> validate_required([:sender_id, :conversation_id, :content, :date])\n    |> foreign_key_constraint(:sender_id)\n    |> foreign_key_constraint(:conversation_id)\n  end Last thing we need to do is to add associations in User module: has_many :sender_conversations, Conversation, foreign_key: :sender_id\n has_many :recipient_conversations, Conversation, foreign_key: :recipient_id\n has_many :messages, Message, foreign_key: :sender_id With this we've set up our data model and you've seen brief example of Ecto associations. For many_to_many association read docs . Channels Essentially channels are Phoenix abstraction build on top of sockets. It is possible to have multiple channels over one socket connection. For detail explanations and understanding how channels recommendation is to read official documentation . Our goal is to send message via Websocket protocol, and we're going to start with writing channel tests. Documentation on channel testing is really helpful. Create chat_room_test.exs in /test/company_api_web/channels/ directory. In setup block insert one user into database, create connection and sign in user. We're going to test message sending. defmodule CompanyApiWeb.ChatRoomTest do\n  use CompanyApiWeb.ChannelCase\n\n  alias CompanyApi.Guardian, as: Guard\n  alias CompanyApiWeb.{ChatRoom, UserSocket, Conversation}\n\n  @first_user_data %{ name:    \"John\",\n                      subname: \"Doe\",\n                      email:   \" [email protected] \",\n                      job:     \"engineer\"\n                    }\n\n  @second_user_data %{ name:    \"Jane\",\n                       subname: \"Doe\",\n                       email:   \" [email protected] \",\n                       job:     \"architect\"\n                     }\n\n  setup do\n    user =\n      %User{}\n      |> User.reg_changeset(@first_user_data)\n      |> Repo.insert!\n\n    {:ok, token, _claims} = Guard.encode_and_sign(user)\n\n    {:ok, soc} = connect(UserSocket, %{\"token\" => token})\n    {:ok, _, socket} = subscribe_and_join(soc, ChatRoom, \"room:chat\")\n\n    {:ok, socket: socket, user: user}\n  end\n\n  test \"checks messaging\", %{socket: socket, user: u} do\n    user =\n      %User{}\n      |> User.reg_changeset(@second_user_data)\n      |> Repo.insert!\n\n    conv =\n      %Conversation{}\n      |> Conversation.changeset(%{sender_id: u.id, recipient_id: user.id})\n      |> Repo.insert!\n\n    {:ok, token, _claims} = Guard.encode_and_sign(user)\n    {:ok, soc} = connect(UserSocket, %{\"token\" => token})\n\n    {:ok, _, socketz} = subscribe_and_join(soc, ChatRoom, \"room:chat\")\n\n    push socket, \"send_msg\", %{user: user.id, conv: conv.id, message: \"Hi! This is message\"}\n    assert_push \"receive_msg\", %{message: message}\n    assert message.content == \"Hi! This is message\"\n    refute Repo.get!(CompanyApiWeb.Message, message.id) == nil\n\n    push socketz, \"send_msg\", %{user: u.id, conv: conv.id, message: \"This is a reply\"}\n    assert_push \"receive_msg\", %{message: reply}\n    assert reply.content == \"This is a reply\"\n    refute Repo.get!(CompanyApiWeb.Message, reply.id) == nil\n  end\nend Well, this seem like a lot, but lets go step by step. In setup block we connect to socket with generated token, and then function subscribe_and_join/3 joins user to listed topic. After that in test, those steps are repeated for second user and then conversation is created. Function push/3 allows us to send messages directly through socket while assert_push or assert_broadcast asserts for pushed or broadcasted messages. Running test is goint to result in errors. Open lib/company_api_web/channels/user_socket.ex and define new channel channel \"room:*\", CompanyApiWeb.ChatRoom . While here modify connect/2 and id/1 functions. We want to make that only authenticated users can connect to socket. def connect(%{\"token\" => token}, socket) do\n    case Guardian.Phoenix.Socket.authenticate(socket, CompanyApi.Guardian, token) do\n      {:ok, socket} ->\n        {:ok, socket}\n      {:error, _} ->\n        :error\n    end\n  end\n\n  def connect(_params, _socket), do: :error\n\n  def id(socket) do\n    user = Guardian.Phoenix.Socket.current_resource(socket)\n    \"user_socket:#{user.id}\"\n  end Line Guardian.Phoenix.Socket.authenticate(socket, CompanyApi.Guardian, token) provides authentication. Function id/1 returns socket id, and we set it as a user id. Now lets create new channel. In the same directory create channel_room.ex file, but for now leave it be. Since we are making private chat we need to know socket we are sending messages to. There are some ways of achieving that. Decision here was to store opened socket connections in a map {user_id: socket} . Elixir provides two abstractions for storing state, GenServers and Agent . For understanding concepts of GenServer or Agent documentation has to be read. Open lib/company_api/ and create channel_sessions.ex, this will be our GenServer for storing sockets. defmodule CompanyApi.ChannelSessions do\n  use GenServer\n\n  #Client side\n\n  def start_link(init_state) do\n    GenServer.start_link(__MODULE__, init_state, name: __MODULE__)\n  end\n\n  def save_socket(user_id, socket) do\n    GenServer.call(__MODULE__, {:save_socket, user_id, socket})\n  end\n\n  def delete_socket(user_id) do\n    GenServer.call(__MODULE__, {:delete_socket, user_id})\n  end\n\n  def get_socket(user_id) do\n    GenServer.call(__MODULE__, {:get_socket, user_id})\n  end\n\n  def clear() do\n    GenServer.call(__MODULE__, :clear)\n  end\n\n  #Server callbacks\n\n  def handle_call({:save_socket, user_id, socket}, _from, socket_map) do\n    case Map.has_key?(socket_map, user_id) do\n      true ->\n        {:reply, socket_map, socket_map}\n      false ->\n        new_state = Map.put(socket_map, user_id, socket)\n        {:reply, new_state, new_state}\n    end\n  end\n\n  def handle_call({:delete_socket, user_id}, _from, socket_map) do\n    new_state = Map.delete(socket_map, user_id)\n\n    {:reply, new_state, new_state}\n  end\n\n  def handle_call({:get_socket, user_id}, _from, socket_map) do\n    socket = Map.get(socket_map, user_id)\n\n    {:reply, socket, socket_map}\n  end\n\n  def handle_call(:clear, _from, state) do\n    {:reply, %{}, %{}}\n  end\nend GenServer abstracts common client-server interaction. Client side calls server-side callbacks. These callbacks conduct opereations over map. This module should start when application starts, so we'll add it in Supervision tree . This is one of most beautiful things in Elixir. Open application.ex file in the same directory and add this line worker(CompanyApi.ChannelSessions, [%{}]) in children list. This will start ChannelSessions at the start of the application with inital state %{} . Now we can write ChatRoom channel. Every channel has to implement two callbacks join/3 and handle_in/3 . defmodule CompanyApiWeb.ChatRoom do\n  use CompanyApiWeb, :channel\n\n  alias CompanyApi.{ChannelSessions, ChannelUsers}\n  alias CompanyApiWeb.Message\n\n  def join(\"room:chat\", _payload, socket) do\n    user = Guardian.Phoenix.Socket.current_resource(socket)\n    send(self(), {:after_join, user})\n\n    {:ok, socket}\n  end\n\n  def handle_in(\"send_msg\", %{\"user\" => id, \"conv\" => conv_id, \"message\" => content}, socket) do\n    case ChannelSessions.get_socket id do\n      nil ->\n        {:error, socket}\n      socketz ->\n        user = Guardian.Phoenix.Socket.current_resource(socket)\n        case Message.create_message(user.id, conv_id, content) do\n          nil ->\n            {:noreply, socket}\n          message ->\n            push socketz, \"receive_msg\", %{message: message}\n            {:noreply, socket}\n        end\n    end\n  end\n\n  def handle_info({:after_join, user}, socket) do\n    ChannelSessions.save_socket(user.id, socket)\n\n    {:noreply, socket}\n  end\n\n  def terminate(_msg, socket) do\n    user = Guardian.Phoenix.Socket.current_resource(socket)\n    ChannelSessions.delete_socket user.id\n  end\nend Since we need to save socket, it can be only done after socket is created which is at the end of join/3 callback. For that reason we send message to ourself which is going to call callback method handle_info/2 . There we add socket into the map. Callback handle_in/3 creates a message and sends it to appropriate user. Function teminate/2 removes socket from map. With this being set, chat app API has been finished. This tutorial covers all listed parts from earlier with some advanced stuff from OTP like GenServer. It aims to show workflow while developing one Elixir application, and for complete understanding requires documentation reading. After all, there are all informations. Recommended place for all Elixir enthusiasts, Elixir Forum .", "date": "2019-01-05"},
{"website": "Kolosek", "title": "CSS Box Model for Beginners", "author": ["Tatjana B."], "link": "https://kolosek.com/css-box-model-for-beginners/", "abstract": "Every beginner should first start with the basics. In case of CSS, the basics are learning the box model. Before proceeding with learning any other CSS concepts, this is the one you should master first! The box model is the basic building block of CSS. It does tend to cause confusion with beginner developers so now is the moment to set the record straight. Here you will learn all the basic elements of the box model and how they are all connected. Before we dive deeper, everyone needs to understand that every element in web design is a rectangular box . You have probably heard this multiple times before, but this is an important concept that every developer should be aware of. Now, let’s explain the mysterious box model! Structure of the Box Model As mentioned above, the structure of the box model consists of: Content (height and width), Padding , Border , Margin . These are all the elements the browser needs in order to render a box model. Thankfully, with CSS we can control each of them individually. Let’s see how. In this article we will use the following code, and add to it gradually. HTML <div class=”box”>Lorem ipsum dolor amet whatever woke cronut, farm-to-table church-key tousled edison bulb. </div> CSS .box {\n  background-color: hotpink;\n  color: #fff;\n} The Content The content is pretty clear. It is the content of our element that has a specific width and height. A fixed height and width can be set using the height and width of CSS properties, or they can be determined by the content itself. Now, the one thing that is a bit confusing here is the usage of inline or block level elements. Using Inline and Block Level Elements To refresh your memory, the difference between inline and block elements is the fact that block elements take up 100% of the container width , while inline elements only take up the amount of space that the content needs . When using inline elements it is not possible to set a fixed width or height for that element, since the element doesn’t have any predetermined width and height (because the width and height are determined by the content). This can be overcome by converting the element to a block element. Unlike inline elements, when using block-level elements you can easily set a fixed width or height for it . Since by default the block level elements take up 100% of the container width, we can easily override it by setting a fixed width. You can also covert your element to inline-block . When using inline-block, the element has the behavior of the inline element (only take up the space of content), but you can manipulate it the same way as you can do with a block element . Now when we have a block level element we can give it a width and height. CSS .box {\n  height: 200px;\n  width: 200px;\n  background-color: hotpink;\n  color: #fff;\n} The result is this: The Padding Next, we are going to add some padding to our box. Padding defines the space between the content and the edge of the box. Let’s see it in action on our example. CSS .box {\n  height: 200px;\n  width: 200px;\n  background-color: hotpink;\n  color: #fff;\n  padding: 10px;\n} The result: In the image we see how padding affects the overall look of the box. There is space of 10px between the content and edge of the box on all four sides . We can also add padding to every side individually, using padding-top, padding-bottom, padding-left, padding-right. The Border Since we are going from the inside out, the next step would be defining the border. The border surrounds the content, and you don’t have to use it, but it still exists. This just means that the border has a width of zero. Now, we will add a border to our example. CSS .box {\n  height: 200px;\n  width: 200px;\n  background-color: hotpink;\n  color: #fff;\n  padding: 10px;\n  border: solid 3px black;\n} The Margin The final aspect of the box model is the margin. As some of you know, the margin is the space outside of the border. It is the space between elements. The best way to demonstrate this in a practical example is to show you how two elements are positioned with and without margins. HTML <div class=”box”></div>\n<div class=”box”></div> CSS .box {\n  height: 200px;\n  width: 200px;\n  background-color: hotpink;\n  color: #fff;\n  padding: 10px;\n  border: solid 3px black;\n  margin: 0\n} In this example, we see how, without margin, two elements stick together and there is no space between them. Now, let’s add some margin. CSS .box {\n  margin: 20px;\n} Now, this looks better. We added some space between the boxes. We can also add space on every side of the element individually using margin-top, margin-bottom, margin-left or margin-right. Summary You have made it to the end of this article, congrats! :) So, what have we learned? 1. Every element on a web page is basically a box. 2. The aspects of the box model are content, padding, border and margin. 3. When using an inline element you can’t set a fixed width or height for that element, while it is possible with a block and inline-block element. Hopefully, this helped you learn something new or refreshed your memory. Stay tuned, because in the next article we will talk about another very important property that helps you calculate the width of the box model, the box-sizing property . Thanks for reading!", "date": "2018-06-05"},
{"website": "Kolosek", "title": "Unlocking CSS Box-shadow", "author": ["Tatjana B."], "link": "https://kolosek.com/unlocking-css-box-shadow/", "abstract": "The box-shadow property is used to add a shadow effect to an element. This is property is used quite often to give depth to elements on a website, so it is useful to fully understand it. The Syntax The syntax for the box-shadow property is the following: .box {\n  box-shadow: 5px 10px 5px 4px #666;\n} Let’s translate this so you can understand what each of the values means: box-shadow: horizontal offset | vertical offset | blur radius | spread radius (optional) | color Values Horizontal offset - how far to the left or right will the shadow spread (if the value is positive it will spread to the right, if it is negative it will go to the left), Vertical offset - how far above or below the element will the shadow spread (if the value is positive it will spread to the bottom, if it is negative it will go to the top), Blur radius - the higher the number, the more blurred the shadow will be, if the number is 0 it will be sharp, Spread radius - the default value is 0, the higher the number the bigger the shadow size will be, Color - defines the color of the shadow. Examples CSS .box {\n  background-color: hotpink;\n  height: 200px;\n  width: 200px;\n\n  box-shadow: 5px 5px 10px 4px rgba(0,0,0,0.5);\n} The result: Usually, we won’t use a solid color for a box shadow, adding some opacity gives it a more natural feel. Inset Shadow When creating an inset shadow, the resulting effect is the shadow goes inside the element, and makes the content look depressed inside the element. CSS .box {\n  background-color: yellow;\n  height: 200px;\n  width: 200px;\n\n  box-shadow: inset 5px 5px 10px 4px rgba(0,0,0,0.5);\n} Two Different Shadows We can also create an element that has two different shadows, width different colors. CSS .box {\n  background-color: orange;\n  height: 200px;\n  width: 200px;\n\n  box-shadow: 5px 5px 10px purple, -7px -4px 4px green;\n} Solid Shadow CSS .box {\n  background-color: #999;\n  border: solid 3px #000;\n  height: 200px;\n  width: 200px;\n\n  box-shadow: 5rem -20px red;\n} We see from this example that the use of a solid shadow is good, but usually giving it some spread and opacity results in a far better effect. Box Shadow Generators Now that you have understood the property, and seen it in action, it is a good idea to mention that there are also a lot of generators you can use. It can often be quite difficult translating the design imagined into the box-shadow property values, so there are tools that can help you. You can use CSS matic , CSS3 Gen , Mozilla box-shadow generator. All of these help you visually achieve the box shadow effect you want. Browser Compatibility As mentioned in our previous article, it is a good practice to check the browser compatibility of new properties you are learning. Currently, the best service to use is the CanIUse . We see the browser support is very good, except when using Opera Mini . You should be aware that this feature won’t work there. Conclusion We have explained the box-shadow property and what all of its values stand for. Now, it’s up to you to further explore and unlock its full potential. Thank you for reading!", "date": "2018-07-05"},
{"website": "Kolosek", "title": "CSS Box-sizing", "author": ["Tatjana B."], "link": "https://kolosek.com/css-box-sizing/", "abstract": "In the previous article that covers CSS subjects, we talked about the box model . An important property that’s connected to the box model is the box-sizing property . The box-sizing property defines how the height and width of the element are calculated and if it should include the border, padding and margin or not. Values There are two possible values for the box-sizing property: Content-box - the default value. Border-box . Let's see how the width is calculated in both cases. For a reminder, the box model looks like this: Content-box The default value of the box-sizing property is content-box . We will explain how the width is calculated in this case. Even though we set the width of our element to 200px, the actual width will be much different. The formula is: Width = left margin + left border + left padding + content + right padding + right border + right margin So in the case of our example the width would be: Width = 20px + 3px + 10px + 200px + 10px + 3px + 20px The result of this calculation is 266px. This is probably not the result you expected, am I right? That’s why you need to really be careful about this. Now, you’re probably wondering if there is an easier way to deal with width, than having to use the calculator every time? There is! By using border-box. Border-box Let’s take our example. We specified the width of the element to be 200px, and the padding is 10px on each side. If we were to use content-box, then it’s becoming 220px. But, when using border-box, the width will be 200px, which means the width of the content will be 180px and the padding is 20px. The content shrinks in size, to accommodate the addition of padding. Example Let’s see a visual example of both situations to better explain the properties. HTML <div class=”content-box”>Content-box</div>\n<div class=”border-box”>Border-box</div> CSS div {\n  height: 200px;\n  width: 200px;\n  background-color: hotpink;\n  color: #fff;\n  padding: 10px;\n  border: solid 3px black;\n  margin: 20px;\n}\n\n.content-box {\n  box-sizing: content-box\n}\n\n.border-box {\n  box-sizing: border-box;\n} As we see, in the first example, the width of the content-box adds up to 266px , while the border-box adds up to 200px . Conclusion We have seen the connection between the box-sizing property and the box model, and it is an important one. It is of great value to understand both the content-box and border-box value of the box-sizing property. While the content-box is the default value, it is much easier to use the border-box property to avoid calculations which are often confusing. Happy coding!", "date": "2018-06-05"},
{"website": "Kolosek", "title": "Ruby Programming: Beginner's Guide [2018 update]", "author": ["Kolosek"], "link": "https://kolosek.com/ruby-programming-beginners-guide/", "abstract": "We are writing this brief tutorial on how to easily get into Ruby programming language and Ruby on Rails framework so our community can grow with new developers. First thing first. Ruby on Rails framework is based on Ruby programming language, and the learning should start from learning Ruby. Before we start digging into Ruby programming language, lets first setup our environment. Ubuntu installation instructions We choose to develop on Linux OS, Ubuntu distribution. In order to install Ruby and Ruby and Rails, you could follow these instructions (it might not be always up-to-date) Ubuntu 14.04 Ubuntu 16.04 Ubuntu 18.04 If you find some of the steps are out of date, please submit change request, so we can keep it up-to-date. Digging into Ruby We will list tutorials that cover basics, intermediate and advanced parts of getting into Ruby. If you want to learn Rails, it would be best to go through each step, but it's not mandatory. Going through Intermediate should be enough for you to get started. Beginner: For starters of getting into ruby programming language we recommend going through interactive tutorial, which might take you few hours, but it's worth it. https://www.codecademy.com/learn/ruby Intermediate: An alternative is to go through not interactive tutrial, we you think you are faster learner via that means. http://tutorials.jumpstartlab.com/projects/ruby_in_100_minutes.html Advanced: Most of the things you need in every day Ruby has been covered. To get more advanced view on language please finish the course: http://rubymonk.com/learning/books/1-ruby-primer You want to master Ruby, take a look at this styleguide: Ruby style guide Learning theory first Keep in mind that you still have very useful information in documentation. We know you might be thinking 'yeah, right, documentation is boring'. But when you learn about Strings , Intergers , Array and Hash etc. it is very useful to know what methods you have to manipulate them. Don't be the person who re-implements substracting of String, only because you didn't know that method already exist in Ruby. Once you mastered Ruby, you are ready to go to one step further and start building your first web application. Look for our Ruby on Rails tutorial to start with your first Rails web app.", "date": "2018-04-05"},
{"website": "Kolosek", "title": "Debugging with Git", "author": ["Kristina P."], "link": "https://kolosek.com/debugging-with-git/", "abstract": "When you are working on a huge project, you may discover bugs in the code that prevent you from proceeding any further in your development. How to fix them? You can start by looking through your commit history by hand, but this would end up as a very tedious process. Thankfully, Git has multiple tools that can help you hunt for a bug or the culprit when things go wrong. Git Blame $ git blame <file_path/file_name> The git blame command helps you find the commit that created the specific line of code that causes a bug in a specific file of a project. It also determines the author of the commit, making is easier to ask for more information about the code. You can -L option to limit the line output range. $ git blame -L 11,21 new_file\n^95d69a196b5c7 (Jhon Smith  2018-05-18 13:04:22 +0200 11) def new\n^95d69a196b5c7 (Jhon Smith  2018-05-18 13:04:22 +0200 12) @article = Article.new\n^95d69a196b5c7 (Jhon Smith  2018-05-18 13:04:22 +0200 13) end\n3171aa2dbbce7 (David Smith 2018-05-16 18:21:30 +0200 14) def edit\n3171aa2dbbce7 (David Smith 2018-05-16 18:21:30 +0200 15) @article = Article.find(params[:id])\n3171aa2dbbce7 (David Smith 2018-05-16 18:21:30 +0200 16) end\n^95d69a196b5c7 (Jhon Smith  2018-05-18 13:04:22 +0200 17) def create\n3171aa2dbbce7 (David Smith 2018-05-16 18:21:30 +0200 18) @article = Article.new(article_params)\n^95d69a196b5c7 (Jhon Smith  2018-05-18 13:04:22 +0200 19) if @article.save\n^95d69a196b5c7 (Jhon Smith  2018-05-18 13:04:22 +0200 20) redirect_to @article\n^95d69a196b5c7 (Jhon Smith  2018-05-18 13:04:22 +0200 21) else By following the partial SHA-1 of a commit you can easily see who, when and how was a specific line of code modified. Note that the ^ prefix shows lines that were created in the initial commit and have remained unchanged ever since. Use -C option to figure out where snippets of code originally came from if they were copied from elsewhere. It tells you the original author and commits regardless of the refactoring done afterward. $ git blame -L -C 11,21 <file_path/file_name> git blame is helpful when you can assume the cause of the problem. What if you had no idea how to get back to a working state? This is where git bisect comes into play. Git Bisect A git bisect is a debugging tool used to find out which specific commit introduced a bug or a problem in the project by doing an automatic binary search . You don't know what file in the project contains the bug. If you don't know what is breaking, and there have been a bunch of commits since the last state where you know the code worked, you’ll likely turn to git bisect for help. What git bisect does is, it divides the git commit tree into \"good\", bug-free commits and \"bad\" commits by testing them with binary search . Based on the result of the tests, Git navigates through recent commits identifying them, until it finds the culprit. This is known as a binary search algorithm . If you have multiple bugs, you need to perform a binary search for each of the bugs. How Does This Work? First, let's start with the binary search mode to find a bug: $ git bisect start . Next, you need to look for a commit where everything was still working. To do so, let's examine the commit history to find what you need: $ git log --oneline . --oneline option shows only the names of git commits. $ git log --oneline\nf11c599 Removed unnecessary lines\n95d69a1 Added article tests\n3171aa2 Enabled editing articles\n95d69a1 Added articles Tag the oldest \"good\" commit SHA-1: $ git bisect good 95d69a1 . After you have assigned the \"good\" tag, you need to find a \"bad\" commit to divide the commit tree where Git can apply the binary search algorithm. Since you know that the latest commit has the error, you will assign it as the \"bad\" commit: $ git bisect bad f11c599 . Once you have assigned initial and final pointers for your search, Git walks you through the commit history and tags \"good\" and \"bad\" commits. This process continues until you successfully find out the first \"bad\" commit, the cause of your problem. Now you can exit the git binary search mode by executing: $ git bisect reset . Git Grep $ git grep <keyword> The git grep command allows you to efficiently and quickly search through your project for a string or regular expression in any of the files in your source code. It avoids searching through .gitignore files. GREP stands for G lobal R egular E xpression P rint. Additional options: -n or --line-number : Prints out the line numbers where Git has found matches. -i or --ignore-case : Ignores case differences between the searched keyword and the file. -c or --count : Shows the number of matches found in the file for the inputted keyword. -p or --show-function : Displays the context of the searched keyword. --and : Ensures multiple matches in the same line of text. Summary git blame is a great tool if you know where the buggy code is located. On the other hand, if your repository is considerably large, with a huge commit history that makes it difficult to find the error, git bisect is the way to go. Or you could easily search through your project for a string or regular expression with git grep . Three debugging tools with three different ways to fix your problems in their own unique ways. Which one did you encounter so far? Share your experience! Bugs, glitches, and coding problems we know how to solve them all! Subscribe and learn our special techniques.", "date": "2018-06-05"},
{"website": "Kolosek", "title": "CSS Position Relative vs Position Absolute", "author": ["Tatjana B."], "link": "https://kolosek.com/css-position-relative-vs-position-absolute/", "abstract": "The CSS position property defines, as the name says, how the element is positioned on the web page. If you are interested in reading about the font properties, articles about the relative font size and CSS columns might be of interest. So, there are several types of positioning: static, relative, absolute, fixed, sticky, initial and inherit . First of all, let’s explain what all of these types mean. Static - this is the default value, all elements are in order as they appear in the document. Relative - the element is positioned relative to its normal position. Absolute - the element is positioned absolutely to its first positioned parent. Fixed - the element is positioned related to the browser window. Sticky - the element is positioned based on the user’s scroll position. Now that we have explained the basics, we will talk more about the two most commonly used position values - relative and absolute . What Is Relative Positioning? When you set the position relative to an element , without adding any other positioning attributes (top, bottom, right, left) nothing will happen . When you add an additional position apart from relative, such as left: 20px the element will move 20px to the right from its normal position. Here, you can see that this element is relative to itself . When the element moves, no other element on the layout will be affected. There is a thing you should keep in mind while setting position - relative to an element limits the scope of absolutely positioned child elements. This means that any element that is the child of this element can be absolutely positioned within this block. After this brief explanation, we need to back it up, by showing an example. In this example, you will see how the relative positioned element moves when its attributes are changed. The first element moves to the left and top from its normal position, while the second element stays in the same place because none of the additional positioning attributes were changed. HTML <div id=”first_element”>First element</div>\n<div id=”second_element”>Second element</div> CSS #first_element {\n  position: relative;\n  left: 30px;\n  top: 70px;\n\n  width: 500px;\n  background-color: #fafafa;\n  border: solid 3px #ff7347;\n  font-size: 24px;\n  text-align: center;\n}\n\n#second_element {\n   position: relative;\n\n   width: 500px;\n   background-color: #fafafa;\n   border: solid 3px #ff7347;\n   font-size: 24px;\n   text-align: center;\n} What Is Absolute Positioning? Absolute positioning allows you to place your element precisely where you want it . Absolute positioning is done relative to the first relatively (or absolutely) positioned parent element . In the case when there is no positioned parent element, the element that has position set to absolute will be positioned related directly to the HTML element (the page itself) . An important thing to keep in mind while using absolute positioning is to make sure it is not overused , otherwise, it can lead to a maintenance nightmare. The next thing, yet again, is to show an example of absolute positioning. In the example, the parent element has the position set to relative. Now, when you set the position of the child element to absolute, any additional positioning will be done relative to the parent element . The child element moves relatively to the top of the parent element by 100px and right of the parent element by 40px. HTML <div id=”parent”>\n  <div id=”child”></div>\n</div> CSS #parent {\n  position: relative;\n  \n  width: 500px; \n  height: 400px;\n  background-color: #fafafa;\n  border: solid 3px #9e70ba;\n  font-size: 24px;\n  text-align: center;\n}\n\n#child {\n  position: absolute;\n  right: 40px;\n  top: 100px;\n\n  width: 200px;\n  height: 200px;\n  background-color: #fafafa;\n  border: solid 3px #78e382;\n  font-size: 24px;\n  text-align: center;\n} Through these examples, you have seen differences between absolute and relative positioned elements. We hope this article clarified some doubts related to absolute and relative positioning and will help in any future projects. Check out other detailed articles related to CSS properties such as this one: CSS Positions , SASS and LESS Nesting . If you liked it, be sure to subscribe to our newsletter - there are more articles to come!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "CSS Columns", "author": ["Tijana D."], "link": "https://kolosek.com/css-columns/", "abstract": "Text breaking option is not the most popular text option ever since magazine layout. Just like in printing design, there are columns in web design too. The best and clearest way to use it is column option in CSS . If you are interested in text underline option, which is much more attractive, check it here . It is boring, content and design-wise, for text content to be extended over the full web page, so this is rare to see.For more about positions in CSS check this text . Please note that the blog content is left out of this because of its nature. So, textual content on the web is organized in smaller width elements and because of that, there’s no need for columns. After all those facts listed, I needed columns last week on a design I’ve worked on, and it was fully justified (but left aligned). Properties linked to the columns property are: column-count - specifies the number of columns an element should be divided into, column-width - specifies the width of the columns, column-gap - specifies the gap between the columns, column-rule - sets the rule between the columns (it is a shorthand property for setting rule width, rule color and rule style), column-span - specifies how many columns an element should span across. Internet Explorer 9 (and earlier versions) and Firefox do not support column-span column-fill - specifies how to fill columns (auto or balance). The columns property alone will accept column-count, column-width, or both properties. Let me explain these properties a little bit. The column-width property specifies a suggested, optimal width for the columns. If the column-count is defined, the column-width value will be overridden. The column-fill property is only available in Firefox. Content with column-fill balance will automatically balance content in a height-constrained multi-column layout. Other browsers will always fill columns sequentially when given a height constraint.If you want the same behavior through all browsers just set column-fill: auto . Content that can be edited this way must be into one of the next element <p>, <div>, <h>, <ul> and <ol> . If the height of the columns isn’t defined, the content divided into columns defines height. Examples This example represents breaking content into 2 column. (I used gradient to present content flow) <style>\n        div{\n            -webkit-column-count: 2; /* Chrome, Safari, Opera */\n            -moz-column-count: 2; /* Firefox */\n            column-count: 2;          \n            }\n    </style> This example represents breaking content into defined width column with a defined gap between them. <style>\n        div{\n            -webkit-column-width: 300px; /* Chrome, Safari, Opera */\n            -moz-column-width: 300px; /* Firefox */\n            column-width: 300px;      \n            -webkit-column-gap: 150px; /* Chrome, Safari, Opera */\n            -moz-column-gap: 150px; /* Firefox */\n            column-gap: 150px;\n            }\n    </style> This example represents content staggered into 3 columns with defined rule between them. <style>\n        div{\n            -webkit-columns: 3; /* Chrome, Safari, Opera */\n            -moz-columns: 3; /* Firefox */\n            columns: 3;      \n            -webkit-column-rule: 1px solid #dbdbdb; /* Chrome, Safari, Opera */\n            -moz-column-rule: 1px solid #dbdbdb; /* Firefox */\n            column-rule: 1px solid #dbdbdb;\n            }\n    </style> The last example represents content into columns and element which include all columns width. <style>\n        div{\n            -webkit-columns: 3; /* Chrome, Safari, Opera */\n            -moz-columns: 3; /* Firefox */\n            columns: 3;      \n            }\n        h1{\n            -webkit-column-span: all; /* Chrome, Safari, Opera */\n            column-span: all;\n            }\n    </style> I believe this is everything there is about column property in CSS. Hope it helps! If you want to read more about CSS and web design, check this blog hourly for it, or just subscribe", "date": "2018-02-05"},
{"website": "Kolosek", "title": "CSS Relative Font Size", "author": ["Tatjana B."], "link": "https://kolosek.com/css-relative-font-size/", "abstract": "One of the biggest confusions in web design is caused by none other than the font-size property . The most commonly used font sizes are the pixel(px), em and rem. Alongside with this property, confusion is commonly caused by CSS Columns . If you are interested in layout properties, check out this article about the property that is used often - position. First, we will focus on the font size property. In CSS, there are multiple units (such as pixel, em and rem) that can be used which can only cause the designer additional headache. In this article, we will clarify the usage of those units and any misconceptions. PX Unit The most common and popular unit is the pixel (px) one. Most people start with using the pixel(px) unit because it gives you a full control over the text size . If the font size is not specified, the default size for normal text, like a paragraph, is 16px. The main problem with using pixel(px) units is that, unlike the em or rem unit, they are not scalable and making changes in the font size on different screen sizes can be challenging. Also, the pixel(px) unit is not related to anything. So if you want to change the size of, for example, the entire page based on the screen size, you would have to change the font size of each element individually. EM Unit The em unit is a scalable font size unit . It is related to the font size of the parent container . One em (1em) is equal to the current font size. So for example, if the parent element has the font size of 16px than 1em is equal to 16px, 2em is equal to 32px and so on… Making your design responsive becomes much easier if you use em units instead of px . But, there is one thing that needs to be looked after. When using the em unit you should be careful with nesting . For example, let's say you created a section and set its font size to 2em, Now, you want to add a paragraph within the section that has a font size of 1em. The paragraph's font size is related to the font size of the section. If the nesting continues, or if it is used on multiple segments of the project, you can quickly lose sight of what is relative to what, and get completely lost. Now that we have an understanding of the em unit, it is the right time we introduce the rem unit. REM Unit The rem unit is another scalable font size, but unlike the em unit, it is related to the root element (HTML) instead of the parent element . That’s where the rem unit it got its name (root em = rem). This means that, if you use the rem unit on elements, you can quickly change the font size of the entire project, just by adjusting the root font size. This way is fast, easy, and avoids any nesting complications you might get while using the em unit. So, which unit should you use? The best way to answer this question is by using an example. First, we will use the px unit. html { font-size: 100% } //usually this equals to 16px\ndiv { Font-size: 16px; }\ndiv>p { font-size: 14px; } Here, you can notice that the font size is set in pixels(px) individually for each element, and they have no relation between each other. Next, we’ll use the em unit for the same code segment. html { font-size: 100% }\ndiv { Font-size: 0.875em; } //this equals to 14px\ndiv>p { font-size: 2em; } // this equals to 28px In this example, the difference between the px and em units is clear. The relativeness of the em unit is clear. Just by changing the font size of the container div, we can see that the paragraph font size updated accordingly. Finally, using the rem unit. html { font-size: 100% }\ndiv { Font-size: 1rem; } //this equals to 16px\ndiv>p { font-size: 1.5rem; } // this equals to 24px When using the rem unit, it is clear that all font sizes are related to the root font size . Both div and the paragraph font sizes are related to the root, despite the div being the parent of the paragraph. Conclusion There are no right or wrong units . It all depends on your skill level, project type and size and personal preference . If you would like to have complete control over the font size, the pixel unit is for you. If you would like a little bit more flexibility when manipulating the web page than the em or rem units are the best choices. Either way, the best result will be achieved when the units are fully understood. We hope this article has helped and you learned something new today. Check out other detailed articles related to CSS properties such as this one: CSS Positions , SASS and LESS Nesting . If you would like to learn more about coding and web design, be sure to subscribe to our newsletter.", "date": "2018-02-05"},
{"website": "Kolosek", "title": "Git Branches", "author": ["Nesha Z."], "link": "https://kolosek.com/git-branches/", "abstract": "In the current era, most software development companies work in a collaborative environment where several developers contribute to the same source code. While some will be fixing bugs the others would be implementing new and different features. The problem raises, how to maintain different versions of the same code base? This is where the branch function shines! Branch allows each developer to isolate his/her work from others by creating a new branch from the original code base. What Is a Branch? Branch is an independent line of development. It works as a pointer to your next commits. Whenever a new branch is created, Git creates a new pointer while keeping the original code base untouched. When you make your first commit in a repository, Git will automatically create a master branch by default. Every next commit you make will go to the master branch until you decide to create and switch over to another branch. Creating Branches Let's start with creating a new branch : git branch hello-world . This only creates the new branch . To start working on it, you will need to switch to the branch with git checkout . Now, you are ready to use standard git add and git commit commands. You can see two different branches pointing to the same commit. How does Git know which branch is currently checked out? This is where the HEAD pointer comes into play! HEAD always points to the currently checked out branch or commit. In our case, it is the master. Let's git checkout hello-world and see what happens. As you can see, the HEAD is now pointing to the hello-world branch instead of master. The next step is to modify some files and create a new commit with git commit -m \"commit message\" A new commit C5 was created in the branch hello-world . Pointers always move to the latest commit in that branch that we checked out. Changes in the hello-world branch did not affect any other branch. Branching enables you to isolate your work from others. It is a common practice to create a new branch for each task (e.g. bug fixing, new features etc), which is a good practice because it allows others to easily identify what changes to expect, and also for backtracking purposes to understand why a particular code change is implemented. You can read more at Git Beginner's Guide for Dummies . Create your own Ruby on Rails project and try it out! Make Rspec tests on a different branch and commit the changes. Detached HEAD As we have said before, HEAD always points to the currently checked out branch or commit. Checkout to a commit and see what happens with git checkout C0 . Now, the HEAD is pointing to C0. We are currently checkedout to a remote branch. Is it possible to create a new commit while checkout to one? Time to find it out! git commit -m \"commit message\" The HEAD is detached and moves together with each new commit created. The newly created commit C6 is pointing to C0 , that is now acting like a branch, but it is not. Commits that are not reachable by any branch or tag will be garbage collected and removed from the repository after 30 days. To avoid this, we simply need to create a new branch for the newly created commit and checkout to it. git checkout -b hotfix C6 . Always use branches when you are solving new problems to avoid disturbing your co-worker's features! Subscribe and checkout our future articles as soon as we commit them!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "Input [type=\"text\"] Busted", "author": ["Tijana D."], "link": "https://kolosek.com/input-text/", "abstract": "Inputs are sooo important in the user experience design and it's crucial that their style is perfectly transferred from the design to the page. It's no secret that for a presentation on a web page you need CSS but the tricky part is how to make it as good as possible. Inputs have more variations, states and things about them than any other element in HTML so, let's cover everything a one should know about the post input type text. Let's bust the input! Input [type=\"text\"] Input text presents an empty square where the text is expected. It is a pretty common element and, in most cases, presents a white element surrounded by a color border. It is a good practice to add a placeholder text inside of it and to have a label outside of it. Default input text Default input text in focus state Default placeholder text Default autofill state To add the desired style to the input there are a few standard options and a few special ones. If there is a label for the input, it is added in the label element next to the input, and its for attribute has the same value as the id attribute of the linked input element. The label element can be styled like the standard HTML text element. For input, it is standard to change dimensions, border , background-color , border-radius and font options. It is not standard to style a placeholder text, a focus, an autofill and a validation state. These non-standard options will be explained in the next article and after that, some examples of different options used will be presented. A Placeholder Text For styling a placeholder text set with placeholder attribute, ::placeholder pseudo-element is used. All text styling is supported (font, color, background, opacity, word-spacing, text-transform, line-height ...). In Firefox browser all placeholders have an opacity value applied so to reset that value it is necessary to define opacity. ::-webkit-input-placeholder { /* Chrome/Opera/Safari */\n     ...\n }\n ::-moz-placeholder { /* Firefox 19+ */\n     opacity:1;\n     ...\n }\n :-ms-input-placeholder { /* IE 10+ */\n     ...\n }\n :-moz-placeholder { /* Firefox 18- */\n     ...\n } Example: ::placeholder{\n    color: coral;\n    font-size: 14px;\n    font-family: sans-serif;\n    letter-spacing: .2px;\n    padding-left: 5px;\n } The Result: Focus State The focus state is important for user experience and it exists on every input element. It is used for indication of the currently targeted element. This state is presented with a blue border around an element and in CSS it is selected with pseudo class :focus . The blue border around the focused element is added with the default line outline: auto 5px -webkit-focus-ring-color and that default color value is defined in a browser theme. In some cases, this presentation annoy designers of the element and some people choose to disable it by next code: :focus{\n     outline:none;\n } This is a very bad practice and it should be avoided. Instead of neutralizing style for the focus state, you can style it in your own way and it doesn't need to include an outline. Example: :focus{\n     outline:none;\n     border:1px solid coral;\n     box-shadow:0 0 5px coral;\n } The Result: It is a nice touch to add a transition in this case (and any other!). Autocomplete State Webkit browsers provide a setting that allows users to automatically fill in details for common form fields. You have seen this when completing a form that asks for things like name, address, and email. Autocomplete fields have default yellow background and that is something that can interfere with design, and also that is something that can easily be changed (in this mode you can also change text color). :-webkit-autofill {\n    -webkit-box-shadow: 0 0 0 1000px mintcream inset !important;\n }\n\n :-webkit-autofill {\n    -webkit-text-fill-color: coral !important;\n } The Result: Validation States There are two relatively new pseudo-classes :valid and :invalid . These pseudo-classes are useful for highlighting success and fail for the user. It is common to see green when content is valid and red if it's not, so now you can easily define that with CSS. Old versions of browsers do not support it, keep that in mind. :valid {\n    box-shadow: -5px 0 lime;\n    border-left: none;     \n }\n\n :invalid {\n    box-shadow: -5px 0 orangered;\n    border-left: none;     \n } box-shadow option is used instead of the border-left because there is a visual problem in the case when borders of one element have different style or color The Result: Extra Tip One more problem with input fields is one on the iOS which appears because default styling is added. There are some extra rounded corners and dropshadows. The best way I found to fix this is one from daretothink blog : -webkit-appearance: none;\nborder-radius: 0; Good Examples Closing Word Work on input field design is something that you can always do and something that your user will surely appreciate. Once again I urge you to use transition in styling. For more good examples subscribe to our newsletter.", "date": "2018-05-05"},
{"website": "Kolosek", "title": "Git Commands Tutorial - Part 1", "author": ["Nesha Z."], "link": "https://kolosek.com/git-commands-tutorial-part1/", "abstract": "There are many different ways to use Git. The most common are the original command line tools and GUI ( G raphical U ser I nterfaces). Here, we will cover the most important commands you should know about when you are working with Git. The command line is the only place you can run all Git commands. If you know how to run the command-line version you can probably also figure out how to run the GUI version. Also, while your choice of graphical client is a matter of personal taste, all users will have the command-line tools installed and available. You can read more on gits official online book . Before we start, be sure to know how to use the Terminal in Mac or Command Prompt or Powershell in Windows and have git installed on your system. Introduction First, you might ask yourself what is Git actually and what can you do with it? Git is a fast, scalable, distributed revision control system with a rich command set that provides both high-level operations and full access to internals. In Kolosek, we use Git for every application we create, including Ruby on Rails projects , to make it easier to work as a team and achieve our goal. You can learn a lot about individual Git commands by running $git help command in the Terminal. This should appear: Everything can be added to your git repositories even your Controller tests ! Git Options We will cover the most commonly used command lines, starting from Git options . This will explain everything you need to know about Git on your local machine: usage: git [--version] [--help] [-C <path>] [-c name=value]\n           [--exec-path[=<path>]] [--html-path] [--man-path]\n           [--info-path] [-p | --paginate | --no-pager]\n           [--no-replace-objects] [--bare] [--git-dir=<path>]\n           [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>] $git --version : Find out your current Git suite version using this command. $git --help : Every good programmer should know about this option, it will show you the most used Git Commands , it can also print all available commands with --all or -a . $git -C <path> : Instead of running Git from the current working directory , you can run it from the given <path> instead. -C <path> command affects other options that expect path names like --git-dir and --work-tree because their path names would be made relative to the working directory caused by the -C option. $git -c <name>=<value> : You can very easily override values from your configuration files. The <name> has to be in the same format as listed by git config , while the <value> is your new parameter value. $git --exec-path[=<path>] : This command helps you find the path where your core Git programs are installed . Another way to do this is by setting the GIT_EXEC_PATH environment variable. $git --git-dir=<path> : Always use this option, whenever you need to set a path to the repository or set the GIT_DIR environment variable. We often used these Git options when we were setting up CarrierWave example to Git. Did you have a similar experience? $git --work-tree=<path> : In this way, you can set the path to the current working tree . You can do this as well by setting the GIT_WORK_TREE environment variable. $git --namespace=<path> : Set your Git namespace with this command or by using GIT_NAMESPACE environment variable. And, that's it! For now, to be exact. This was only the first part of the tutorial! In the next one , we will cover all the other Git commands, be sure to stay tuned. We always update our git articles-tree, subscribe to follow our next commits!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "Git Commands Tutorial - Part 2", "author": ["Nesha Z."], "link": "https://kolosek.com/git-commands-tutorial-part2/", "abstract": "In the last Git Commands article, we have learned how to use Git options and what they can do. Today, we will extend our reach and discover everything there is to know about commonly used Git Commands . Git Commands Git commands are used to access the Git working directory and connect it to our remote repository, by making changes, viewing different files, and many other possibilities! Once your project is set, be sure to connect it with Git. With the following commands and short descriptions, we will make it sure that you are ready to use Git whenever you need it. For a detailed description of all , the GIT commands please check git's official description . $git config You can use it to configure the author's name, email address, file formats and many more to be used with your commits. git config --global user.name \"Kolosek\ngit config --global user.email \" [email protected] \" $git init Using this command you make it sure that your git repository is initialized and creates the initial .git directory in a new or in an existing project. The output will be the following: Initialized empty Git repository in /path/.git/ You can undo a $git init with rm -rf .git . $git clone <path> This creates a working copy of a Git repository from a remote source to your local repository. This is the first command you want to use when you are cloning a Git repository. git clone /path/repository Also, you can add the original location as a remote so you can easily fetch from it again and push it if you have permissions. Once the project has been cloned you can start working on it. Write your RSpec tests ! git clone [email protected] :user/repository.git You can clone one specific branch at a time: git clone -b <branch_name><repository_url> : git clone -b branch_name [email protected] :user/repository.git $git add <file_name> Add one or more files in your working directory to your index. $git commit Take all your changes written in the index to the HEAD branch with a -m message. git commit -m \"Commit these changes.\" You can also commit any files you've added to git add , and also commit any files you've changed since then: git commit -a Always commit all your changes even if its only a bunch of Capybara tests ! $git status It shows you the status difference between an index and working directory files. Lists the files you've changed, untracked because they are only in your working directory and staged since they are ready to be committed. On branch master\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    File_name\n\nnothing added to commit but untracked files present (use \"git add\" to track) $git remote Shows all the remote versions of your repository. $git checkout <branch_name> : You can switch from an existing branch to another one or create a new branch and switch to it git checkout -b <branch_name> . $git branch With this, you can simply list all existing branches , including remote branches by using -a or create a new branch if a branch name is provided. $git push Pushes all changes to the remote repository. git push origin <branch_name> You can also delete a branch from your remote repository: git push origin :<branch_name> $git pull Fetch and merge your changes in the remote repository to your working directory. $git merge <branch_name> Merges one or more branches into your active branch and if there are no conflicts it will automatically create a new commit. In Kolosek we commit all our changes to Git and make it sure to notify our team when they are merged with the rest of the application! Try to create your own application using Rails Associations . $git diff Show changes between your working tree and the index, between two branches, or changes between two files on disk. Example between branches: git diff <source_branch> <target_branch> $git reset Reset your index and working directory to the state of your last commit. git reset --hard origin/master git reset --hard will also undo the changes you made so far! Use git reset --soft if you want to keep your changes $git revert Revert works in a very similar way to $git reset , but instead of resetting it will create a new commit that reverses everything introduced by the accidental commit. $git tag You can use tagging to mark a significant change you made, such as a release. git tag 1.0.0 <commit_id> Always tag your new production releases. Try it out by implementing CarrierWave and adding a release tag to it! $git log It shows a listing of commits on a branch with corresponding details. commit 134808af7c596be8d92c619f9efb94542874e1e3\nAuthor: Kolosek < [email protected] >\nDate:   Fri Mar 23 14:24:54 2018 +0100\n\n    [#1] First Commit Conclusion With this, we have covered everything there is to know about Git commands. Don't forget, these are only the very basic and most commonly used commands. Hope this helped you to get started with Git! Be sure to be notified once new git articles are added, subscribe now!", "date": "2018-04-05"},
{"website": "Kolosek", "title": "CSS Border-image", "author": ["Tatjana B."], "link": "https://kolosek.com/css-border-image/", "abstract": "The CSS border property is pretty familiar. With this property, you can define the color, style and width of an element border. The border-image property, on the other hand, lets you define a gradient or an image for a border. The border-image-property is a shorthand for the following: Border-image-source - the source of the image, Border-image-slice - defines the dimensions of slicing the source image into regions, Border-image-width - defines the width of the border image, Border-image-outset - defines the distance between from the border image to the element's edge, Border-image-repeat - defines how the image is repeated to fill the area of the border. When using this shorthand, if any of the values is omitted, its value will be set to initial. The Syntax When using the border-image property, you can anywhere from one to all the five values mentioned before. Let’s take a look at the syntax. We will be using the shorthand property. .box  {\n  border-image:  \n      url(‘images/border.png’)       /* source */\n      27 /                          /* slice */\n      12px 5px 15px 20px /         /* width */\n      5px 12px 17px 22px          /* outset */\n      round                      /* repeat */\n} Examples Let’s show examples for when you want to use a gradient as a border or an image as a border. Making a Border Out of a Repeating Image The image we will use when creating the border is the following: HTML <div class=”box”></div> CSS .box {\n  width: 200px;\n  background-color: #000;\n  border: 50px solid #DE31ED;\n  margin: 10%;\n  padding: 10px;\n\n  border-image:\n      url(\"../images/border.png\")    /* source */\n      50 /                           /* slice */\n      25px /                         /* width  */\n      12px                           /* outset */\n      round                          /* repeat */\n} The result: Making a Border Out of a Gradient We will use the same box element as in the previous example, only the CSS will be different. CSS .box {\n  width: 200px;\n  height: 200px;\n  background-color: #000;\n  border: 20px solid transparent;\n  padding: 10px;\n  margin: 10%;\n\n  border-image: repeating-linear-gradient(60deg, #DE31ED, #31E2ED 50px) 20;\n} The result: Browser Compatibility The best way to see what is the compatibility of a property is to check out the CanIUse service. Here we see that the compatibility is generally very good. There are a few issues with border-image-repeat: space in Chrome, so you should be on the lookout for that. Conclusion Although rarely used, the border-image property is quite interesting. It can bring a unique dimension to your design. The best way to see what works for you is to play with the property and unlock its full potential! Thank you for reading!", "date": "2018-07-05"},
{"website": "Kolosek", "title": "Git Merge vs Rebase", "author": ["Kristina P."], "link": "https://kolosek.com/git-merge-vs-rebase/", "abstract": "Git merge and rebase serve the same purpose – they combine multiple branches into one. Although the final goal is the same, those two methods achieve it in different ways. Which method to use? What Does Merge or Rebase Mean? Here we have a sample repository that has two diverging branches : the master and the feature. We want to blend them together. Let's take a look how these methods can solve the problem. Merging When you run git merge , your HEAD branch will generate a new commit , preserving the ancestry of each commit history. Fast forward merge is a type of merge that doesn't create a commit, instead, it updates the branch pointer to the last commit. Rebasing The rebase re-writes the changes of one branch onto another without creating a new commit. For every commit that you have on the feature branch and not in the master, a new commit will be created on top of the master. It will appear as if those commits were written on top of master branch all along. Merging Pros and Cons Pros: Simple to use and understand. Maintains the original context of the source branch. The commits on the source branch are separated from other branch commits. This can be useful if you want to take the feature and merge it into another branch later. Preserves your commit history and keeps the history graph semantically correct. Cons: History can become intensely polluted by lots of merge commits because multiple people are working on the same branch in parallel. Visual charts of your repository are can become a mess and don't add too much information. It can look like a London Tube Map Commit! Debugging using git bisect can become much harder due to the merge commits. Rebasing Pros and Cons Pros: Code history is simplified, linear and readable. Manipulating a single commit history is easier than a history of many separate feature branches with its additional commits. Clean, clear commit messages make it better to track a bug or when a feature was introduced. Avoid polluting history with 20+ single-line commits! Cons: Lowering the feature down to a handful of commits can hide context. Rebasing doesn't work with pull requests , because you can't see what minor changes someone made. Rewriting of history is bad for teamwork! You need to be more careful with rebasing than when merging. It requires more work when dealing with conflicts . Using rebase to keep your feature branch updated requires that you resolve similar conflicts again and again. While with merging, once you solve the conflicts, you're set. You have to resolve the conflict in the order they were created to continue the rebase. Which Method to Choose? When your team uses a feature based workflow or is not familiar with rebase, then git merge is the right choice for you: It allows you to preserve the commit history for any given feature while not worrying about overriding commits and changing history. It helps you avoid unnecessary git reverts or resets ! Different features remain isolated and don't interfere with existing commit histories. Can help you re-integrate a completed feature branch. On the other hand, if you value more a clean, linear history then git rebase may be most appropriate. You will avoid unnecessary commits and keep changes more centralized and linear! If you rebase incorrectly and unintendedly rewrite the history it can lead to serious issues, so make sure you know what you are doing! Rebase or merge, what is your preference? Here in Kolosek, we lean more towards merge for our feature-based workflow. Subscribe to git more information about our next article releases!", "date": "2018-05-05"},
{"website": "Kolosek", "title": "Git Tags", "author": ["Kristina P."], "link": "https://kolosek.com/git-tags/", "abstract": "Tags are a simple aspect of Git, they allow you to identify specific release versions of your code. You can think of a tag as a branch that doesn't change . Once it is created, it loses the ability to change the history of commits. Two Types of Git Tags There are two types of tags in Git : annotated and lightweight . Both of them will allow you to refer to a specific commit in a repository, but they differ in the amount of metadata they can store. Annotated Tags Annotated tags store extra metadata such as author name, release notes, tag-message, and date as full objects in the Git database. All this data is important for a public release of your project. Tags can also include a more descriptive tag-message or annotation much like a commit message when you are about to merge . Usually, this is achieved by using ( -a for annotation): $ git tag -a v1.0.0 Executing this command you will create a new annotated tag identified with version v1.0.0. The command will then open up your commit editor so that you can fill up the metadata. In case you wanted to add a tag-message you can pass the -m option, this is a method similar to git commit -m . $ git tag -a v1.0.0 -m \"Releasing version v1.0.0\" Lightweight Tags Lightweight tags are the simplest way to add a tag to your git repository because they store only the hash of the commit they refer to. They are created with the absence of the -a, -s, or -m options and do not contain any extra information. Lightweight tags are essentially \"bookmarks\" to a commit, they are just a name and a pointer to a commit, useful for creating quick links to relevant commits. By Bitbucket tutorials To create a new lightweight tag execute the following command: $ git tag v1.0.0 Additional Commands Listing tags - git tag Use the command whenever you want to list all the existing tags, or you could filter the list with git tag -l 'v1.1.*' , where * acts as a wildcard . It will return a list of tags marked with v1.1 . You will notice that when you call git tag you do not get to see the contents of your annotations. To preview them you must add -n to your command: git tag -n3 . $ git tag -l -n3\nv1.0            Release version 1.0\nv1.1            Release version 1.1\nv1.2            Release version 1.2 The command lists all existing tags with maximum 3 lines of their tag message. By default -n only shows the first line. Tag details - git show <tag_identifier> This command presents you with tag details and information from the commit that was tagged. $ git show v1.0\ntag v1.0\nTagger: Kolosek \nDate:   Fri May 11 10:45:33 2018 +0100\n\nRelease version 1.0\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niMTvhAA...\n-----END PGP SIGNATURE-----\n\ncommit 7d44b6bb8abb96dee33f32610f56441496d77e8a\nAuthor: Kolosek \nDate:   Fri May 11 9:50:13 2018 +0100\n\n    Edited the Login form\n... It prints the author's name, creation date, message, GnuPG signature if present and the information about the referenced commit. If the tag is lightweight, the output will be limited to the information about the referenced commit. Editing tags - git tag -a -f <tag_identifier> <commit_id> If you try to create a tag with the same identifier as an existing tag, Git will throw an error: fatal: tag 'v1.0' already exists . Instead of having to delete it and re-add the tag you can simply replace it while keeping the existing description. Choose the place in your commit history with <commit_id> where you want the tag moved to and add -f or -force to your command. Remember to alert your team members when you \"force\" a change like this. If they still have an \"old\" version of the tag, it may cause conflicts when they try to push to the server! If you have already pushed the tag to the server and want to fix that, first make sure your local version of the tag is correct before you run the following command : git push origin -f --tags . Deleting tags - git tag -d <tag_identifier> Generally, there is no reason to delete the tags because they are inexpensive and don't use any resources unless you have mistakenly created a tag pointing to the wrong commit. In case the tag has been already pushed and you need to remove it from remote repository run: $ git push origin :v1.0 . Publishing tags - git push <location> <tag_identifier> A tag is just a reference to your local repository and it is not automatically pushed to the remote repository with the rest of the code. Instead, you can git push the tag individually, or you can run git push --tags which will push all tags at once. It can be done similarly to pushing the branches: $ git push origin v1.0 Sorting tags - git tag --sort=<type> When looking at a project with lots of tags, using the sort option can come in handy. Supported types are: refname (sorts in a lexicographic order), version:refname or v:refname (here tag names are treated as versions). git tag -l --sort=-version:refname \"v*\" Here we are listing all tags which name starts with \"v\" by their versions. Isn't git tag the same as #tag in social media, but in its own way? It helps us return and list all our previous release! Subscribe to our future article releases! We will make it sure to git tag them for you!", "date": "2018-06-05"},
{"website": "Kolosek", "title": "Rails Debugging", "author": ["Nesha Z."], "link": "https://kolosek.com/rails-debugging/", "abstract": "Even the best Rails developers in the world have to debug their code from time to time. Unlike other frameworks, Rails makes it easy to debug your code, so you can limit your downtime and get your applications up and running. Debugging has never been easier! Byebug Let's start our debugging session by installing the byebug gem . This gem enables you to temporarily stop the code execution at a breakpoint , which is marked with the keyword byebug inside the code. When execution reaches the breakpoint, a marker will be pointing to the current line, and you will be able to type in commands. With the byebug, you can see values inside variables defined before the breakpoint, simply by typing their name. The same logic applies to all of the methods accessible in the given code block. This Gem offers a huge set of commands , you can find the whole list here . We will just mention the most useful ones: next command enables you to go to the next line, skipping all of the methods invoked by executing current line (unless inside any of them different breakpoint exists), step command is pretty similar to the next command, with the difference that step will go into each invoked method (step-by-step), break command stops the execution of the code, continue command continues the code execution. All of the debugging gems provide similar functionalities but use a slightly different syntax and semantics. Another popular debugging gem in Rails is pry . If you are a beginner programmer be sure to check it out as well! Debugging in Production Debugging gems shouldn't be used in the production - they should be used only in the development mode. You install it as a dev dependency . So, how to debug in production? Rollbar One way to do this is by implementing a rollbar . The rollbar provides error tracking software, and it can be integrated into ruby as well, you just need to install it . The whole purpose of the rollbar is to provide you with useful logs of errors which occurred in production. There are multiple reasons you would want this in your application: It reports * all of the unhandled errors and exceptions. It allows manual logging . It stores a bunch of useful information, like http request, requested users, code which invoked an error and many more. It sends email notifications each time some unhandled exception happened on your production server, as well as with scrum software so that each new entry will be automatically transformed into the bug , issue or whatever notation supported scrum software uses. Manually If you don't use a rollbar, an alternative is to manually go through error logs when bugs happen. This approach is a bit slower since there is no notification that something went wrong, and it can be harder to reproduce the bug on your local machine just by looking at log files. Even if there are no annoying bugs showing in your code, it is not a time to rest! To make it sure everything is still working as it should, be sure to write some test using RSpec and/or Capybara ! Tips and Tricks You shouldn't fix production errors directly on the production site, it should first be reproduced and fixed on the local machine before pushing to the production. You can fix production errors on the production site only if the error is caused by some server configurations, specific dataset or deeper code bugs from the production database. Backup each production version before pushing a new one, so in the case of emergency, you can simply revert back to the previous version. Use staging (test) servers to check and test your code in a production environment. Hope this article will help you in your future bug hunt! Hunting bugs or hunting for new articles, everything can be an adventure once you subscribe!", "date": "2018-03-05"},
{"website": "Kolosek", "title": "Nesting in Less and Sass", "author": ["Tijana D."], "link": "https://kolosek.com/nesting-in-less-and-sass/", "abstract": "A code should be organized. That’s the fact and I think is a very good one for the opening of the text about nesting. So... CSS is used for describing the presentation of a document written in a markup language. There are few more texts to check on CSS, e.g. positions in CSS , text underline , relative units . Every one of us is familiar with that and knows that you first need a selector to detect an element and after that comes the styling . For the best way to select the desired element, we should use every trick there is - selectors . However, CSS doesn’t allow nesting , and every element must be selected separately. In another word, if there is a child element it should be defined completely separate from the parent. Less and Sass Less and Sass are CSS pre-processors which extend CSS language in valuable ways. Just one of many improvements they offer is an easier and more natural way of defining nested elements and its relative position among themselves, nesting! Nesting makes the code easy to read, extend, and maintain. It is an option which has same interpretation in less and sass so the next explanation is universal for both of them. Nesting An example will tell everything (and then I will explain it, just in case): Less/Sass: .grandparent{\n     .parent1{\n         .child1{}\n         .child2{}\n         .child3{}\n      }\n     .parent2{\n         .child1{}\n         .child2{}\n      }\n } CSS: .grandparent .parent1 .child1{}\n .grandparent .parent1 .child2{}\n .grandparent .parent1 .child3{}\n .grandparent .parent2 .child1{}\n .grandparent .parent2 .child2{} So, instead of the defining child elements with space in the same line (CSS syntax), pre-processors enable you to use the same structure as in e.g. HTML. So if the child3 element is a child of the parent1 and parent1 is a child of the grandparent, all that is defined just like that. Ampersand As a developer, I'm full of best practices and pieces of advice and here comes one on this. Nesting should must be used for pseudo-classes because it is a must. To define a specific state of an element, it is necessary to add pseudo-class next to the selector and with nesting, it's ultra-intuitive - just put ampersand next to pseudo-class. The & always refers to the parent selector when nesting. Besides this use, it can (but it's unnecessarily) be used next to the child selector but with _ . .child{\n     &:active{}\n } If the ampersand is located right next to the child element in nesting, it is compiled into a double class selector. Less/Sass .child{\n     &.grandchild{}\n } CSS .child.grandchild{} Conclusion Deep nesting, which is actually recommended, has its downsides - it’s hard to reuse, override and make CSS file bigger, but developers who use it are aware of it all and it’s not a problem (believe me). Use everything available to make your code writing experience as fast and as easy as you can. Nesting is naturally one of those things, so use it maximally! Also, subscription to our newsletter is one of the things that can improve you, so use it!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "Creating Rails Modals Using Bootstrap", "author": ["Kristina P."], "link": "https://kolosek.com/rails-creating-modals/", "abstract": "Instead of writing your own JavaScript code for handling remote modals in your Rails application, it is a much simpler approach to implement it by using Bootstrap . In this tutorial, we will explain how to do it efficiently. Step 1: Initial Setup Add gem 'bootstrap' and gem 'popperjs' to your Gemfile and run bundle install . After installing the gems, update your application.js in the following order: //= require jquery\n//= require popper\n//= require turbolinks\n//= require bootstrap\n//= require_tree. Step 2: Modify Layouts in View Make sure that this view is partial. Inside it, you will have the content you want to show in the modal. _new.html.erb <div class=\"modal-header\">\n  <button type=\"button\" class=\"close\" data-dismiss=\"modal\">x</button>\n  <h4 class=\"modal-title\" id=\"myModalLabel\">Modal title</h4>\n</div>\n<div class=\"modal-body\">\n  *Modal content comes here*\n</div>\n<div class=\"modal-footer\">\n  <button class=\"btn btn-primary\">Save</button>\n</div> We need to define a place where modals will be rendered: index.html.erb <%= link_to 'Add user', new_user_path,  {:remote => true, 'data-toggle' =>  \"modal\", 'data-target' => '#modal-window', class: 'btn btn-primary btn-lg'}  %>\n<div id=\"modal-window\" class=\"modal hide fade\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog\" role=\"document\">\n    <div class=\"modal-content\"></div>\n  </div>\n</div> Remote is used to tell jquery to submit this form with ajax, while 'data-toggle' => \"modal\" is used to tell our script to handle this form as the modal form. < div > loads the partial as a modal window and with class=\"modal hide fade\" you can add an extra fade effect to the modal, too! All what is left is to position the modal the way you want. To make this all work we need to add some JavaScript: new.js.erb $(\"#modal-window\").find(\".modal-content\").html(\"<%= j (render 'new') %>\");\n$(\"#modal-window\").modal(); Step 3: Modify Your Controller In the controller add the respond_to block to be able to use Ajax: def new\n  respond_to do |format|\n    format.html\n    format.js\n  end\nend Step 4: Enjoy! We have finally reached the end! Now you just need to click on \" Add user \" button and a nice modal will show up with a fade effect! The only thing that might be left is to add some Model and Controller tests , be sure to check how to get started with RSpec and FactoryGirl ! This is our final result: Thank you for staying with us until the end. If you want to read more about Rails, be sure to subscribe to our newsletter!", "date": "2018-02-05"},
{"website": "Kolosek", "title": "How and When to Create a Website with a Black Background Design", "author": ["Tijana D."], "link": "https://kolosek.com/a-website-with-a-black-background-design/", "abstract": "Black has always been—if not the most popular design color—the color which designers talk about the most. It is sophisticated, energetic, mysterious, elegant, powerful, stylish, and the complete opposite of the default white. Now, I want to focus on the fact that it’s the exact opposite of white (I will talk about this more further in the text) because this is the kind of thing that you want and need in design— something different and intriguing, like the color black. Why do you need it, though? When is the right time for you to create a black background site? I’m going to talk about all of this and more in this post, and fair warning: it’s going to get really dark, then darker than that, and finally that murky shade that’s even darker than #555 (my fellow developers know what I’m talking about). So, without further ado, let’s explore this black matter further! A Bit About Black Background Designs Seeing that I have some design legacy and a lot of design experience, I want to share my impressions and thoughts with you first. Designers’ final goal is to make website content that attracts attention and stands out from the similar ones. However, an even greater goal (if not the greatest) is to create a website that serves its purpose. Here’s what you need to know: designers must emphasize important elements. This is our aim in almost everything we do and it’s our job to create a hierarchy in this emphasizing (in order to highlight the most important details on a website ). Black is perfect if you want to emphasize something on a background of any other color, especially on a white one. The white represents a blank start in our experience (it stands for daylight, empty paper, a page without content, etc.), while the color black is considered to be no different than any other color , like content. That’s why the white color is the first choice for website background. On the other hand, black is \"the heaviest\" color of them all and because of that, it can be difficult for us to highlight other elements. However, what you can do is use that blackness to emphasize other content. You might have noticed that elements that have a black background always seems smaller. This impression is caused by the psychological effect the color black has on peopleーwe tend to consider black like an absence of color with potentially something in it. The biggest user-experience problem with a dark background is still readability, which gets notably decreased when we use a dark background—not just because it is harder for our eyes to notice the color difference, but also because of the screen light that makes the white shine. In practice it sounds like this: Do not use the color black if you have too much content. Be extra careful with text on a black/dark background. You can freely use a black background for images and graphic elements. It is fine to use a black background for smaller elements to point them out to another color. From my experience, people usually find websites with dark backgrounds untrustworthy, because they are unconventional. However, people who are artistic, even a little bit, find this arrangement interesting and tempting. So, in the end, it's all about the audience. What Is the Problem with the Color Black? The main one is that people find it less appealing than other colors. People think of it as depressive, pessimistic, serious, sad, and the color of negativity, and seeing that we react to these types of things unconsciously, there's not a lot we can do to change this. It’s been proven over and over again that people expect to see white when they arrive at a website, and they feel familiar and secure with it . That’s why UX experts are not too keen on exchanging the standard white for the untraditional black. As you can see, the problem with the black background color is real. So, Is There a Place for Black Backgrounds in Design? In the world of design, there are no strict rules about what you can and cannot do, and the same goes for the color black. Over the years, however, I have noticed that black backgrounds best work for the following (remember, this is not an official list, it’s from my experience only): Portfolio websites, Design studio websites, Exclusive product presentations, Unconventional content. Tips on Using the Color Black in Design First things first: even when using a black background, it is important to create a lot of \"white space\", too, because the black surface is visually smaller. The white background also serves as a “break” which is a thing that is missing on a dark background. It is also important to check usability more thoroughly. In my experience, you should never use a light font weight and it should always be 2 or 3 px bigger than the same one on a white background. As already mentioned, the biggest problem with black backgrounds is readability, and every designer should know how to handle it (hint: increasing the font size, kerning, leading ). When picking dark backgrounds as your base, you need to remember that the chance for you to use conventional, learned design elements lowers. Aside from the fact that designers should think a bit harder about the usual elements, they should also put in an effort to make content more interesting and effects more creative. What you need to pay attention to, as well, is which color shades you to use. There are text about how you should always use tinted black color in design and that this tint should come from the main color you use. Examples that I added are using tinted and true black (#000), so I think that idea is optional. The idea to tint the base color comes from nature, where it’s very hard to see shades #000000 and #ffffff (not just because of the format). Another problem lies in the fact that night modes use exactly this \"problematic\" arrangement (black background layout). Every browser extension and tool for optimization in dark surroundings offers the option for you to use a dark background and white text. Also, if there is an option to change the surrounding color in an application, there is always the black background option. Situations in Which You Can Always Use a Black Background This post may be about websites with black backgrounds, but I want to touch upon a couple of elements which function great with the black background. Chances are that you’ll be creating these elements at one point or another, so all of the above will surely come in handy. The elements I’m talking about are: Emphasized sections, Header/footer/navigation, Comments, Pop-ups. Remember when I said how in design, emphasizing plays a huge role and black can really help you do this right. A black background in a header is not all that common, but it’s not entirely surprising, either. The footer can be darker, too, because both the header and footer symbolize the edges of website content, and it can be pretty user-friendly to color them darker. The same goes with other elements I mentioned: sections, comments, and pop-ups. Seeing that they are not the “main content”, they can and should be styled differently. Conclusion If you manage to find the right place and time to use a black background, then go for it. However, bear in mind that these opportunities happen rarely and if you do get your chance, you’ll probably need to wait a lot for the next right moment to come around (otherwise you're really lucky). You can personally like the color black (there’s nothing wrong with that), but what you shouldn’t be is a designer who uses black in their projects—real designers know better than that. Real designers know how to recognize the time and place for it (and to deal with it along the way). That’s it from me for now! Hope this post helped you out and showcased some nice examples for all of you design lovers out there. Examples used respectively: https://www.apple.com/mac-pro/ , http://www.formigari.it/ , https://uppertodo.com/ , https://www.spotify.com/ , http://culture.basicagency.com/ , https://ninjatune.net/2017/ , https://culture.doberman.co/ , http://www.tramont.in/ , https://20jahre.stimmt.ch/ , https://www.fiftythree.com/paste , http://www.ouiwill.com/ , https://www.strv.com/ , https://overclothing.com/ , https://www.weareenvoy.com/ .", "date": "2018-04-05"},
{"website": "Kolosek", "title": "CSS Animation", "author": ["Tijana D."], "link": "https://kolosek.com/css-animation/", "abstract": "The first step in using animation in CSS is transition property . When predefined transitions are not enough or just not suitable, there is CSS animation. Note: No JavaScript is used in this post! (even I believe this one is clear) The animation property has 2 parts: keyframes and animation property. Keyframes define stages and styles of the animation and animation property assign keyframes to the element and specify how the animation will run out on the defined element. Keyframes With defining keyframes you actually set steps for your animation. The syntax for this part of the animation is word @keframes followed with animation name followed by keyframe selectors and its style. @keyframes animation-name{\n     0%{CSS}\n     50%{CSS}\n     100%{CSS}\n } The animation is created by gradually changing from one to another style set by keyframe selectors. These selectors can have value 0%-100% (or words \"from\" and \"to\" which stand for 0% and 100%). I believe it is perfectly clear that 0% presents the beginning of the animation and 100% the end. Properties you can animate are not infinite, so there is a list of them . Now, the most shocking thing about the @keyframes option: !important in CSS inside of the keyframes does not only make your code important but it also ignores the whole code line...!shock Animation Property Once the keyframes are defined you better make sure that work pays off and use them. Inside of the selector you want to animate add animation property. This property is shorthand for eight animation properties. animation\n =\n animation-name\n animation-duration\n animation-timing-function\n animation-delay\n animation-iteration-count\n animation-direction\n animation-fill-mode\n animation-play-state Main properties to add are animation-name and animation-duration . Without animation-name you can't link animation to keyframes and without animation-duration duration will be set to 0 and again, there is no animation. Other properties are used for better defining animation. Animation-timing-function specifies the speed curve of the animation. It can be defined with pre-defined values (linear, ease, ease-in, ease-out, ease-in-out) or custom defined with steps or cubic-bezier values. Animation-delay property works pretty same as in transition 一it defines the start of the animation. By default, the animation will be played one time. With animation-iteration-count you can change this to any number or define it as infinite . Animation-direction property specifies animation cycle一whether it will be played forwards, backward or in alternate cycles. Options that define those states are normal , reverse , alternate (forward then backward) and alternate-reverse (backward then forward). Animation-fill-mode property defines a style of the element when the animation ends or before it started. The default state is none and in this state animation will not apply any styles to the animated element. The option both will set the first keyframe value to the element until it starts, and last keyframe value after it ends. Options forwards and backwards defined separated options from both . And finally, with animation-play-state you can pause the animation and play it again. So, it has 2 options, running (which is default) and paused . Even animation property is shorthand for all listed options, it is common to use it just for animation-name and animation-duration and other properties list separated. animation: icon-animation 2s;\n animation-timing-function:ease;\n animation-delay: 5s;\n animation-iteration-count:infinite;\n animation-direction:normal;\n animation-fill-mode:both;\n animation-play-state:running; Just for the record, it is possible to add more than one animation to the element. And just a short note about prefixes : with all animation properties and keyframes you should use -webkit- . For few specific known issues check CanIUse . Examples The animation to itself is not really a thing that has a specific purpose in the design. On the other hand, it can be used wherever, and it will always add a value. I will say that specific animation (defined with this property) is used on the special effects the most, and animation defined with the transition is used on more common elements like hover and other states. Also, some effects on hover effect, even just a line with unusual behavior is defined with animation property. So, if you need to add \"that something\" to your already finished design, you add a special effect in the background or on some specific elements (loader, scroll, hover...). A nice blog with a much nicer post with the nicest CSS animation examples: https://www.creativebloq.com/inspiration/css-animation-examples . Also, be sure to check Animista for a lot of predefined animation you can easily use. Epilogue The animation property is, in my opinion, one of the highest CSS properties so if not because the wow effect, you need it to your \"master CSS\" goal. If you are interested in UX (if not you maybe should be), check out a very nice text about animation from Invisionapp team . For regular CSS flow in your inbox subscribe to our newsletter.", "date": "2018-06-05"},
{"website": "Kolosek", "title": "Understanding CSS Vendor Prefixes", "author": ["Tatjana B."], "link": "https://kolosek.com/understanding-css-vendor-prefixes/", "abstract": "Have you ever wondered about what -moz- or -webkit- markings in CSS mean? Well, if you have, you are in the right place! Those markings are called vendor prefixes . About Vendor Prefixes Let’s answer the question: What are vendor prefixes? Simply put, vendor prefixes are a way for your browser to support new CSS features before they become fully supported in all browsers. When CSS3 became popular, all sorts of new features started appearing. Unfortunately, not all of them were supported across all browsers. Vendor prefixes helped developers use those new features, and have them supported instantly without having to wait for each of them to become available for every browser. Vendor prefixes are not a hack, and you should feel free to use them. A good way to check which property is available to use without a vendor prefix is by checking the CanIUse service. There you can see which browser currently supports which property. The Prefixes Major browsers use the following prefixes: -webkit- Chrome, Safari, newer versions of Opera, almost all iOS browsers, -moz- Firefox, -o- Old versions of Opera, -ms- Microsoft Edge and Internet Explorer. When using vendor prefixes, keep in mind that they are only temporary . A lot of properties that needed to have vendor prefixes attached to them are now fully supported and don’t need them. How Should You Use Them? You can easily use vendor prefixes, simply by adding them before the property, like this: .element {\n  -webkit-transform: rotate(60deg);\n  -ms-transform: rotate(60deg);\n  -o-transform: rotate(60deg);\n  transform: rotate(60deg);\n} In this case, you ensure the property is supported in browsers. It is a good practice to put the unprefixed property at the bottom. This way, by using the cascading nature of CSS, you ensure that when the property is fully supported, this is the one it will use. Which Property Needs Prefixing? This is a frequently asked question. A good thing would be to stop guessing and check out these websites: http://shouldiprefix.com/ https://www.w3.org/TR/css-2010/#properties Tired of Writing Prefixes? If you are tired of writing prefixes every time you need one, there are a couple of autoprefix services that can help you: https://github.com/postcss/autoprefixer - PostCSS plugin , https://www.npmjs.com/package/autoprefixer - npm prefixor , https://github.com/sindresorhus/sublime-autoprefixer - for Sublime text . Conclusion Hopefully, this short introduction to vendor prefixes helped you to understand them more, and fear them less. Make sure to use them correctly in your new projects, and remember: vendor prefixes are our friends!", "date": "2018-06-05"},
{"website": "Kolosek", "title": "Agile: Philosophy You'll Love", "author": ["Aleksandra M."], "link": "https://kolosek.com/agile-philosophy-youll-love/", "abstract": "Agile is such a popular philosophy which more and more development teams use. Actually, they use Agile methods such as Scrum, Extreme Programming, Crystal Clear etc. But, why is Agile so popular? Let's find out! What is Agile? Simply put, Agile is a philosophy based on the certain values and principles . The name was taken from the book Agile Manifesto , created in 2001. Seventeen experts gathered in Snow Bird Ski Resort in Utah and made this manifesto, with the famous 12 Agile principles. Agile is extremely disciplined management process that is based on: inspection, adaption to change, iterative development, collaboration with self-organizing teams, cross-functional teams, achieving previously defined goals. Agile in IT industry Because of its strict, manageable and achievable principles, Agile found its way into IT market. Since Agile, as a philosophy can't be used, there are several methodologies . Some of them are Rational Unified Process (RUP) , Extreme Programming , Kanban , Crystal Clear , Scrum etc. The biggest pro for Agile in software development is that it is focused on the result and delivering to the client what he/she needed . Why Agile? As always, the answer is market enlargement , especially in the IT domain and software development. There is a constant need for the quality product and being better than the competition. On the one hand, we have startup companies . More and more startup companies are entering the market, with new ideas and methods. They want to be unbeatable. For startups, gaining a client's trust means everything. They can gain it only by striving for perfection . Perfection in timing, producing, communicating. In everything! This crazy market situation turned us into human-like robots , working as hard as we can, the more we can. Now, more then ever, every team should have its own project management tools. Seem like a good time for Agile to step up. Let's talk finance When it comes to Agile and Scrum, we have to take into count one on the most valuable resource - money, and investment, in general. Before you jump to a conclusion: Yes, being Agile is all about being productive and making better results. However, there is no secret that implementing a new philosophy (like Agile) should increase ROI level . In case you were wondering, ROI stands for Return Of Investment and is defined as the money gained or lost compared to the money that is invested. Mishkin Berteig, in a post on Agile Advice , mentioned that team's productivity goes up to about 60% when they use Agile. He, additionally, added that there is no doubt that Agile way of doing business directly stimulates the growth of ROI. Agile vs. Waterfall To truly let Agile shine, we have to mention the notorious Waterfall. If you have been searching to find the right project management concept and method, you have probably bumped into Waterfall. This philosophy was used before Agile and comparing to Agile, it was not good . Hell no! The main reason why Agile dethroned Waterfall is the documentation . With Agile, teams document everything even before the project begins. Nevertheless, the Gods are on the Agile side this time around. Anthony Mersino, in a post for vitalychicago.com, interpreted the benefits of Agile, by sharing Standish Group CHAOS Studies . This group has been conducting surveys every 2 years, since 1994. The surveys included IT companies and their projects. As Mersino highlighted, in order to conclude whether the project is successful or not, Standish Group valued 3 factors - schedule, cost, and scope. Successful projects had at least 2 out of the 3 factors on a satisfying level and vice versa. So, the final conclusions were: Agile projects are 3 times more likely to succeed than the Waterfall ones, Small projects bring more success than the large ones, Agile has some minor flaws - you need to adapt it to every organization. However, the most surprising thing of all was that no matter what size the projects were, the ones that had implemented Agile philosophy had lower failure rates . This is especially noticeable in the case of large projects. At the end... ... we can't deny we love Agile and use it for our projects. If you have read the text, you know why. Being productive and having satisfied clients has never been easier to achieve. Go team Agile! May the Force be with you!", "date": "2017-11-05"},
{"website": "Kolosek", "title": "CSS Reset", "author": ["Tijana D."], "link": "https://kolosek.com/css-reset/", "abstract": "Maybe this post should be the first of the firsts because it's about how to start your CSS. Then again, you should be able to understand what exactly it is you're doing so I'm not too much late with this. Reset in code presents a short set of rules that resets styling of all elements to a consistent baseline. It is needed because the styling isn't consistent across browsers. You don't want something like pre-styling of e.g. table element, to mess with you when you're on. Practice When I was starting with CSS it is said to me that on the beginning you should always write: *{\n    margin:0;\n    padding:0;\n } This was the basic CSS Reset. Some of the most common elements that are styled differently among different browsers are hyperlinks (<a>), images (<img>), headings (<h1> through <h6>), and the margins given to various elements. It is a well-known fact that browsers add a certain amount of padding to almost everything. The example of the different styling of the checkout button between browsers: The example of the different styling of the different elements (headline, link, span, code, blockquote): Every browser has a default HTML formatting and you can see it under \"user agent stylesheet\" in inspect mode. If style is added for the specific element, its default browser formatting is overwritten. Reset Scripts My favorite CSS reset script is one from http://html5doctor.com : html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote,  pre, abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp, small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, figcaption, figure, footer, header, hgroup, menu, nav, section, summary, time, mark, audio, video {\n     margin:0;\n     padding:0;\n     border:0;\n     outline:0;\n     font-size:100%;\n     vertical-align:baseline;\n     background:transparent;\n }\n \n body {\n     line-height:1;\n }\n \n article,aside,details,figcaption,figure, footer,header,hgroup,menu,nav,section{ \n     display:block;\n }\n \n nav ul {\n    list-style:none;\n }\n \n blockquote, q {\n    quotes:none;\n }\n \n blockquote:before, blockquote:after, q:before, q:after {\n    content:'';\n    content:none;\n }\n \n a {\n    margin:0;\n    padding:0;\n    font-size:100%;\n    vertical-align:baseline;\n    background:transparent;\n }\n \n /* change colors to suit your needs */\n ins {\n    background-color:#ff9;\n    color:#000;\n    text-decoration:none;\n }\n \n /* change colors to suit your needs */\n mark {\n    background-color:#ff9;\n    color:#000; \n    font-style:italic;\n    font-weight:bold;\n }\n \n del {\n    text-decoration: line-through;\n }\n \n abbr[title], dfn[title] {\n    border-bottom:1px dotted;\n    cursor:help;\n }\n \n table {\n    border-collapse:collapse;\n    border-spacing:0;\n }\n \n /* change border color to suit your needs */\n hr {\n    display:block;\n    height:1px;\n    border:0;   \n    border-top:1px solid #cccccc;\n    margin:1em 0;\n    padding:0;\n }\n \n input, select {\n    vertical-align:middle;\n } Some of defined styles are pretty standard (ones for <a> and for <ul>), some are added to help accesability (ones for <abbr> and <dfn>) and some are added extra (<hr>). There is a list of more reset scripts that you can use: meyerweb , carrer web , yui library , Simon Harte HTML5-Reset . Instead of CSS reset, some developers use CSS normalize (and some refer to it as “the new reset”). While reset is used for wiping everything out and making your project \"tabula rasa\", normalize keeps good practices while neutralizes cross-browser style inconsistency. I will write about CSS normalize in the future for sure. Until then check this post . Conclusion It is not necessary to Reset your CSS, but it is to be aware of pre-styling of browsers and CSS reset existence. For move after about what to do after the Reset is added in CSS subscribe to our newsletter.", "date": "2018-05-05"}
]