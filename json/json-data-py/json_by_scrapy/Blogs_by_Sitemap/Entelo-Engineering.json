[
{"website": "Entelo-Engineering", "title": "making sense of your rails monolith", "author": ["Alan Ridlehoover"], "link": "https://engineering.entelo.com/making-sense-of-your-rails-monolith-ea54692241c3", "abstract": "Have you ever wondered why your monolith is so damned hard to work with? There are likely several contributing factors. Often those issues boil down to code that is highly coupled and loosely cohesive. But, what does that even mean? Let’s see if we can figure it out together by looking at some code. Here are three classes from the same Rails application that deal with the creation of “Alert” objects. Each class has parameters passed to it in slightly different ways. And, each one does something slightly different in response to the creation of the Alert. But, as you’ll see that they all have the same shape. First, here is a controller that receives an HTTP request, creates an Alert and performs one set of actions on success and a different set of actions on failure: Second, here’s a Worker class that reads messages off a queue, creates an Alert and performs one set of actions on success and a different set of actions on failure: Finally, here is a Source model that reads items from an RSS feed, creates an Alert and performs one set of actions on success and a different set of actions on failure: In all three cases, the underlying business logic is “creates an Alert and performs one set of actions on success and a different set of actions on failure.” But, in all three cases that code is intermingled with (or coupled to) infrastructure code that has nothing to do with the business logic, specifically: HTTP responses, queue management, and logging. Furthermore, the fact that the same business logic exists in three different classes means that these classes lack cohesion. There should be one class with that responsibility, not three. Our goal then is to invert this pattern. Let’s see if we can refactor our way to a less coupled, more cohesive application and see what that looks like. The first and most glaring similarity between these classes is the structured logging. Since this logger is external, it is considered infrastructure code. But, it is mixed up with the domain logic, inside the if statements. So, let’s begin by extracting an adapter from the Source model so that the business logic doesn’t have to speak directly to the ExternalLogger : And, now we can use the adapter in the Source model: This refactor may seem like a small step. And, it is. But, it has a couple of things going for it: First, it is a step toward removing the duplication of the logging code in the three different classes. Eventually, we’ll only have one class that directly talks to the logger. That’s a huge win, especially if we ever decide to change which logging service we’re using. Second, the LogAdapter class is now translating between the business logic and the actual API of the ExternalLogger class. In other words, the business logic is no longer directly coupled to the logger. Let’s move on to see how we can remove the indirect reference to the logger as well. That takes care of some of the infrastructure code that was trapped in the business logic. Now, let’s address the infrastructure code that is trapping the business logic by extracting a command object to create the Alert : And, here’s the refactored Source model with the command object: Note that the adapter has been injected into the command object (on line 8), allowing the command object to rely on an abstraction (the LogAdapter interface) rather than a concretion (the actual LogAdapter class). This is a fine example of the Dependency Inversion Principle . This completes the second step of our refactor. The LogAdapter and Source model now are complete. Let’s move on to the Worker class. Here is the Worker class, again, this time with the LogAdapter : We’d like to introduce the CreateAlertCommand here. But, there’s one more external dependency getting in our way: @message.delete (on line 12). We first need to wrap that dependency in another adapter before we can utilize the command object. Here’s the QueueAdapter extracted from the Worker : There are two things to note here: First, look at how little responsibility this class has. All it knows about is how to delete a message. It doesn’t even know when to delete the message. That decision is made outside this class. This is a great example of the Single Responsibility Principle . And, second, note that the QueueAdapter satisfies the same interface as the LogAdapter via duck typing. In other words, it has both a command_succeeded and a command_failed method, just like the LogAdapter . That’ll be important in just a few seconds… Now, if only we could inject multiple adapters into the CreateAlertCommand : Here, we are now accepting multiple different adapters into the command object and it is notifying each of them of whether or not the Alert was successfully created. This is the observer pattern. And, this is why the two adapters need to be duck types. Great! Now we can finish this refactor by using the CreateAlertCommand in the Worker : Three down. One to go… The last thing to refactor is the AlertsController . Here it is with the LogAdapter : Here again, we need to extract an adapter in order to hide an external dependency from the domain logic. So, let’s extract a ControllerAdapter : There’s a lot going on here. But, before we unpack it, let’s look at the refactored AlertsController : Ok. So, the first thing to look at is the creation of the ControllerAdapter on line 6, above. Notice that we’re passing self into the adapter. In this context, self refers to the instance of the AlertsController class that is handling this specific HTTP request. So, by passing self into the adapter, we are able to delegate the redirect_to and render methods to it on line 8 of the ControllerAdapter . (Keep in mind that redirect_to and render are both instance methods on the controller.) The next thing to note is that we did not have to change CreateAlertCommand in order to extend it to include the behavior provided by ControllerAdapter . All we had to do was inject the new adapter, just like we did before. This is a perfect illustration of the Open/Closed Principle , which states that classes should be open for extension, but closed for modification. Finally, there is a one last change that can use an explanation: on line 15 of the ControllerAdapter , we changed the line from render :new to render :new, locals: { record: record } . Why? Well, ordinarily, Rails would perform some magic to expose the alert to the view through a controller instance variable named @alert . But, since we’re calling render outside the context of the controller, we can’t do that. So, instead, we are injecting the alert into the view as a local variable called record . This means we’ll need to make a small change to the new alert view to use the local variable, on line 3 below: We chose record as the variable name to allow us to reuse the ControllerAdapter with other controllers. That’s it! Using SOLID object-oriented principles and standard Gang-of-Four design patterns , we’ve taken a fairly traditional bit of Rails code that intermingled infrastructural concerns with business logic and separated the two, leaving us with three distinct layers of software: infrastructure, application, and domain. The infrastructure layer is the outermost layer, representing external resources like HTTP requests, queues, databases, etc. In a Rails application, this layer consists of controllers, models, workers, and gems that directly interact with the infrastructure that supports the application (like the ExternalLogger ). The domain layer is the inner-most layer. This layer consists of all the business logic for the application. These are typically plain old Ruby objects (POROs). And, generally speaking, they should not reference infrastructure classes except through adapters. The application layer is the glue that holds the infrastructure and domain layers together. Classes in this layer (also usually POROs) translate between the interface of a domain class and the interface of an infrastructure class, allowing both to remain ignorant of the other. This three layered approach is the definition of a Hexagonal Architecture . In the context of the application we just refactored, the AlertsController , Worker , and Source are all infrastructure classes. The adapter classes belong to the application layer. And, the command class is in the domain layer. To which the astute observer would now interject, “Ah, but what about that reference to the Alert class inside the CreateAlertCommand ? Isn’t that coupling the domain layer to the infrastructure layer?” The answer is yes. And, in a truly hexagonal application we’d need to decouple that code, probably using the Repository pattern. But, for the work my team and I do, we’ve not yet found this to be necessary. ActiveRecord meets our needs. So, many of our command classes directly reference ActiveRecord objects. We jokingly refer to this as a “Trapezoidal Architecture.” In fact, we’re very happy with our trapezoid. The patterns you saw in this post — in conjunction with a self-registering implementation of the GoF factory pattern — allow us to add new business logic to our application by adding a single command class (and the appropriate tests). We rarely have to touch our infrastructure or application layers. As a result, this is a super productive way to work. It has greatly improved developer happiness on our team! We really cannot recommend this approach highly enough! This is the way my team writes software. If you’d like to know more about Entelo or our Engineering Team, please visit SourceCode , our blog about engineering in the recruiting industry. I’d like to thank Fito von Zastrow for pairing with me on this project. I’d also like to thank Ivan Gonzalez , Jason Rosendale , Kelly Hale , and Ryan A Booth for their clarifying questions, comments, and general encouragement. And, thank you! You win a prize for reading this far. Mention this article to me IRL for a free sticker! Entelo: Get the latest HR, technology, and recruiting… Thanks to Fito von Zastrow and Ryan A Booth . Software Architecture Ruby on Rails Design Patterns Object Oriented Programming Written by I am a husband, a twins dad, an avowed progressive, a professional software engineer, and an amateur photographer and drummer. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by I am a husband, a twins dad, an avowed progressive, a professional software engineer, and an amateur photographer and drummer. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2019-09-06"},
{"website": "Entelo-Engineering", "title": "the beginners guide to sourcing engaging and hiring female engineers", "author": ["Swapna Savant"], "link": "https://engineering.entelo.com/the-beginners-guide-to-sourcing-engaging-and-hiring-female-engineers-8b01212666b5", "abstract": "I remember the moment my Head of Engineering said the three words I’d been waiting for: “We are hiring!”. I was excited, ready to start sourcing for exceptional candidates and convince them to join my team. I spent hours perfecting a job description that highlighted all the goodies that Entelo has to offer, and then quickly got both my job requisitions online. Thrilled, I posted my jobs across all the major job boards, shared it with my network and then…waited.The very next day, I had a full pipeline of candidates to review. I read through every resume, reviewing them carefully, and sent them a personalized email. However, after a couple of the resumes, I realized I have no candidates with diverse backgrounds. To be precise, hell ya where are all the women ?! “Women account for fewer than a quarter of the engineers at most tech companies” — NYTimes Most women wait until they tick all the boxes before applying for a job, while, at the same rate, men apply for jobs they are only 50% qualified for; in short, women are disqualifying themselves. On average, female candidates list 16% fewer keywords in their profiles compared to male candidates with the same level of experience in similar roles. Therefore, systems that rely on keyword searches are inherently biased towards male profiles and will yield a limited pool of female candidates. This issue is not limited to just women, it’s intrinsic to marginalized populations — women, non-binary people, LGBTQ, and other marginalized groups. I have been taking interviews for a long time, but this was my first time as a hiring manager and I was surprised to see my pipeline, flooded with male resumes and almost zero candidates with diverse backgrounds. When I mentioned this to one of my recruiter friends, they were completely unfazed. “Oh, this is very common” they told me in a casual remark. I wondered — did this indicate a shortage of qualified candidates with diverse backgrounds in the job market? Don’t get me wrong, it’s not that I wasn’t aware of these numbers. The ratio of diverse candidates is not news to me at all, but this time it was staring me in the face and I needed answers. The engineer in me recognizes the business side of recruiting far more clearly. The dilemma, the frustration that a recruiter can go through, wanting to maintain diversity in a company and struggling to do so with the pipeline can be daunting. After consulting my recruiting team, I decided I would build my own pipeline not just to help them but to actually experience their pain points. After all, you have to walk the path before you can preach it. First natural course of action for me was to find the audience who felt the same pain and get to know their stories. Meetups and coffee dates with network acquaintances helped me to better understand the problem. This was the first time I was in the driving seat of the problem and boy was the road bumpy! While it’s a fact that there are fewer candidates with diverse backgrounds than men earning computer science degrees, there are things we can do to correct the scarcity of female talent. Here’s what I learned while playing my hand at recruiting: Job titles: While job titles do not matter to our company, but they still matter to the outside world. The majority of men apply for a role, regardless of whether it is full stack, backend or front-end. And they should — engineers are engineers; while most of them might be specializing in one area, they are likely well-versed in all three. Conversely, women are much more likely to apply to roles that directly align their previous titles and are quicker to disqualify themselves from stretch titles. Outreach: Personalizing an email goes a long way. For the candidates to realize that someone took the time to go over their profile and notice some accomplishments can give more legitimacy to the message. What I found particularly engaging for female candidates was to talk about our commitment to building an inclusive engineering culture and what I thought they specifically would add to our team. D&I Tools: It’s critical to find a sourcing tool that can help you better find and engage female talent. The amount of time I spent in sourcing and reaching out to female candidates was about twice that of their male counterparts — and this was with the helping hands of AI and automation. Manually, that time would have more than doubled. Entelo has focused its efforts on developing features that help recruiters find the right candidates for their job. At the core of this mission is diversity, as the strongest teams are also the most diverse. I feel very honored to be part of the team that helped bring these features to life. Throughout my sourcing process, I used not only Entelo’s diversity filters but any filter that helped me surface less traditional candidates. Rare Find filters surface those candidates who are otherwise hard to find using other search engines. This strategy helps in getting a mixture of candidates in your pipeline that further ensures a step forward in promoting and nurturing a diverse environment. As I mentioned earlier, personalizing email outreach became very valuable in attracting female candidates and Entelo Insights helped to ensure that outreach remained unbiased. For example, words like “rockstar” that are very male-centric were flagged and removed. Recruiting and encouraging a diverse environment in the workplace is no small task. It is crucial for a company to: Empower their talent acquisition teams by providing them with software-based tools to engage with diverse candidates. Make conscious decisions to address unconscious bias. Collaborate with business and hiring teams to build buy-in for diversity initiatives and practices. Introduce meetup initiatives with talent acquisition teams around recruiting challenges to better understand their pain points. Entelo: Get the latest HR, technology, and recruiting… 31 Diversity Sourcing Hiring Tips Engineering Mangement Hiring For Startup 31 claps 31 Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2019-08-12"},
{"website": "Entelo-Engineering", "title": "why you should make everyone a project lead", "author": ["João Antunes"], "link": "https://engineering.entelo.com/why-you-should-make-everyone-a-project-lead-f167472b580d", "abstract": "In this blog post, I’ll describe my latest approach to improving morale and growing the team when facing a more challenging quarter. It is not a one-size-fits-all solution and it might not be well-suited to other teams or other types of roadmap, but it was successful for my team and could be for yours too. Before we start, let me give a little bit of context. At the beginning of the last quarter (Q4), I took on the role of Engineering Manager (EM) of the team responsible for the two most prominent and user-facing Entelo products, Search and Envoy. Q4 is typically the most impactful quarter for the company because due to budget constraints and commitments, most prospects prefer to wait until the end of the fiscal year to sign high-dollar deals. This usually translates into a higher effort from product and engineering to accommodate minor (and sometimes major) requests from prospects or trial accounts. Sales renewals are a huge challenge for many SaaS companies, even the most successful ones. Failure to do so, also known as customer churn, can affect not only Annual Recurring Revenue (ARR) but also team morale. This is particularly true for startups, where limited resources restrict how many current, new, and future customers can be supported and kept happy. Sales teams, focused on reaching out to prospects and building pipeline, feel the pressure to rapidly replenish churning business with new deals. Customer Success (CS), on the other hand, is forced to prioritize larger customers over smaller ones, risking discontented customers who feel neglected. Even Engineering can become frustrated and disheartened that their efforts ultimately do not produce the expected results. To reduce customer attrition, our CS and Data Science teams partnered up to identify the user actions most strongly correlated with user engagement and customer retention. We then devised a rather ambitious roadmap with several user-facing product enhancements as well as multiple experiments designed to increase user-engagement. Some of these features required coordinated efforts between our team and the Infrastructure and Data Science teams to build services that would implement and execute new machine learning models. It’s fair to say that the roadmap called for both intra-team (backend, frontend) and cross-team collaboration (product, design, infrastructure, data science, CS). With so many teams and stakeholders involved, one of the main challenges was keeping everyone (or at least the decision-makers) up-to-date on the status of the several roadmap items to anticipate any roadblocks as soon as possible. It was imperative that the overall status of any feature could be regularly determined in a quick and accurate manner to avoid unexpected delays that could jeopardize the execution of the roadmap. Another challenge my team faced was improving our relationship with CS. Being an agile and high-performing team, we are used to ship fast and, sometimes, break fast. We typically rollout big features internally first, and then phase them out to the customers. With the goal of getting a Minimum Viable Product (MVP) out of the door quickly, we sometimes don’t spend as much time and resources as we’d like in thorough testing, in particular on our internal releases to CS users. As a consequence, our CS team grew frustrated when bugs popped up in newly rolled out features. We had a challenging quarter ahead of us. There were many times I succeeded and there were also times I failed, but even in the face of failure I kept trying out new things until I finally found success. The times I learned the most, performed the best, and overall had the most fun, were when I was given extra responsibility and was pushed out of my comfort zone. “When people are given purpose (vision), autonomy (decision making and growth ownership) and mastery (functional ownership), they can reach decisions based on their expertise and what would fit best to the team’s values.” — Oren Ellenbogen [ Leading Snowflakes ] Typically, we do this before promoting an individual: we put them in a position where they need to informally perform a new role with new responsibilities. Once they “prove” they can perform the new role at an acceptable level, they are officially promoted. This is a very common promotion approach designed to avoid the Peter Principle , in which employees are continually promoted based on their success at previous roles and until they reach a level at which they are no longer competent. Promotions, and the extremely valuable growth opportunities that come with it, are, however, rare events (e.g., once a year or every two years) and as such they are given away very sparingly. If your team is craving for growth, give them those opportunities. Don’t wait for promotion season to groom a few chosen ones, who are probably not the ones in greater need of learning opportunities. Push your team out of their comfort zone into roles of higher responsibility. Do it to all of them , so they can learn from their successes and failures together. Highly empowered employees showed engagement levels in the 79th percentile, whereas disempowered workers rated in the 24th percentile for engagement. [ Forbes ] Given the nature of our ambitious roadmap and the challenges ahead, it seemed natural to give everyone on the team a little more responsibility. Responsibility gives people a higher sense of commitment and motivation. With this in mind, we introduced the concept of Project Lead. For each larger feature or User Story, an engineer was chosen to lead its design and implementation, and to coordinate its execution with other stakeholders (engineers, product managers, designers, marketing, etc). The size and complexity of each project can vary, but at a minimum they require a one-week effort involving more than one engineer. We believe that if it takes less than one week, then it’s probably too simple to take advantage of a Project Lead. Businesses with a strong learning culture enjoy employee engagement and retention rates around 30–50% higher than those that don’t. [ Robert Half ] In addition to the design and implementation, each Project Lead also had to make sure their project was on the right track to be integrated into production, which lead us to come up with the acronym SFM : S tatus updates: The Project Lead became the central point of communication for their designated project, which, from the EM and PM standpoint, made determining the current status of a project straightforward. This shifts the burden of piecing together the progress or delays of multiple tasks from each of their several contributors from the EM and PM to the Project Lead, who now also has the responsibility of understanding the entire scope of the project and to be well-informed at every step along the way. F eature flags: The Project Lead makes sure every major feature is available through feature flags, so we can control how to roll out the feature to our customers, as well as how to roll it back if needed. M etrics: To track the impact of each feature, Project Leads must add support for metrics (e.g., statsd , controller or user events, etc.). This will allow us, in future quarters, to understand which feature we should further work on, eliminate, or leave as-is. We also provide the Project Leads with the necessary support and resources. At any point, they have the autonomy to schedule short 30-min meetings with anyone on the team to discuss any parts of the project. Preliminary brainstorming sessions with the EM and Team Leads are highly encouraged, as are meetings with any experts outside the team. Furthermore, to ensure high quality standards, each Project Lead is granted a 30-min testing session with the entire team. This provides the Project Lead with very early feedback on large portions of the functionality and thus allows them to rollout a much more robust version for the internal release. Having a more stable first version allows CS to uncover harder-to-find bugs and avoids some of the frustration that comes from using a prematurely released feature. In the end, it was the experience of leading a project, any project, of being given a leadership opportunity and the responsibility that comes with it, that made this a successful growth experience. Picking the right Project Lead for a given project is no trivial task. Everyone has their own interests, which could lead to some pretty strong opinions about who should lead which project. We aim to be as democratic as possible, but we also know that we can’t accommodate everyone’s first choice. At first, I asked each team member to privately share with me their top choices, so I could try to match Projects with Project Leads. I would then ask them (not tell them) if they would like and agree to lead a particular project. If the project they were elected to lead was their first choice, it was a plus, not a requirement. Having a wide variety of projects to choose from (8–10 projects for 6 Project Leads) certainly helps, but ultimately, I think what made this a success was that everyone on the team, from Junior to Senior, was a Project Lead of at least one project. In the end, it was the experience of leading a project, any project, of being given a leadership opportunity and the responsibility that comes with it, that made this a successful growth experience. Failures can be partial successes, but only if we learn from them. At Entelo, we foster an engineering culture that encourages experimentation with new approaches to achieve ambitious goals (even if they end up failing). This safe environment, together with our exciting roadmap and increased responsibilities, makes the team feel both supported and eager to see what they can accomplish. Naturally, success is the ultimate goal, but saying that a project succeeded or failed may be too simplistic. Failures can be partial successes, but only if we learn from them. And even successful projects can hide partial failures, which, if not reviewed and understood, may reoccur in future projects. “By asking why five times and answering it each time, we can get the real cause of the problem.” –Taiichi Ohno (Architect of the Toyota Production System) A popular tool from the Agile methodology used to review past actions and learn from them are Retrospectives. A week after the project is released, the Project Lead schedules a team meeting to review and discuss the project’s implementation and results. These meetings are also lead by the Project Lead, who walks through the project’s timeline, important decisions, and outcomes. After all the facts are laid out, the team discusses what went well (and should be repeated in future projects) and what didn’t go so well and could have perhaps been prevented. Sometimes, when we need to drill into the root cause, we might even employ the Five Whys strategy. Information and transparency is key in leading a good retro. It is crucial to keep in mind that Project Retros are not performance review hearings. They can provide valuable feedback and constitute one of the best learning tools, but only if everyone is candid, respectful and checks their egos at the door. Project Leads have an increased responsibility to lead the design and implementation of the solution, but they are also empowered with a great deal of autonomy. They decompose the project into smaller tasks, choose who should collaborate on it and even assign those tasks. They are the key figures who know the status of the project at all times. When the Project Leads take on a project, they are owning it and committing themselves to its success. There’s also an implicit trust placed in them, which further drives their engagement. They don’t want to let anyone down, especially themselves. The project they lead becomes part of them and this is a very powerful motivator. Let them fail. But be there by their side when that happens to help them get back up. Being a Project Lead can be more or less challenging, depending on the complexity of the project and the engineer’s experience. In some cases, it could really bump the engineer out of their comfort zone. For instance, junior engineers, accustomed to taking on smaller tasks during Sprint Planning, might find it hard to scope the project and decompose it into smaller tasks. Even a more seasoned engineer might struggle with other parts of the role, like cross-team collaboration or communication. And even if you’ve managed a Sprint or a project before, the more times you do it, the better you’ll get at it. 42% of employees say learning and development is the most important benefit when deciding where to work. [ Udemy ] It’s important to note that having an accepting and supportive culture is paramount. Depending on the Project Lead’s experience, their new role may be overwhelming, so it’s important to provide them with the necessary support and understanding. This includes checking-in on them periodically and allowing them to ask for help at any point. And, as long as it doesn’t negatively impact the company or their career, let them fail. But be there by their side when that happens to help them get back up. A project carries the weight of a larger, independent feature. With the responsibility of being the one in charge of its execution, the Project Lead also feels a sense of pride and gratification in delivering it. At Entelo, every contribution to the product is recognized in many ways, from an email from the Product Team to all employees announcing the newly released features, to a mention by the CEO in the company-wide Week-In-Review presentations on Fridays. The Project Lead is always at the head of the list of contributors that made that project come to life. At the end of Q4, we couldn’t be happier with the results. We successfully completed our roadmap, including seven Projects (lead by their respective Project Leads). It might be a bit unfair to compare the productivity of different quarters as many different factors are at play and roadmaps can vary greatly, but in the end, the team considered this one of the most productive quarters to date. Project Leads have been highly motivated, engaged and committed. They have learned how to scope and plan the execution of a Project, as well as how and when to collaborate with other stakeholders to get results. From a management point-of-view, delegating some of these responsibilities to the Project Leads was a very efficient reallocation of resources and alleviated our work. From a Project Lead perspective, it was a fulfilling experience in which they felt more involved and learned more than in previous quarters. Have you used a similar strategy with your team? What other ways to motivate and grow your teams have you used? Let us know in the comments below. Also, if you’d like to know more about Entelo or our Engineering Team, please visit SourceCode , our blog about engineering in the recruiting industry. Entelo: Get the latest HR, technology, and recruiting… 82 Management And Leadership Management Engineering Team Startup 82 claps 82 Written by Head of Engineering at Entelo Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Head of Engineering at Entelo Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2019-04-24"},
{"website": "Entelo-Engineering", "title": "how to overcome imposter syndrome in the workplace", "author": ["Swapna Savant"], "link": "https://engineering.entelo.com/how-to-overcome-imposter-syndrome-in-the-workplace-f5a83c77b16c", "abstract": "I have 10 years of experience as a software engineer. Well, who am I kidding, closer to 12. As you can see, I have a tendency to undersell myself — not because I am any less of an engineer, but because I struggle with imposter syndrome . Imposter syndrome is a pattern of behavior in which people doubt their accomplishments and have a persistent, often internalized fear of being exposed as a fraud. If you’ve ever explained away your success with thoughts like “I just got lucky” or “Anyone could have done that” — than you have fallen victim to imposterism. And you’re not alone: one recent study suggests an estimated 70% of people suffer from imposter syndrome at some point in their lives. For women in STEM fields like myself, the odds are even higher. There is a widely accepted stereotype of what an engineer looks like (male), to the extent that even AI algorithms have picked up on them . It’s no wonder many female engineers feel they have to constantly prove their worth. I have often doubted myself as an engineer, even as I rapidly ascended the engineering hierarchy from Software Engineer to Senior Engineer to Lead Engineer — at three separate companies. Somehow, I always got stuck at that point, with no idea of how to break through the glass ceiling. It wasn’t until I joined Entelo that I became aware of the unjustified self-doubt holding me back from progressing further in my career. It all started with a conversation I had with my VP. I remember my first conversation with the VP of my department well. After some small talk and a few getting-to-know-you questions, he asked me about my 5 year plan. I gave him my well-rehearsed response: learn the latest technologies, own feature development for a product, and eventually lead a team. Rather than accepting my canned response at face value, he dug deeper and pushed me to come out of my comfort zone. You already achieved this at your previous company, so what made you move on to Entelo? I wanted to keep working on new and interesting technologies, I told him. But don’t you want to reach the next milestone in your career– management? I pointed out that I’d never managed anyone before. As a team lead do you not already mentor and guide your peers daily? I paused. This whole time I had overlooked the foundation for management I had already built, simply by being a leader on my team. After much thought and some awkward silence I finally gathered the courage to ask my VP: what do I need to do to become an engineering manager? With zero experience as a manager, I assumed I wasn’t qualified for the role but he said something that stuck with me: most women wait until they tick all the boxes before applying to a job while, at the same rates, men apply to jobs they are only 50% qualified for. I am glad I had that conversation with my VP a year ago, as it set in motion my path to Engineering Management. After I raised my hand for the management track, my manager and PM became my biggest cheerleaders. Along the way, they had many tough conversations with me and threw me into uncomfortable positions. Instead of taking training sessions, I began actively leading the team. Slowly, I took on more and more managerial responsibilities, holding 1–1s with my team and giving them constructive feedback. Thanks to their support and guidance, I have gained an entirely new, non-technical skill set in the past year. I developed in areas I never realized were holding me back. This challenged me further to improve, to learn even more. Today, my focus is more about learning new technology so that I can strategize and plan better. This experience has taught me the importance of a supportive and nurturing environment when you make a career transition. That’s why, moving forward I will ensure I am comfortable with how future employers answer the following questions: 1. What about this position is most important? How does it support management and serve direct reports? 2. What would you want to see me accomplish in the first six months? 3. What is the typical career path for someone in this role? 4. How would you measure my success, and what could I do to exceed your expectations? 5. How is the feedback process structured? If you are considering a new position or find that you can’t answer these questions in your current role, I encourage you to ask them of your manager as well. Imposter Syndrome is starting to get more recognition in the workplace. Every person has suffered from it in silence at some point or another– they just need to be made aware of the fallacious beliefs that misguide them. I encourage everyone, especially women in STEM and other groups susceptible to feelings of imposterism, to give their 5-year plan a very hard look. Understand the consequences on your career growth if you do not. There are a lot of people and resources ready to help you plan your career and reach your goals, if only you are able to recognize them first. On the employer side, a lot can be done to root out imposteristic tendencies in the workplace. Encourage managers to partner with their reports to set out a career path they can both agree to. Provide opportunities for all employees to step outside their normal 9–5 responsibilities and take on something new, despite their previous experience. Sometimes, it only takes one open and honest conversation like the one I had with my VP of Engineering to help a promising individual recognize their potential. What are your experiences with imposter syndrome, and how have you worked to overcome it? I would love to hear back from everyone about their experiences in the comments below and help in anyway I can. Entelo: Get the latest HR, technology, and recruiting… 116 1 Imposter Syndrome 116 claps 116 1 Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2019-06-14"},
{"website": "Entelo-Engineering", "title": "extension without modification", "author": ["Fito von Zastrow"], "link": "https://engineering.entelo.com/extension-without-modification-cb0f9cfb64a3", "abstract": "Building software often requires changing and extending existing behavior. This need presents itself in different ways. One example is the need to take different actions depending on some input. This can be a painful process if our code is not prepared for change. Let’s look at a concrete example. Imagine we are working on an application in charge of sending notifications to users via an API. When there is only one API to interact with, the following class meets our needs: If our application is successful, we’ll be required to support multiple channels of communication. No problem, we can modify our class to support multiple channels: Our changes satisfy the new requirements. But, our class has taken on new responsibilities. It used to be in charge of one thing only: notifying users via an API. Now, it is also in charge of building the correct API object for the given channel. In order to build these objects, our class knows what each one of them requires. Adding support for additional channels will increase the complexity and brittleness of this class. It has too many reasons to change. We can improve our design by applying SOLID object-oriented principles and design patterns . First, let’s extract the API specifics into small objects, each with a single responsibility : Each Messenger object is in charge of interfacing with one API. Now we can change UserNotifier to use these objects: Extracting Messenger objects decouples the UserNotifier from the specifics of the APIs. UserNotifier no longer knows how to build API objects. It has fewer reasons to change than before. Still, adding new messaging channels results in changes to this class. A pattern that’s very helpful when dealing with this type of structure is the Gang-of-Four factory method pattern . Let’s apply it to our code and see what it reveals: Extracting the factory method makes it clear UserNotifier has two responsibilities: • Mapping channel types to Messenger objects. • Asking the Messenger to deliver a message. Since we are trying to minimize the reasons for UserNotifier to change, let’s apply the Single Responsibility Principle and extract the factory method into an object: Then, UserNotifier can delegate to MessengerFactory to build the correct Messenger object: The UserNotifier no longer knows how to build a Messenger object or what channel they correspond to. It only knows MessengerFactory will return an object that responds to deliver . This is an example of the Dependency Inversion Principle , where you rely on abstractions, not concretions. The main benefit of extracting MessengerFactory is that UserNotifier no longer needs to change when adding new channels: Adding support for WhatsApp would require a new entry in MessengerFactory::MESSENGER_CLASS and a WhatsAppMessenger class. All Messenger classes have the same initialization requirement. Adding a BaseMessenger class removes this duplication, simplifying the addition of new Messenger types: Let’s take a look at what we’ve done so far. Our UserNotifier class is in better shape now. However, all we’ve done is move the reason to change from UserNotifier to MessengerFactory . We can do better and completely remove the need for these classes to change when adding new channels. A common approach in Ruby is to introduce a convention and use metaprogramming to build factory objects: This approach works for our current requirements, but it has a few pitfalls: • It prevents a global search from finding all references to a class. • New keys or classes might not fit nicely with our convention: whats_app -> WhatsAppMessenger . • Changing a class name requires us to change all references to its corresponding factory key. There is a different approach: Factory self-registration. Let’s generalize MessengerFactory so that it no longer references Messenger classes directly: The main change to the MessengerFactory is that it now allows classes to be registered on it. It no longer cares about what type of object it’s building. If it has a corresponding key in its registry, MessengerFactory will build it. Now, we want our Messenger classes to register themselves on the factory. An elegant way to give our Messenger classes this ability is via a module: We can include MessengerFactoryRegistration in the BaseMessenger and configure a key on each Messenger class: Calling the corresponds_to method registers the class on the factory, under the provided key. The correspondence between a class and its key is explicitly stated in the class definition. Our MessengerFactory is now open/closed : we can extend its functionality without having to modify it. Adding support for WhatsApp requires only a new class: This approach provides the following benefits: • It does not require a convention. • Adding a new Messenger class does not require other classes to change. • Class names are decoupled from their factory keys. Renaming either one does not require the other to change. My team and I use this pattern. Adding new functionality to our application usually only requires adding a new class and its corresponding tests. In fact, we have gotten so much value out of this pattern that we decided to extract it into an open source gem: Industrialist . Industrialist provides the factory and self-registration functionality. All you have to do is configure your base class: That’s it! We started by adding complexity to a simple class, giving it multiple responsibilities and multiple reasons to change. Then, we applied the single responsibility principle and the factory pattern to produce a design that’s resilient to changes and easily extensible. I bet each of these classes would be a joy to test as well! This is the way my team writes software. If you’d like to know more about Entelo or our Engineering Team, please visit SourceCode , our blog about engineering in the recruiting industry. I’d like to thank Alan Ridlehoover for introducing me to this pattern and pairing with me on it. I’d also like to thank Vijay Ram for his clarifying questions and comments. Entelo: Get the latest HR, technology, and recruiting… 108 Thanks to Alan Ridlehoover and Vijay . Software Development Factory Pattern Ruby Object Oriented Open Closed Principle 108 claps 108 Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2019-03-22"},
{"website": "Entelo-Engineering", "title": "other benefits of redux", "author": ["Vandeth Nop"], "link": "https://engineering.entelo.com/other-benefits-of-redux-c394522b4e9e", "abstract": "If you’ve used React before, then I’m sure you’re familiar with unidirectional data flow and how it can be a bit of a hassle at times. The image below represents a React application and each numbered circle is a component. Imagine if you had to pass data from the state as properties from component 1 all the way down to component 8, and component 8 would like to update the state with new data. At this point or later when the application continues to grow, adding Redux would help to manage passing data and functions to other components. What are some other benefits of adding Redux to an application? It’s fine and not impossible to build an application without Redux, but using Redux comes with a few benefits such as predictability, maintainability, and testability. Redux has a store (source of truth) that holds the application state. The image below represents an application that uses React and Redux. Component 6 connects to the store to have access to the application state and component 8 dispatches an action (a Javascript object) to the store to update the application state. All application state changes are made in the store. Reducers are pure functions that handle all changes made to the store. Using pure functions to update the application state helps keep an application predictable, because it will always return a new state and not mutate the previous state. Introducing Redux to an application will help with maintaining an application. We remove the strong coupling of parent and children components, because we no longer need to pass properties from the very top of the application all the way down to the children components. This allows us to make necessary changes in a child component without having to make changes in every component connecting to the parent component. For example in the image above, if we needed to remove only component 6, we could just remove it and have component 5 take its place with connecting to the store and components 7 and 8. Redux also helps with testability of an application. The store contains the application state and reducers handle updating the state. So, we are able to test the reducers which are pure functions. Entelo: Get the latest HR, technology, and recruiting… 2 JavaScript 2 claps 2 Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-04-23"},
{"website": "Entelo-Engineering", "title": "entomology the art of classifying bugs", "author": ["Alan Ridlehoover"], "link": "https://engineering.entelo.com/entomology-the-art-of-classifying-bugs-fce44224565f", "abstract": "All software contains bugs. Period. Some bugs require immediate attention, once discovered. And, some bugs aren’t worth fixing at all. How you differentiate between the two makes all the difference inside and outside of your Engineering department. This is how we do entomology at Entelo… We classify a bug by severity and scope in order to assign it a priority . Severity is a measurement of a bug’s impact on the usefulness of the software. A high severity bug significantly curtails the user’s ability to derive value from the system. A moderate severity bug limits a user’s access to a major feature. And, a low severity bug is a minor nuisance, but not blocking use of any features. Scope is a measurement of the number of users impacted by the bug. The more users affected, the broader the scope. The fewer users affected, the narrower the scope. Priority is used to set expectations between departments (and with our customers) as to when an issue will receive attention. Essentially, a priority level is shorthand for a service level agreement and the actions we take in response to a bug. We define priority levels as follows: A few notes on scope: If we think a bug affects all users, we treat it as such until we discover otherwise. If we discover that, in fact, the bug did not affect all users, we will downgrade the bug as appropriate. If we can reproduce a bug, we treat it as though at least a subset of users (some) are affected, even if only a single user has reported the issue. If we cannot reproduce a bug that was reported by a single user, we treat it as such. We define our default service levels as follows: Note that “receives attention” means that the Product team will prioritize and the Engineering team will look into the bug within the specified time frame. It does not promise resolution within that time. Some bugs are harder to fix than others. For the vast majority of bugs, the default service level should be fine. But, from time to time, we may encounter an issue that requires more urgent attention than the default SLA affords. Specifically, the Product Manager may decide (in consultation with Customer Success) to prioritize a bug sooner than the SLA would warrant, based on the presence of one or more aggravating circumstances, including but not limited to: The bug affects our relationship with a strategic customer. The bug affects the renewal of a large account. It is important to note that aggravating circumstances only affect a bug’s SLA. They do not change a bug’s priority level, since priority levels govern the type of response Engineering is required to undertake for SOC 2 compliance. This is important because the additional overhead associated with P0 and P1 bugs means that Engineering can actually resolve more P2 bugs than P0 and P1 bugs in the same amount of time. Actually, this is just the beginning. We’ve just rolled out the framework across the company. Our hope is that it will reduce communication friction between departments by setting priority levels objectively, based on severity and scope. Entelo: Get the latest HR, technology, and recruiting… Software Development Bugs Software Engineering QA Quality Assurance Written by I am a husband, a twins dad, an avowed progressive, a professional software engineer, and an amateur photographer and drummer. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by I am a husband, a twins dad, an avowed progressive, a professional software engineer, and an amateur photographer and drummer. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2019-04-22"},
{"website": "Entelo-Engineering", "title": "10 lessons learned extracting a service from a monolith", "author": ["Alan Ridlehoover"], "link": "https://engineering.entelo.com/10-lessons-learned-extracting-a-service-from-a-monolith-535a15c6d277", "abstract": "My team and I just built a new messaging service to replace an aging subsystem in Entelo’s primary application. We modeled the service on real life concepts, simplifying the data model considerably, in order to unlock new features. Here are ten things we learned along the way: Our most conservative guess as to how long it would take to complete the project was three months. It took ten. To be fair, we estimated that the entire team would take three months to complete the work. But, in reality, we split our time between this project, ongoing maintenance, and various new features. So, given half the resources, the original estimate was more like six months. That said, most of the underestimated work was related to disentangling the existing subsystem from the rest of the monolith. What started out as a search for references to classes owned by the subsystem, turned into a search for raw SQL queries that referenced the underlying database tables. That’s how tightly coupled the subsystem was to the rest of the app. Lesson learned: Pay attention to all the integration points between the subsystem you are extracting and the rest of the system. There’s likely more work there than you think. In his book Working Effectively with Legacy Code , Michael Feathers recommends finding seams within the software, where you can insert yourself and add tests. And, in his book Domain Driven Design, Eric Evans described the Anti-corruption Layer Pattern as a means of inserting a façade or adapter between two subsystems to prevent them from bleeding into each other. So that’s what we did: we wrapped a façade layer around our subsystem within the monolith. This allowed us to route all requests from the rest of the system through the façade before hitting our subsystem. By adding that layer to the system, we were able to write integration tests for the subsystem that needed to continue working even after we switched over to the new service. As mentioned above, this was by far the most difficult piece of extracting the service. Pulling half of a raw SQL query behind the façade and integrating the results with the rest of the query is time consuming work. Lesson learned: When constructing an application, whether building a monolith or a service oriented architecture, it is important to maintain boundaries between subsystems. This is the only way to keep your application pliable, so that subsystems can be refactored to make room for interesting new features without affecting the rest of the application. We ran both systems in parallel for months as we brought the new service up to feature parity with the old subsystem. We could do this because we created the façade mentioned above. When a request came into the façade, we could send it to both the service and the subsystem, compare the results, and check for (and fix) data inconsistencies before cutting over. It also allowed us to test the new service infrastructure against production traffic as a real-world stress test. Lesson learned: We found most of our bugs by running production traffic through the new service before switching over to it. Though, this did cause an increase in complexity within the façade, we believe that the confidence gained in the new service justified the cost. A feature flag is a boolean value that can be turned on to enable a feature, or turned off to disable the feature. Typical feature flag systems allow you to turn the flag on for a subset of your users. This allows you to roll out functionality gradually, rather than all at once. Our implementation used four separate flags: One flag controlled whether or not to write to the new system. This allowed us to run the systems in parallel. We turned this flag on very early in the process, giving us the benefits described above. Another flag controlled whether to read data from the legacy subsystem or the new service. This allowed us to turn on the new service for our team in order to test the validity of the data being returned before turning it on more broadly. The last two flags controlled which system could access our third-party email providers. One flag turned off the legacy subsystem. The other turned on the new service. We separated these flags so as to allow us to turn both systems off in the event that we detected a serious flaw in the process. (Thankfully, we did not end up needing this functionality. But we are glad we took the time to prepare for the worst case scenario.) The last advantage of using feature flags is that we were able to roll out the new service in a way that was least disruptive to the business. For example, my team was able to do internal testing before asking everyone else at Entelo to help out. And we were able to gradually roll out the changes to our customers in the order that made most sense to the customer facing teams. Lesson learned: Use separate feature flags for writing to and reading from the new service. This allows you to begin running the service in parallel with the legacy system. And, in our case, adding the extra flags to prevent duplicate emails from being sent was critical. One of the first things we built inside the new service was a logger. The logging and exception handling turned out to be crucial when debugging the system — especially across the service boundary. And, later, adding monitoring allowed us a window into our data import process. We were able to do this easily because every operation that logged data did so via our centralized logger. Lesson learned: Centralize your logging and exception handling, and build it early. You’ll thank yourself later. In order to be able to present historical data without having to query both systems, we decided to port our old data to the new service so that all data requests could eventually be served from there. The vast majority of the data migrated over correctly. But there were multiple valid edge cases. Each time we would figure out one of the edge cases, we would adjust the migration. In the end, we had about 700 records (out of 1.2M) left over that we could not explain. The vast majority were several years old. Basically, this data did not fit any of the corner cases we’d identified and resolved. Rather than sinking more time into it, we decided to mark these records as “failed” and move on — but not before we’d spent days whittling that number down as low as we could. Lesson learned: Production data is sloppy. Most of it will look correct. Some of it will not. The older the data, the harder it is to migrate. Records will be missing. Foreign keys won’t exist. Just roll with it. Make the best, most user friendly decisions you can. When you have two different systems running in parallel, you need a shared id space. Any UUID will do. But we chose to use deterministic UUIDs in order to support idempotent migrations. A deterministic UUID is one that is generated from underlying data, typically a namespace and a unique id. Given the same data, the algorithm always produces the same UUID. In our case, the façade in the main application generates these UUIDs based on the data that makes the record unique in the legacy system. Then it sends the UUID to the service for storage. Inside the service, we then indexed the UUID field with a uniqueness constraint preventing duplicates. This makes idempotency possible. Whenever we get a uniqueness constraint violation, we know that the record already exists. Lesson learned: Given how unpredictable your data will likely be, you will probably need to run your migrations multiple times as you adjust them to handle corner cases that arise out of your existing data. Using a deterministic UUID makes this possible. Introducing a new service means introducing another point of failure. In order to protect ourselves from minor service outages, we decided to communicate with the service via a queue. This granted us a bit of fault tolerance, given that the queue will likely remain up even when the service goes down. We also specifically chose a FIFO queue in order to guarantee the order of operations, so that an update never precedes a create or follows a delete. Lesson learned: Using a robust queue allows you several advantages, including the ability to monitor traffic into your service. Plus, should you need to handle more traffic, just scale up the number of workers listening on the queue. If you are going to read data from a service asynchronously via a queue, your user interface needs to be able to respond to the server pushing data to it (probably via a socket). Unfortunately, we did not have time to rebuild the front-end of our application to work this way. So, we chose to use HTTP for read operations. This worked well, until it didn’t. During testing, a bug in the deployment process took the new service down and with it the entire staging environment for the main application, since we were preloading some state from the service when the user first hit the site. The solution was to implement the circuit breaker pattern. This pattern retries failed calls a certain number of times, then gives up and returns something reasonable (nil in our case) for all subsequent requests during a cooldown period. When the cooldown period expires, the circuit breaker begins to call the service again. If it’s back up, great. If not, the circuit breaker trips again preventing additional calls to the service that is down. Lesson learned: If you must use HTTP for communicating with your service, make sure that the calling application does not fail in the event that the service is down. Circuit breakers are one mechanism to prevent this. The success of long term projects often comes down to executive sponsorship. We were fortunate that both our VP of Product and our VP of Engineering were on board with our plans. They put a great deal of trust in us. And when the project began to look bigger than we’d planned, they stood by us. We could not have completed our work without their support. Why were our executive sponsors willing to go to bat for us? Several reasons. But one of the most important is that we were open and honest in our communications with them. They knew where the project was and they knew what was left to do. Lesson learned: When embarking on a long-term, high risk project, make sure you have the support of your leadership. Make sure they fully understand the benefits as well as the risks. And, communicate continuously. It builds trust, which you’ll need if you’re going to succeed. We thought we did our due diligence before proposing the project. We found every reference to the models used in the subsystem. But we did not search for direct references to the underlying table names in raw SQL statements. That was an oversight. We will definitely do that next time. If we could go back in time even further, we would advocate for isolating the subsystems WITHIN the monolith. Doing so would have greatly simplified the extraction process, and perhaps even made the extraction unnecessary, since we would have been able to safely refactor the subsystem in place. It was a long journey, for sure. Extricating our subsystem from the monolith turned out to be a whole lot more difficult than we thought it would be thanks to some truly epic coupling. We did that work out of necessity. It was not enjoyable work. It felt like a chore. On the other hand, working with the new service is a dream. The code is very well factored. We have super high test coverage. And, there is a one-to-one relationship between use cases and “operation” classes, making it clear what the application does in response to specific requests without having to spelunk through controllers and models to piece it together. Extending the service is just a matter of adding another operation and writing some tests. Would we do it again? As engineers? We would definitely do it again. The project led to improvements in developer happiness and productivity. The trade-off was worth it for us in terms of job satisfaction alone. As an organization? Given the length of the project, we need to see a very strong return on our investment before making additional large scale bets on service extractions. Stay tuned… If you’d like to know more about Entelo or our Engineering Team, please visit SourceCode , our blog about engineering in the recruiting industry. I’d like to thank Fito von Zastrow , Jason Rosendale , Ryan A Booth , and Cole Goeppinger , all of whom made invaluable contributions to this article. And, thank you! You win a prize for reading this far. Mention this article to me IRL for a free sticker! Entelo: Get the latest HR, technology, and recruiting… 17 Services Refactoring Ruby on Rails Software Engineering Programming 17 claps 17 Written by I am a husband, a twins dad, an avowed progressive, a professional software engineer, and an amateur photographer and drummer. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by I am a husband, a twins dad, an avowed progressive, a professional software engineer, and an amateur photographer and drummer. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2019-01-24"},
{"website": "Entelo-Engineering", "title": "a noobs tale", "author": ["Vandeth Nop"], "link": "https://engineering.entelo.com/a-noobs-tale-6fd51a6c88f", "abstract": "Last year, I made a goal to learn how to program. Here we are in 2018 and it’s been a little over 60 days since I officially became a software engineer here at Entelo. I’ve been following a study plan that Entelo has provided me. The goal of the study plan is for me to become a proficient and contributing member of the engineering team. So far I have covered topics such as Ruby, Javascript, Testing, SQL, and Ruby on Rails. The study plan also includes working on features, bugs, and pair programming. I have 30 more days of the program to go, but I have learned so much in such a short period of time. Every week, I read an entire book or finish a course on a different topic. My daily schedule varies, but my main focus is to learn and have a good understanding of the topic. I give presentations on topics that I have learned and I am also given tasks to complete that relate to what I am supposed to learn for the week. I think the program is a great opportunity for future developers and I hope to provide some meaningful feedback to help improve the program for others. I’ll admit it isn’t easy, even after attending a coding bootcamp. For me, I know my reading and comprehension skills are pretty good — I picked up the Ruby syntax and programming styles fairly quickly! The challenges came when I had to apply what I had learned from my readings. I knew I needed to get more practice in with SQL and the ORM used in Rails. I haven’t completed the book for this week yet, but I’ll be able to get more practice with the ORM as I complete the book and finish building the demo application. I am comfortable programming in Ruby because I received a good foundation from the coding bootcamp. My next goals are to become more familiar with the Ruby syntax, learn about the gotchas of the programming language, and understand how the MVC architecture is used in the Rails framework. The study plan has been great and I have learned a lot from reading and completing courses within the given time frame. But the most beneficial part of the program is being able to pair program with team members and the occasional conversations in the kitchen about the concepts I’m learning. I look forward to solidify my knowledge of Rails and to continue my growth as a software engineer. Entelo: Get the latest HR, technology, and recruiting… 2 1 Programming 2 claps 2 1 Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-03-20"},
{"website": "Entelo-Engineering", "title": "casting a wider net", "author": ["Kelly Hale"], "link": "https://engineering.entelo.com/casting-a-wider-net-cad2403ab2de", "abstract": "In 2013, Tracy Chou, an engineer at Pinterest, published a Github repository report on the alarming stats of women in engineering. A wave of tech-company diversity disclosures soon followed and today many tech companies have adopted the practice of publishing Diversity Reports. It almost goes without saying that hiring diverse workforces is notoriously difficult. While it is typically tech companies that make headlines in this regard, tech is far from alone. Many companies have a hard time hiring a diverse workforce, and simply finding candidates is often the first and most challenging problem recruiting teams encounter. Entelo builds products to help recruiters achieve their hiring goals, so this challenge of identifying and engaging diverse talent is very much in our wheelhouse. Our flagship product, Entelo Search, has provided diversity filters since 2014 , but we’re always looking for new ways to improve our coverage. The challenge is that verifying a person’s membership in a given demographic category is often difficult and time consuming. So the question becomes, how can we help our customer discover profiles of people who likely belong to a given group in a way that is both automated and doesn’t make too many assumptions. Entelo has over 500 million candidate profiles, many of which contain a lot of information about educational backgrounds and professional associations. In his book, Inclusion Recruiting: The 12 Secrets to recruiting a diverse workforce , Darrell James, an executive with over 20 years of experience in recruiting, lays out, among other things, a fairly comprehensive list of professional associations, networks, colleges/universities and Greek organizations that specifically serve underrepresented groups within many industries. Drawing from these lists is one example of a way we’re able to compile a vetted list of organizations with memberships that tend to be self-selecting. It becomes fairly trivial then to create a process that parses the data contained within our profiles, identifies listed membership in an association from the list and marks the profile accordingly with a field that represents an aggregation of a specific category of network. For example, profiles that list membership in sororities or women in tech organizations would be marked with a field for “women’s organizations”, whereas profiles that state that they’re alumni of a Historically Black College, would be marked with “African American/Black organizations”. In the example above, we don’t necessarily know the demographic categories that the person attached to this profile occupies, but we do know that said person has identified herself/themself as being part of a women’s professional organization. Profiles marked with this data are then ingested into our elasticsearch cluster, where a field identifying membership in a given “diversity network” is added to the to a profile’s ES document. This field can be searched upon directly, or included as part of a more general diversity query. Labeling profiles with diverse network fields allows for us to offer two different diversity search experiences to customers. The first is through our established diversity filters, which when paired with our new diverse network setting, allows the customer to specify whether they’d like any given diversity search to include people that identify as belonging to an organization focused on the advancement of minorities: The second, is to search directly for profiles with a specific diverse networks field. For example, if a recruiter was looking for an engineer and was using sorority membership in college as a way of hopefully finding a female candidate, their search query might look something like the following: (“Alpha Chi Omega “ OR “Alpha Delta Chi “ OR “Alpha Delta Pi “ OR “Alpha Epsilon Phi “ OR “Alpha Gamma Delta “ OR “Alpha Kappa Alpha “ OR “Alpha Kappa Delta Phi “ OR “Alpha Kappa Phi Agonian “ OR “Alpha Omega Epsilon “ OR “Alpha Omicron Pi “ OR “Alpha Phi “ OR “Alpha Phi Gamma “ OR “Alpha Pi Phi “ OR “Alpha Pi Sigma “ OR “Alpha Sigma Alpha “ OR “Alpha Sigma Kappa “ OR “Alpha Sigma Rho “ OR “Alpha Sigma Tau “ OR “Alpha Theta Beta “ OR “Alpha Xi Delta “ OR “Chi Delta Theta “ OR “Chi Omega “ OR “Chi Sigma Xi “ OR “Chi Upsilon Sigma “ OR “Delta Alpha Theta “ OR “Delta Chi Gamma “ OR “Delta Delta Delta “ OR “delta Delta Phi Zeta “ OR “Delta Gamma “ OR “Delta Kappa Delta “ OR “Delta Phi Epsilon “ OR “Delta Phi Lambda “ OR “Delta Phi Omega “ OR “Delta Pi “ OR “Delta Psi Delta “ OR “Delta Psi Epsilon “ OR “Delta Sigma Chi “ OR “Delta Sigma Theta “ OR “Delta Xi Nu “ OR “Delta Xi Phi “ OR “Delta Zeta “ OR “Gamma Alpha Omega “ OR “Gamma Nu Delta “ OR “Gamma Phi Beta “ OR “Gamma Phi Omega “ OR “Gamma Sigma Sigma “ OR “Iota Delta “ OR “Iota Gamma Upsilon “ OR “Kappa Alpha Sigma “ OR “Kappa Alpha Theta “ OR “Kappa Beta Gamma “ OR “Kappa Delta “ OR “Kappa Delta Chi “ OR “Kappa Delta Phi NAS “ OR “Kappa Delta Sigma “ OR “Kappa Gamma Delta “ OR “Kappa Kappa Gamma “ OR “Kappa Phi “ OR “Kappa Phi Lambda “ OR “Lambda Pi Chi “ OR “Lambda Pi Upsilon “ OR “Lambda Psi Delta “ OR “Lambda Sigma Gamma “ OR “Lambda Tau Omega “ OR “Lambda Theta Alpha “ OR “Lambda Theta Nu “ OR “Mu Sigma Upsilon “ OR “Omega Phi Alpha “ OR “Omega Phi Beta “ OR “Omega Phi Chi “ OR “Phi Beta Chi “ OR “Phi Mu “ OR “Phi Sigma Rho “ OR “Phi Sigma Sigma “ OR “Pi Beta Phi “ OR “Pi Phi Delta “ OR “Sigma Alpha “ OR “Sigma Alpha Epsilon Pi “ OR “Sigma Alpha Omega “ OR “Sigma Delta “ OR “Sigma Delta AAU “ OR “Sigma Delta Tau “ OR “Sigma Gamma Rho “ OR “Sigma Iota Alpha “ OR “Sigma Kappa “ OR “Sigma Lambda Alpha “ OR “Sigma Lambda Gamma “ OR “Sigma Lambda Upsilon “ OR “Sigma Omicron Pi “ OR “Sigma Phi Lambda “ OR “Sigma Phi Omega “ OR “Sigma Psi Zeta “ OR “Sigma Sigma Rho “ OR “Sigma Sigma Sigma “ OR “Sigma Theta Psi “ OR “Tau Sigma Phi “ OR “Theta Alpha “ OR “Theta Nu Xi “ OR “Theta Phi Alpha “ OR “Theta Phi Gamma “ OR “Zeta Phi Beta “ OR “Zeta Phi Gamma “ OR “Zeta Sigma Chi “ OR “Zeta Tau Alpha “) AND position:”engineer” But now, thanks to our ability to target profiles with diverse networks directly by field, a recruiter could simply select the following: Hiring a diverse workforce is challenging, but our hope is that the time and effort associated with sourcing diverse candidates will get easier over time. Heuristics for identifying candidates’ age, race, ethnicity, LGBTQ or veteran status will never be 100% accurate, but are a step in the right direction and give recruiters the means to reliably increase diversity in their candidate pipelines and workforces. With a continued focus on diversity, a bit of creative data analysis, and support from our engineering team, we can enable our customers to cast a wider net and discover great candidates they may not have discovered otherwise. Entelo: Get the latest HR, technology, and recruiting… 10 Diversity Software Development Software Engineering 10 claps 10 Written by Senior Software Engineer @ Entelo. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Senior Software Engineer @ Entelo. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-10-25"},
{"website": "Entelo-Engineering", "title": "the science and art behind quantifying seniority", "author": ["Chin Ling"], "link": "https://engineering.entelo.com/the-science-and-art-behind-quantifying-seniority-9fd3e45c05f", "abstract": "In a recent article on Quantifying the Gender Gap in Technology published by Elena Sigacheva , product manager at Entelo, we presented some very interesting insights and profound findings about gender disparity in technology and how the differences get exacerbated as individuals progressed in their career. In this article, I would like to bring you deeper into the nitty-gritty of a core attribute underpinning the above analysis — seniority. There are many ways one could think of seniority. But before I get started, here is a definition given by Wikipedia¹: Seniority is the concept of a person or group of people taking precedence over another person or group because the former is either older than the latter or has occupied a particular position longer than the latter. Seniority is present between parents and children and may be present in other common relationships, such as among siblings of different ages or between workers and their managers. Since Entelo is primarily a sourcing tool for talent acquisition practitioners, we will be focusing on professional relationships only. Also, such relationship goes beyond superior-subordinate settings, and include levels of experience, expertise, and so on. Going back to the Wikipedia abstract, whilst the definition is clear in plain language, it is actually much harder to interpret than it seemed. Let’s just use this phrase as an example — seniority is based on “…a person [who] occupied a particular position longer than the latter.” However, here are some other ways one could also look at seniority: By job title and/or role Total years of work experience Total years of relevant experience The second and third factors fit nicely into the definition above. On the other hand, the last factor can be further decomposed into the definition of what constitutes relevancy. For example, relevancy can be based on: Recent job title and/or role Recent skills and/or cluster of related skills Other categorical attributes such as company types, company size, sector, sub-industry, industry, and industry family Of course, they do not just end there. Each of the factors may be related to one another, and they may behave significantly different from one dimension versus the other. For example, a Vice President for non-financial industry is considered executive-level but remotely so for the same title in financial industry. Moreover, a Vice President may have a shorter tenure in comparison to a more generalist role such as Software Engineer . As you can see, the concept of seniority is complex, even just looking from a definition standpoint. To truly understand the importance of quantifying seniority , I think it’s insightful to look at it from the angle of why are we doing this , i.e. what are some of the common use-cases and/or problems that we are looking to solve: 1. Search & Discovery User would like the ability to search by seniority, e.g. entry-level, mid, senior and executive Prioritize by seniority, e.g. more senior folks first followed by the rest Remove over- or under-qualified candidates Remove not-relevant candidates, e.g. recruiters in a non-recruiting role often appear in search results due to keyword match hits 2. Profile (Derived) Insights² Identify rising star profiles, i.e. profiles that has a high promotion rate based on years of experience, understanding the concept of promotion is highly dependent on quantifying seniority correctly. 3. Second-order (Derived) Insights Recent promotion may (or not) influence More Likely to Move ™, one of our core predictive indicator to help user surface profiles that are more receptive to new opportunities within the next 90-days (from the date of evaluation) Seniority can also be used to customize candidate engagement experience, for example, one would expect the language around seniority-based opportunity (career progression, higher responsibility, promotional move) would be different from role-based ones (new technical challenges, professional development, exciting (“disruptive”) industry and/or company) 5. Business Intelligence, Reporting & Analysis Overall trends related to seniority, for example by gender, role, sector/industry, and many more The above is by no means an exhaustive list, but it serves a strong product-case of the importance of quantifying seniority and do it in such as way that is completely scalable, reproducible and most importantly reusable. So, back to the discussion on the definition of seniority and complexity around it, how do we go about representing it in such as way that it is usable given our understanding of some of the use-cases highlighted above? Quoting Wikipedia³: In machine learning and pattern recognition, a feature is an individual measurable property or characteristic of a phenomenon being observed…Features are usually numeric…The concept of “feature” is related to that of explanatory variable used in statistical techniques such as linear regression. So, as a starting point, it makes valid sense to ensure the features are numerically represented. Fortunately, for most part, they are primarily variations of years of experience, which in itself is already numerical in nature. Narrowing further, we are left with one that is not properly represented, namely the job title itself. For the remainder of this section, I will first talk about how to quantify the job title — from fuzzy, free-form textual representation to numerical — then circle back to walking you through some considerations around using years of experience — both total and relevant respectively — to quantify seniority. Here, I will introduce a new metric, namely seniority score , to address the job title representation issue. What constitutes a seniority score? What are some of my thoughts around it? In aggregate, one can pull a relationship using some of the following attributes (non-exhaustive): Years of experience to reach that title How long one stays in that title At what stage of one’s career would this title usually lands itself The above should be able to give us meaningful numbers that for example distinguishes between a Chief Data Scientist and a Junior Data Scientist . It’s worthy to note that some titles are more tricky, for example, I observed that Big Data Engineer has very high seniority score on its own and if compared wrongly, would produce incorrect results. Furthermore, it’s important to note that seniority score is of ordinal scale in nature, i.e. “ it is the order of the values is what’s important and significant, but the differences between each one is not really known.” ⁴ Also, without additional attributes (e.g. title category, role, sector and industry), the numbers are not very useful by itself, and they are not comparable. In the earlier example, we are able to compare Chief vs Junior Data Scientist as they both fall in the same role, i.e. data scientist, however, one is not able to do the same between Big Data Engineer and generalist Software Engineer (here we define data engineer as a separate/ different than software engineer). Additionally, some are less obvious, for example, Software Engineer and Software Manager , the latter would be more senior in comparison but it would carry a lower seniority score under Management title category. Nevertheless, the seniority score as a metric remains a meaningful and reusable feature that we can leverage as a building block for more complex analytics. How about years of experience to quantify seniority? Besides numerous definitional variation, here, I would like to illustrate some nuances in this attribute: Years of experience may be overlapping in between positions/ experiences How do we distinguish between real and what’s reported? How about what’s intentional vs. not (due to data error or bug)? Figure 2 below presents an example of a profile that reported 117 years of total experience. Now, assuming there is no data error in this situation, it remains likely that this profile intentionally over-inflate its experience, unintentional error in data entry by this individual, no longer active in the social footprints nor employable, or the individual may have been deceased. Career gap adjustment, detecting it would be tricky if there are overlapping positions Senior and/or Executive-level profiles tend to remove older positions/experiences, and hence, potentially deflating it’s total years of experience To cater for varying needs, here are some metrics that I have introduced: Total years of experience based on sum of each individual position durations Based on the difference between evaluation date and graduation date or first position start date Similar to above but adjusting for gaps It is important to understand that each metrics has their strengths and flaws, and in this situation, its technically not feasible to have a single metric that addresses all the nuances illustrated above. For example, the first metric may inflate the total years of experience calculation due to overlapping experiences mentioned earlier, and the second metric would adjust for that. However, the second metric assumes education information exists in the profile data and/or we have one’s complete work histories, both of which is not true (based on our analysis, only 40% of the profiles have education information reported). In this case, my best bet would be to use the first metric. To give you another example, in situation where the sensitivity and accuracy of the numbers matter s— such as for UI display in Figure 2 — I would recommend a more conservative and aggressive metric, i.e. the one based on difference between evaluation date and graduation date and adjusting for gaps. As illustrated, having the metrics at a granular level — with multiple definition of total years of experience — helps as it provides me with ample flexibility for downstream interpretation and use. Next I would like to focus on years of relevant experience, but primarily on one that is based on most recent job title and/or role. As you could imagine, job title itself can be pretty dirty, and different titles may mean the same thing. I have allocated an entire section to talk about this in Implementation but Figure 3 illustrates a profile that has different job title that we would like to somehow still able to mix-and-match and combine to come to the final value for years of relevant experience, i.e. those that corresponds to Software Developer and Software Engineer . Now, how about the profile shown in Figure 4 below? On one hand, some would regard Senior Software Engineer and Backend Software Engineer are categorically relevant, i.e. both are software engineer, and hence should rollup into the calculation. On the other hand, some teams would regard this as different specialization — a generalist vs. a specialist role. One Ring to rule them all, One Ring to find them, One Ring to bring them all, and in the darkness bind them⁵ So, should we take a step further and come up with an ultimate metric that would somehow capture all the above, including but not limited to seniority score, years of experience both total and relevant, etc.? I decided to take a more liberal approach of keeping them at a granular level such that it provides me with plenty of flexibility for downstream use. There is another benefit of keeping it separate, this time from a product standpoint. If you look at Figure 5 , the visual cue gives us a clean two-dimensional view of the one’s career path, in this case I can see the time spent at each company (potentially numerous title/role) and how their seniority progress (e.g. Mid-level to Mid-level) within each group. Having such expression would enable our user to make an informed holistic view of one’s work experience beyond just the title and years of experience as standalone construct. We didn’t arrive at the final implementation on a get-go, a topic worthy of another blog in future. However, we do arrive at two different (but eventually related) approaches — one is offline and the other is online — to service a myriad of use-cases we presented earlier. Before I dive deeper into some technical details of both approaches, it’s noteworthy to talk a little bit about the architecture and guiding principles underpinning some of the design choices made. Figure 6 gives a simplified overview of how our data science data pipeline looks like. We do the majority of our data gymnastics in Databricks/Pyspark environment and placed the output of our data products in the Data Lake (AWS S3). The diagram only illustrates any data that is produced by the Data Science team, from consolidated data to expansive analytics ranging from both descriptive and predictive in nature. In turn, derived analytics get brokered to downstream consumer systems in different means, some are directly used to power Entelo website, some are the facilitate retrieval leveraging ElasticSearch, machine-learning based micro-services to perform online scoring and classification, and so on. I wouldn’t go too much further into the architectural discussion and some of the decisions made but I do want to end this section with a summary of the core guiding principles that we adopt as we think through implementing a robust data pipeline architecture to help us scale our analytics capabilities: Layered Architecture - Each layer has a specific role and responsibility Modularity - Focus on domain driven/ intent design, not fields and contracts - Use language of business, not technology — abstraction Data Quality - Completeness & Timeliness - No gaps, data always available based on best available information - Breadth — multi-sourced approach - Consistency — taxonomy & naming convention - Etc — Histories, Reusability, Lineage/ Traceability & Replay-ability Simplicity & Ease of Maintenance - Decoupling between offline and online requirements - Removal of circular (data) dependencies We have about 450 million merged profiles in our database, and of those 61% has some positional information such as job title, company name and potentially short summary describing one’s role in that position. Job titles — especially on public footprints— are unfortunately, notoriously dirty and unstandardized. As illustrated in Figure 8 below, we have close to 160 million unique raw titles, many of which are referenced at most only once. Our end goal is to be able to somehow map and associate each position title to it’s smaller and more manageable canonical equivalent. The latter would be much smaller set, but allows us to conveniently group and perform aggregated analysis such as computing average years of total experience for those that carries canonical title Software Engineer versus Director of Software Engineering . Here are some of the steps to generate a canonical set of 500k entries given the raw titles: Basic clean-up such as punctuations, numbers, whitespaces and unicode characters Simple expansion and acronyms. For example Sr. to Senior, Mgr. to Manager, and CEO to Chief Executive officer Identify titles that are more frequently used, either leveraging profiles data themselves, and/or usage data based on past job title search patterns (Optionally) leverage curators to manually look at the bottom half the sample set to shave off any remaining spurious job titles Solution based on these steps are usable, however we could bring this a step further by identifying title clusters, a.k.a. similar titles that may be called differently but meant the same thing. In this situation, the structure of the titles would be not obvious and significantly different, for example, software developer can also be associated with software engineer, hacker, software evangelist, coder, and so on. It’s note-worthy to point out that title clustering is an interesting topic to talk about separately, and there are some really cool machine learning techniques one can use to perform such tasks. Now, once you have a smaller predetermined set of canonical titles that in turn you can associate with the original position set, performing aggregation logic to derive some of the metrics mentioned Data Representation section should be much easier and robust. The above is nice and clean if our data science use-cases only end in having the data in a persistent store or database. At Entelo, our journey as data scientists go beyond just plain simple data analysis nor data engineering/ wrangling with the end results being data at rest. One of the use-case that I would like to highlight that I think would be interesting to dive a bit deeper into is “ [User would like the ability to] remove over- or under-qualified candidates. ” Notice the formulation of this problem statement is quite different from what we have presented thus far — it is a classification problem! So how do we go about doing this (hopefully) without a completely different set of architecture? Fortunately, we are presented with couple of options, both of which are built on top of existing functional capabilities, i.e. leverage the 500k canonical titles data product that contains associated seniority scores and other metrics, such as years of experience that we have produced based on the above work: Build a service that would take in a list of candidate profiles core information (depending on the model, e.g. most recent job title, years of experience, etc.) and classify each of them as over- or under-qualified given a target job title Bring the 500k canonical titles dataset further upstream against the position dataset. Now, you have seniority-related information for every single position that exists in the database that you can in turn use the similar classification approach Option 1 and 2 sound similar but boils down to one intricate details, i.e. in the former, the service expects a list of candidate profiles as-is , and in turn, use that to deduce other data points such as seniority score, in real-time. This pose three additional technical challenges: Can the service respond in a timely manner? How do one map a notoriously dirty and unstandardized title to it’s canonical equivalent, also, in a timely manner? How would this approach impact the coverage , another metric to indicate how many of the candidates can we successfully classify as over- or under- vs. those that we do not have any opinion because we can’t do the latter well in the first place? Zooming in, I would like to talk a bit more about the second technical challenge noted above. What I have done is to take in the dataset of 500k canonical titles, compute MinHash LSH⁶ against each of the canonical titles and store the results in pickle format in Model Store. On the API endpoints, it would accept a list of candidates as one of the input parameter, and for each of the candidate title, determine it’s MinHash value and query that against the LSH model we stored earlier. Here is the code snippet: I brush through talking about MinHash LSH algorithm earlier (see References ⁶ for details) but the idea is pretty simple. MinHash Locality Sensitive Hashing (LSH) is conceptually similar to the concept of Hashing (although the intent is opposite/ different). In hashing, we usually would like to have the array large enough to avoid collisions, here, we actually do want to have some collisions. The goal is to find a representational set that we can work with without doing a full table scan on all the record. Also, note that this approach is more robust (in comparison to say “ select * from table like ‘%data scientist%’ ” approach) as it also elegantly captures titles that may be out of order. Here is a sample JSON of how the representational set looks like for data scientist : Once we have a representational set, we can apply further logic to choose the best representational canonical title matching the given raw. A brief note on deployment, since bootstrapping the model file takes a bit of time (due to file size of ~1.2GB, time it takes to download from Model Store and finally load it into memory), we separate it into two phases, spot instances and on-demand instances. That large complex modules require smart/health-mediated deployments to avoid downtime, a topic interesting on its own that we can talk about in details in the future blog. Also, worthy to mention as the reader think about micro-services is to consider the guidelines of the Twelve-Factor App ⁸ to ensure your services are deployment friendly (and portable). Tracing back, how about Option 2, i.e. bring the 500k canonical titles dataset further upstream against the position dataset ? How would that simplify the code and implementation? By precomputing seniority score into each position in our database, the list of candidates pass into the service would now include the score itself, i.e. it does not need to perform any of the MinHash LSH logic, and jump straight into applying scoring as a simple classifier problem! I would defer the discussion about how we formulate and apply different classification algorithm to detect over- and under-qualified candidates. There are plenty to talk about on this topic alone, from how do we think about collecting label data, various algorithmic techniques, including but not limited to logistic regression, random forest to using neural networks, what are the key lessons learnt and/or observed, how do we measure the efficacy of our classifiers (confusion matrix, precision-recall curve, ROC curve, etc.) and product challenges in making this usable. I hope by now you are intrigued by my writings and some of the work that we do at Entelo. Hope you enjoy reading this article and please feel free to reach out for any question, feedback and comments! This article was greatly strengthened thanks to the detailed and invaluable feedback by colleagues at Entelo, and external technical reviewers, in particular, Ayush Joshi , Travis Thompson and Sneha Chatterjee . https://en.wikipedia.org/wiki/Seniority https://blog.entelo.com/introducing-entelo-insights https://en.wikipedia.org/wiki/Feature_(machine_learning) http://www.mymarketresearchmethods.com/types-of-data-nominal-ordinal-interval-ratio/ http://tolkiengateway.net/wiki/Ring_Verse https://medium.com/engineering-brainly/locality-sensitive-hashing-explained-304eb39291e4 https://ekzhu.github.io/datasketch/lsh.html http://matthewcasperson.blogspot.com/2013/11/minhash-for-dummies.html https://www.cs.cmu.edu/~adamchik/15-121/lectures/Hashing/hashing.html https://12factor.net/ Entelo: Get the latest HR, technology, and recruiting… 2 Thanks to Ayush Joshi and Travis Thompson . Data Science Architecture Design 2 claps 2 Written by Director @ Gap, Inc. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Director @ Gap, Inc. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-07-13"},
{"website": "Entelo-Engineering", "title": "a code refactor", "author": ["Ivan Gonzalez"], "link": "https://engineering.entelo.com/a-code-refactor-39479f08215f", "abstract": "I was recently tasked with adding the ability to change an owner id on a template on creation and, subsequently, to add the ability to modify the id after creation as well. I worked on the task and was able to get the functionality that I wanted. But after submitting it for code review, I was lucky to have a colleague point out some places where the code could be refactored to make it easier to understand and to make it more maintainable. On my first stab at the task, I started off in the controller which included a method to create a template. Originally, the create_campaign_template method took just an id as an argument I modified it to also take a object which when present would be the user who would become the new owner. The user that was passed in to the create_campaign_template method was looked up by the controller using an email string that was passed in from the client, if no user was found the value was defaulted to nil. That method would go ahead and delegate the work to the Creator object. There I would check to see if a User object had been passed in, if it had I went and checked that it had certain authorizations, then if those conditions were met I would go ahead and reassign. At this point the code worked and it did what we wanted it to do, but I had broken the single responsibility principle. The Creator object now not only had the task of preparing an object for creation, but it also had to check if the object needed to be reassigned and then went ahead and did the reassignment. It also violated the Open/Closed principle by adding a new concept that the object did not need to know about thereby making it more difficult to extend. These were good indicators that another object could be abstracted from here. So I created a new Assigner object that removes some of the unnecessary responsibilities from the Creator. In the Assigner object I go ahead and make the assignee email string perform the user lookup, which was previously done by the controller. The Assigner also goes ahead and checks for the conditions that indicate that it is ok to reassign and because they are made in the context of the assignment they are communicated more clearly. After the first go through, the Assigner was in charge of wrangling data to look the way it needed it to look, checked to make sure the reassignment was possible, and did the reassignment. This felt like a bit too much responsibility. So I decided to go ahead and extract an Assign object out of the Assigner; the Assign object would simply perform one clear operation and that would be to assign stuff. After going through the refactor the objects in the code maintain Single Responsibility , follow the Open/Closed principle , and are also Liskov Substitutable . I mentioned an example of single responsibility earlier when I talked about the Creator object originally being in charge of the reassignment. This is important because an object with a single responsibility is easier to debug; when we start giving it more responsibility we give it more room for error. After the refactor, the Objects that were previously there and ones that were created during the rewrite are open for extension but closed for modification. This is accomplished by keeping their scope narrow, they only know what they need to know and only perform one task. This means that it needs no modification but, if later on, new checks needed to be performed during assignment they could easily be added on in an intuitive location. Entelo: Get the latest HR, technology, and recruiting… 1 Software Development 1 clap 1 Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-04-17"},
{"website": "Entelo-Engineering", "title": "responsible use of ruby metaprogramming", "author": ["Alexander Deeb"], "link": "https://engineering.entelo.com/responsible-use-of-ruby-metaprogramming-5561701887fb", "abstract": "Metaprogramming is one practice in software development that has mixed opinions. On one hand, it has the potential to DRY up your code by reducing redundant patterns. On the other hand, it can make your code convoluted and difficult to maintain. So how do you determine when you should use it and when you should stick to traditional programming? First, it is valuable to define metaprogramming. According to Wikipedia : Metaprogramming is a programming technique in which computer programs have the ability to treat programs as their data. It means that a program can be designed to read, generate, analyze or transform other programs, and even modify itself while running. Metaprogramming can help you write more succinct code for your applications. A common use case in Ruby is to define new classes and methods. Let’s consider the following class: This is a simple class that has a method for each color (red, blue, green, and yellow) and outputs the color name. This is how the class could look if you used metaprogramming: This class functions exactly as the previous class definition, except the code is much shorter. This is a simple example that conveys one way in which metaprogramming can deliver value: succinct code. If you had a small, finite list of colors, as shown above, metaprogramming probably isn’t worth it, but if you need similar methods for thousands of colors, metaprogramming can keep your code manageable. One of the most popular examples of metaprogramming is dynamic finders in Rails’ ActiveRecord. Because the finders are based on the columns in your database table, metaprogramming is necessary to dynamically define the methods. It would be ridiculous for Rails contributors to try to predict every column name that users of the framework would have and define methods for each one of them. Let’s take a look at another, more sophisticated use of metaprogramming that serves as a detrimental use of the pattern. Try to understand what the module is doing. This code adds contextual_job , contextual_user , and contextual_candidate class methods to whichever class includes it, in this case MyModel . Those class methods simply refer to the respective classes, Models::Job , Models::User , and Models::Candidate , with the goal appearing to be for one class to know about all of its related models and be able to easily access them. The code in the example is actually an adapted version of a module that was previously in Entelo’s code base. None of the engineers on the team wanted to work with that code, nonetheless refactor it, and it was a pain point in creating new functionality because of its convoluted nature. It’s an example of over-complication through metaprogramming because it adds complexity and does not provide any real value. The code can more easily be written by explicitly referencing a class, Models::Job , instead of using a contextual_{method} method to refer to the class. So, in which situations should you consider using metaprogramming? You have redundant patterns that can be greatly simplified with metaprogramming The value of succinct code outweighs the sacrifice of readability and increased complexity Performance is not a concern “When it will make your life easier and not complicate others’ lives.” In which situations is metaprogramming a suboptimal choice? It is used as the basis for core functionality. While it depends on the type of application you’re building, if some core functionality is metaprogrammed, you’ll want to reconsider your approach since it may be difficult to maintain. If you could reasonably solve the problem without metaprogramming. The purpose of using metaprogramming is unwarranted. For example, you implement Ruby’s method_missing just to lowercase a string. Performance is a concern. Metaprogramming will often invalidate the Ruby method cache , resulting in performance losses. Additional considerations: Since reading metaprogrammed code isn’t always intuitive, include comments explaining the code’s function at a high level so that other developers can understand conceptually what the code is doing. Consolidate all metaprogrammed code so there is less overhead in switching between metaprogramming and traditional programming when reading through the codebase. How are you using metaprogramming in your codebase? P.S. Entelo is hiring! Check out our open positions . Entelo: Get the latest HR, technology, and recruiting… Ruby on Rails Metaprogramming Written by Making positive social impact on the world. Co-founder and CEO of ClassHook: https://www.classhook.com Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Making positive social impact on the world. Co-founder and CEO of ClassHook: https://www.classhook.com Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-04-08"},
{"website": "Entelo-Engineering", "title": "understanding inheritance and composition in ruby", "author": ["Steph Wong"], "link": "https://engineering.entelo.com/understanding-inheritance-and-composition-in-ruby-edc46c0f96c7", "abstract": "As programmers, we should make our code as maintainable as possible. One way we can help achieve this is by utilizing the Object Oriented Programming patterns of Inheritance and Composition! Inheritance is defined as an IS-A relationship. This relationship is between two classes where one, referred to as the parent (or base or superclass), passes behavior down to another, referred to as the child (or subclass). Let’s look at an example with three classes called Animal , Human and Raccoon , where Human and Raccoon inherit from Animal . To define the relationships we would say: Human is an Animal and Raccoon is an Animal . Animal is the superclass and Human and Raccoon are the subclasses. Inheritance is indicated with the < symbol. In the example above, it would read as “ Human and Raccoon inherit from Animal .” Even though we didn’t explicitly type methods for Human or Raccoon to eat , every human and raccoon instance will inherit the eat method from the Animal class. Once you start implementing more classes, utilizing inheritance can help save you from writing a lot of code! Another thing to note is that when following inheritance, it is important to see if any methods can be generalized and grouped together. In the example above, walk and scuttle were grouped together in the Animal class as move . By doing this, we can reuse the basic functionality of move , and then within the Raccoon and Human classes, we can add whatever specializations are needed. Inheritance is also transitive, meaning a class may inherit from another class which inherits from another class, and so on, up to the base class. To ensure that subclasses still control their own behaviors, subclasses are able to override methods and/or fields that were passed down to them, just like what we showed in our raccoon.move example above. Composition is defined as a HAS-A relationship. This relationship is between two or more classes where the use of instance variables are references to other objects. Or to put it in other words, when a class uses another object to provide some or all of its functionality. Let’s take a look at our example again, but this time refactored to utilize composition instead of inheritance. To define these relationships we would say: Human has Movement and Raccoon has Movement . In the example above, we define a Movement class with several methods. Human and Raccoon both have the ability to look into the Movement class by instantiating an instance of Movement within their respective initialize methods. From there, Human and Raccoon are able to use any of Movement ’s methods. It depends! An important question to think about is whether or not that relationship will be constant throughout the lifetime of your application. For example, you say that a Programmer is a Human , therefore you should apply inheritance. But what if Programmer decides to change careers or become unemployed? The relationship between a Human and a Programmer is impermanent and would be better serviced through composition. Here are two rules that can help answer this question: It is better to use inheritance when your hierarchy represents an IS-A relationship. Inheritance is a great choice if your object already has a single responsibility and you really just want specializations. It is better to use composition when your hierarchy represents a HAS-A relationship. Composition breaks up functionality into distinct responsibilities. Overall, inheritance and composition are both powerful patterns that we can utilize to improve our code maintainability. Some might say that composition is “better,” but it’s more so a question of which approach is more suited for your needs! Have fun trying them both out! Entelo: Get the latest HR, technology, and recruiting… 120 Programming Inheritance Composition Ruby Development 120 claps 120 Written by Frontend Engineer @ Wavely Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Frontend Engineer @ Wavely Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-02-27"},
{"website": "Entelo-Engineering", "title": "brief tour of classes in es6", "author": ["Vandeth Nop"], "link": "https://engineering.entelo.com/brief-tour-of-classes-in-es6-34c2022a02bf", "abstract": "JavaScript (JS) is a prototype based, multi-paradigm, and dynamic language. Classes were introduced in ECMAScript 2015 (ES6). You have probably heard or read somewhere that classes in JS are just syntactic sugar. We’ll compare two ways to build a class and a subclass to understand why. The image below defines a Pet class with members (properties and a method). Another class is also defined, a Cat class with one member. The Cat class is a subclass of Pet, so the Cat class inherits all of the members from Pet and extends the Pet class with its own member. On line 23, the Cat class is instantiated and assigned to the variable pet1. On line 25, pet1 invokes the trick method. In class-based programming languages, pet1 is able to invoke the trick method because pet1 is an instance of the Cat class that inherited the trick method from its super class, the Pet class. The image below is similar to the image above, but instead of using classes, constructor functions (functions used for creating objects) are used. The Pet constructor function has the same properties as the Pet class above. The trick method is added to the Pet’s prototype property. Another constructor function is defined, the Cat function. On line 44, the Cat’s prototype property is assigned to Pet’s prototype. On line 47, the Cat function is instantiated to create an instance and assigned to the variable pet2. On line 49, pet2 invokes the trick method. In JS, pet2 is able to invoke the trick method because of object delegation on the prototype chain. So, what’s the difference? In class-based programming languages, pet1 is an instance of the Cat class and inherits all members from the class. The object pet1 is able to invoke the trick method because pet1 inherited the method from Cat class which inherited the method from its super class. Although the syntax makes it seem safe to assume that’s how pet1 invoked the trick method, it’s not. In JS, members are inherited through the prototype chain. Each object has a prototype object. If an object does not have a method, then it will check the prototype chain until it reaches the prototype object that has the method or null. On line 49 of the second image, pet2 invokes the trick method. The object pet2 does not have the trick method because it did not inherit the method and it doesn’t have it defined. So, we look for the trick method on pet2’s prototype object which points to Cat’s prototype object and we can’t find it there either. Next, we look at Pet’s prototype object and find the trick method there. This example of walking up the prototype chain is known as object delegation and it is how pet1 and pet2 are able to invoke the trick method. The second image of implementing pet2 is what happens under the hood in JS of the first image of implementing pet1. There are no real classes in JS, there are objects that point to prototype objects, and members are inherited through object delegation on the prototype chain. Entelo: Get the latest HR, technology, and recruiting… 4 JavaScript 4 claps 4 Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-02-24"},
{"website": "Entelo-Engineering", "title": "cypressio a reason for cautious optimism in the world of testing", "author": ["Ivan Gonzalez"], "link": "https://engineering.entelo.com/cypressio-a-reason-for-cautious-optimism-in-the-world-of-testing-d503911fd5c6", "abstract": "My first experience with Integration testing came in a project that used Selenium. I was pretty impressed by what Selenium could do — watching it execute my tests on browser was pretty exciting. However, as I got further into the project I started having issues that made creating and maintaining tests frustrating. A couple of sources of frustration for me were the flaky tests, the long debugging process, and the sloppy and untrustworthy work arounds. Recently at Entelo, I was introduced to Cypress.io and it has been pretty eye opening. After writing my first couple of tests, I believe that Cypress addresses my major gripes about Selenium and that helps distinguish it from Selenium. The differences between Selenium and Cypress can begin to be seen at the architectural level. Selenium exists outside the browser and executes commands remotely across the network. This means that the script running the tests can never be in the same run loop as the events that are being triggered in the browser, leading to flakiness and other common issues that Selenium users usually gripe about. In contrast, Cypress “is the exact opposite”. It executes inside the same run loop as your application giving you more useful information as the tests run. This is possible because Cypress employees a NodeJS server process that it uses to handle events that are coming from outside the browser and is in constant communication with this process to synchronize and to help each other perform tasks. Cypress also does work on the network layer by reading and modifying web traffic dynamically in order to prevent outside code from disrupting the test automation process. Also, since Cypress is installed locally it can leverage the operating system to perform tasks like taking screenshots and recording video. Cypress claims that these architectural distinctions help it produce more consistent results and, in my very limited experience, I can say that it feels true. One of the biggest issues with Selenium was that the debugging process was tedious, it would often take a couple of guesses to figure out what was causing a test to fail. Cypress, however, is much more user friendly in this regard and not by accident. Cypress includes a myriad of detailed error messages that describe what led your test failure. This reduces friction and makes it easier for developers to add it to their workflow rather than thinking of these tests as an after thought. On top of the error messages, Cypress provides access to the Chrome Dev tools which can give you very valuable details while debugging tests. These tools may help with validating a query selector in real time or checking that the network request you expected to see go out was the one that actually went out. http://recordit.co/DPYy0lcrNj If you’re already comfortable with Dev Tools, this will make it easier to solve issues with your tests and it also helps lead to more stable tests which is a big priority if they are going to be part of your CI cycle. As you speak with people who have used Selenium for a non trivial project, you will hear horror stories about tests that sporadically fail and can only be fixed by adding or reducing time on wait functions, which leaves the developers feeling dirty and scared that tests might fail again at inopportune times. This concern is also taken care of by Cypress, they have the waiting mechanisms built in which reduces the developers responsibility is a positive way. Another great feature of Cypress, is that as you hover on the instructions executed from the sidebar you can see what element was accessed on the webpage and it even restores the state to the moment when the instruction was executed to give you a clearer picture of what might have gone awry. So far my experience with Cypress has been very positive. Now that I’ve written a couple of tests, I have been able to see the power of Cypress first hand and I am very excited. This is not to say that Cypress is a silver bullet, it does have a few drawbacks when compared to Selenium. Currently Cypress only runs with Chrome which is an issue if you are concerned with cross browser compatibility. Also since Cypress executes on the browser it can only run Javascript and there are no plans for this to change so people coming from other languages might be discouraged. Still, Cypress provides a viable alternative to Selenium and it is more equipped to handle a modern site. Entelo: Get the latest HR, technology, and recruiting… JavaScript Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-03-01"},
{"website": "Entelo-Engineering", "title": "entelo at developer week 2018", "author": ["Alexander Deeb"], "link": "https://engineering.entelo.com/entelo-at-developer-week-2018-1a2a12af98ce", "abstract": "Our primary purpose for attending was to hire software engineers. We’re growing quickly as a company and are hiring for a number of engineering positions . Also, Entelo’s very own Ryan Booth and Vlad Tsvang hosted an open talk titled Reusability on React without Compromise . Entelo had a booth conveniently set up close to the prize booth. Attendees could exchange their points for prizes such as gaming headsets, drones, and other goodies. To earn points, attendees had to scan a QR code present at each one of the booths. For companies like Entelo that are well-known in their industries but not so much generally, we appreciated this fun incentive, as it gave us the opportunity to pitch Entelo to more people. Many people were interested in learning about Entelo, and I was able to practice my pitch for the company. People from a wide variety of positions approached our booth: company founders, students, recruiters, software engineers, and others. After my first few pitches, I learned to look at the title on the individual’s badge so that I could tailor my pitch accordingly. I had pitched Entelo to a few people with the hopes of hiring them only to realize that they were founders of their own companies. Overall, we generated quite some interest in our company from a hiring perspective…and a lot of people now have some really nice Entelo shirts! While the event featured talks on a large number of topics related to engineering, the agenda was heavily focused on talks and workshops on AI, blockchain, and quantum computing. Because our booth was quite busy, I spent most of my time there, but I was able to attend two very interesting keynotes: one on quantum computing, and another on scaling your engineering team, a problem Entelo will be faced with very soon. I was intrigued by this keynote. We all hear about the potential power of quantum computing, but what is the state of the technology today, and what are the challenges associated with it? This keynote, run by Andrew Schoen , a Principal at NEA, and David Moehring , the CEO of IonQ, addressed some of those questions. Despite some of the physics details that were over my head, I went into the event with little knowledge of quantum computing and came out of it with more than the average person. Takeaways: There are currently several approaches to creating a quantum computer, each with its own pros and cons. IonQ uses the Trapped Ion approach. IBM and Google each have their own approaches. The most powerful quantum computer today has about 50 qubits. David stated that we’d probably need hundreds of thousands or even millions of qubits to break modern encryption, so quantum computing is at least a decade or two away from making irrelevant modern cryptography. A standard measure for the performance of a quantum computer has not yet been developed. Going simply by the number of qubits is not a good indicator of performance. The quality of the qubit and the connectivity of each qubit to all the other qubits matters. The topic of this keynote is especially relevant to Entelo, as we’re scaling, so I am going to dedicate quite a bit of this post to it. VP of Engineering at Reddit, Nick Caldwell , walked the audience through how Reddit handled tripling the size of its engineering team. The team faced very high growth: from about 40 to 120 engineers in a single year. When Nick started at Reddit, the product and engineering teams lacked structure, clear roles and responsibilities, motivation, and accountability. The team had 30-person daily standups, and engineers did not appear motivated to complete engineering tasks: they played Super Smash. Bros for hours each day. As a competitive Super Smash Bros. player, I wondered which version of the game they played. Regarding team structure, they had no engineering managers but quite a few tech leads and program managers. Nick implemented significant changes to the team in order to double its work output without adding any engineers. Here are some of his changes: He used the R.A.C.I. technique to splitting program managers into product managers and engineering managers. This forced the team to move towards specialization and accomplished the goal of setting clear roles and responsibilities for everyone. Removed tech leads since their roles and responsibilities weren’t obvious in the new structure. Many of the tech leads moved to an engineering manager, and some left the company. Implemented enough process to keep the team organized by introducing better product management tools such as JIRA. Previously, they wrote down their sprint on a Google Doc and spent quite a bit of time deciding which superhero to put in the background. There were multiple versions of this document circulating around the company. Gave his team meaningful work — he expressed the value that their work has on the company, and more generally, their users. With those changes in place, Nick began to scale the team. I thought this was an interesting statistic: According to the Startup Genome Report, 92% of startups fail within 3 years, and 43% of them fail with issues due to scale. Here are the highlights from the talk about the challenges of scaling, along with some warnings: 1. Awareness, coordination, and bottlenecks get harder as you scale Awareness: Everyone wants to know what everyone else on the team is doing, but that’s not always possible. Coordination: How do you ensure that different people aren’t working on the same task? How do you ensure that some work does not conflict with other work? How do you ensure that there is communication when similar work is being performed on different teams? Bottlenecks: How do you ensure that one team does not block another team? 2. A bigger team results in higher coordination cost More people on the team doesn’t necessarily equal a higher velocity. Scaling has diminishing marginal utility unless you implement a sound process to handle it. If engineers are stepping on each other’s toes, at some point adding more people will reduce your velocity. Nick refers to this concept as coordination cost. Coordination cost can be reduced and “fixed” with process. 3. Avoid process junkies Ease your team into process, and don’t become infatuated with it. Your process will become your culture over time. Developer Week was an incredible event. I spent only a couple of days there, but I learned about quantum computing, scaling teams, and more about the very company that I work for, Entelo. Entelo: Get the latest HR, technology, and recruiting… 5 Quantum Computing Developer Week 2018 Scaling Engineering 5 claps 5 Written by Making positive social impact on the world. Co-founder and CEO of ClassHook: https://www.classhook.com Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Making positive social impact on the world. Co-founder and CEO of ClassHook: https://www.classhook.com Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-02-15"},
{"website": "Entelo-Engineering", "title": "from google to entelo", "author": ["Gaurav Kataria"], "link": "https://engineering.entelo.com/from-google-to-entelo-6da802ecd48e", "abstract": "Artificial Intelligence (AI) and Machine Learning (ML) have been reshaping our lives in many ways — from self-driving cars to Alexa speakers — but the #1 concern that everyone has is that AI will eliminate our jobs. I believe that AI can also help us find meaningful and exciting jobs. Entelo is a silicon valley company that is applying AI to help employers find the best talent — it sifts through billions of data points to identify who would be a good fit for a specific job. It is this vision that has attracted me to Entelo . After almost a decade at Google, leading the Data Science group in Google Cloud, I have decided to join Entelo to further its investment in AI. When I joined Google Cloud, it was a small fledgling operation with a mission to bring the power of cloud to masses. It has grown leaps and bounds since then and introduced some truly amazing computing paradigms like Kubernetes, BigQuery, TensorFlow and TPUs. My mission now is to help Entelo build world-class AI products. Entelo has already achieved strong customer adoption — counting Netflix, Slack, Pinterest, GE and Cisco as customers, as well as solid investor traction — over $40M in funding from top tier VC firms like Battery, USVP and Shasta Ventures. The next phase is now all about creating amazing AI-powered user experiences that can connect the right talent to the right job — creating value for job seekers, employers and our society as a whole. We will be tackling some of the hardest and most exciting AI problems at Entelo — applying NLP to understand the intent of a job and qualifications of a candidate to make the right connection. Not relying on string matches and regexes. Entelo has amassed some proprietary data that can signal the willingness to change jobs or relocate among potential job candidates. Employers can use this latent information in the various ML algorithms to attract the top talent and to boost diversity hiring — drawing qualified talent from underrepresented segments like women, minority and veterans. I am particularly thrilled about joining a team that cares about solving tough problems while at the same time helping each other grow and develop. Entelo has one of the happiest teams in the valley that I have personally met. No wonder they are among the best rated companies to work for according to Glassdoor ! Looking forward to an exciting future at Entelo. Gaurav PS: Ping me if you are interested in joining me on this journey. Entelo: Get the latest HR, technology, and recruiting… 3 Artificial Intelligence 3 claps 3 Written by Love Building AI Products Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Love Building AI Products Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-02-02"},
{"website": "Entelo-Engineering", "title": "effective use of rspec shared examples", "author": ["Alexander Deeb"], "link": "https://engineering.entelo.com/effective-use-of-rspec-shared-examples-80aeead78833", "abstract": "RSpec shared examples can be used to DRY up your code and make testing easier. After all, their purpose is to make test examples reusable. The most valuable shared examples are highly general and portable, meaning there isn’t much context required, and they can be used in many of your tests. Reduce duplicate code Standardize the way in which you test certain functionality Decrease time spent writing tests So how can you make your test examples reusable? Let’s look at a common example: checking if an object is created. This is a simple example that tests user creation. While this doesn’t warrant a shared example since it’s just one test, what if you also had the following test? Now it might warrant a shared example because the use case appears to be common enough that you’ll need it as you create more controllers. Here’s how you could DRY up your code, and more importantly, make it easier and less error-prone to test: This shared example checks that a new object is created. It’s highly general and reusable, so I put it in spec/support/shared_examples so that it will be autoloaded by RSpec. If your shared example is only relevant for a few tests, you may want to require it manually at the top of each test in order to reduce RSpec’s boot time. Here’s how you could use the above shared example in both controller specs: That shared example saved us four lines of code but also made it incredibly easy to test that a new object is created. All we had to do was pass the ActiveRecord class into the test. The lines of code and time savings compound as we create more controllers that need a test similar to this. When you’re working on a large team with a large code base, a shared example such as this pays huge dividends in terms of making your testing more standardized. This is only one example of how shared examples can improve your test code. If you’re spending a lot of time testing, consider using shared examples not only as a way to DRY up your code but also as a way to increase the speed at which you can write tests. Entelo: Get the latest HR, technology, and recruiting… 26 1 Ruby on Rails Rspec Shared Examples Software Testing 26 claps 26 1 Written by Making positive social impact on the world. Co-founder and CEO of ClassHook: https://www.classhook.com Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Making positive social impact on the world. Co-founder and CEO of ClassHook: https://www.classhook.com Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-01-31"},
{"website": "Entelo-Engineering", "title": "engineering offsite 2017", "author": ["Nate Milbee"], "link": "https://engineering.entelo.com/engineering-offsite-2017-9b65b4afdc82", "abstract": "Our Engineering team is growing fast! We’ve nearly doubled in the last year and a half and have equally aggressive plans for 2018. With all this new talent, we were able to launch significant improvements to every product — the most significant product overhaul since inception! We also added a new product to the mix. To celebrate this tremendous achievement and let off some steam, we recently took a trip to House of Air in San Francisco. The sequence was: (1) Take a party limo to the Presidio: (2) Hurl objects at each other while bouncing on trampolines: In some cases, fellow Entelopes had to go down… In other cases, well … no-one is safe, not even children! Want to join the fun? We have an amazing roadmap this year, filled with the kinds of technical and non-technical challenges you’d associate with a top-notch engineering team in a fast-growing startup that is winning. Reach out and say Hi! Entelo: Get the latest HR, technology, and recruiting… 9 Startup 9 claps 9 Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2018-02-02"},
{"website": "Entelo-Engineering", "title": "having new eyes", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/having-new-eyes-be72f1f186b9", "abstract": "I’ve known for a few weeks now that I would be writing a post to finish out the story of my engineering internship here at Entelo. Ahem… I’ve been having a bit of a hard time with it. In short, this story wraps up in the way that I wish many of my favorite tales did — with a sequel. I’ve officially been on the Core Experience team for two whole weeks! Inspiration for this post finally came late last week when Colleen said this: And I remembered this: One such Post-It has adorned my bedroom wall since my sophomore year of high school. The original is carefully tucked within the pages of my personal journal, stickiness long faded. As a twinkle-eyed teenager stuck in Florida, I would read this quote every morning while dreaming of living in California. As a still twinkle-eyed 25 year-old, I read the long-form version when I’m so over living in California . It’s a well-known passage from the fifth volume of French essayist Marcel Proust’s “ Remembrance of Things Past (or In Search of Lost Time) ”. It goes like this: “ The only true voyage of discovery, the only fountain of Eternal Youth, would be not to visit strange lands but to possess other eyes, to behold the universe through the eyes of another, of a hundred others, to behold the hundred universes that each of them beholds, that each of them is. ” These last five months have been an embodiment of the spirit of these words. I spent months experiencing Entelo in the same office that I knew, but seeing the product from the eyes of the senior engineers, both current and past, who crafted this thing. At times it was a painful journey and a very different existence from the one that I knew as an SDR. Overall however, it’s been gift to travel with all of them. My vision is still adjusting. There is much left to discover here. It’s not time to live in the wind just yet. Now is the time to carve out little paths of my own for the next emerging engineer at Entelo to discover and get wonderfully lost on. It’s time to keep doing this with a rockus team that’s got my back and my front(end). I joined Entelo 12 months ago, eager to continue my work in business and sales development. 8 months ago, I proposed a seemingly unlikely move to engineering. 6 months ago, I got my first desk in the engineering pod. Today, I’m helping to build and evolve our product. It is because of my internship that I can write those words, and I do so with a delightful tingle in my fingertips. I hope that my next 12 months here are just as full of challenging and far reaching adventures. A big, warm, special thank you to everyone who was a part of this thing. I honestly feel like it was all 135 you Entelopes here at home. Shout out to my managers back on the SDR team, People Ops, Colleen and the Mentor Squad (great band name), my first desk neighbors, Stack Overflow, and everyone who ever gave me a high five of encouragement while I worked in the kitchen early in the morning. Finally a BIG, BIG, BIG thank you to our Joyride Coffee Cold Brew keg. I couldn’t have done it without you. What I’m doing with my life… Building Entelo! I’m really good at… Signing up for Udemy classes. The first thing people usually notice about me… That I’m holding cold brew. Favorites = { :language => ‘JavaScript’, :database => ‘MySQL’, :gang_of_four_design_pattern => ‘composite’, :method => ‘grep’, :git_command => ‘git reset --hard HEAD~1’, :data_structure => ‘queues’, :gem => ‘pry-doc’, :error_message => ‘NoMethodError: undefined method `[]’ for nil:NilClass’, :flow_state_song => ‘Space Station White Noise’, :programming_book => ‘Metaprogramming 2’, } Six things I could never do without… [“1password”, “sublime”, “noise_cancelling_headphones”, “blue_bottle”, “emergen-c”, “my_go_to_sleep_reminder”] I spend a lot of time thinking about… How to DevOps. Could I DevOps? Should I DevOps? When will I DevOps? On a typical Friday night I am… Reading comics books, drinking beer, and falling asleep during a Udemy course all at the same time. The most private thing I’m willing to admit… I feel like PHP can’t be that bad if 25% of the web is built on it?? You should message me if You want to build Dragon Age related things together!!! Relive my journey or check out what other engineers are doing at Entelo on our Engineering blog ! Entelo: Get the latest HR, technology, and recruiting… Coffee Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-11-14"},
{"website": "Entelo-Engineering", "title": "chromes paint flashing tool", "author": ["Vijay"], "link": "https://engineering.entelo.com/chromes-paint-flashing-tool-b5c880849635", "abstract": "Tickets to this year’s Chrome Web Dev Summit sold out fast. While one of our engineers was lucky enough to attend in-person, the rest of us were eager to check out the livestream of the summit happening just blocks away from us. Many of the talks this year were centered around performance on the web and ways to optimize a user’s experience by improving both the loading of an application and its components’ critical rendering path. As our front-end grows more feature-rich and complex, it’s important to consider the ways in which we can optimize both the load and critical rendering path. Fortunately, the summit highlighted a number of tools that allow developers to profile the rendering process. Painting pixels to the screen can be one of the most costly processes, therefore, one to carefully scope when necessary and avoid when possible. Chrome has a handy paint flashing tool that draws green squares around parts of the page that are currently undergoing a paint. Any interactions or changes that trigger a layout change, will then trigger paint refreshes. After hearing about this, the engineering team spent the next few minutes applying this tool to the features that they worked on. Chrome’s paint tool can be found in the developer tools Rendering tab. By applying this tool I noticed two classes of repaints that happen: one that repaints the entire view due to a layout change, and paints that are scoped to the component. I work on an email compose tool that displays as a modal on our profile pages. The tool is built with React and includes a rich suite of interactions that give our users the ability to level up their outreach to candidates by composing and scheduling follow-ups, selecting the best time to schedule outreach using data-driven best times, the ability to send as others, etc. With all of these customizations, our goal is to maintain a rich and valuable interactive environment without a user experience that lags. The first is an entire layout recalculation that happens when some interaction forces the components to change their coordinates. For example, adding a follow-up adds a new email composer pushing the existing one above; or, when the user clicks on a dropdown. Other interactions such as hover events that change the background colors do not require layout recalculations and you can see the paints scoped more finely to the element of engagement. As we expand this product, we’ll be looking for ways to use both this tool and others to optimize the experience for our users to ensure that their time with our tools feels smooth and performant. Entelo: Get the latest HR, technology, and recruiting… 16 16 claps 16 Written by null Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by null Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-11-09"},
{"website": "Entelo-Engineering", "title": "my transition to engineering manager", "author": ["James Hwang"], "link": "https://engineering.entelo.com/my-transition-to-engineering-manager-dc01e9b5df69", "abstract": "I started my career here at Entelo back in December of 2014. I was very early into my professional software engineering experience. Before moving into software development, my previous career was as a financial analyst and consultant. As I look back over the last 3 years, I was so young in my engineering career. There is so much I’ve learned and still so much to learn. From my first day at Entelo to around March of 2015, I was working to hone my craft, mostly on the Ruby on Rails side but also with database technologies like Elasticsearch. I was also learning a ton about AWS and DevOps. It was a great time and I have never learned so much in a short period of time. What they say about startups is true. When you’re in a startup environment, you learn in 1 month what would take you 1 year in larger companies. One of the greatest benefits of working at Entelo is that there is a ton of stuff to learn and dig into, if you’re up for it. Entelo cares a lot about professional growth. They even provide a 1k/year allocation for you to spend on educational related things. I have spent my allocation on conferences like Dockercon, Elasticon, training classes in deep learning, and books. So many books! In March 2015, I was given the opportunity to take on the role of Lead Engineer. I was excited about the promotion, but I also started to think, “is this the start of my transition into management?” I started having these conversations with my VP of Engineering and my new Director. At the time, there was so much activity around data science and machine learning and I didn’t want to give up the opportunity to learn this new space. So I asked to be given some time and think about if I wanted to go down the manager track and leadership obliged. Lead Engineer at Entelo still means that you write code, but you take on more areas of responsibility, such as: helping enable your team and guiding them to make good technical decisions. As a lead, you’re the team’s representative in meetings and in policy discussions. But as a lead, career growth and performance reviews were not part of my responsibilities. I really enjoyed my time as a lead. It was a time in which I saw my actions and guidance help build up others and strengthen the bond between team members. Building products together and helping push features to the finish line is something I really love to do. My role would entail taking on some of the coding tasks but most of my time was spent on bug fixes and higher level planning. For me, my goal was ensuring the shipment of the product on time and keeping the team focused and growing. Throughout this entire time, I was attending more meetings and coding less. This was a test to how and if I could transition into management. I spoke with mentors in the past about their transition and what they liked and what they regretted. Many of them said they missed coding and being close to the technology. Others mentioned that wished they’d had never moved. But one of my mentors gave me the final words that would help me make my final decision. He said that if I wanted to take the plunge, I should do so in a safe environment where I can make mistakes and be forgiven for them. I knew that my team at Entelo knew and respected me. They knew this was going to be something new for me and I could make mistakes. But they also know from my time as being a Lead, that I have their best interests at heart. In May 2017, I decided to take the plunge. My director started to let some of my teammates know of my intention. The team was excited and I was too. It would be a great opportunity for me and I hoped I would do right by them by empowering and strengthening the team. I officially became an engineering manager in July 2017. I have now been in this new role for over a quarter. It’s been a fantastic time. We shipped a large overhaul of our main search product . I coded a lot less (only bug fixes). Seeing the team perform so well and helping enabling them to be the best is what I take most from this experience. I have the amazing benefit of working with extremely talented folks who are also nice and a pleasure to work with. We put a high emphasis on collaboration and teamwork. It shows in the team. Looking back, I’m glad I made the transition and I contribute it all to the environment: a company that cares a lot about growth, a leadership team who is looking out for me, and an engineering team that’s talented and great to work with. If you’re also in the position of transitioning into management, I would share with you the words that helped push me to the next level. Make sure your environment is supportive and will nurture you through your next major career change. Also, if you’re looking to join a great company that grows their people, take a look at our jobs page: https://www.entelo.com/company/careers/job-openings/ . Entelo: Get the latest HR, technology, and recruiting… 15 15 claps 15 Written by Facebook Engineer Manager Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Facebook Engineer Manager Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-11-03"},
{"website": "Entelo-Engineering", "title": "its the little things battling unconscious bias in recruiting through surprisingly small features", "author": ["Kelly Hale"], "link": "https://engineering.entelo.com/its-the-little-things-battling-unconscious-bias-in-recruiting-through-surprisingly-small-features-3633feabeeb3", "abstract": "At Entelo, we’re in the business of helping you find the best candidate for your open role. And if you, like so many others, are concerned about the potential impact of unconscious bias on your hiring efforts, we might just have the sourcing tool for you . When you perform a search in Entelo’s platform, you’re presented with a list of candidate profile cards (which we internally refer to as SERPs or “ S earch E ngine R esults P ages”). Under ordinary circumstances, if you performed a search that resulted in my profile turning up, my SERP would look something like this: Based on this result, with my name and photo visible, you can probably guess some basic things about the demographic categories to which I belong — race, gender, general age range, etc. Depending on the viewer and the context, these traits could be subconsciously understood as desirable, undesirable or neutral. This applies for any candidate from any background. What you’re looking for is the best possible pool of candidates regardless of whatever unconscious biases and assumptions you and your team might hold. So what if we could remove some of the demographic data, while still giving you a well rounded view of the candidate? Enter what we have been affectionately calling “Anon SERP”. Here I am again, as anon: In this version, you still have plenty of top level data on my skills, location and work experience, but you have no way of knowing anything more about me. To date this feature has been really well received by our customers, especially those with large scale hiring needs and robust D&I initiatives. This is especially satisfying because Anon SERP only took about 30 minutes to create— in the span of a clandestine (or “off sprint” if you prefer) pairing session between myself and my team’s designer on a late Friday afternoon. We owe this easy win to the fact that we paid the time upfront when we designed the concept of the SERP and designed explicitly for extensibility. … In the process of giving our core Search product a facelift and migrating it from legacy Rails views to React, we identified several spots across the app that utilized some form of something like a SERP. Largely these instances were divorced from each other in every way save the basic concept of a “piece of code that gives you a profile at a glance”. They didn’t share or reuse code and often had different looks, feels and behaviors. We saw a prime opportunity to provide our customers with a consistent UX/UI while making our own lives a lot easier in the long run. We wanted to design a SERP component that was: Flexible enough that our Product team could request any configuration or variation for any given use case Would require minimal engineering hours The first step was creating a SERP component that would receive the minimal amount of data necessary for all SERPs across the product as props (properties) and do three things: Pass that data as context Render children that would receive said context Provide the basic layout structure via a CSS class that all children would inherit from We identified the two key pieces of data that all SERPs need as “profile” (the candidate) and “user” (the actual user). Our basic <Serp> component went a little like this: Which means a given SERP configuration could end up looking like the following, with each child component subscribing (or not) to some piece of context, based on need: So, for example, <SerpNameLocation /> might end up looking something like this: And so on… the idea being that any team across the organization could create their own SERP based components or plug and play existing components to fit their own product needs. React’s context allows us to make changes that impact the whole entity without having to pass props down to every single child component. This organization made creating Anon SERP a very quick task. Returning to our basic <Serp> layout, imagine the following: Now all child components have knowledge of whether or not the “isAnon” attribute is turned on, which means that configuring the key components — <SerpNameLocation /> and <SerpImage /> — is trivial. For example, going back to <SerpNameLocation /> : And done! Writing the helper methods to get initials from any given name and display them (or choose a colored background for the anonymized “image”) took up the bulk engineering time. In the end, the SERP component behaved exactly as expected without any further work. For further information about this product, please read the perspective from Elena , our Product Manager on Search Entelo: Get the latest HR, technology, and recruiting… 67 React Diversity In Tech JavaScript Recruiting Diversity And Inclusion 67 claps 67 Written by Senior Software Engineer @ Entelo. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Senior Software Engineer @ Entelo. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-11-01"},
{"website": "Entelo-Engineering", "title": "elasticsearch using function scores to pack far far too much information into a single query", "author": ["Jason Rosendale"], "link": "https://engineering.entelo.com/elasticsearch-using-function-scores-to-pack-far-far-too-much-information-into-a-single-query-9630387ec139", "abstract": "Suppose someone wants to search for candidates to fill a new software role. They head on over to Entelo (of course!) and whip up a search query: “senior java developer”. There are way too many matches for these search criteria, so our user decides to be a little more selective by filtering their search. Specifically, they decide that they want to see only candidates that: are within 50 miles of San Francisco have an advanced degree are significantly more likely than their peers to be looking for a new position currently work in the advertising industry have at least 10 years of experience have COBOL experience have a known email address have an exclamation point in their job title! have made contributions to open source projects have at some point worked for a company with 10,000+ employees So they run their query again with these filters and find: They’ve gone from too many results to far too few. It’s clear that they’re overfiltering, but there’s no indication of what they should change to make sure that they get neither too many nor too few results. We’re a caring and empathetic engineering team over here at Entelo (of course!), so we wanted to help users in this situation. We decided that whenever over-filtering was detected on a query, we would automatically suggest alternate sets of query filters to the user (for example, “expanding your search radius by 8 miles would give you 1500 more results!”). We want to guarantee two things: that our suggested improvement would actually return more results than the original search. A user would be disappointed if we suggested that they expand their search radius by 8 miles only to find that they still got zero hits on their search for senior COBOL/Node.js developers in Duluth. that our suggestion would be the minimal possible change that would increase the number of results. If we cared only about increasing the number of search results we would just suggest that the user remove every single filter. We want our suggestion to preserve their original intent as much as possible. In order to guarantee both of these objectives we need to know the answer to a lot of questions about the query: How many more results would we get if we didn’t use the n th filter? How many of the candidates matching the search query also matched filter n ? Which subsets of these filters could we use and still get more than 10 results? Are there any redundant pairs of filters? For example, it’s possible that everyone with an advanced degree also has a known email, which would make filter #7 unnecessary. Are there any disjoint pairs of filters? It might be the case that nobody in the advertising industry has an exclamation point in their job title, which means that we’d never get any results if we used filters #4 and #8 simultaneously. In order to answer all of these questions we would need to know how many candidates matched each of the 2¹⁰ possible combinations of filters. Surprisingly enough, we can do this in a single search! ElasticSearch has a “function score” feature that allows us to assign a configurable number of points to a document if it passes a particular filter. We can use this function score to create a bitfield! We define a function score that adds 1 point if the document matches the first filter, another 2 points if it matches the second filter, 4 more points for the third, and in general adding 2ⁿ points if a document matches the n th filter. We then aggregate the results to get the number of documents that attain each score: The \"script_score\":{\"script\":\"0\"} filter makes sure that documents that do not match any of the filters still return a score of 0 instead of being completely excluded. The results of our query look like this : Remember that we allocated points as follows: To more easily explore this data, suppose we’ve dumped our aggregation results into a Ruby hash called scores with the integer-valued scores as keys and the doc_counts as values. Q: How many people did not match any of the filters? A: The number of documents that had a score of 0. scores.get(0) Q: How many people have contributed to open source projects but meet none of the other criteria? A: The number of documents that had a score of exactly 256. scores.get(256) Q:How many people have contributed to open source projects, regardless of which other criteria they meet? A:The number of documents that have 256 as a component of their scores (i.e. scores that have “1” for their 9th bit): scores.select { |key, _| key & 256 }.values.sum Q: How many people have an advanced degree and more than 10 years of experience? A: The number of documents that have 2 and 16 as components of their scores: scores.select { |key, _| key & (2 + 16) }.values.sum Q: How many people have an advanced degree but do *not* have more than 10 years of experience? A: The number of documents that have 2 but not 16 as a component of their scores Q: There are a lot of people with a score of 790. What filters did they match? A: A score matches filter n if the n th bit is set to 1. One drawback to using functions scores in this way is that the boost_mode: replace option suppresses the documents’ relevance scores. If a document matches all ten filters, it will always get a score of exactly 1023 and will tie for first place with every other document that matches every filter, regardless of how relevant those documents actually are to the query. We can’t get our relevance score back by changing the boost mode to boost_mode: sum , because the relevance score can be arbitrarily large and it would cause us to lose the ability to interpret our function score as a bitfield. But we can rescale our relevance scores so that they are guaranteed to fall between 0.0 and 0.99. This can be done by replacing the {“script\": “0”} filter in our query with the function: This function maps all positive scores onto the interval between 0 and 0.99. More importantly, if one document has a higher relevance score than a second document then its transformed score will still be higher than the transformed score of the second document. This function score/aggregation technique is fast, but it does definitely add some overhead to the query execution time. Since very few searches on our platform return zero results, it just doesn’t make sense to automatically include this aggregation with every query. Instead, we wait until we see a search that has returned no results and then quickly, behind the scenes, re-perform that search with our function score aggregation. We analyze the results, choose the optimal set of filters, and then do a third search using that optimal filter set. The user then sees the results of the modified query along with an alert letting them know exactly which filters were modified to allow those results to be shown. In production, performing all three of these searches takes slightly less than 3x as long as the original search (presumably because of filter caching). Entelo: Get the latest HR, technology, and recruiting… 98 98 claps 98 Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-11-06"},
{"website": "Entelo-Engineering", "title": "the tipping point knowing when a new technology is catching on", "author": ["Ryan A Booth"], "link": "https://engineering.entelo.com/the-tipping-point-knowing-when-a-new-technology-is-catching-on-1062d28f7615", "abstract": "When I joined Entelo, we were looking to revamp the front end of the main application. It wasn’t necessarily vital to rewrite each page, but the process and tools we were using needed to be updated. I decided to take a brown-field approach to introducing React , through a convenient gem called React on Rails , mainly because we could do it gradually and as-needed. When I made that decision, I remember looking through the codebase and seeing the small amount of Backbone used inside the app. It looked as though the team back at that time was excited about using a JS framework, used it to create a feature or two, and did a decent job, but it had not made a very large impact on the larger codebase and clearly it hadn’t spread to the whole team. My main worry was that the same thing would happen during the shift to React, webpack, npm, etc. because it was a lot of change from jQuery and the Rails asset pipeline. I was worried that the major benefits of switching to a very different JavaScript development process (modules, unit tests, dependency management) would be lost due to the learning cost of JSX, ES6 and CommonJS. And more than that, I was worried that this method of developing the front end wouldn’t inspire enough of a refactor to start eating away at the existing HAML templates, and slowly moving the front end to a more reusable, maintainable state. I am finally convinced that the shift in our codebase is only a matter of time. It’s taken 6 months, but it was my team that finally changed my mind recently. I want to highlight some things to look out for that might indicate whether the same change is happening at your organization. The first positive sign came very early into our transition to React. A couple of weeks after our production environment had it’s first React components, my coworker Alex decided to re-create an entire page in React. It was surprising and inspiring that someone would jump in and do that much learning so early into the rollout. I remember how much extra time it took us to finish that task and I started wondering whether that would deter others. After that initial usage, there was a lull for a month or so (outside my own development). Then when Charles joined, he started adding dev tools all over. We hadn’t set up Redux Dev Tools yet, so he did that. We hadn’t set up Hot Module Reloading, so he did that too. The next feature I worked on was faster and easier, thanks to him. And that’s when we started sharing notes in a Front End Guild. Although we were mostly brown-fielding React, I have to say that the green-field release of a major new feature was a big milestone in this rollout. It showed the advantages of a full system using the new practices. It showed how easily third-party components could spice up our UI and it showed how many tools were already a part of the React, Redux, Router ecosystem. The most recent sign that convinced me that this change is going to take off came from code reuse. When you’re using React, if you’re making useful components, reuse is pretty much a guarantee. What really set this example apart was that the engineers that reused the existing component added to it, made it even more generalizable, and reviewed their changes with the original authors. As the original designer behind our new system, it impressed me so much more because I wasn’t involved at all. That was the main signal of success. Throughout the whole transition period, I’ve been trying to set up opportunities to learn new JavaScript syntax changes, add in new tools that make front end dev faster, and create enough example code to use as a reference. Entelo: Get the latest HR, technology, and recruiting… 4 React Legacy Code Rails 4 claps 4 Written by Reading, writing and laughing. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Reading, writing and laughing. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-10-23"},
{"website": "Entelo-Engineering", "title": "building a wizard workflow in react", "author": ["Charles Wang"], "link": "https://engineering.entelo.com/building-a-wizard-workflow-in-react-3cdac295ff20", "abstract": "One of my first tasks at Entelo was to work on a greenfield project that involved a step-by-step wizard. Workflows/wizards are useful when you want the end-user to complete a series of steps. ( I’ll be referring to workflow/wizard interchangeably ) There are several use cases where you might want to incorporate a workflow into your application’s user experience. Here are just a few examples: User Registration with multiple forms Breaking large forms into smaller steps E-commerce checkout flow Multi-page surveys I’ve had previous experiences building out a checkout flow for e-commerce companies, but this was the first time I had to build a workflow using React. Here is the design and the approach I took to build this application. The design is a series of intake forms we want the user to go through. Each step reflects a related-grouping of input values. In our example above, we start off with collecting some general job description information. Eventually, we move on to collecting detailed job criteria and selecting an email template. Finally, we end the workflow with a confirmation page. Each step of the workflow is a separate route we will define in our routes file when using react-router . As we navigate from one step to the next, we will advance the progress bar along with rendering a new container with the next step’s contents. For the progress bar, we decided to use the library github.com This is a very simple progress bar and the API is straightforward. Below are some examples of what the progress bar looks like as we move from one step to the next. Set up the route to determine what step of the flow we are in. The id and step will be passed as params via react-router to the JobContainer component. In the component, we will create a switch case statement to determine what component to render. We also use this step value to calculate the progress bar distance and what progress label should be bold . We have a series of containers, but 2 primary types of containers. A container to manage the state of progress bar and determine what content containers to render. Content containers for each step. I didn’t have that much experience when it came to React, Redux, React Router when I initially built this. With every project you work on, you learn some things along the way that could be improved. When I get around to refactoring, I will have routing deal with deciding what container to render rather than having the switch/case in the JobContainer component. I would also spend some time refactoring how I built some of the components in the workflow, but thats for the next blog post. Overall, this was a very fun project to work on. I would love to hear your thoughts / feedback on how you would go about building a workflow application using React / Redux. Entelo: Get the latest HR, technology, and recruiting… 27 3 React Reactjs Tutorial 27 claps 27 3 Written by Software Engineer living in LA. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Software Engineer living in LA. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-10-24"},
{"website": "Entelo-Engineering", "title": "3 difficulties when hiring a data team", "author": ["Ryan A Booth"], "link": "https://engineering.entelo.com/3-difficulties-when-hiring-a-data-team-ed487fc0b4d0", "abstract": "What’s the first step towards data-based insights, machine learning and intelligent systems? Hiring a good data team. It should be clear to most tech companies that a workflow-centric application is no longer enough for software companies to remain competitive. Today is the age of intelligent systems. Even if your industry is years away from widespread demand for intelligent systems, you need to start collecting and normalizing data now. Unfortunately, every tech company in existence seems to have realized this and the talent pool of data specialists is scarce. That leads to 3 difficult challenges: Most position titles on a data team were recently created. Data Scientists, Data Engineers — these roles used to be under business intelligence or analyst positions. That makes searching by previous positions misleading. Some problems your data team will work on are difficult enough to require doctorate level math or computing science talent. Sifting through candidates to find people qualified to face those challenges can be confusing and difficult. Once you’ve found a qualified candidate, it’s uniquely difficult to hold a data candidate’s attention. There are tough questions to answer: How big is the team? How would they be working with the engineering and product teams? What kinds of challenges is your company trying to solve? What is your company’s existing data pipeline? All of these questions are difficult for an engineering director to answer, never mind a hiring manager. In the early stages of your data team, you are most likely dealing with a chicken and egg problem too. You’ll need a few data hires before your pipeline and tech stack are strong enough to attract new talent. But how do you attract those hires until that work has started? Entelo faced this challenge at one point, and was lucky to hire our first data scientist from a competitor. Luckily you can often turn this around, attracting star candidates to start their own system with minimal oversight. Most companies have lots of existing application data available, they just haven’t had a team focused on making it useful for ML models or human analysts. As long as you have a positive engineering culture and an open-minded management team, the greenfield scenario isn’t always as unattractive as it seems. Once you’ve managed to find a unicorn that fulfills your experience requirements, convinced them that your team is worth joining, and confirmed their qualifications, you are still likely to be competing with multiple other offers (in fact, it’s probably a bad sign if you’re not in this field). We have lost a few promising candidates in the last stage of hiring due to competing offers, to reasons as simple as commute distance. After all, these candidates have a lot of leverage. At Entelo, we know these challenges all too well. Our data team is relatively small, and we’ve been hiring for data roles as often as possible. In fact, we currently have multiple roles open at https://boards.greenhouse.io/entelo . Entelo: Get the latest HR, technology, and recruiting… 15 Data Science 15 claps 15 Written by Reading, writing and laughing. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Reading, writing and laughing. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-10-16"},
{"website": "Entelo-Engineering", "title": "how to deal", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/how-to-deal-21b41164e757", "abstract": "One of my favorite things about computer science and programming is how downright philosophical it is. An existentialist at heart, there are some programming paradigms that make me feel all types of swoony . There are other moments when computer concepts challenge me on a personal level, resulting in internal conflict and reflection. This week, I experienced one of those moments. My task was to study a particular database and use it to store and retrieve information in the chat server application that I built last week. In learning about how this database does asynchronous replication, I came upon a communication model called Master/Slave . My first reaction when I read this was a deep internal cringe. What could possibly be going on between these databases that could warrant this name? A big part of me didn’t want to know. A bigger part just had to find out what this meant. After clicking on the accompanying link, I learned that in master/slave communication, one device or process has unidirectional control over one or more other devices within its group. “Hmmm…” I thought. “That’s an extremely unfortunate name for just saying ‘this database is the boss of these other databases’!” As the documentation went into detail about the relationship between master/slave and slave/slave, I got more and more disturbed about the undeniable parallels between this concept and historical slavery in the United States. My mind stopped picturing a group of machines communicating with each other and instead imagined fields. Bodies. Actual slaves and masters. I began to realize that my own body was painfully tense and I had a sharp, spiky feeling in my chest. Everything around me felt slow, washed out, and out of focus. In short, I got hella triggered. Being triggered happens when you’re reading, witnessing, or hearing something and become distressed as a result of feelings or memories associated with a particular traumatic experience. Like many triggering moments, this one caught me completely off guard. I began to wonder if this had ever happened to other developers. I thought about other concepts in programming and identified other potential triggers among them. In programming, we type out commands like kill and force . We “ enslave ”. We exercise undeniable power over our system. The lexicon is filled with words and phrases that parallel trauma in the lives of people who have experienced personal violence as the result of unequal power dynamics. After getting over the initial impact of this experience, I had two thoughts: I really want to talk about this! I have no idea how to talk about this! I found my answer my writing this post. For me, it was the right way to not only make sense of my thoughts to but also create a record of reference for other folks out there who might have one of those “Is it just me or is this really problematic??” moments. What’s clear to me is that it’s so, so important to talk about these feelings and share them with each other. These jarring concepts aren’t going anywhere and I’m certain that I’m not the first or the last to reach for resources on how to deal when they impact you without warning. I’m wrapping up this week feeling more vulnerable than when it began, but I’m also feeling extremely empowered to continue this conversation by connecting with the people around me, whether they’re a part of my mentor squad, fellow developers of color, or anyone else who might be navigating other linguistic complexities in the professional world. How do you share your thoughts when a fundamental concept of your work is personally triggering? How can we support folks and create resources that enable healthy conversations about the sometimes non-obvious aggressions that we may experience in our studious quests to become experts? Entelo: Get the latest HR, technology, and recruiting… 18 Database 18 claps 18 Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-10-20"},
{"website": "Entelo-Engineering", "title": "theres no i in team", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/theres-no-i-in-team-284d9aa58539", "abstract": "For the past two weeks, I’ve been with the Track team at Entelo. These are the folks who are responsible for our candidate outreach and engagement product. While working with them, most of my tasks centered around the unfamiliar — and to be honest, daunting — concept of working with React — a JS library for building user interfaces that was developed by Facebook. It had been quite some time since I went poking around in front end code and up until this point, I’d had exactly zero experience with React outside of the little that I’d read and heard about in presentations. Like most beginners, I had the urge to go sit in a corner by myself and scramble to learn just enough React for the concepts to make sense. As a junior dev, much of my formative programming experience had revolved around this pattern. This just wasn’t going to fly with my temporary team, however. On the Track team, no person is an island and everyone is partial to high fives and the word “we”. Unique to how the Track team operates is that they default to working in pairs. Pair programming was born out of the agile software development movement and requires two programmers to work together at a single workstation. One of the programmers takes on the role of the “driver”, the person writing the code, while the other is the “navigator”. Their job is to observe, direct, and review the code in real time. Thus far, I’d had mixed feelings about pairing. In my first few experiences, I often found myself in a goldilocks scenario that went something like this: Your partner is so lost on the material that you end up doing all of the work or teaching them just enough to muscle through it very, very slowly. Or Your partner isn’t great at actually working with someone and just blows through all of the work without much collaboration. Or The sweet spot, where you and your partner both have a comparable and complementary understanding of the material. It goes without saying that the first two scenarios can be extremely frustrating for both parties involved, especially when pairing isn’t exactly what you signed up for. Pairing at Entelo however, is highly encouraged and had restored some of my faith in the technique. These more positive experiences made me feel extremely curious about how successful I could be pairing most of the time. Truthfully, it also made me a bit anxious. I was always going to be the more junior of the pair whose knowledge of the domain was either nonexistent or lacking in comparison. Because of this, I was worried that pairing all the time would make me feel inadequate or like dead weight. I’m relieved to say that quite the opposite was true of my stint with Alan, Fito, and Vijay — a.k.a. The Track team. Made up of two members of my mentorship squad and the most patient and collaborative team lead that I could have asked for, this pod of engineering astounded me with their deep product knowledge, willingness to dive into the unknown, and unrelenting belief that they are stronger together. After the first week of working with the team, I felt myself actively slipping into the classic response of retreating to go face the unfamiliar in isolation. This is where a strong team bond and lessons from David H. Hoover and Adewale Oshineye’s Apprenticeship Patterns took me a long way. There’s a pattern defined within the text called Expose Your Ignorance . It goes like this: “Problem : Your managers and team members need confidence that you can deliver, but you are unfamiliar with some of the required technologies.” Yep! Sounded like me. “This doesn’t just happen to consultants. It happens to everyone.” Reassuring! And something that I’ve heard often from the developers around me. “Perhaps you’ve been brought in because you have a deep understanding of the business domain or some other aspect of the technology stack being used in a team…” Uh… “…Or perhaps you’re simply the only person available to do the job.” There we go! When I shared with Alan and Fito that the week of React had been challenging for me and that I was thinking about cramming in a course from our company Udemy portal by myself over the weekend, their immediate response was to drag me back into a space of collaboration. They promised that while it may feel uncomfortable to explicitly broadcast what you don’t know to the people around you, you will absolutely learn more by watching and doing than struggling, removed from the context of the actual problem you’re dealing with. Hmm. That sounded familiar. In fact, in sounded exactly like what Hoover and Oshineye had to say about resolving your discomfort while confronting your ignorance: “Solution : Show the people who are depending on you that the learning process is part of delivering software. Let them see you grow. According to research by the social psychologist Carol Dweck, the need to appear competent is ingrained into people of most industrialized societies. Conceding to unspoken pressures and telling people what they want to hear is not a good way to build strong relationships. Tell people the truth. Let them know that you’re starting to understand what they want and you’re in the process of learning how to give it to them. If you reassure them, reassure them with your ability to learn, not by pretending to know something you don’t. In this way, your reputation will be built upon your learning ability rather than what you already know.” With this exact sentiment reinforced by my teammates, the following week passed in a flurry of pairing, researching, fiddling with new technologies, and getting my tasks done with more confidence that I’d had before. There more articles than I can count about the pros and cons of pair programming versus the more traditional flow state . While I’ve benefitted greatly from being exposed to both, my two week long immersion into pair programming with the Track team has changed my mind for the better about this technique. Being a gritty young developer does not mean struggling needlessly in isolation, but recognizing which technique, between pairing and flying solo, will yield the most learning potential and earn you your level up sooner rather than later. A big thanks for Alan, Fito, and Vijay for the experience points on my journey to Get Good! Entelo: Get the latest HR, technology, and recruiting… 10 1 Programming 10 claps 10 1 Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-10-12"},
{"website": "Entelo-Engineering", "title": "coding at the end of the world", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/coding-at-the-end-of-the-world-34cf678bb05a", "abstract": "In my version of a reasonable (forget about perfect!) world, I would wake up at the same time every day. Whatever time that is, it would be on time . It would be my most productive time! The sleep that I got would be enough and my energy levels would be sufficient. I would have remembered to charge my laptop the night before. I would sit down to a project with relatively clear requirements. As open up my console and text editor, the seemingly endless construction on my block would just be wrapping up — miracles! My fingers would start to type valid terminal commands on the first or, more reasonably for my poorly healed broken fingers, second try and it would take an acceptable amount of time to decide what to name my models and classes in Ruby. More often than not, work would take place in a Flow State. I would remember to commit my projects to git logical chunk by logical chunk. I would remember to end each file with exactly one blank line and push my code up with the sun still somewhat visible in the sky. My task would be marked done cloooose enough to the pre-estimated time box. Most importantly, it wouldn’t feel so much like the world is ending while I’m trying to make sense of why cache invalidation is so dang hard. Last week was an intense reminder that building products doesn’t happen in a vacuum — not even one as weak as the one above. Many folks around me and beyond had to tackle tough programming problems right alongside dealing with disheartening world events, intense personal crises, failing computers, snoring visiting family members, sick kids, sleepless nights, gloomy skies, and and and and and…. While it hasn’t been the easiest to stay focused on the task at hand, I find myself grateful to have a role that has not only kept me busy and challenged, but provides work that I truly enjoy doing during a time when it’s been hard to enjoy most things. I’ve always believed in the role that technology plays in social revolution. When I think about what role I want to play in shaping the world, I imagine being a resource for those who need someone to help them tackle the big questions, and persevere though the most difficult obstacles. I’d like to think that I’m on my way to being that person, and get closer each week that I continue to show up and grit it out, even when the world outside demands so much more attention than I or anyone can give it. I gravitated towards programming because like many engineers, I’m 1) extremely stubborn and 2) find joy in solving complex problems. Unfortunately, the problems being faced head on in the world most recently aren’t solved as easily by algorithms or frameworks. Still, it’s empowering to see how the fundamentals that I’m learning today could lead to building eloquent solutions in some distant tomorrow — ones that do make solving the world’s woes feel all the more possible. Entelo: Get the latest HR, technology, and recruiting… 15 Programming 15 claps 15 Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-08-22"},
{"website": "Entelo-Engineering", "title": "500 days of summer", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/500-days-of-summer-ef90dc51108e", "abstract": "Okay it’s only been 3 months, but let’s be real. Time no longer has any meaning. Summer is coming to a close in the midst of holiday-shortened work weeks and global weather disasters. It’s been an unpredictable season, full of pleasant surprises, upsets, and as I always like to emphasize, learns on learns on learns . I’ve spent the past few weeks reflecting heavily on this last quarter with the engineering team. Here’s a quick overview of how the summer played out: Month One We kicked things off with some straight up basics. I did presentations and had roundtable discussions on topics ranging from how the internet works to the different types of computer memory. I left leagues more knowledgeable about how files are organized on my computer and why permissions for reading, writing, and executing those files are so extremely important . These topics, while often overlooked in most programming classes that I had taken up to that point, made me a better command line user and brought me and my machine closer together. Towards the end of that first month, the focus shifted towards the art of programming. Before diving deeper into our most commonly used programming language, Ruby, I was first tasked to ponder what object-oriented programming is . While my understanding was rocky at first, the concept came more into focus after I built my first project, Tic-Tac-Toe… twice! Month Two In month two, we took things to the web. I learned about networking, different types of internet protocol, sessions, cookies, http status codes, web frameworks, and eventually built a web crawler. Along the way, topics such as data structures, sorting algorithms, recursion, and background jobs introduced me to a slew of brand new concepts. It was in this month that seemingly isolated concepts slowly started to gel together. Suddenly, the invisible thread connecting the `curl` command that I typed into my terminal and the web pages that are hosted on the internet started coming into focus. Month Three By the end of month two, I was in awe of how much I had learned and how often I found myself contemplating the intricacies of full stack web development. While I felt much more comfortable in my ability to find answers on my own, learn new tools, and dive into the unknown, I was still mostly unfamiliar with our code base here at Entelo. August was the month that all that changed. Being on sprint for the first time, writing small new features that broke Entelo , and trying to chase down elusive bugs forced me to open file after file of our in-house repositories. The lay of the land slowly revealed itself. I still don’t feel quite like a local when weaving in and out of our directories, but I’m learning to translate the local dialect enough to read the signs that should point me in the right directly. Gratefully, I’m finding my way that much faster with each subsequent visit. So…what now? At season’s end, I find myself in a similar position as when I started — with many more questions than answers. I’ve recently started to focus more on questions such as: “What do I most enjoy about programming?” “What have I learned that is most relevant at Entelo?” “What is the most relevant skill I’ve gained in relation to the current industry overall?” In the wake of starting to really think about these things and having a bunch of feelings about the beginning of the end of my introduction to engineering, my team delivered some interesting news. They’d decided to prolong my program by two months. Huzzah! Summer is ending, but this game ain’t over yet, folks! Until October 31st, I’ll continue to grow and be molded by the talented engineering organization at Entelo. Ironically enough, this date is also my one year anniversary at Entelo! Upon hearing about my extended stay with the Eng squad, some folks have asked me how I feel about the idea of two extra months in the role. My response? It’s awesome! I’ve got more time to think about “what now?”. I’ll continue to gain relevant experience and come to a more sound conclusion to this question. There’s much to learn and more time to learn it with a team that’s so invested in my success is a win . In the past two weeks, I’ve asked for more help and asked more questions than in the first two months of my internship combined. I’ve grown faster and more deeply understood the implications of my work because of this. I’ve also been able to watch our team work with heightened collaboration and introduce some amazing internal releases. Long story short, it’s been amazing Summer. Now it’s time for a truly transformative Fall! Entelo: Get the latest HR, technology, and recruiting… Programming Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-09-18"},
{"website": "Entelo-Engineering", "title": "im being haunted by my friend raymond", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/im-being-haunted-by-my-friend-raymond-91ab4b842396", "abstract": "I’m being haunted by my friend Raymond. Well, by something that Raymond said to me in the early months of last year. Raymond had just become an engineering team lead at the startup he’d been at for a year. He has a CS degree, is in his early thirties, loves building things, and mentors junior engineers in his free time. He’s passionate, patient, and ridiculously talented–- all of the things that I thought made up an engineering lifer. One day I fell into one of many conversations with some engineering friends about how the career just wasn’t for me. I liked building little things here and there, but I simply didn’t enjoy spending all of my free time coding. “I’m not like Raymond,” I said, gesturing to him with open arms. “Who’ll probably still be hacking in his grave.” The table laughed affectionately. They too were familiar with Raymond’s affinity for programming late into the night. It was his quintessential idea of fun — time of day be damned. “I mean, yeah, I like it.” Raymond agreed with an easy smile. “But I don’t want to do this forever. I’ll probably do it for a couple more years, then peace out. Do something different.” He shrugged. Sitting there at the table as the conversation continued around me, I began to wonder: Is engineering something that you can just do for a few years, then peace out? Why learn so many niche skills only to use them for less than a decade? In what other industry do they let you wear cutoff jeans and expense boba every other day? What’s life like after engineering? Thus began the haunting. Since that day, that conversation has replayed in my head time and time again. Sometimes it sneaks up on me as I pass developers pairing to solve really hard problems. Other times it strikes late at night as I’m troubleshooting a buggy gem wreaking havoc on my app. I think about it every time that something particularly stumps me at work. Mostly recently, as the mountain of engineering principles that I’ve never heard of grows and grows, I can’t help but hear Raymond’s voice echoing in my ears. “I don’t wanna do this forever…just a couple more years…” “Just a couple more years…” “Just a couple…” AHHHHHHHHHHHHHHHHHHHH!!!!!!!!! Let me explain. There are two things about this that terrify me: I get it I’ve always believed that choosing a career should be like choosing a major: Go in with an open mind Play around for as long as they let you Try something new as often as you can Move on when you’ve maxed out on happiness and/or growth potential As a result, I’ve worked at four startups in five completely different roles in the past three years. I’ve learned a ton and met some incredible people in a wide range of professional worlds, yet I’ve never had the urge to settle down into any of them. Perhaps you could call me a bit of a career commitmentphobe. Maybe I’m just cautious. The point is that I get it where Raymond’s coming from. At the same time however, 2. I don’t get it! I am neck deep in shit that I need to learn and eventually master in order to be a good engineer and there’s no end in sight! Looking at least 10 years down the line from where I am today, I don’t see myself preparing to answer the question of what life’s like after engineering. Instead, I find myself being pulled back into the present wondering what skills I need to start working on now that will be the most useful to master before 2027 — skills that will keep me in the game. In short, I still see myself working hard to get good . Do I only have 10 years? Is that supposed to be enough time?? I don’t know what Raymond’s goals were when he decided to become an engineer, but perhaps he saw his personal finishing line within sight. When I snap myself out of my own head and think about all of the ways in which I want to get my hands dirty, I know that Raymond’s timeline is not my own. Having Ray in my head constantly in the past two weeks has led to me to ask myself some really important questions. When did I start looking forward to building tile games more than than sleeping in on the weekends? Where do I find other junior devs who already know that they eventually want to be leaders? Do I really have to start thinking about the end when I’ve only just started? As scary as it is to think about, a part of me is starting to realize that I’ve sentenced myself to a lifetime of willingly banging my head against the wall, and I’ve got more than “just a couple more years” before I “peace out”, if I ever do. Entelo: Get the latest HR, technology, and recruiting… Life Lessons Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-08-28"},
{"website": "Entelo-Engineering", "title": "the time i broke entelo", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/the-time-i-broke-entelo-4a4fab67691c", "abstract": "Thus far, most of my internship has revolved around establishing programming and computer science fundamentals, building small games and tools, and presenting on a wide range of self-study topics. This week, however, was game time. All of my deliverables pertained to diving into the codebase and helping resolve outstanding bugs. Or, as one of my mentors put it: “ You’re doing the real work now! ” With a handful of tickets to my name, I went on sprint for the very first time. A sprint is a coming together of people who all decide to work on a particular project with laser focus. For one to three weeks, the development of that project is priority number one. I’d always been a bit nervous about the idea of sprinting, as I do not run for pleasure, and as you might have guessed, being on sprint truly does mean getting shit done FAST! During my sprint, I worked with the Core Experience team — the group at Entelo that’s in charge of creating a seamless and sensical workflow experience for our users. Sitting in on their planning meeting, I couldn’t help but wonder: “ Are you sure I should be touching this?? ” The answer, of course, was yes. I reminded myself that, as I read in Apprenticeship Patterns last week, it’s important to learn in public, mess up while surrounded by experts, and confront your ignorance so that you can grow quickly. So in I dove! With enthusiastic support from the team, I got to work bashing bugs, reducing technical debt, and making changes to our code that would be visible in production — another first! The satisfaction of ripping out old code and reducing technical debt was real . Even more real was sheepishly putting things back in when I ripped out too much and tests started to fail. Or looking up from a task that should have taken only an hour or two and realizing that I’d fallen down the rabbit hole for six hours. Time boxing. I’m learning. All of that brings me to the most important thing I did this week: I broke Entelo. I deployed a thing and that ship sunk . The site. Went. Down. But I’m still employed! I’ve heard “The Story” from just about every engineer that I know and it’s always told with a chuckle of fondness. Taking down the site seems to be a strange rite of passage for engineers and now I’ve got a story of my own. Don’t panic, DevOps! I don’t plan on doing it again, but it’s pretty rad to have gotten the chance to break the site and learn from it. I know more now that I did a few days ago about how to check for any lasting dependencies when deleting modules, how to test something locally and in staging, and am all the more convinced of the importance of peer reviews. Most importantly, the weight of screwing up in front of the team is off my shoulders. As James said: “ You can feel relieved now that you don’t have to constantly worry about if and when it might happen for the first time! Good job! ” I’ll take it! There wasn’t a moment this week where I wasn’t collaborating, googling, or typing git commands. While pretty fast-paced, it felt awesome to get a serious lesson on the precision and revision that goes into carrying a task over the finish line while working on a team project. The satisfying feeling of being able to check off and close an item in Asana was more elusive than I thought, but all the more sweeter knowing that I really worked for it. I’m still not much of a runner, but after my first attempt to keep up with the pack, I’m much less afraid of touching things, getting my hands dirty, and shipping my code out to production. I’d call that a win! Entelo: Get the latest HR, technology, and recruiting… 1 Software Development 1 clap 1 Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-08-12"},
{"website": "Entelo-Engineering", "title": "the big question", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/the-big-question-c1ad5fdd5cb3", "abstract": "I was a really good test taker in high school. Whether it was Italian, AP World History, or AP Bio, I had a bulletproof strategy for learning about the passato remoto, Incan culture, or phases of the cell cycle. Open the textbook Read the textbook Notate the textbook Close the textbook Slay the exam Simple as that. I would literally sit in my room on the floor and read the thing with all the answers until I felt as if I’d written the book myself. At the end of it, I felt ready. This strategy has not been kind to me as I’ve studied to become an engineer. There are textbooks and RFCs and manuals and articles and I have read quite a few of them. Open Read Notate Close Um… I do not feel ready. I feel like exclaiming “…Okay?!?” (And sometimes I do.) In theory, engineering kinda sorta makes sense sometimes . If I’ve learned anything, it’s that nothing truly clicks in this domain until you’ve done it in practice, running into every error known to humankind along the way. I say all of this because there’s a question that I came across earlier this season that has absolutely been kicking my butt. It’s one that I’ve been ducking and dodging all summer long because I know that unlike in high school, I can’t just crack open a manual and boom , find the answer. The question is: What kind of engineer do you want to be? UGH. This is my current equivalent to: “So what are your plans after graduation?” My answer to both are still the same. “Lemme get back to you on that.” This summer is not about sealing my fate as an engineer. It’s about building a solid foundation, testing everything I thought I knew, and putting learns into practice . I don’t know what kind of engineer I want to be yet. I’ve only scratched the surface of what types of engineers there are and it seems like that list grows every day. Front End, Back End, Full Stack, DevOps, QA, OS, Mobile, InfoSec, Gaming, Application… HOW??? Having gone to a private liberal arts college, I’m sold on the extreme value that comes with embracing a breadth of study approach. Only being one month into my professional engineering experience, it feels reckless to make a decision too soon. For now, everything is fun, new, and relevant. It’s becoming more and more natural to add steps to my bulletproof learning strategy: Open my laptop Fire up the terminal or browser Open irb or Chrome Dev Tools Play! Repeat! I don’t have to squint very hard to find parallels to this as I tackle The Big Question. With each project that I complete at Entelo, I feel myself getting a little closer to an answer, emphasis on the self. Unlike High School Shane™, I’m more open to coming up with my own answers and taking a less linear path to get there. While it’s tempting to be told what type of engineer I should be based on other people’s thoughts and the many articles and posts online, I’m not in any rush. I will say this — coming in with mostly front-end experience, I’ve been pleasantly surprised with how much I’ve enjoyed back-end projects. Is this a hint at things to come? Maybe! Too soon to say! All I know is that this emphasis on Steps 9 and 10 — Play and Repeat — feels right for now. In short, you’ll know when I know. Entelo: Get the latest HR, technology, and recruiting… Education Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-07-28"},
{"website": "Entelo-Engineering", "title": "item acquired apprenticeship patterns", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/item-acquired-apprenticeship-patterns-ce156962e183", "abstract": "Last week, I went on a walk with James, Engineering Manager at Entelo. On our walk, we did a very San Francisco thing — got green juice from a shop 15 minutes away where we both have rewards cards. James has been an amazing resource and sounding board since very early on in my transition to engineering. Given that we hadn’t really connected since I officially joined the team, we inevitably found ourselves trekking towards the juice shop, catching up and waxing poetic about the exciting but challenging circumstance of being new to software development. We talked about feeling like an imposter, the immense amount of knowledge that there is to acquire, and how important it is to keep going. At some point on our way back to the office, James asked what my goals were for after my internship. I shared that I wanted to keep learning and have a real impact on the work that the team is doing. I could feel myself getting worked up as I did a mental checklist of all the things that I have yet to learn that would get me there. With the familiar creep of frustration starting to weigh on me, I took a deep breath to calm my hands (they were threatening to start flailing). “ I just want to get good. Like, really good . “ I paused. “ Like great. ” Shoutout to James for what he did next. He recommended that I read a book — exactly the book that I unknowingly needed in my life at that moment — and sent a link so that I could read it online. If life were a video game, this would have been a serious “Mission Item Acquired” moment. The book is called “ Apprenticeship Patterns ” and was written by David H. Hoover and Adewale Oshineye. Made up of different scenarios, or patterns, the book is written for people who have had a taste of software development and aspire to become great software developers. Although it is written with the software developer in mind, I found the lessons within applicable to anyone, in any industry, who has been hooked by a passion and craves to be better. It puts into words many of the situations that hungry learners find themselves in and offers solutions and actions for each. It also has multiple references to students of the martial arts and the journey from beginner to master, which is by far the easiest way to get me bought in when trying to sell the importance of discipline, focus, endurance, and dedication. At times, the book fights with itself to validate both the apprentice’s pure pursuit of knowledge and the business agenda of one’s industry. How do you learn for the sake of learning while often being restricted by very real deadlines and financial obligations? Although the book is organized such that you can skip around to find your own answers to that question, I decided to read the book in order. Below are a few universal snippets that I really enjoyed: From “Confront Your Ignorance” “Remember that learning in public is one of the ways in which an apprentice begins the transition to journeyman (advanced student/team lead).” From “The Long Road” “ Like a martial artist attaining the rank of black belt, a new journeyman realizes how much farther he has to go. ” From “Be the Worst” “Surround yourself with developers who are better than you. Find a stronger team where you are the weakest member and have room to grow.” From “Sweep the Floor” “ Volunteer for simple, unglamorous, yet necessary, tasks. This is a good way to contribute to the team’s success early on by showing that you can do a high-quality job even when it doesn’t seem to matter….After all, if no one sweeps the floor, then the glamorous work can’t be done because the team is hip-deep in dirt. ” From “Perpetual Learning: Wrapping Up” “ Like the athlete who must endure muscle soreness after strenuous workouts, the software developer endures the mental dissonance that comes with learning something new. That dissonance can become a welcome sign of progress. ” Learns on learns on learns. I highly recommend gifting this book to yourself and/or any early practitioners, new leaders, or continual learners in your life. As recent experiences in community building in tech have taught me, you can never hear too many times that you are not alone out there. We all fall into patterns of thought that make us more or less confident, slow down or accelerate our growth, or impact our productivity. Recognizing those patterns, finding solutions together, and taking action is the key to retention and happiness on the long journey ahead. Forward, always! Entelo: Get the latest HR, technology, and recruiting… 1 Software Development 1 clap 1 Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-08-09"},
{"website": "Entelo-Engineering", "title": "code2040 2017 summit", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/code2040-2017-summit-f8897f8bf5a4", "abstract": "This past Friday, I attended Day 1 of the Code2040 Summit in San Francisco. If you’re not familiar, Code2040 creates pathways for Black and Latinx communities to access and thrive as tech professionals and innovators. The organization’s reach has expanded from touching 50 people to 5,000 over the past few years. The goal of the summit is to get community builders in the same room to meet each other, put faces to names and actions, and most importantly, look around and realize that you are not alone as a person of color in tech. I’d heard encouraging feedback about the work that Code2040 does, so when the opportunity came to attend this year, I immediately saved the date. I have to admit, events like this make me nervous. Having attended many similar intersectional summits in the past, I have felt the aftermath of empty words and meaningless sessions that have left me feeling unsatisfied. I bought my ticket and hoped to receive more than hours worth of lip service about how tech is failing people like me “but working on it”. On the day of the event, I arrived at the venue and saw that they were still in a flurry of setting up for the day. My heart sank a little — I read this as a sign that they were unprepared to deliver a well organized day. Then I looked down at my watch and chuckled with relief. When I looked up, there were three faces looking back at me from the registration table with friendly but confused smiles. “It’s too early to be here, isn’t it?” I smiled. Typical nervous Shane, showing up 45 minutes early. “Yes.” They all laughed. “Come back in a bit.” After grabbing some coffee, registering for real this time and grabbing a seat, I waited in nervous anticipation for the summit to kick off. My fears were quelled very soon after Karla Monterroso , VP of Programs at Code2040, took the stage. After welcoming everyone and running through a summary of the day, Karla asked each of us to turn to a neighbor. “Oh god.” I thought. “The ice breaker.” What random three facts about me was I going to have to share with a stranger? What basic reason was I about to hear as to what brought this person here today? Then, Karla said: “Answer this question. When was the last time you felt truly hopeful? Where in your body did you feel it?” Oh. Snap. The snaps kept coming as speakers like venture capitalist Charles Hudson, Managing Partner and Founder of Precursor Ventures gave the keynote speech. His first words were another early reinforcement that true to what I’d heard, Code2040 was doing something special. “ I get asked to speak at a lot of these things and rarely do I prepare anything to say. ” He said honestly. “ I just kind of go up there and share my thoughts. But for this, I wanted to really think about what I wanted to share with this group. ” Then he pulled out four pages worth of notes. With his busy schedule as a VC, husband, father, and mentor, this was an opportunity that was worth this honest thought. I sat up a little straighter. The biggest highlight amongst many points that Charles shared were his feelings about hiring for diversity. As a black VC, he’s seen many companies struggle to hire people who looked like himself and those of us in the room. He broke it down like this: The tech industry feels that it is more difficult and time consuming to source and hire diverse candidates. Are we really supposed to believe that building a quantum computer or teaching a machine to beat the world’s best AlphaGo player is easier than hiring black and brown people? The problem boils down to a lack of priority. Diverse founders prioritize hiring diverse people early on. We need more Black and Latinx people starting businesses. After Charles’ address and a short break, the crowd reorganized into sessions. Of the four options, I chose to attend How to Launch a Company When Investors Ain’t Writing Checks . While I’m not starting a company any time soon, I attended this session for the same reason that I took Italian in high school. It felt like a rare opportunity. I don’t think I’ve ever had the opportunity to hear from a black female CEO and I wasn’t sure when the chance would come back around. Led by Aniyia Williams, CEO and Founder of Tinsel , a fashion-forward wearable tech startup, the talk was a warm, funny, and intimate recount of the reality of being a black female founder in an industry where only roughly 1% of VC funding goes to founders of color and only 2% of that goes to women of color. The takeaways: VC funding isn’t the only kind of funding. Angels, crowdfunding, and group economics are extremely important in our community. Know and build your reputation as a hard, flexible, and diligent worker so that when you need introductions to the right people, your peers are happy to back you. Do not keep your great idea close to your chest. Share it. Talk about it all the time. It’s extremely unlikely that someone is going to steal it and build it overnight. Be prepared for a lifestyle change. If your product is manufactured in China, you will be spending time flying back and forth to Hong Kong. Are your family and friends prepared for that? Think everyone is your target customer? You are wrong. Lunch followed and I’m sad to report that I was the annoying engineer in the back who grabbed their computer and disappeared for the next hour instead of breaking bread with my fellow community members. Never thought I’d see the day! I made up for it after the next session, however. After David Hall ’s (Partner at Revolution Ventures and Revolution Growth) 10 Secrets VCs Won’t Tell You , the person sitting next to me turned and said hello. I was itching to get back to my computer, but his next words stopped me: “Do I know you? You look so familiar.” Having worked at four startups since graduating, this is a question that I get often from young black and brown people in the bay area tech scene. I’ve had the same feeling many times at Meetups, networking hours, and conferences. I decided to hang out for a bit. After all, he kind of looked familiar too. After some back and forth, we realized that we both lived in Oakland and have probably seen each other around the neighborhood or at a mutual friend’s event. Even from making that small connection, the feeling of community was instantaneous. I learned that he is a young founder who is launching a media company next week. He shared his struggles with being “non technical” and I told him about the big wide world of open source software that might give him a good place to start for plug and play media players. By the end of it, we’d exchanged numbers and promised to get together over coffee in Oakland soon. The warm glow of that connection was palpable between us and grew into an invitation to the company’s launch party next week. For the next few hours, I snuck away to a couch tucked away in a corner of the room so that I could get some more work done. Although removed from the summit at large, I still felt a part of the rich conversations happening around me. I somehow felt more productive and more focused as I tied up my projects. I just felt good. Happy. Cheesily hopeful. The day wrapped up with Karla coming back to the stage and telling the story of Code2040’s Whys. Given that the group has been the target of criticism and even shame over the years, it was refreshing to hear Karla address these points directly. There were four things that Karla wanted the group to know, but her answer to the following was the one that resonated with me the most: With so many underrepresented groups in tech who need organizations like yours, why serve only Black and Latinx people? Karla’s answer was simple: “ We know that Black and Latinx are not the only ones in dire need of community resources and empowerment. We know. But we chose you. We are prioritizing you. The American Heart Association is not forced to explain why they focus on heart health amongst all of the many, many health issues that they could have put funding behind. They don’t have to apologize for having a focus and we don’t either. We refuse to apologize for choosing you. ” As a young tech professional who is unapologetic about their blackness, I felt the truth and power in those word and knew, irrefutably, that I had spent my day well. The theme for this year’s Code2040 Summit was Community Rising. While I only attended Day 1, the focus and eagerness in that venue was something special and I cannot wait to sign up for the whole event next year. In the meantime, I’m eager to stay connected with the people that I met in person and even more importantly, run into those who I might recognize the next time we’re both buying coffee in the city or hanging out in Oakland on a Friday night. If you’re a student, entrepreneur, company, or volunteer looking to interact with an organization that believes in grit and action, I highly recommended checking out Code2040’s programs to see what resonates with you. Happy Community Building! Entelo: Get the latest HR, technology, and recruiting… 29 Diversity 29 claps 29 Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-07-31"},
{"website": "Entelo-Engineering", "title": "under the hood my internal transfer", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/under-the-hood-my-internal-transfer-64e6f641d2bc", "abstract": "The time has finally come to talk about the “How?” of my internal transfer from SDR to Engineering at Entelo. While I went a bit out of order based on our documented process, below are the steps that I visited (and revisited at times) to make it all happen. The Kickoff I can’t speak for how these things go at other companies or what it’s like to transfer between teams that might be more closely related, but for me, it started with a walk. I’d been talking for a while with my managers and engineering leadership. Everyone had been overwhelmingly supportive of my transfer in theory, but the hows and whats still left us collectively shrugging. For about a month, it felt like we were all buckled in, with the keys in the ignition, but still simply sitting there, revving the engine. I will say again that as an Aries, everything feels like it’s happening too slow! I had all of these resources, but no idea how to turn them into action. Finally, during one of my career trajectory 1:1s, the right magical words were uttered. “You should talk to Linda.” Linda: Head of People Operations and Employee Experience at Entelo a.k.a. The One Who Showed Me The Way. I hope that everyone has a Linda. This is how I was first able to pitch the idea of an internship and see it take true form. By going on a walk with her, I was able to learn about the logistics of my transfer and the feasibility of it from a business perspective. It was the first step that made things feel official. It gave me a clear idea of what types of roadblocks that I might encounter. I left with a solid grasp of what things were in my control and what decisions and conditions were up to leadership to agree on. Job Exploration Colleen, Director of Engineering here at Entelo, has always been a huge supporter of my interest in becoming more technical. To help me get a better idea of what types of problems the engineers here were solving, we started an Asana project where she could assign and track some tasks for me to work on in my free time. This was MVP-level amazing. Most of these tasks were small, such as cleaning up code (Crud Hunting, as I affectionately called it), but the important thing was that these tasks allowed me to get my feet wet in our code base; something that was largely missing from my self study. Being able to not just shadow other engineers, but complete my own tasks gave me a huge boost in confidence. It also showed me that engineering was truly willing to commit time and resources to helping me develop, even before I was officially part of the team. Head Count You can’t go where there isn’t opportunity. Before I started having important conversations with the right people , I would often wonder: Are we even hiring for non senior engineers next quarter? Which team would I be on? Does Eng have space for an intern next quarter? Can I even be an intern if I already work here? Am I too expensive for an intern? What’s happening with our funding round? None of these questions were ones that I could answer myself, thus Linda and Colleen were pivotal in helping address these concerns and others. Manager Notification I had an idea of my own personal timeline for joining Engineering before my walk with Linda. It was time to put together a concrete timeline for everyone involved so that we could set the right expectations in terms of how quickly things could and would move. The vague idea of eventually joining Product/Engineering at Entelo was always a part of my journey. During my first on-site interview, my SDR leadership team was able to glean my interest based on some of the questions that I asked. Things like “What’s communication like between the people who build Entelo and the people who sell it? What sort of opportunities are there to gain technical product knowledge as an SDR here?” I met with my manager regularly to define what success looked like for me as an SDR and what I’d have to do on our team to earn the chance to switch over. We talked about this weekly and I was doing everything in my power to please both sides became my driving force. It came as no surprise to my team when I started getting serious about transferring. The SDR leadership is incredibly supportive of the team exploring nontraditional career paths within the company. They consistently inquired about how things were progressing on the engineering side, even though they didn’t always understand the Engineering process. I believe that having their buy-in early played a significant role in my smooth transition. Interview Two months after my walk with Linda, and after tons and tons and tons of planning and organizing by Colleen and my future mentor squad, it was finally time to qualify for the internship. For my interview, I first had to fulfill some prerequisites such as completing specific online courses, reading books, and building a full stack app. After taking a few weeks to complete those tasks, I came in for a proctored on-site interview. There were about 8 people involved in my on-site, which took up an entire afternoon. We covered a breadth of topics (front end, refactoring, how the internet works, classes and objects in Ruby) that would go on to be incredibly relevant to my internship at large. It was my first on-site engineering interview and it was utterly exhausting . Overall, however, it was touching to see how much thought the team went through to give me a fair and well-rounded experience. After months of prepping, the biggest hurdle was done. Decision The stress of hoping that 8 people would come to the same conclusion about my ability to learn and grow under their mentorship during the coming summer was just incredibly stressful. I literally couldn’t eat dinner or breakfast or lunch the next day waiting to hear the news. My stomach was in knots. My brain was in overdrive. I just wanted to know! Offer It happened. Oh, the feels. After I signed my new offer letter, I had no idea what to do with myself. I felt like I had been training for a marathon, ran it, and then was expected to…what, just chill? Feel like a normal person again?? For the rest of the day, I just sat at my desk staring at my computer, idling clicking around but ultimately thinking “Wow. It’s done. I did it. ”. The Aftermath I’m doing it. If I were to emphasize anything here, it would be the undeniably stellar team of leaders I had in my corner. They are really good at supporting the grind. I also can’t stress enough how important it is to have a clear and actionable timeline, realistically manage expectations, and always be asking the big question of “How?”. Less obviously, don’t be afraid to be the first — Set a Precedent! You might make it that much easier for the next person to find where they belong. Entelo: Get the latest HR, technology, and recruiting… Startup Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-07-14"},
{"website": "Entelo-Engineering", "title": "templars mages and tic tac toe", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/templars-mages-and-tic-tac-toe-72b3a961d5e3", "abstract": "Although there’s a long way to go in this wild, wild, summer, I know that this week will be the one that I remember. There more lessons than I can count, and more learns per minute than I could have hoped for. My project for this week was to build a web-facing version of Tic Tac Toe. Sounded easy enough! Welp, let me tell you. Child’s play it was NOT. It took quite a bit more elbow grease than the old fashioned way with pencil and paper. I struggled this week and last. I felt deeply all of the things that I didn’t know I didn’t know about development and it made me feel a type of way. I felt overwhelmed when I saw how many technologies I was only kinda familiar with were vital for completing my task. I felt stressed out when I didn’t make as much progress as I wanted during the day. But I also felt incredibly euphoric when the thing I was working on did what it was supposed to do. I was elated when those “Oh, I know!” moments finally came. Given the abundance of learns from this week, I wanted to share just a few of the big ones. Here are some below, in no particular order: All of the apps that I’ve built for my internship so far have been Dragon Age themed. It’s my favorite game franchise of all time and nothing gets me more hyped than thinking about my cast of characters. I didn’t build “Tic Tac Toe” this week, I built Mages vs. Templars! To me, that’s much more exciting than Xs and Os. I know that there won’t typically be an opportunity to for me to visually get my nerd on while working on projects at Entelo, but I can always let my imagination carry me to the finish line. A few weeks from now, my project will be to build a web crawler, or a spider as they’re sometimes called. You better believe that I’ll be imagining the shape-shifting mage and Witch of the Wilds Morrigan making her way through Thedas as my bot searches the web! There’s a HUGE different between “You should build it this way” and “You could build it this way”. With so many technologies available that get you from point A to point B, it’s easy to misstep and start to do one thing, only to realize that you should have been doing another. I built two versions of Tic Tac Toe because of not learning this lesson sooner! Just because you don’t need to use Rails does not mean that you don’t need a web server to get your awesome Ruby code connected to your front end. Invest time in understanding what things are actually doing for you when you use them and what happens when you leave them out. This is a really big lesson that will be in progress for the rest of the summer. I learned the true meaning of “mvp” this week. In engineering, it stands for Minimum Viable Product. When I first got this assignment, my mind went wild with ideas. I wanted a whole cast of Dragon Age avatars that my players could choose from. I wanted different backgrounds so that one could play the game within different parts of Thedas. I wanted dramatic music when a piece was set. I literally wanted all of Dragon Age 2 distilled into this little Tic Tac Toe app. In reality, version 1 was only playable on the command line (lol), which means no bells or whistles. Just plain old text. It wasn’t grand, but I was so proud of that little thing because it worked ! It proved to me that I could get some version of the right thing out there within the time allotted, build decent classes in Ruby, and have some fun while learning (a.k.a. living the strug life). It’s really, reeeeeally hard as a fresh developer (and an Aries) to admit that I don’t know where to start or where to go next. Sometimes it makes me feel like I’m not ready for all of this or that perhaps I just can’t do it. This week, I got over that mental block in a big way. Instead of feeling like a fraud for asking for help, I took some advice (thanks, Colleen) and asked for help when I needed it — not a day or two into feeling super lost or overwhelmed. Wonderful things happen when passionate, knowledgeable people get together. Learners like me get to clarify, ask questions, and muscle through the hard stuff with another brain or two thrown into the mix. If you don’t know what you don’t know, you can’t grow. For all of the frustration and stinging, tired eyes that I endured this week, I’m still in it to win it. Thank you, M Squad! Entelo: Get the latest HR, technology, and recruiting… Programming Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-07-05"},
{"website": "Entelo-Engineering", "title": "you couldnt pay me to be an engineer and other words i ve eaten", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/you-couldnt-pay-me-to-be-an-engineer-and-other-words-i-ve-eaten-acea58f33e5e", "abstract": "When you’re wrong, you’re wrong. To all of my engineering friends, if I’ve ever said any of the following to you: “The stress doesn’t seem worth it. I don’t envy you.” “I enjoy sleep way too much to code.” “F%@k Ruby.” “Programming seems to be bad for your health…” “You couldn’t pay me to be an Engineer.” This is me, eating my words. At the time that I said all of this, I had some pretty good evidence that I would never be a professional engineer. I thought I knew this because I have a fanatic personality. When I discover a new thing that compels me, I literally cannot stop doing it or thinking about it. For example, while training for my black belt in Shotokan Karate, I trained 9 times a week — twice on Saturdays and thrice on Sundays. I did kata in the shower. I did kata in the lunch line. I did kata in my sleep. For me, Karate was the thing that I wanted to be doing more than anything else that I could possibly be doing. That was not, even a little bit, my experience with coding. The first time I tried to teach myself to code, I was working at a tech company in San Francisco. I’d heard that Ruby was a “nice language” for “programmers who want to be nice to themselves”. At the time, I didn’t have a hobby that I could afford to indulge as a recent grad (paint is expensive, guitar strings are expensive, camera lenses are EXPENSIVE!), but here was this super creative thing that I could do for free on my laptop. Sold! I’m in! For the next 3 or 4 months, I dedicated all my time to reading books/blogs/ Medium/Quora, watching YouTube, and completing free coding modules for the sake of learning Ruby. I built little things like text analyzers when I wasn’t too busy at work and attended “_____s who code” events throughout the city. But it was not fun. In fact, I hated it. I hated coding and I didn’t want to do it. “Or maybe…” a part part of my brain thought, “ I just don’t like Ruby?? ” I’ll try anything twice. So I switched to Python. I hated that too. Coding was not the thing that I wanted to do more than anything else. Over the next two years however, programming just kept coming up. I was super into video games and have always been interested in making things. I also hung out with a lot of techies who continuously encouraged me to dabble. Each time I encountered code, there was this weird little tug in my chest that made me feel like we weren’t done with each other. After many false starts and too much overthinking, I decided to try again. Thus I began reading article after article after article on how to choose the right language for you. Maybe C# for gaming? Perhaps Java would come in handy in the startup-crazed town? Python because math = :heart:? Spoiler alert, everyone ever thinks that their language is the best one and is the one that you should START LEARNING RIGHT NOW!!! Finally (In a process that I’ll talk about in a later article), I started learning JavaScript. Yo. I LOVED JavaScript. Again, I won’t get into the nitty gritty of why right this second, but in short, it just made sense in ways that other languages simply hadn’t. Finally, coding was the thing that I wanted to be doing more than anything else. I couldn’t stop thinking about it! Sleeping was a missed opportunity to code. Eating was a missed opportunity to code. Reading books about coding was a less fulfilling stand in for coding when I couldn’t get to my computer. By the time I got to Entelo, I had found a love for coding as a hobby. Over the next 6 months, I would train with karate-like focus on JS, HTML, and CSS basics and intermediate concepts before finally giving Ruby another shot and making the jump to my first professional coding gig. All of my reasons for not getting into coding started falling out of my mouth in reverse and became my reasons to do it all the time. “It’s stressful, but it’s so much fun.” “No, I didn’t sleep last night, but I finally figured out that bug!!!!” “Hmm, okay Ruby. I see you.” “If I’m going to do this, I also need to get more active. I’m going to start hiking.” “Would someone pay me to be an Engineer??” As it turns out, yes! Want to hear about my training regiment and how I managed to learn to code while also working a full time job that was completely unrelated? Tune in for my next post! Entelo: Get the latest HR, technology, and recruiting… 2 Programming 2 claps 2 Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-06-19"},
{"website": "Entelo-Engineering", "title": "grind time a love story", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/grind-time-a-love-story-f1f3acf11e89", "abstract": "I’m not going to spend too much time waxing poetic about productivity or biochemistry or sleep theories based on blood type . All that I will say is that there’s no wrong way to grind, just grind hard if you’re going to do it, keep it 💯 by doing you, and be as healthy as you can, whatever that looks like for your life. Below I’m going to describe my schedule while I worked as an SDR while trying to learn programming. 4:00am — 6:00am | Study Time Not gonna lie, 4am is early. Through a bit of trial and error however, I quickly figured out that this was my golden zone. When I was in it, I was IN IT. The early morning served as a natural noise filter, as it was before my partner (at the time) and my intrusive, distracting thoughts, were even remotely awake. It wasn’t easy or always fun, but getting up before the sun was the best way that I knew how to Get Shit Done ™. Bonus, it fed all of the parts of me that get PUMPED about being as productive as possible before The Afternoon Hang. 6:00…ahem 6:30…okay more like 6:45am — 7:00am | Get ready for the day “Let me just finish this laaaast problem in the exercise…” 30 minutes later… “ Okay, I’ve got to stop and get in the shower.” Another 15 minutes later… “OKAY SERIOUSLY YOU HAVE 8 MINUTES TO DO ALL OF THE THINGS.” I got really good at speed showers and quickly picking out my baby afro. I’d call that a win! 7:00am -7:30am | In commute Also known as sometimes falling asleep in a stranger’s car while carpooling from Oakland to San Francisco. Because again, 4am is early and I’ve yet to have any coffee. 7:30am — 5:00pm | Work (Work Work Work Work work) This was by far the most challenging part of my day, as my day job had NOTHING to do with coding. As a Sales Dev Rep, I had to do a huge mental shift between my day job and off-hours work. Shout out to Rihanna for keeping me sane during this time and having a 🔥🔥🔥 discography to which I could jam. I played #BadGalRiRi on repeat just about every day during this period. It kept me hyped while doing the job that I was hired for so that I could earn more engineering time in the afternoon. 5:00pm — 6:00pm | In commute I pretty much used this time to: Answer all of the text messages I had missed during the day. Catch up with my work buddy as we walked home together (a.k.a. relate to another human being). Listen to Jay and Miles X-plain the X-Men or Two Dope Queens. Podcasts quickly became my main source of content. Don’t leave home without one locked and loaded. Think about how much laundry I had to do. Pray that dinner would magically have been cooked once I got home. 6:00pm — 8:00pm | Everything else Eat the magical dinner. Roll my eyes at the overflowing laundry hamper. Stare longingly at the comic books in the corner gathering dust. Annoy my partner by spending time with her but constantly speaking in coding-related metaphors. Catch up on what’s happening in the world. Read something, anything, fictional. 8:00pm — 4:00am | Sleeeeep Make sure my alarm is set. Double check the alarm. Set an extra alarm just in case. Ignore the itch to pick up my phone and browse the internet. Go. To. Sleep. Seriously. Wondering how that worked out? I still haven’t done laundry and I got addicted to cold brew. But! I did learn a ton in a very short period of time. This was the schedule that worked for me and I realize that it won’t work for everyone. You might have to be more strict with yourself that you’ve ever been, but the takeaway is that you can get technical while working a full time job, getting enough sleep (I had to get 8 hours to get up at 4am), and maintaining a few valuable human relationships. This is a love story because it had all of the same ups and downs of any romance. I’m definitely grateful to have done it and come out the other end than not having done it at all. I still try to stick close my Grind Time schedule, switching out the activities but keeping the blocks the same. It really is a daily timeline that I can get down with and I’m still reaping the benefits of being well-disciplined with my time. Most importantly, I lived to tell the tale! Now I get to support other people on a similar journey and keep sharing learns along the way. Wins all around. Entelo: Get the latest HR, technology, and recruiting… Productivity Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-06-23"},
{"website": "Entelo-Engineering", "title": "from selling entelo to building it my transfer from sales dev to engineering", "author": ["Shane Zackery"], "link": "https://engineering.entelo.com/from-selling-entelo-to-building-it-my-transfer-from-sales-dev-to-engineering-81069f9693e8", "abstract": "Three days ago, I transferred from the Sales Development team to the Engineering organization at Entelo. Since officially being offered and accepting an internship with Eng, I’ve gotten a range of texts, LinkedIn, and Facebook messages from friends and former colleagues. Most of them reading something like this: “SUPER HUGE CONGRATS TO YOU!!! 🥂🥂🥂🥂🥂🥂🥂🥂” “Ayyyyy!!!!” “Congratulations on your new position! Well done!” But my personal favorite is this one: “engineering?!” A valid question — even I have to admit that it’s a bit of an unconventional move. I wasn’t a CS major, I’ve been building a career in Business Development/Sales/Marketing/Media, and I’ve never played Civilization V. Rest assured, however, that this didn’t happen by accident! It was a deliberate move to start over and pursue deep learning in a professional environment, at a company where I’ve been impressed, supported, and welcomed by the engineers even before I truly knew that this is what I wanted to do for a living. The journey so far has made for a cool story, and thus I’ll be posting here (more or less) weekly to 1) dive deeper into ‘Why engineering?’, 2) share resources I used to level up my technical skills, and 3) recount my personal road to an internal transfer at Entelo. I’ll also do some recapping as I spend my working hours mastering Unix, data structures, Object Oriented Programming, the DOM, SQL, Ruby, and more with a stellar team of mentors. It’s bound to be (and already is) quite a workflow shift from prospecting and building pipeline for our Sales team to developing internal tools for the rockstars who keep Entelo running. Now we go! Entelo: Get the latest HR, technology, and recruiting… 5 Sales Internships 5 claps 5 Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Programmer, Filmmaker, etc Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-06-09"},
{"website": "Entelo-Engineering", "title": "unit testing", "author": ["Fito von Zastrow"], "link": "https://engineering.entelo.com/unit-testing-5c835b1cd17f", "abstract": "I joined Entelo about two and a half months ago, I’m excited to be working as part of a team that fully embraces testing as part our software development process. Tests provide many benefits in the short and long run. However, instead of writing about these benefits, I will assume that you are already familiar with them. I will instead focus on some of the practices I follow when writing unit tests. Tests are an investment into your future codebase. The benefits of your investment could be reaped at different points in time, maybe as soon as the next couple of hours of coding, or while making changes to your codebase months later. However, like with any other type of investment, you should invest wisely. Tests are code, which means they require maintenance. Also, slow tests increase development time and, when ran as part of a continuous integration system, can even get in the way of a deployment. To get the most out of unit tests, while keeping their cost down, I apply a few rules of thumb: An object’s public interface is the way other objects in the system can interact with it. It encompasses a contract with the rest of the codebase. When this contract is broken tests should fail, thus raising an alarm that there is an incorrect path through the codebase. However, private methods and the internals of a class should be allowed to change freely as long as the contract is not broken. Testing a private method adds unnecessary friction to the development process and provides little value, if at all, and it couples the tests to the implementation. Example: Tests play a larger role than just running your code. Tests are live documentation and as such, they should provide enough context about what’s being tested. The next person updating a test should get enough information to confidently make a change by just reading the test statements. Running the test should give a developer complete and meaningful sentences explaining what passed and what didn’t. Example of a not very descriptive test: Example of a descriptive test: Often objects depend on other objects to accomplish their task. This dependency should be documented in tests via assertions about the right object receiving the right messages. However, these tests should only assert that a message is passed , not what the receiver does or what it returns. These dependencies should have already been tested elsewhere, and developers should trust that they do what they are supposed to do. Testing what an object’s dependency does creates unnecessary coupling between the test itself and the dependency. Let’s suppose we have a Mechanic object, in charge of servicing a Car object: Example of a test with unnecessary coupling: A change in Engine ’s interface would require this test to change as well, when in reality Mechanic only collaborates with Car . Example of test stubbing a dependency: When testing an object that collaborates with ActiveRecord objects (or any other ORM), it often seems easier to prepare the necessary test context by creating database records (often via factories). However, this can lead to making unnecessary trips to the database. Every ‘trip’ to the database slows down tests significantly, which in turn slows down the software development process itself. This slowdown becomes more noticeable as the codebase grows and the number of tests increases. To avoid this problem, unit tests should treat the data layer as any other dependency and test only the message passing. Example of unnecessary database trips: Example leveraging doubles to avoid database trips: This rule of thumb is better explained by an example. Let’s suppose we have a CarSerializer class, that inherits from ActiveModel::Serializer as follows: The attributes method allows us to configure what attributes we would like to see in the resulting serialized object. However, the parent class ActiveModel::Serializer takes care of sending those messages to the appropriate objects. The attributes method is configuration and its behavior does not need to be tested in the CarSerializer ’s test. The fact that the parent class sends the color and maker messages to the object being serialized does not need to be tested. Example of unnecessary test: The popularity method on the other hand contains logic that’s specific to the CardSerializer class and, therefore, should be tested. Example of necessary test: Following these rules allows me to write high-value/low-cost tests. They allow me to move fast while giving me a safety net. Of course, I did not come up with these rules myself. While they are heavily influenced by my experience, my co-workers and my personal style of software design, they are also based on various concepts borrowed from the works of Martin Fowler and Sandi Metz . Lastly, these ideas constitute a guideline. I follow then as much as I can, but I compromise when necessary. Fito von Zastrow. Entelo: Get the latest HR, technology, and recruiting… 3 Testing Software Development Unit Testing Rspec Ruby 3 claps 3 Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-04-24"},
{"website": "Entelo-Engineering", "title": "what makes entelo engineering different", "author": ["Ryan A Booth"], "link": "https://engineering.entelo.com/what-makes-entelo-engineering-different-7bd7443b7c11", "abstract": "I’ve been trying to pin down what makes me proud to work at Entelo, and I have a shortlist of our team’s best qualities: Everyone is Supportive Engineering work can be isolating and long-term at times. To stick with difficult, unclear tasks I need a team that cares what I’m working on and checks in from time to time. Add a healthy amount of pairing and you have Entelo’s working culture. :) Independent Initiative One of the best ways to lose morale inside a team is to complain about issues and problems and never tackle any of them. I think all engineering teams with a large enough product have a technical debt backlog, but if the backlog just keeps growing and growing, you’re stuck a difficult to work with behemoth codebase that resists change of any kind. I’m lucky enough to work with engineers that take chunks out our technical debt whenever they have a chance. That also takes support from management, and ours have recently put a lot of emphasis on quality and best practices. Openness to Change My first task at Entelo was to decide how to structure our front end architecture going forward. Two months in, I did a demo to the team and explained the research I had done, the conclusions I had come to, and what I suggested we do. Once the team had asked their questions they were bought in right away. One month later, my teammates were teaching themselves to use React and using the practices I’d prepared, and a month after that they were teaching me things. It’s a great feeling to have teammates that not only listen to your suggestions but help you carry them out. This team has been surprisingly adaptable considering its size, which really helps it grow and innovate. Slack Power Users While not vitally important, being on a team that prefers Slack to email and that uses Slack integrations well (custom webhooks, bots, etc.) matters a lot to me. I’m a Slack enthusiast and I check my email once every 2 days, so this was a pretty important culture fit. Entelo: Get the latest HR, technology, and recruiting… Technical Debt Software Development Written by Reading, writing and laughing. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Reading, writing and laughing. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-03-24"},
{"website": "Entelo-Engineering", "title": "pair programming vs flow state do the needs of the few outweigh the needs of the one", "author": ["Cole Goeppinger"], "link": "https://engineering.entelo.com/pair-programming-vs-flow-state-do-the-needs-of-the-few-outweigh-the-needs-of-the-one-b51b61aa36f8", "abstract": "First, some definitions: Pair Programming : an agile software development technique in which two programmers work together at one workstation. Studies show that the resulting code is higher quality and developers get more satisfaction out of their work versus working by themselves. In my experience it also leads to better team thinking about software best practices (readability, testability, naming, etc). Flow State : single-minded work time; a condition of deep, nearly meditative, involvement in solving a problem. In this programming state, one can achieve a gentle sense of euphoria where one is largely unaware of the passage of time. Studies show this is highly productive and leads to high quality output. Flow state can result in a higher personal satisfaction than work that is regularly interrupted. I first learned about flow in the book Peopleware: Productive Projects and Teams by Timothy Lister and Tom DeMarco which I highly recommend. The first question is: Are the pair programming and flow state two work styles that are actually mutually exclusive? Can two programmers achieve flow when working together? It’s an interesting question. You can certainly get into a groove with your partner when pair programming (like in a band) but is it truly flow? In my experience with pair programming, it takes a lot of Emotional Intelligence (EQ) to keep in sync with your partner and I feel more emotionally spent after a long pairing session. In pairing, I’ve never achieved the elusive zen state when time slips away, which I’ve found in flow state. I’ve talked to engineers that are able to pair so well that they claim to actually get into a flow like state but I think it is rare and difficult to achieve. Based on this I’m going to assume these are relatively exclusive activities. I struggle with the balance between these two work styles. Both are significantly better than working with interruptions so the question is: Which one should be optimized for? This gets into a classic conundrum of balancing the needs of an individual vs. the needs of a group, or as Star Trek put it so well: Spock: Logic clearly dictates that the needs of the many outweigh the needs of the few. Kirk: Or the one. – Star Trek II: The Wrath of Khan Evaluating how to implement pair programming and flow state on your team This question of group vs. individual optimization manifests in many ways in software engineering teams. Consider these factors about your team’s working styles: Do you allow regular working from home which is highly conducive to flow state but also restricts opportunities for collaboration? Do you give people offices with doors or open work space? Do have you have weekly meeting-free days which are great for productivity but also restrict scheduling intensive activities like interviewing? Both pairing and flow have their place. Pair programming is especially effective when ramping up new team members. It’s a great way for developers to learn a new codebase by pairing with someone who can give the context around the questions on who, what, when, why, and where. Flow state is especially effective when solving extremely complex problems. Some of the hardest technical problems I’ve solved were after a long flow state session. Not actually in the flow itself but while I was no longer thinking about the problem afterwards and my subconscious was crunching the numbers and BANG, insight. Seemingly from nowhere but actually a direct result of flow. So, do we have to pick just one? This reminds me of a quote from Oscar Wilde: “ Everything in moderation, including moderation. ” Sometimes we need extensive flow state time, sometimes lots of pairing. At Entelo I’ve tried to embody this idea of optimizing and balancing for both. We have an open work space with whiteboards but also dedicated conference room with a door for Engineers called “The Library”, which is explicitly for flow state work. There is no talking in The Library. To encourage pairing we add action items to all new hires to pair with all their direct peers so they can start establishing pairing habits. The team is given opportunities to use both. They find the right balance. So to answer to the question: Which is better? The answer is yes. Entelo: Get the latest HR, technology, and recruiting… 57 Programming Agile Pair Programming Flow Startup 57 claps 57 Written by SVP of Engineering @ Entelo Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by SVP of Engineering @ Entelo Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-03-30"},
{"website": "Entelo-Engineering", "title": "how much can you learn on a 1 000 budget", "author": ["Ryan A Booth"], "link": "https://engineering.entelo.com/how-much-can-you-learn-on-a-1-000-budget-69e12cf3fe8f", "abstract": "One of my favorite employee perks is a learning budget. The main reason I love software engineering is that the learning never stops. I have had a learning budget at a previous company, but it wasn’t until I joined Entelo that I learned how impactful they can be. At Entelo, we get a $1,000 Professional Growth budget: We provide a $1,000 annual stipend to all employees for professional development including courses, training, conferences, and coaching. What I’ve found so far is that $1,000 can go a very long way. I started by signing up to make a Bluetooth speaker at TechShop SF , which also included a 3 month membership. All of the sudden I’m learning the most difficult welding technique (TIG welding) with my coworker Jesse: The beauty of this learning budget is that you just have to learn something. There aren’t specific subjects set in stone. Since the TechShop membership, I’ve also purchased: DHH’s top recommended books An annual membership at Egghead.io ForwardJS Conference fees React Conf 2017 fees Each one of these things is making me a better engineer, but I also feel like I’m learning and growing. Sometimes your day-to-day work can’t keep up with the newest trends. That doesn’t mean that you can’t either. Having a learning budget removes all of the excuses that stop you from purchasing learning materials and keeps you learning. Entelo: Get the latest HR, technology, and recruiting… 4 Programming Tech Company Culture Benefits Learning 4 claps 4 Written by Reading, writing and laughing. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Reading, writing and laughing. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-03-07"},
{"website": "Entelo-Engineering", "title": "onboarding entelopes", "author": ["Alan Ridlehoover"], "link": "https://engineering.entelo.com/onboarding-entelopes-ae35775c71f6", "abstract": "I’m new here. I joined Entelo about six weeks ago. I am the first of six new engineers in that time, which is an amazing amount of growth in a short time, especially considering there were only 15 engineers on the team when I joined. You’d think that much growth would result in chaos. But, it’s been surprisingly smooth. My first day went exactly as you would expect. I completed some new-hire paperwork and signed up for benefits. I had coffee with my onboarding buddy, received my MacBook, and began configuring my development environment. Typical day one. The rest of my first week was pretty chill. It was, after all, the last week of December, right between the holidays. I had my first one-on-one with my manager. I met with his manager. The whole team took me to lunch. And, most importantly, I finished configuring my development environment, made my first commit, and deployed it to production. While I was meeting with my manager, we agreed that I would try to pair program with as many other engineers as possible to gain some breadth before diving deep into the portion of the code I would be owning. This was (and is) a good plan. Circumstances impeded the plan. Over the next couple of weeks, I spent a couple of days worth of time attending Entelo 101 and Engineering University classes. The former is an introduction to Entelo that every new Entelope attends. The latter is an introduction to the various components of our software. Entelo 101 is great! The first class is a product demonstration that really helped orient me. In the remaining sessions, each department head gave a presentation about their organization, their goals, and how they fit into the broader company’s goals. The classes were highly informative. And, I left each one with a better understanding of the company as a whole. Likewise, Engineering University is a series of classes put on by the engineering team leads to introduce the various components of the system. These sessions tended to be high level overviews of the architecture, which was great for context setting. I also attended some deeper dives into the subsystem on which I’ll be working. All very helpful, both for context and for detail. Throughout the process, there have been multiple opportunities for me to offer and receive feedback. I’ve had weekly one-on-one meetings with my manager where he shares feedback and actively encourages me to talk about the things that are working and the things that aren’t. I’ve also had meetings with our People & Ops department to give my feedback on the hiring and onboarding processes. Every step of the way, I’ve felt like my feedback was being heard and applied to the next new hire. So, what feedback have I been providing? Well, if I could do it over again, I would get as much breadth across the codebase as possible through pair programming before diving deep into my subsystem. Like I said above, circumstances (a couple of P1 bugs) forced me to go deep more quickly than I would have liked. So, I’m still working on pairing with everyone. Another thing that I commented on was that I prefer to work on a single user story at a time, preferably the one at the top of the backlog, rather than being assigned a bunch of tickets all at once. Being assigned tickets right out of the gate — even simple ones — put pressure on me to get something done. I felt like it was more important to complete the tickets than it was to gain breadth through pairing. (But, that could just be me.) Finally, I would have preferred that the Entelo 101 and Engineering University courses be scheduled in such a way as to allow for significant blocks of uninterrupted time for pairing and/or coding during the day. As it was, the classes looked like buckshot on my calendar. All feedback that I’m seeing action on. I’ve worked at a dozen or so companies in my professional career. This is the first time I’ve felt like I had this much context before digging into my actual role. Entelo onboarding is very effective, which makes sense. We write software that helps jobs find people. It figures we’d be good at onboarding! The next step is to find more people to bring through our onboarding process. We’re always hiring strong full-stack engineers and data scientists who are passionate about their craft. If that’s you, please reach out. We’d love to tell you about all the cool stuff we plan to do this year! Entelo: Get the latest HR, technology, and recruiting… 1 1 Startup Hiring 1 clap 1 1 Written by I am a husband, a twins dad, an avowed progressive, a professional software engineer, and an amateur photographer and drummer. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by I am a husband, a twins dad, an avowed progressive, a professional software engineer, and an amateur photographer and drummer. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-02-16"},
{"website": "Entelo-Engineering", "title": "engineering kickoff 2017", "author": ["Chin Ling"], "link": "https://engineering.entelo.com/engineering-kickoff-2017-d764fc441ffc", "abstract": "E ntelo has lots to talk about and celebrate for what we have achieved thus far in our journey. As a company, we recently posted a fifth consecutive year of triple digit revenue growth . Moreover, Entelo won a Glassdoor Employees’ Choice Award , designating the company as the #3 Best Place to Work in 2017. We are firing on all cylinders , laser-focused and with ever increasing determination to not only succeed, but also rigorously question the status quo in order to be better at what we strive for, truly believing in our mission to help people find better job opportunities and companies find great people. We begin our 2017 with Entelo’s annual engineering offsite with attendance comprised of 20+ engineers and 3 guests from Talent team. Our theme for the year is focused on 4 key pillars: hiring, collaboration, building a high-performing team and quality. We invited our guest speaker, Britt Ryan , Entelo’s Head of Recruiting, to kick off the event talking about recruiting top engineering talents. One thing unique about Entelo is not only we build recruiting software, we live and breathe talking about recruiting all the time — it’s part of our DNA! The engineering team itself has grown tremendously over the course of 2016, and this is a good opportunity for us to revisit some of our hiring processes. We learned tons from Britt with topics ranging from culture to how to conduct an effective interview and scaling. Thank you Britt, it’s great having you here! There’s many reasons why it is important for us to celebrate our colleague’s success and some of the great work the team has done. Colleen Noonan , Director of Engineering, did that in style with series of high five with each and every member of the engineers. Way to go Colleen! We dug deep into good discussion talking about what it takes to build a high performing team at Entelo. We do not believe in operating within a vacuum, but rather aggressively learning, adopting and tweaking best practices of what’s out there in other companies. As an ice-breaker, we kicked off this topic leveraging an awesome video presentation by Spotify talking about engineering culture and their journey on building a highly effective team. Here’s the link to the material: labs.spotify.com Tons of good discussions and actionable items came from this session such as team formations into small pods (or Squads in Spotify jargon), chapters, guilds, autonomy, and trusts, just to name a few. Here are some photos as folks intensely immersed in the topic: We ended our offsite with yet another celebration, this time getting folks together at Coin-Op Game Room for food, drinks and game! Overall, it was a highly productive engineering offsite for us. Not only it was well intended, purposeful and actionable, we have tons of fun throughout the day. We left fully charged and ready to deliver an awesome year ahead of us. Entelo: Get the latest HR, technology, and recruiting… Thanks to . Leadership Startup Written by Director @ Gap, Inc. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Director @ Gap, Inc. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2017-01-24"},
{"website": "Entelo-Engineering", "title": "too fast too many too much three common mistakes when making data driven decisions", "author": ["Elena Sigacheva"], "link": "https://engineering.entelo.com/too-fast-too-many-too-much-three-common-mistakes-when-making-data-driven-decisions-ed0251dcea27", "abstract": "Living in the era of big data, thousands of companies adopt a data-driven approach to making decisions. In this blog post I’d like to talk about three common mistakes we often make when working with data. Don’t fear spending extra time on defining the problem. The assumption that the sooner you start the project, the sooner it will be finished is not necessarily true and may cost you many hours of work if you don’t have a good understanding of the problem being solved. Regardless of whether you’re considering a new product feature, making a strategic decision regarding your company’s direction, building a machine learning model, or just writing an email to your coworker, make sure to spend extra time understating the need behind your project to avoid situations where after spending hours of hard work you realize that you wasted time solving the wrong problem. Don’t forget that the approach to solving the problem depends directly on the type of problem you are trying to solve. For example, in the data science world, before building any model, it’s crucial to understand whether the goal of the model is to increase recall (how well your model returns specific data) or precision (out of all positive predictions, how many were correct). Understanding the goal of the project from the beginning will allow you to train your model correctly — optimizing for avoiding false positives (in case of precision) or false negatives (in case of recall). This Harvard Business Review article recommends the following four steps to help you to solve the right problem: Step 1: Establish the Need for a Solution Step 2: Justify the Need Step 3: Contextualize the Problem Step 4: Write the Problem Statement Another famous approach that is taught in MBA programs is called Five Whys , a problem-solving technique developed at Toyota that helps to get to the root cause of a problem by repeating the question “Why?” multiple times. Living in the word of big data with a variety of tools available for tracking all types of user activity, you can have metrics for every user action. But do all these metrics really matter? Can you draw an actionable conclusion by looking at all these metrics? It’s quality, not quantity that matters. Instead of tracking all possible kinds of data, try to identify KPIs (key performance indicators) that truly allow for measuring product health and improvement over time. Depending on the business model, company’s goals, and stage of the product, you can decide what kind of KPIs you need to concentrate on. I recommend checking out Dave McClure’s presentation where he breaks down metrics for startups into five segments: · Customer Acquisition · Activation · Retention · Referral · Revenue Another well-known minimalist approach is described in the book Lean Analytics that talks about the idea of selecting “One Metric That Matters.”(And check out this workshop from Google Ventures on the Growth Hackers website.) Although we often seek to make data-driven decisions because our intuition isn’t always right, and sometimes the data is surprising, it’s also important to apply common sense. Remember that the model of the world isn’t the world itself. There are assumptions in your model, and limitations, and sometimes these can lead you astray. Regardless of what the model is telling you, whether it is confirming your expectations or telling your something surprising, always apply your own judgment and think probabilistically about the odds of the forecast being true and how strong the signal is. Sometimes there isn’t a “truth” to be found at all. We may not realize that sometimes we are unintentionally seeking a signal when it doesn’t exist. Understanding broader aspects of the industry, competitive landscape, factors of macroeconomic conditions, seasonality effects and other factors will allow you to set more accurate growth goals and derive intelligent conclusions from your data. For example, a decrease in certain engagement metrics may not necessarily be interpreted as a negative signal but can be just a seasonality effect or an increase in the number of customer complaints can be a healthy sign of growth given that the user base increased as well. “Correlation doesn’t imply causation” is a phrase commonly used in statistics to emphasize that a correlation between two variables does not mean that one factor causes another. Sometimes reading a blog post is the reason people improve their data-driven decision making, and sometimes stuff just happens . :-) Entelo: Get the latest HR, technology, and recruiting… 3 Data Driven Decisions Analytics Big Data Product Management Metrics 3 claps 3 Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2016-11-16"},
{"website": "Entelo-Engineering", "title": "engineering vs data science a different perspective", "author": ["Chin Ling"], "link": "https://engineering.entelo.com/engineering-vs-data-science-a-different-perspective-7fc362e4d9e2", "abstract": "A Different Perspective If you search the internet, you will find good results that discuss the differences from the context of professions, roles, responsibilities and alike. That is useful, but it doesn’t go far as to help engineers think about what it actually means when it comes to implementation details. In this article, I would like to evaluate them from a toolkit perspective. At the lowest level, data scientists talk about the commonly used languages, [R] and Python being one of the many popular ones out there. I guess engineers are similar, we talk about programming languages such as Java, Ruby, Python (too), and many more. So what is the difference? Not much except the former is usually more mathematically, formulaically and conveniently expressive, less verbose and powerful in certain domain such as vectorized matrix. Up next, we have overhyped mentions of tools such as TensorFlow, NumPy, SciPy and Pandas in the data science world. In engineering, I would like to think of this as analogous to the readily available third-party libraries. Then, we have (simple) mathematical expressions and formulas, quite commonly used in both data science and engineering camp. Next one up is the exciting (and valuable) part for both domains. In data science, we have machine learning techniques such as statistical regressions, deep learning, clustering and natural language processing. In engineering, we talk about algorithms, design patterns, multi-tiered systems or architecture. We tend to talk about abstract concepts at this layer, and often times, there is no one-size-fits-all solution to our problem. The last two are the presentation layers and choices are very closely aligned with the language layer at the bottom. Entelo: Get the latest HR, technology, and recruiting… Data Science Machine Learning Written by Director @ Gap, Inc. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Director @ Gap, Inc. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2016-09-27"},
{"website": "Entelo-Engineering", "title": "interviewing based on values", "author": ["Ryan A Booth"], "link": "https://engineering.entelo.com/interviewing-based-on-values-16dbc556ae83", "abstract": "The thing that stood out to me the most when I was interviewing at Entelo was how interviews are conducted and what is evaluated. Here are some of the unique parts of the engineering interviews at Entelo: The first screen you do at Entelo is collaborative. The interviewer sits next to you, you work on a problem and you deliver something. There is no remote coding, and no silent treatment. There’s rarely even a long pause. Why? Collaborating on features is a daily habit within our engineering team. We have a dedicated pair-programming table that is always in use. Whenever a production issue occurs, there are group retrospectives to discuss ways to prevent future issues. Even our sprint planning involves all of the engineers. That’s why we try to screen early for candidates that are able to work on a team. The follow up interviews involve things like building on existing code, designing new features, discussing an algorithm with a fellow engineer, refactoring code, etc. There are no exercises to rebuild a Set object in Java or write a linked list traversal from scratch. Why? Testing computer science fundamentals is vital, but we’re also trying to stay true to the average day’s work. The more we can work a problem with a candidate and reach a shared understanding, the closer we get to experiencing what it’s like to work together on an average day. And optimizing your screening for an average day just makes sense. Entelo has a very clearly defined culture, with clear values (Authenticity, Grit, Resourcefulness, Talent, Passion). Most of the debriefs we run after our onsite interviews are focused on whether candidates have these attributes. Why? Technical tests make great filters, but we’ve found that a candidate’s culture-add is a better predictor for their success at Entelo. It also contributes to your team as a whole, creating a more diverse, more appealing team that attracts new talent. Culture-add can be a hard thing to define, and it can be riddled with biases. That’s why clear values are incredibly important, because they enable your interviewers (your team) to accurately evaluate candidates. Debriefing as a full team also reduces individual biases and allows all of your interviewers to learn from each other’s previous interviews. The best part of focusing our interviews on Entelo’s values is that Entelopes value fun. Personally, I had a fantastic experience when I interviewed at Entelo. It was fun, it was collaborative and it ended positively. Not all interviews end in an offer though, so keeping the entire process fun and interactive ensures that all of your potential candidates have a good experience too. Entelo: Get the latest HR, technology, and recruiting… 1 Interview Recruiting Hiring 1 clap 1 Written by Reading, writing and laughing. Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Reading, writing and laughing. Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2016-11-11"},
{"website": "Entelo-Engineering", "title": "importance of headphone time", "author": ["James Hwang"], "link": "https://engineering.entelo.com/importance-of-headphone-time-8efa8d9a8044", "abstract": "Here at Entelo, we are all given a stipend of $300 for a pair of noise canceling headphones. This started when the company was small and the noisy co-working space made it difficult to concentrate on writing code or drafting sales emails. As we grew in size, we still have this benefit so people can concentrate on their work and be afforded the focus time they need to complete their task. Unfortunately, there have been times when I or other engineers had their headphones on and been interrupted by someone tapping our shoulder to ask a question or some other non-urgent interruption. So we had to politely let folks know that interrupting us during this time was impacting our work without being rude about it. We described the situation as similar to when someone is on a phone call. People wouldn’t disturb someone on a phone call and likewise, the headphone situation is the same. Sales folks spend much of their time on phone calls and similarly, engineers spend most of our time focused on write good, solid code. So the next time someone interrupts you during your focused headphone time, tell them it’s similar to them being a phone call with a customer or vendor. You wouldn’t interrupt them on a phone call and likewise, the headphone time should be treated the same. Entelo: Get the latest HR, technology, and recruiting… 2 Headphones 2 claps 2 Written by Facebook Engineer Manager Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Facebook Engineer Manager Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2016-09-14"},
{"website": "Entelo-Engineering", "title": "kubernetes at entelo", "author": ["Tom Benner"], "link": "https://engineering.entelo.com/kubernetes-at-entelo-644f657eac79", "abstract": "A little over a year ago, the Entelo engineering team was strapped for time. We had four full-time engineers working on 200 KLOC across 3 major products, and we were managing about 200 queues of Ruby, Scala, and Java workers to fetch and refresh hundreds of millions of webpages. Our sales team was also growing very, very quickly, which was a huge motivator for us to ship even faster. Our engineering team and data pipeline are now both much larger, and the relative ease of our growth was due in part to offloading a good chunk of our devops work onto Kubernetes. Prior to Kubernetes, we’d built an in-house web UI for worker management that let us control individual processes across individual machines, which was great in the early days, but as our worker infrastructure grew, it became more and more difficult to use. The UI quickly became untenably complex as we started to manage hundreds of processes across dozens of machines: We needed a much easier, more stable system for managing our workers ASAP. We were already using Docker in production, so we started evaluating container orchestration tools, and Kubernetes was easily the most compelling option for our use case. We started working with it in July and had it in production by September, which reflected very well on its relative ease of use. I wish we had some interesting war stories about our adoption of it, but it was thankfully fairly straightforward to set up. After it was in production, we were pulling in up to 10TB of data per day and managing workers with a few clicks. Because we care deeply about engineers’ happiness, we wanted to make worker management as fast and easy as possible and also decrease the barrier to entry with using an interesting technology like Kubernetes. So, instead of expecting users to learn about config files and kubectl, we made a simple web UI called Rhea . Rhea allows engineers to create and scale workers on Kubernetes with just a few clicks. It looks like this: Rhea lets you run and scale arbitrary processes on arbitrary images with a few button clicks. It’s available as a Docker image, so setting it up for your own Kubernetes cluster should take no time at all. Kubernetes’ API is intuitive and straightforward, so Rhea’s code is very simple. Rhea is available on GitHub , and if you see ways in which it could be improved, we’d love to have contributions! Entelo: Get the latest HR, technology, and recruiting… 3 Kubernetes Docker 3 claps 3 Written by Software Architect at Entelo Entelo: Get the latest HR, technology, and recruiting insights on our blog Written by Software Architect at Entelo Entelo: Get the latest HR, technology, and recruiting insights on our blog Medium is an open platform where 170 million readers come to find insightful and dynamic thinking. Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface. Learn more Follow the writers, publications, and topics that matter to you, and you’ll see them on your homepage and in your inbox. Explore If you have a story to tell, knowledge to share, or a perspective to offer — welcome home. It’s easy and free to post your thinking on any topic. Write on Medium About Help Legal Get the Medium app", "date": "2016-08-11"}
]